[{"C:\\Users\\CBE\\Desktop\\LoanNew\\cbe-loan-frontend\\src\\index.js":"1","C:\\Users\\CBE\\Desktop\\LoanNew\\cbe-loan-frontend\\src\\App.js":"2","C:\\Users\\CBE\\Desktop\\LoanNew\\cbe-loan-frontend\\src\\Components\\Navbar\\Navbar.jsx":"3","C:\\Users\\CBE\\Desktop\\LoanNew\\cbe-loan-frontend\\src\\Components\\Registration\\RegistrationPage.jsx":"4","C:\\Users\\CBE\\Desktop\\LoanNew\\cbe-loan-frontend\\src\\Components\\Registration\\SignUp.jsx":"5","C:\\Users\\CBE\\Desktop\\LoanNew\\cbe-loan-frontend\\src\\Components\\Login\\Login.jsx":"6","C:\\Users\\CBE\\Desktop\\LoanNew\\cbe-loan-frontend\\src\\Components\\Product\\Product.jsx":"7","C:\\Users\\CBE\\Desktop\\LoanNew\\cbe-loan-frontend\\src\\Components\\Product\\LoanProductLine.jsx":"8","C:\\Users\\CBE\\Desktop\\LoanNew\\cbe-loan-frontend\\src\\Components\\NotFound\\NotFound.jsx":"9","C:\\Users\\CBE\\Desktop\\LoanNew\\cbe-loan-frontend\\src\\Components\\Product\\ProductDetail.jsx":"10","C:\\Users\\CBE\\Desktop\\LoanNew\\cbe-loan-frontend\\src\\Components\\Navigation\\Customer\\LeftNav.jsx":"11","C:\\Users\\CBE\\Desktop\\LoanNew\\cbe-loan-frontend\\src\\Components\\Login\\Service.js":"12","C:\\Users\\CBE\\Desktop\\LoanNew\\cbe-loan-frontend\\src\\Components\\Company\\Service.js":"13","C:\\Users\\CBE\\Desktop\\LoanNew\\cbe-loan-frontend\\src\\Components\\Product\\HorizontalTabs.jsx":"14","C:\\Users\\CBE\\Desktop\\LoanNew\\cbe-loan-frontend\\src\\Components\\Company\\Basic.jsx":"15","C:\\Users\\CBE\\Desktop\\LoanNew\\cbe-loan-frontend\\src\\Components\\EligibilityCriteria\\SpecificEligibilityCriteria.jsx":"16","C:\\Users\\CBE\\Desktop\\LoanNew\\cbe-loan-frontend\\src\\Components\\Modal\\LoanModal.jsx":"17","C:\\Users\\CBE\\Desktop\\LoanNew\\cbe-loan-frontend\\src\\Components\\Tooltip\\Tooltips.jsx":"18","C:\\Users\\CBE\\Desktop\\LoanNew\\cbe-loan-frontend\\src\\Components\\API\\Api.js":"19","C:\\Users\\CBE\\Desktop\\LoanNew\\cbe-loan-frontend\\src\\Components\\Account\\Account.jsx":"20","C:\\Users\\CBE\\Desktop\\LoanNew\\cbe-loan-frontend\\src\\Components\\Navigation\\Customer\\UpdateCompany.js":"21","C:\\Users\\CBE\\Desktop\\LoanNew\\cbe-loan-frontend\\src\\Components\\Navigation\\Customer\\CompanyModal.jsx":"22","C:\\Users\\CBE\\Desktop\\LoanNew\\cbe-loan-frontend\\src\\Components\\Account\\AccountValidation.js":"23","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\index.js":"24","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\App.js":"25","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Navbar\\Navbar.jsx":"26","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Registration\\SignUp.jsx":"27","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Login\\Login.jsx":"28","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Product\\LoanProductLine.jsx":"29","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Product\\ProductDetail.jsx":"30","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Product\\Product.jsx":"31","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\NotFound\\NotFound.jsx":"32","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\Basic\\ViewCompanyBasicInformation.jsx":"33","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\Service.js":"34","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Product\\HorizontalTabs.jsx":"35","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\EligibilityCriteria\\SpecificEligibilityCriteria.jsx":"36","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Modal\\LoanModal.jsx":"37","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Common\\LoanIconButton.js":"38","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Common\\CompanyNavigation.jsx":"39","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\Basic\\AddCompanyBasicInformation.jsx":"40","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\API\\Api.js":"41","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Common\\LoanTextField.jsx":"42","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Tooltip\\Tooltips.jsx":"43","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\Common\\CompanyModal.jsx":"44","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\Employee\\ViewCompanyEmployees.jsx":"45","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\SoleAndPartnership\\ViewSoleAndPartnership.jsx":"46","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\SeniorManagementStaff\\ViewSeniorManagementStaff.jsx":"47","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\Address\\ViewCompanyAddress.jsx":"48","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\PLCAndShare\\ViewPLCAndShareInfo.jsx":"49","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\SOEAndGovernmental\\ViewSOEAndGovernmental.jsx":"50","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\Employee\\CompanyEmployeesService.js":"51","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\Address\\CompanyAddressService.js":"52","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\Employee\\AddCompanyEmployee.js":"53","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\SeniorManagementStaff\\CompanySeniorManagementStaffService.js":"54","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\SoleAndPartnership\\SoleAndPartnershipService.js":"55","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\PLCAndShare\\PLCAndShareService.js":"56","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\Basic\\EditCompanyInformation.jsx":"57","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\Common\\CommonServices.js":"58","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\Employee\\EditCompanyEmployee.jsx":"59","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\SoleAndPartnership\\AddSoleAndPartnership.jsx":"60","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\Address\\AddCompanyAddress.jsx":"61","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\SoleAndPartnership\\EditSole.jsx":"62","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\SOEAndGovernmental\\CompanySOEAndGovernmentalService.js":"63","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\SeniorManagementStaff\\EditSeniorManagementStaff.jsx":"64","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\Address\\EditCompanyAddress.jsx":"65","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\SeniorManagementStaff\\AddSeniorManagementStaff.jsx":"66","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\PLCAndShare\\EditPLCAndShare.jsx":"67","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\PLCAndShare\\AddPLCAndShareInfo.jsx":"68","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\PLCAndShare\\ViewPLCAndShareTaxDetail.jsx":"69","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\PLCAndShare\\ViewShareHolder.jsx":"70","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\SoleAndPartnership\\MaritalStatus\\ViewDivorcedStatus.jsx":"71","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\SoleAndPartnership\\MaritalStatus\\ViewWidowedStatus.jsx":"72","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\SoleAndPartnership\\MaritalStatus\\ViewMaritalStatus.jsx":"73","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\SoleAndPartnership\\MaritalStatus\\ViewUnMarriedStatus.jsx":"74","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\PLCAndShare\\ViewOtherBankCreditExposure.jsx":"75","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\SoleAndPartnership\\SoleTax\\ViewSoleTax.jsx":"76","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\SoleAndPartnership\\dependent\\ViewSoleDependent.jsx":"77","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\SOEAndGovernmental\\Tax\\SOEAndGovernmentalTaxService.js":"78","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\SoleAndPartnership\\OtherBank\\OtherBank.jsx":"79","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\SoleAndPartnership\\guarantor\\ViewSoleGuarantor.jsx":"80","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\SOEAndGovernmental\\UploadSOEAndGovernmental.jsx":"81","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\SOEAndGovernmental\\EditSOEAndGovernmentalComponent.jsx":"82","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\SOEAndGovernmental\\Tax\\AddSOEAndGovernmentalTax.jsx":"83","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\PLCAndShare\\guarantor\\Guarantor.jsx":"84","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\SoleAndPartnership\\MaritalStatus\\AddWidowedStatus.jsx":"85","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\SoleAndPartnership\\MaritalStatus\\AddDivorcedStatus.jsx":"86","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\SoleAndPartnership\\MaritalStatus\\ViewMarriedTax.jsx":"87","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\SoleAndPartnership\\MaritalStatus\\AddUnMarriedStatus.jsx":"88","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\SoleAndPartnership\\MaritalStatus\\AddMaritalStatus.jsx":"89","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Common\\LoanDateTime.jsx":"90","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\SoleAndPartnership\\guarantor\\ViewMaritalStatus.jsx":"91","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\PLCAndShare\\ViewMaritalStatus.jsx":"92","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\PLCAndShare\\ViewUnMarried.jsx":"93","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\SoleAndPartnership\\guarantor\\ViewUnMarried.jsx":"94","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\LeftNav\\LeftNav.jsx":"95","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\Account\\AccountPage.jsx":"96","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\Trade\\TradePage.jsx":"97","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\Contact\\ContactPage.jsx":"98","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\Account\\account.js":"99","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\Trade\\trade.js":"100","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\Contact\\contact.js":"101","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\Account\\AddAccountForCompany.jsx":"102","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\Trade\\AddTradeForCompany.jsx":"103","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\Contact\\EditContactPage.jsx":"104","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\Contact\\AddContactForCompany.jsx":"105","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\Account\\EditAccountPage.jsx":"106","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\accountDetail\\AddAccountDetail.jsx":"107","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\accountDetail\\FetchAccountDetial.jsx":"108","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\accountDetail\\AccountDetailSrvice.js":"109","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\accountDetail\\creditPerformance\\CreditPerformanceService.js":"110","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\accountDetail\\EditAccountDetail.jsx":"111","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\accountDetail\\creditFacilityUtilizition\\CreditFacilityUtilizitionService.js":"112","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\accountDetail\\fcyInflowPerformance\\FcyInflowPerformanceService.js":"113","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\accountDetail\\depositPerformance\\DepositPerformanceService.js":"114","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\accountDetail\\creditFacilityUtilizition\\ViewCreditFacilityUtilizition.jsx":"115","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\accountDetail\\creditPerformance\\ViewCreditPefrormance.jsx":"116","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\accountDetail\\depositPerformance\\ViewDepositPefrormance.jsx":"117","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\accountDetail\\fcyInflowPerformance\\ViewFcyInflowPerformance.jsx":"118","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\accountDetail\\creditFacilityUtilizition\\preshipmentFacility\\PreshipmentFacilityService.js":"119","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\accountDetail\\depositPerformance\\AddDepositPerformance.jsx":"120","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\accountDetail\\creditFacilityUtilizition\\preshipmentFacility\\ViewPreshipmentFacility.jsx":"121","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\accountDetail\\creditFacilityUtilizition\\AddCreditFacilityUtilizition.jsx":"122","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\accountDetail\\creditPerformance\\AddCreditPerformance.jsx":"123","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\accountDetail\\fcyInflowPerformance\\AddFcyInflowPerformance.jsx":"124","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\accountDetail\\creditFacilityUtilizition\\preshipmentFacility\\AddPreshipmentFacility.jsx":"125","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\accountDetail\\creditFacilityUtilizition\\overDraftFacility\\OverDraftFacilityService.js":"126","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\accountDetail\\creditFacilityUtilizition\\overDraftFacility\\ViewOverDraftFacility.jsx":"127","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\accountDetail\\creditFacilityUtilizition\\overDraftFacility\\AddOverDraftFacility.jsx":"128","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\accountDetail\\creditFacilityUtilizition\\LCFacility\\LCFacilityService.js":"129","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\accountDetail\\creditFacilityUtilizition\\LCFacility\\ViewLCFacility.jsx":"130","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\accountDetail\\creditFacilityUtilizition\\LCFacility\\AddLCFacility.jsx":"131","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\accountDetail\\creditFacilityUtilizition\\LGFacility\\LGFacilityService.js":"132","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\accountDetail\\creditFacilityUtilizition\\LGFacility\\ViewLGFacility.jsx":"133","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\accountDetail\\creditFacilityUtilizition\\LGFacility\\AddLGFacility.jsx":"134","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\SoleAndPartnership\\OtherBank\\AddOtherBank.jsx":"135","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\accountDetail\\creditFacilityUtilizition\\TermLoan\\ViewTermLoan.jsx":"136","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\accountDetail\\creditFacilityUtilizition\\TermLoan\\TermLoanService.js":"137","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\accountDetail\\creditFacilityUtilizition\\TermLoan\\AddTermLoan.jsx":"138","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\accountDetail\\creditFacilityUtilizition\\merchandiseFacility\\MerchandiseFacilityService.js":"139","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\accountDetail\\creditFacilityUtilizition\\merchandiseFacility\\ViewMerchandiseFacility.jsx":"140","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\accountDetail\\creditFacilityUtilizition\\merchandiseFacility\\AddMerchandiseFacility.jsx":"141","C:\\Users\\CBE\\Desktop\\dynamic\\src\\index.js":"142","C:\\Users\\CBE\\Desktop\\dynamic\\src\\App.js":"143","C:\\Users\\CBE\\Desktop\\dynamic\\src\\Components\\Home.jsx":"144","C:\\Users\\CBE\\Desktop\\dynamic\\src\\Components\\DynamicPricingUbuy.jsx":"145","C:\\Users\\CBE\\Desktop\\dynamic\\src\\Components\\DynamicPricingJiji.jsx":"146","C:\\Users\\CBE\\Desktop\\dynamic\\src\\Components\\Navbar\\Navbar.jsx":"147"},{"size":482,"mtime":1690966348031,"results":"148","hashOfConfig":"149"},{"size":2099,"mtime":1694687874366,"results":"150","hashOfConfig":"149"},{"size":3943,"mtime":1690966348031,"results":"151","hashOfConfig":"149"},{"size":5391,"mtime":1690966348031,"results":"152","hashOfConfig":"149"},{"size":21637,"mtime":1691405881276,"results":"153","hashOfConfig":"149"},{"size":14371,"mtime":1695133375639,"results":"154","hashOfConfig":"149"},{"size":6808,"mtime":1690966348031,"results":"155","hashOfConfig":"149"},{"size":3060,"mtime":1690966348031,"results":"156","hashOfConfig":"149"},{"size":787,"mtime":1690966348031,"results":"157","hashOfConfig":"149"},{"size":6183,"mtime":1690966348031,"results":"158","hashOfConfig":"149"},{"size":452161,"mtime":1695293399669,"results":"159","hashOfConfig":"149"},{"size":212,"mtime":1690966348031,"results":"160","hashOfConfig":"149"},{"size":20273,"mtime":1695363361539,"results":"161","hashOfConfig":"149"},{"size":4713,"mtime":1690966348031,"results":"162","hashOfConfig":"149"},{"size":159,"mtime":1690966348016,"results":"163","hashOfConfig":"149"},{"size":519,"mtime":1690966348016,"results":"164","hashOfConfig":"149"},{"size":3386,"mtime":1690966348031,"results":"165","hashOfConfig":"149"},{"size":793,"mtime":1690966348031,"results":"166","hashOfConfig":"149"},{"size":166,"mtime":1694687874368,"results":"167","hashOfConfig":"149"},{"size":10716,"mtime":1694687874412,"results":"168","hashOfConfig":"149"},{"size":19074,"mtime":1694687874528,"results":"169","hashOfConfig":"149"},{"size":2918,"mtime":1694687874466,"results":"170","hashOfConfig":"149"},{"size":1322,"mtime":1694687874413,"results":"171","hashOfConfig":"149"},{"size":482,"mtime":1695124269109,"results":"172","hashOfConfig":"173"},{"size":3508,"mtime":1700139091949,"results":"174","hashOfConfig":"173"},{"size":3914,"mtime":1699618723295,"results":"175","hashOfConfig":"173"},{"size":21640,"mtime":1692873883394,"results":"176","hashOfConfig":"173"},{"size":15964,"mtime":1699618723260,"results":"177","hashOfConfig":"173"},{"size":2408,"mtime":1699618723298,"results":"178","hashOfConfig":"173"},{"size":6183,"mtime":1692860305911,"results":"179","hashOfConfig":"173"},{"size":5306,"mtime":1699618723325,"results":"180","hashOfConfig":"173"},{"size":787,"mtime":1692860305911,"results":"181","hashOfConfig":"173"},{"size":13398,"mtime":1700131235264,"results":"182","hashOfConfig":"173"},{"size":12069,"mtime":1699618723202,"results":"183","hashOfConfig":"173"},{"size":4713,"mtime":1692860305911,"results":"184","hashOfConfig":"173"},{"size":519,"mtime":1692860305895,"results":"185","hashOfConfig":"173"},{"size":3386,"mtime":1692860305895,"results":"186","hashOfConfig":"173"},{"size":299,"mtime":1695205053883,"results":"187","hashOfConfig":"173"},{"size":4931,"mtime":1699618722998,"results":"188","hashOfConfig":"173"},{"size":10757,"mtime":1700139091964,"results":"189","hashOfConfig":"173"},{"size":166,"mtime":1699618722967,"results":"190","hashOfConfig":"173"},{"size":536,"mtime":1699618723001,"results":"191","hashOfConfig":"173"},{"size":793,"mtime":1692860305911,"results":"192","hashOfConfig":"173"},{"size":2918,"mtime":1699513676341,"results":"193","hashOfConfig":"173"},{"size":12147,"mtime":1700202672358,"results":"194","hashOfConfig":"173"},{"size":29305,"mtime":1700200548230,"results":"195","hashOfConfig":"173"},{"size":14854,"mtime":1700203053135,"results":"196","hashOfConfig":"173"},{"size":12576,"mtime":1700139091964,"results":"197","hashOfConfig":"173"},{"size":27676,"mtime":1700054706225,"results":"198","hashOfConfig":"173"},{"size":21914,"mtime":1699618723180,"results":"199","hashOfConfig":"173"},{"size":1882,"mtime":1699618723129,"results":"200","hashOfConfig":"173"},{"size":2224,"mtime":1699620893610,"results":"201","hashOfConfig":"173"},{"size":3859,"mtime":1700202915460,"results":"202","hashOfConfig":"173"},{"size":1725,"mtime":1699618723198,"results":"203","hashOfConfig":"173"},{"size":1877,"mtime":1699618723215,"results":"204","hashOfConfig":"173"},{"size":13372,"mtime":1699618723166,"results":"205","hashOfConfig":"173"},{"size":7439,"mtime":1699618723089,"results":"206","hashOfConfig":"173"},{"size":16093,"mtime":1699618723118,"results":"207","hashOfConfig":"173"},{"size":7362,"mtime":1699618723162,"results":"208","hashOfConfig":"173"},{"size":13740,"mtime":1700054706230,"results":"209","hashOfConfig":"173"},{"size":6116,"mtime":1700139091964,"results":"210","hashOfConfig":"173"},{"size":15187,"mtime":1700054706235,"results":"211","hashOfConfig":"173"},{"size":1280,"mtime":1699618723176,"results":"212","hashOfConfig":"173"},{"size":4146,"mtime":1699618723200,"results":"213","hashOfConfig":"173"},{"size":7254,"mtime":1699618723057,"results":"214","hashOfConfig":"173"},{"size":9682,"mtime":1700202889610,"results":"215","hashOfConfig":"173"},{"size":19996,"mtime":1699618723165,"results":"216","hashOfConfig":"173"},{"size":19356,"mtime":1699878904621,"results":"217","hashOfConfig":"173"},{"size":19720,"mtime":1699618723171,"results":"218","hashOfConfig":"173"},{"size":20401,"mtime":1699618723171,"results":"219","hashOfConfig":"173"},{"size":14911,"mtime":1699618723209,"results":"220","hashOfConfig":"173"},{"size":14863,"mtime":1699618723212,"results":"221","hashOfConfig":"173"},{"size":22389,"mtime":1700054706246,"results":"222","hashOfConfig":"173"},{"size":11681,"mtime":1699618723211,"results":"223","hashOfConfig":"173"},{"size":50124,"mtime":1699618723169,"results":"224","hashOfConfig":"173"},{"size":14462,"mtime":1699618723216,"results":"225","hashOfConfig":"173"},{"size":36377,"mtime":1700206129665,"results":"226","hashOfConfig":"173"},{"size":494,"mtime":1699618723179,"results":"227","hashOfConfig":"173"},{"size":32317,"mtime":1700054706277,"results":"228","hashOfConfig":"173"},{"size":24830,"mtime":1699618723219,"results":"229","hashOfConfig":"173"},{"size":1825,"mtime":1699618723180,"results":"230","hashOfConfig":"173"},{"size":910,"mtime":1699618723177,"results":"231","hashOfConfig":"173"},{"size":3305,"mtime":1699618723178,"results":"232","hashOfConfig":"173"},{"size":26178,"mtime":1699618723174,"results":"233","hashOfConfig":"173"},{"size":10892,"mtime":1699618723208,"results":"234","hashOfConfig":"173"},{"size":10698,"mtime":1699618723205,"results":"235","hashOfConfig":"173"},{"size":14857,"mtime":1699863193890,"results":"236","hashOfConfig":"173"},{"size":7409,"mtime":1699618723207,"results":"237","hashOfConfig":"173"},{"size":17311,"mtime":1700054706246,"results":"238","hashOfConfig":"173"},{"size":1073,"mtime":1699618723000,"results":"239","hashOfConfig":"173"},{"size":23090,"mtime":1699618723219,"results":"240","hashOfConfig":"173"},{"size":24742,"mtime":1699618723168,"results":"241","hashOfConfig":"173"},{"size":21715,"mtime":1699618723172,"results":"242","hashOfConfig":"173"},{"size":13573,"mtime":1699618723220,"results":"243","hashOfConfig":"173"},{"size":6801,"mtime":1692860305895,"results":"244","hashOfConfig":"173"},{"size":8602,"mtime":1700467615638,"results":"245","hashOfConfig":"173"},{"size":23418,"mtime":1700139091980,"results":"246","hashOfConfig":"173"},{"size":10281,"mtime":1700139091964,"results":"247","hashOfConfig":"173"},{"size":986,"mtime":1699620893610,"results":"248","hashOfConfig":"173"},{"size":2279,"mtime":1699620893622,"results":"249","hashOfConfig":"173"},{"size":1166,"mtime":1699620893621,"results":"250","hashOfConfig":"173"},{"size":5006,"mtime":1699686008906,"results":"251","hashOfConfig":"173"},{"size":16803,"mtime":1699686008906,"results":"252","hashOfConfig":"173"},{"size":5455,"mtime":1699620893610,"results":"253","hashOfConfig":"173"},{"size":5015,"mtime":1699686008906,"results":"254","hashOfConfig":"173"},{"size":3809,"mtime":1699620893610,"results":"255","hashOfConfig":"173"},{"size":3442,"mtime":1700139091982,"results":"256","hashOfConfig":"173"},{"size":25124,"mtime":1700467671221,"results":"257","hashOfConfig":"173"},{"size":1502,"mtime":1699686008906,"results":"258","hashOfConfig":"173"},{"size":2987,"mtime":1699686008923,"results":"259","hashOfConfig":"173"},{"size":3304,"mtime":1699686008906,"results":"260","hashOfConfig":"173"},{"size":3043,"mtime":1699686008906,"results":"261","hashOfConfig":"173"},{"size":1599,"mtime":1699686008948,"results":"262","hashOfConfig":"173"},{"size":3027,"mtime":1700054706553,"results":"263","hashOfConfig":"173"},{"size":35931,"mtime":1700467745383,"results":"264","hashOfConfig":"173"},{"size":50946,"mtime":1700294012536,"results":"265","hashOfConfig":"173"},{"size":16626,"mtime":1700054706593,"results":"266","hashOfConfig":"173"},{"size":16650,"mtime":1699686008950,"results":"267","hashOfConfig":"173"},{"size":1749,"mtime":1700054706506,"results":"268","hashOfConfig":"173"},{"size":8677,"mtime":1700054706553,"results":"269","hashOfConfig":"173"},{"size":53096,"mtime":1700285384498,"results":"270","hashOfConfig":"173"},{"size":4596,"mtime":1700131235264,"results":"271","hashOfConfig":"173"},{"size":16269,"mtime":1699686008922,"results":"272","hashOfConfig":"173"},{"size":8059,"mtime":1699686008947,"results":"273","hashOfConfig":"173"},{"size":24407,"mtime":1700466364913,"results":"274","hashOfConfig":"173"},{"size":1716,"mtime":1700054706412,"results":"275","hashOfConfig":"173"},{"size":27392,"mtime":1700467513874,"results":"276","hashOfConfig":"173"},{"size":9425,"mtime":1700466347282,"results":"277","hashOfConfig":"173"},{"size":1597,"mtime":1700054706327,"results":"278","hashOfConfig":"173"},{"size":16203,"mtime":1700226877259,"results":"279","hashOfConfig":"173"},{"size":5789,"mtime":1700466406574,"results":"280","hashOfConfig":"173"},{"size":1542,"mtime":1700054706343,"results":"281","hashOfConfig":"173"},{"size":20383,"mtime":1700285214849,"results":"282","hashOfConfig":"173"},{"size":7119,"mtime":1700466392683,"results":"283","hashOfConfig":"173"},{"size":15368,"mtime":1700054706262,"results":"284","hashOfConfig":"173"},{"size":22537,"mtime":1700285135410,"results":"285","hashOfConfig":"173"},{"size":1779,"mtime":1700131235264,"results":"286","hashOfConfig":"173"},{"size":8813,"mtime":1700466375779,"results":"287","hashOfConfig":"173"},{"size":1762,"mtime":1700294186978,"results":"288","hashOfConfig":"173"},{"size":22373,"mtime":1700469626884,"results":"289","hashOfConfig":"173"},{"size":6968,"mtime":1700466192916,"results":"290","hashOfConfig":"173"},{"size":482,"mtime":1695124269109,"results":"291","hashOfConfig":"292"},{"size":2058,"mtime":1701412839251,"results":"293","hashOfConfig":"292"},{"size":2559,"mtime":1701425061451,"results":"294","hashOfConfig":"292"},{"size":39653,"mtime":1701762547074,"results":"295","hashOfConfig":"292"},{"size":39419,"mtime":1701760564457,"results":"296","hashOfConfig":"292"},{"size":3981,"mtime":1701505089528,"results":"297","hashOfConfig":"292"},{"filePath":"298","messages":"299","suppressedMessages":"300","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"301"},"1loger1",{"filePath":"302","messages":"303","suppressedMessages":"304","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"305","usedDeprecatedRules":"301"},{"filePath":"306","messages":"307","suppressedMessages":"308","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"309","usedDeprecatedRules":"301"},{"filePath":"310","messages":"311","suppressedMessages":"312","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"301"},{"filePath":"313","messages":"314","suppressedMessages":"315","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"316","usedDeprecatedRules":"301"},{"filePath":"317","messages":"318","suppressedMessages":"319","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"320","usedDeprecatedRules":"301"},{"filePath":"321","messages":"322","suppressedMessages":"323","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"324","usedDeprecatedRules":"301"},{"filePath":"325","messages":"326","suppressedMessages":"327","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"301"},{"filePath":"328","messages":"329","suppressedMessages":"330","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"301"},{"filePath":"331","messages":"332","suppressedMessages":"333","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"334","usedDeprecatedRules":"301"},{"filePath":"335","messages":"336","suppressedMessages":"337","errorCount":0,"fatalErrorCount":0,"warningCount":107,"fixableErrorCount":0,"fixableWarningCount":0,"source":"338","usedDeprecatedRules":"301"},{"filePath":"339","messages":"340","suppressedMessages":"341","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"301"},{"filePath":"342","messages":"343","suppressedMessages":"344","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"345","messages":"346","suppressedMessages":"347","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"301"},{"filePath":"348","messages":"349","suppressedMessages":"350","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"301"},{"filePath":"351","messages":"352","suppressedMessages":"353","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"301"},{"filePath":"354","messages":"355","suppressedMessages":"356","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"357","usedDeprecatedRules":"301"},{"filePath":"358","messages":"359","suppressedMessages":"360","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"361","usedDeprecatedRules":"301"},{"filePath":"362","messages":"363","suppressedMessages":"364","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"301"},{"filePath":"365","messages":"366","suppressedMessages":"367","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"368","usedDeprecatedRules":"301"},{"filePath":"369","messages":"370","suppressedMessages":"371","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"372","usedDeprecatedRules":"301"},{"filePath":"373","messages":"374","suppressedMessages":"375","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"376","usedDeprecatedRules":"301"},{"filePath":"377","messages":"378","suppressedMessages":"379","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"301"},{"filePath":"380","messages":"381","suppressedMessages":"382","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"383"},"y4l63k",{"filePath":"384","messages":"385","suppressedMessages":"386","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"387","messages":"388","suppressedMessages":"389","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"390","usedDeprecatedRules":"383"},{"filePath":"391","messages":"392","suppressedMessages":"393","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"383"},{"filePath":"394","messages":"395","suppressedMessages":"396","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"397","usedDeprecatedRules":"383"},{"filePath":"398","messages":"399","suppressedMessages":"400","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"383"},{"filePath":"401","messages":"402","suppressedMessages":"403","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"334","usedDeprecatedRules":"383"},{"filePath":"404","messages":"405","suppressedMessages":"406","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"407","usedDeprecatedRules":"383"},{"filePath":"408","messages":"409","suppressedMessages":"410","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"383"},{"filePath":"411","messages":"412","suppressedMessages":"413","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"414"},{"filePath":"415","messages":"416","suppressedMessages":"417","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"383"},{"filePath":"418","messages":"419","suppressedMessages":"420","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"383"},{"filePath":"421","messages":"422","suppressedMessages":"423","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"383"},{"filePath":"424","messages":"425","suppressedMessages":"426","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"357","usedDeprecatedRules":"383"},{"filePath":"427","messages":"428","suppressedMessages":"429","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"383"},{"filePath":"430","messages":"431","suppressedMessages":"432","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"433","usedDeprecatedRules":"383"},{"filePath":"434","messages":"435","suppressedMessages":"436","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"437"},{"filePath":"438","messages":"439","suppressedMessages":"440","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"383"},{"filePath":"441","messages":"442","suppressedMessages":"443","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"383"},{"filePath":"444","messages":"445","suppressedMessages":"446","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"361","usedDeprecatedRules":"383"},{"filePath":"447","messages":"448","suppressedMessages":"449","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"376","usedDeprecatedRules":"383"},{"filePath":"450","messages":"451","suppressedMessages":"452","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"453"},{"filePath":"454","messages":"455","suppressedMessages":"456","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"457"},{"filePath":"458","messages":"459","suppressedMessages":"460","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"461"},{"filePath":"462","messages":"463","suppressedMessages":"464","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"465"},{"filePath":"466","messages":"467","suppressedMessages":"468","errorCount":0,"fatalErrorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"469","usedDeprecatedRules":"470"},{"filePath":"471","messages":"472","suppressedMessages":"473","errorCount":0,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"474","usedDeprecatedRules":"383"},{"filePath":"475","messages":"476","suppressedMessages":"477","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"383"},{"filePath":"478","messages":"479","suppressedMessages":"480","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"383"},{"filePath":"481","messages":"482","suppressedMessages":"483","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"484"},{"filePath":"485","messages":"486","suppressedMessages":"487","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"383"},{"filePath":"488","messages":"489","suppressedMessages":"490","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"383"},{"filePath":"491","messages":"492","suppressedMessages":"493","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"383"},{"filePath":"494","messages":"495","suppressedMessages":"496","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"383"},{"filePath":"497","messages":"498","suppressedMessages":"499","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"500","usedDeprecatedRules":"383"},{"filePath":"501","messages":"502","suppressedMessages":"503","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"504","usedDeprecatedRules":"383"},{"filePath":"505","messages":"506","suppressedMessages":"507","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"508","usedDeprecatedRules":"470"},{"filePath":"509","messages":"510","suppressedMessages":"511","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"512"},{"filePath":"513","messages":"514","suppressedMessages":"515","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"516","usedDeprecatedRules":"470"},{"filePath":"517","messages":"518","suppressedMessages":"519","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"383"},{"filePath":"520","messages":"521","suppressedMessages":"522","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"383"},{"filePath":"523","messages":"524","suppressedMessages":"525","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"383"},{"filePath":"526","messages":"527","suppressedMessages":"528","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"529"},{"filePath":"530","messages":"531","suppressedMessages":"532","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"533","usedDeprecatedRules":"383"},{"filePath":"534","messages":"535","suppressedMessages":"536","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"537","usedDeprecatedRules":"538"},{"filePath":"539","messages":"540","suppressedMessages":"541","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"542","usedDeprecatedRules":"383"},{"filePath":"543","messages":"544","suppressedMessages":"545","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"546","usedDeprecatedRules":"383"},{"filePath":"547","messages":"548","suppressedMessages":"549","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"550","usedDeprecatedRules":"383"},{"filePath":"551","messages":"552","suppressedMessages":"553","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"554","usedDeprecatedRules":"383"},{"filePath":"555","messages":"556","suppressedMessages":"557","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"558","usedDeprecatedRules":"470"},{"filePath":"559","messages":"560","suppressedMessages":"561","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"562","usedDeprecatedRules":"383"},{"filePath":"563","messages":"564","suppressedMessages":"565","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"566","usedDeprecatedRules":"383"},{"filePath":"567","messages":"568","suppressedMessages":"569","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"570","usedDeprecatedRules":"383"},{"filePath":"571","messages":"572","suppressedMessages":"573","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"574"},{"filePath":"575","messages":"576","suppressedMessages":"577","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"383"},{"filePath":"578","messages":"579","suppressedMessages":"580","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"581","usedDeprecatedRules":"470"},{"filePath":"582","messages":"583","suppressedMessages":"584","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"585","usedDeprecatedRules":"383"},{"filePath":"586","messages":"587","suppressedMessages":"588","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"383"},{"filePath":"589","messages":"590","suppressedMessages":"591","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"383"},{"filePath":"592","messages":"593","suppressedMessages":"594","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"595","usedDeprecatedRules":"383"},{"filePath":"596","messages":"597","suppressedMessages":"598","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"599","usedDeprecatedRules":"383"},{"filePath":"600","messages":"601","suppressedMessages":"602","errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"603","usedDeprecatedRules":"383"},{"filePath":"604","messages":"605","suppressedMessages":"606","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"607","usedDeprecatedRules":"383"},{"filePath":"608","messages":"609","suppressedMessages":"610","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"611"},{"filePath":"612","messages":"613","suppressedMessages":"614","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"615","usedDeprecatedRules":"383"},{"filePath":"616","messages":"617","suppressedMessages":"618","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"619","usedDeprecatedRules":"470"},{"filePath":"620","messages":"621","suppressedMessages":"622","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"383"},{"filePath":"623","messages":"624","suppressedMessages":"625","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"626","usedDeprecatedRules":"383"},{"filePath":"627","messages":"628","suppressedMessages":"629","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"630","usedDeprecatedRules":"383"},{"filePath":"631","messages":"632","suppressedMessages":"633","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"634","usedDeprecatedRules":"383"},{"filePath":"635","messages":"636","suppressedMessages":"637","errorCount":0,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"638","usedDeprecatedRules":"383"},{"filePath":"639","messages":"640","suppressedMessages":"641","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"642","usedDeprecatedRules":"383"},{"filePath":"643","messages":"644","suppressedMessages":"645","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"646","usedDeprecatedRules":"647"},{"filePath":"648","messages":"649","suppressedMessages":"650","errorCount":0,"fatalErrorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"651"},{"filePath":"652","messages":"653","suppressedMessages":"654","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"655"},{"filePath":"656","messages":"657","suppressedMessages":"658","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"659","usedDeprecatedRules":"383"},{"filePath":"660","messages":"661","suppressedMessages":"662","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"663","usedDeprecatedRules":"383"},{"filePath":"664","messages":"665","suppressedMessages":"666","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"667","usedDeprecatedRules":"383"},{"filePath":"668","messages":"669","suppressedMessages":"670","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"671"},{"filePath":"672","messages":"673","suppressedMessages":"674","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"675"},{"filePath":"676","messages":"677","suppressedMessages":"678","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"679","usedDeprecatedRules":"383"},{"filePath":"680","messages":"681","suppressedMessages":"682","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"683"},{"filePath":"684","messages":"685","suppressedMessages":"686","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"687","usedDeprecatedRules":"383"},{"filePath":"688","messages":"689","suppressedMessages":"690","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"691"},{"filePath":"692","messages":"693","suppressedMessages":"694","errorCount":0,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"695"},{"filePath":"696","messages":"697","suppressedMessages":"698","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"699","messages":"700","suppressedMessages":"701","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"702","messages":"703","suppressedMessages":"704","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"705"},{"filePath":"706","messages":"707","suppressedMessages":"708","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"709","messages":"710","suppressedMessages":"711","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"712","messages":"713","suppressedMessages":"714","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"470"},{"filePath":"715","messages":"716","suppressedMessages":"717","errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"718"},{"filePath":"719","messages":"720","suppressedMessages":"721","errorCount":0,"fatalErrorCount":0,"warningCount":24,"fixableErrorCount":0,"fixableWarningCount":0,"source":"722"},{"filePath":"723","messages":"724","suppressedMessages":"725","errorCount":0,"fatalErrorCount":0,"warningCount":56,"fixableErrorCount":0,"fixableWarningCount":0,"source":"726","usedDeprecatedRules":"470"},{"filePath":"727","messages":"728","suppressedMessages":"729","errorCount":0,"fatalErrorCount":0,"warningCount":47,"fixableErrorCount":0,"fixableWarningCount":0,"source":"730"},{"filePath":"731","messages":"732","suppressedMessages":"733","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"470"},{"filePath":"734","messages":"735","suppressedMessages":"736","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"737","usedDeprecatedRules":"470"},{"filePath":"738","messages":"739","suppressedMessages":"740","errorCount":0,"fatalErrorCount":0,"warningCount":31,"fixableErrorCount":0,"fixableWarningCount":0,"source":"741"},{"filePath":"742","messages":"743","suppressedMessages":"744","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"745"},{"filePath":"746","messages":"747","suppressedMessages":"748","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"749"},{"filePath":"750","messages":"751","suppressedMessages":"752","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"753"},{"filePath":"754","messages":"755","suppressedMessages":"756","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"757"},{"filePath":"758","messages":"759","suppressedMessages":"760","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"470"},{"filePath":"761","messages":"762","suppressedMessages":"763","errorCount":0,"fatalErrorCount":0,"warningCount":27,"fixableErrorCount":0,"fixableWarningCount":0,"source":"764"},{"filePath":"765","messages":"766","suppressedMessages":"767","errorCount":0,"fatalErrorCount":0,"warningCount":25,"fixableErrorCount":0,"fixableWarningCount":0,"source":"768"},{"filePath":"769","messages":"770","suppressedMessages":"771","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"470"},{"filePath":"772","messages":"773","suppressedMessages":"774","errorCount":0,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"775"},{"filePath":"776","messages":"777","suppressedMessages":"778","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"779"},{"filePath":"780","messages":"781","suppressedMessages":"782","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"470"},{"filePath":"783","messages":"784","suppressedMessages":"785","errorCount":0,"fatalErrorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"786","usedDeprecatedRules":"787"},{"filePath":"788","messages":"789","suppressedMessages":"790","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"791"},{"filePath":"792","messages":"793","suppressedMessages":"794","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"795"},{"filePath":"796","messages":"797","suppressedMessages":"798","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"799"},{"filePath":"800","messages":"801","suppressedMessages":"802","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"803","messages":"804","suppressedMessages":"805","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"806"},{"filePath":"807","messages":"808","suppressedMessages":"809","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"810","messages":"811","suppressedMessages":"812","errorCount":0,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"813"},{"filePath":"814","messages":"815","suppressedMessages":"816","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"817"},{"filePath":"818","messages":"819","suppressedMessages":"820","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"821"},"1jf3kw2",{"filePath":"822","messages":"823","suppressedMessages":"824","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"821"},{"filePath":"825","messages":"826","suppressedMessages":"827","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"828","usedDeprecatedRules":"821"},{"filePath":"829","messages":"830","suppressedMessages":"831","errorCount":0,"fatalErrorCount":0,"warningCount":61,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"832","messages":"833","suppressedMessages":"834","errorCount":0,"fatalErrorCount":0,"warningCount":59,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"835","messages":"836","suppressedMessages":"837","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"821"},"C:\\Users\\CBE\\Desktop\\LoanNew\\cbe-loan-frontend\\src\\index.js",[],[],[],"C:\\Users\\CBE\\Desktop\\LoanNew\\cbe-loan-frontend\\src\\App.js",["838"],[],"import Navbar from \"./Components/Navbar/Navbar\";\r\nimport RegistrationPage from \"./Components/Registration/RegistrationPage\";\r\nimport SignUp from \"./Components/Registration/SignUp\";\r\nimport Login from \"./Components/Login/Login\";\r\n// import LoginPage from \"./Components/Login/LoginPage\";\r\nimport LoanProductLine from \"./Components/Product/LoanProductLine\";\r\nimport { BrowserRouter as Router, Route, Routes } from \"react-router-dom\";\r\nimport Products from \"./Components/Product/Product\";\r\nimport NotFound from \"./Components/NotFound/NotFound\";\r\n// import LeftNav from \"./Components/LeftNav/LeftNav\";\r\nimport ProductDetail from \"./Components/Product/ProductDetail\";\r\n// import Company from \"./Components/Company/Company\";\r\nimport LeftNav from \"./Components/Navigation/Customer/LeftNav\";\r\nimport Account from \"./Components/Account/Account\";\r\nimport UpdateCompany from \"./Components/Navigation/Customer/UpdateCompany\";\r\nconst App = () => {\r\n  return (\r\n    <div>\r\n      <Router>\r\n        <Navbar />\r\n        <Routes>\r\n          <Route path=\"/\" element={<LoanProductLine />} />\r\n          <Route path=\"/product/:baseLine/:groupId\" element={<Products />} />\r\n          <Route\r\n            path=\"/product/:baseLine/:groupId/:productId\"\r\n            element={<ProductDetail />}\r\n          />\r\n          {/* <Route path=\"/registrationPage\" element={<RegistrationPage />} /> */}\r\n          <Route path=\"/signup\" element={<SignUp />} />\r\n          <Route path=\"/login\" element={<Login />} />\r\n          {/* <Route path=\"/login\" element={<LoginPage />} /> */}\r\n          <Route path=\"*\" element={<NotFound />} />\r\n          {/* <Route path=\"/company\" element={<LeftNav />} /> */}\r\n          <Route path=\"/company/:customerId\" element={<LeftNav />} />\r\n          <Route path=\"/company/:customerId/:subId\" element={<LeftNav />} />\r\n          <Route path=\"/validation/\" element={<Account />} />\r\n          <Route path='/UpdateCompany/:Id' element={<UpdateCompany />} />\r\n          {/* <Route path=\"/test\" element={<Company />} /> */}\r\n        </Routes>\r\n      </Router>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","C:\\Users\\CBE\\Desktop\\LoanNew\\cbe-loan-frontend\\src\\Components\\Navbar\\Navbar.jsx",["839","840"],[],"import { AiOutlineClose, AiOutlineMenu } from \"react-icons/ai\";\r\nimport { IoMdArrowDropdown } from \"react-icons/io\";\r\nimport { useState } from \"react\";\r\nimport cbeLogo from \"../Images/favicon.ico\";\r\nimport { Link, NavLink } from 'react-router-dom';\r\n\r\nconst Navbar = () => {\r\n    const [nav, setNav] = useState(false);\r\n    // Define state for the sub-menu\r\n    const [open, setOpen] = useState(false);\r\n    const [submenuOpen, setSubmenuOpen] = useState(false);\r\n    const Menus = [\r\n        { title: \"Product\", to: \"/\" },\r\n\r\n        { title: \"Login\", to: \"/login\" },\r\n        { title: \"Signup\", to: \"/signup\" },\r\n    ]\r\n    const handleSubMenu = () => {\r\n        setSubmenuOpen(!submenuOpen);\r\n    }\r\n    const handleNav = () => {\r\n        setNav(!nav);\r\n    };\r\n    return (\r\n        <div className=\"flex justify-between items-center h-15 bg-[purple] text-[#FAFAFA]\">\r\n            <img src={cbeLogo} alt=\"unable to display cbe logo\" className=\"w-[40px] h-[40px]\" />\r\n            <h1 className=\"w-full text-2xl font-bold\">CBE Loan</h1>\r\n            <ul className=\"hidden md:flex\">\r\n                {\r\n                    Menus.map((menu, index) => (\r\n                        <>\r\n                            <li key={index} className=\"text-white text-sm flex items-center gap-x-4 cursor-pointer hover:bg-light-white rounded-md p-4\">\r\n                                <NavLink to={menu.to} onClick={() => { handleSubMenu() }}>\r\n                                    {menu.title}\r\n                                </NavLink>\r\n                                {menu.submenu && (\r\n                                    <IoMdArrowDropdown className=\"\" onClick={() => { handleSubMenu() }} />\r\n                                )}\r\n                                {menu.submenu && submenuOpen && (\r\n                                    <div className=\"absolute top-16\">\r\n                                        <ul>\r\n                                            {menu.submenuItems.map((sub, index) => (\r\n                                                <li className=\"bg-purple-900 font-semibold p-2 text-white text-sm flex items-center cursor-pointer hover:bg-light-white top-12\" key={index}>\r\n                                                    {sub.title}\r\n                                                </li>\r\n                                            ))}\r\n                                        </ul>\r\n                                    </div>\r\n                                )}\r\n                            </li>\r\n\r\n                        </>\r\n                    ))\r\n                }\r\n            </ul>\r\n\r\n            <div className=\"md:max-lg:flex\"></div>\r\n            <div onClick={handleNav} className=\"block md:hidden\">\r\n                {nav ? <AiOutlineClose size={20} /> : <AiOutlineMenu size={20} />}\r\n                <div className=\"md:max-lg:flex\">\r\n                    <nav>\r\n                        <ul\r\n                            className={\r\n                                nav\r\n                                    ? \"fixed left-0 top-0 w-[60%] h-full border-r border-r-purple-900 bg-purple-950 ease-in-out duration-500 text-white\"\r\n                                    : \"fixed left-[-100%] \"\r\n                            }\r\n                        >\r\n                            <h1 className=\"w-full text-3xl font-bol m-4 \">CBE Loan</h1>\r\n                            <li className=\"p-4 border-b border-white-100 \"><Link to=\"/\" > Home  </Link></li>\r\n                            <li className=\"p-4 border-b border-white-300 \">Company</li>\r\n                            <li className=\"p-4 border-b border-white-300 \">Resource</li>\r\n                            <li className=\"p-4 border-b border-white-300 \">About</li>\r\n                            <li className=\"p-4\">Contact</li>\r\n                        </ul>\r\n                    </nav>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\nexport default Navbar;","C:\\Users\\CBE\\Desktop\\LoanNew\\cbe-loan-frontend\\src\\Components\\Registration\\RegistrationPage.jsx",[],[],"C:\\Users\\CBE\\Desktop\\LoanNew\\cbe-loan-frontend\\src\\Components\\Registration\\SignUp.jsx",["841","842"],[],"import { useState } from \"react\";\r\nimport { Link, useNavigate } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\n\r\nconst SignUp = () => {\r\n    const navigate = useNavigate();\r\n    const [formData, setFormData] = useState({\r\n        FirstName: \"\",\r\n        MiddleName: \"\",\r\n        LastName: \"\",\r\n        PhoneNumber: \"\",\r\n        Password: \"\",\r\n        Email: \"\",\r\n        Otp: \"\",\r\n        token: \"\",\r\n    });\r\n\r\n    const [errorMessage, setErrorMessage] = useState(\"\");\r\n    const [isValid, setIsValid] = useState(false);\r\n    const [showPopup, setShowPopup] = useState(false);\r\n\r\n    const handleSendOtpClick = () => {\r\n        // Send OTP to phone number\r\n        // After OTP is sent, you can set another state to indicate that the OTP has been sent\r\n    };\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n\r\n        if (!validateFormData()) {\r\n            return;\r\n        }\r\n        try {\r\n            const response = await axios.post(\r\n                \"https://10.3.6.135/api/v1/user\",\r\n                formData,\r\n                {\r\n                    // headers: {\r\n                    //   \"Content-Type\": \"application/json\",\r\n                    //   accept: \"text/plain\",\r\n                    // },\r\n                }\r\n            );\r\n\r\n            if (response.status === 200) {\r\n                setShowPopup(true);\r\n                console.log(response.data);\r\n                console.log(\"user created successfully!\");\r\n            } else {\r\n                console.log(response.data);\r\n                setErrorMessage(response.data.message || \"Failed to create user\");\r\n            }\r\n        } catch (error) {\r\n            console.error(error);\r\n            setErrorMessage(\"Failed to create user\");\r\n        }\r\n    };\r\n\r\n    const handleOTPSubmit = async (event) => {\r\n        event.preventDefault();\r\n        try {\r\n            const { PhoneNumber, OtpCode } = formData;\r\n            const response = await axios.post(\r\n                \"https://10.3.6.135/api/v1/user/verifyOtp\",\r\n                { PhoneNumber: PhoneNumber, OtpCode: OtpCode },\r\n                {\r\n                    // headers: {\r\n                    //   \"Content-Type\": \"application/json\",\r\n                    // },\r\n                }\r\n            );\r\n            if (response.status === 200) {\r\n                console.log(response.data);\r\n                navigate(\"/login\");\r\n                // setFormData({ ...formData, token: response.data.token });\r\n                // handleSubmit(event);\r\n            } else {\r\n                console.log(response.data);\r\n                setErrorMessage(response.data.message);\r\n            }\r\n        } catch (error) {\r\n            setErrorMessage(error.message);\r\n        }\r\n    };\r\n\r\n    const handleChange = (e) => {\r\n        setFormData({\r\n            ...formData,\r\n            [e.target.name]: e.target.value,\r\n        });\r\n    };\r\n\r\n    const validatePhoneNumber = (PhoneNumber) => {\r\n        const phoneNumberRegex = /^\\d{10}$/;\r\n        return phoneNumberRegex.test(PhoneNumber);\r\n    };\r\n\r\n    const validateFormData = () => {\r\n        let isValid = true;\r\n\r\n        if (formData.FirstName.trim() === \"\") {\r\n            setErrorMessage(\"Please enter your first name\");\r\n            isValid = false;\r\n        }\r\n\r\n        if (formData.LastName.trim() === \"\") {\r\n            setErrorMessage(\"Please enter your last name\");\r\n            isValid = false;\r\n        }\r\n\r\n        if (formData.MiddleName.trim() === \"\") {\r\n            setErrorMessage(\"Please enter your middle name\");\r\n            isValid = false;\r\n        }\r\n\r\n        if (\r\n            formData.PhoneNumber.trim() === \"\" ||\r\n            !validatePhoneNumber(formData.PhoneNumber.trim())\r\n        ) {\r\n            setErrorMessage(\"Please enter a valid phone number\");\r\n            isValid = false;\r\n        }\r\n\r\n        if (formData.Password.trim() === \"\") {\r\n            setErrorMessage(\"Please enter a password\");\r\n            isValid = false;\r\n        }\r\n\r\n        if (formData.confirmPassword.trim() === \"\") {\r\n            setErrorMessage(\"Please confirm your password\");\r\n            isValid = false;\r\n        }\r\n\r\n        if (formData.Password !== formData.confirmPassword) {\r\n            setErrorMessage(\"Passwords do not match\");\r\n            isValid = false;\r\n        }\r\n\r\n        return isValid;\r\n    };\r\n\r\n    const handlePopupClose = () => {\r\n        setShowPopup(false);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <div className=\"flex min-h-full flex-1 flex-col justify-center px-6 py-2 lg:px-8\">\r\n                <div className=\"sm:mx-auto sm:w-full sm:max-w-sm\">\r\n                    <h2 className=\"mt-2 text-center text-2xl font-bold leading-9 tracking-tight text-gray-1000\">\r\n                        Create an account\r\n                    </h2>\r\n                </div>\r\n\r\n                <div className=\"mt-3 sm:mx-auto sm:w-full sm:max-w-sm\">\r\n                    {errorMessage && (\r\n                        <div\r\n                            className=\"bg-red-100 border-l-4 border-red-500 text-red-700 p-2\"\r\n                            role=\"alert\"\r\n                        >\r\n                            <p className=\"font-bold\">Error:</p>\r\n                            <p>{errorMessage}</p>\r\n                        </div>\r\n                    )}\r\n                    <form className=\"space-y-2\" onSubmit={handleSubmit}>\r\n                        <div>\r\n                            <label\r\n                                htmlFor=\"first-name\"\r\n                                className=\"block text-sm font-medium leading-6 text-gray-900\"\r\n                            >\r\n                                First name\r\n                            </label>\r\n                            <div className=\"mt-2\">\r\n                                <input\r\n                                    id=\"first-name\"\r\n                                    name=\"FirstName\"\r\n                                    type=\"text\"\r\n                                    autoComplete=\"name\"\r\n                                    required\r\n                                    className=\"block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-blue-500 focus:border-blue-500 sm:text-sm pl-2\"\r\n                                    value={formData.FirstName}\r\n                                    onChange={handleChange}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div>\r\n                            <label\r\n                                htmlFor=\"middle-name\"\r\n                                className=\"block text-sm font-medium leading-6 text-gray-900\"\r\n                            >\r\n                                Middle name\r\n                            </label>\r\n                            <div className=\"mt-2\">\r\n                                <input\r\n                                    id=\"middle-name\"\r\n                                    name=\"MiddleName\"\r\n                                    type=\"text\"\r\n                                    autoComplete=\"name\"\r\n                                    required\r\n                                    className=\"block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-blue-500 focus:border-blue-500 sm:text-sm pl-2\"\r\n                                    value={formData.MiddleName}\r\n                                    onChange={handleChange}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div>\r\n                            <label\r\n                                htmlFor=\"last-name\"\r\n                                className=\"block text-sm font-medium leading-6 text-gray-900\"\r\n                            >\r\n                                Last name\r\n                            </label>\r\n                            <div className=\"mt-2\">\r\n                                <input\r\n                                    id=\"last-name\"\r\n                                    name=\"LastName\"\r\n                                    type=\"text\"\r\n                                    autoComplete=\"name\"\r\n                                    required\r\n                                    className=\"block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-blue-500 focus:border-blue-500 sm:text-sm pl-2\"\r\n                                    value={formData.LastName}\r\n                                    onChange={handleChange}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div>\r\n                            <label\r\n                                htmlFor=\"Email\"\r\n                                className=\"block text-sm font-medium leading-6 text-gray-900\"\r\n                            >\r\n                                Email\r\n                            </label>\r\n                            <div className=\"mt-2\">\r\n                                <input\r\n                                    id=\"email\"\r\n                                    name=\"Email\"\r\n                                    type=\"text\"\r\n                                    autoComplete=\"name\"\r\n                                    required\r\n                                    className=\"block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-blue-500 focus:border-blue-500 sm:text-sm pl-2\"\r\n                                    value={formData.Email}\r\n                                    onChange={handleChange}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                        <div>\r\n                            <label\r\n                                htmlFor=\"phone-number\"\r\n                                className=\"block text-sm font-medium leading-6 text-gray-900\"\r\n                            >\r\n                                Phone number\r\n                            </label>\r\n                            <div className=\"mt-2\">\r\n                                <input\r\n                                    id=\"phone-number\"\r\n                                    name=\"PhoneNumber\"\r\n                                    type=\"tel\"\r\n                                    autoComplete=\"tel\"\r\n                                    required\r\n                                    className=\"block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-blue-500 focus:border-blue-500 sm:text-sm pl-2\"\r\n                                    value={formData.PhoneNumber}\r\n                                    onChange={handleChange}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div>\r\n                            <label\r\n                                htmlFor=\"password\"\r\n                                className=\"block text-sm font-medium leading-6 text-gray-900\"\r\n                            >\r\n                                Password\r\n                            </label>\r\n                            <div className=\"mt-2\">\r\n                                <input\r\n                                    id=\"password\"\r\n                                    name=\"Password\"\r\n                                    type=\"password\"\r\n                                    autoComplete=\"new-password\"\r\n                                    required\r\n                                    className=\"block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-blue-500 focus:border-blue-500 sm:text-sm pl-2\"\r\n                                    value={formData.Password}\r\n                                    onChange={handleChange}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div>\r\n                            <label\r\n                                htmlFor=\"confirm-password\"\r\n                                className=\"block text-sm font-medium leading-6 text-gray-900\"\r\n                            >\r\n                                Confirm password\r\n                            </label>\r\n                            <div className=\"mt-2\">\r\n                                <input\r\n                                    id=\"confirm-password\"\r\n                                    name=\"confirmPassword\"\r\n                                    type=\"password\"\r\n                                    autoComplete=\"new-password\"\r\n                                    required\r\n                                    className=\"block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-blue-500 focus:border-blue-500 sm:text-sm pl-2\"\r\n                                    onChange={handleChange}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div>\r\n                            <button\r\n                                type=\"submit\"\r\n                                className=\"flex w-full justify-center rounded-md bg-fuchsia-700 px-3 py-1.5 text-sm font-semibold leading-6 text-white shadow-sm hover:bg-fuchsia-900 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600 \"\r\n                            >\r\n                                Create Account\r\n                            </button>\r\n                        </div>\r\n                    </form>\r\n\r\n                    {/* {showPopup && (\r\n            <div className=\"fixed z-50 inset-1 overflow-y flex items-center justify-center\">\r\n              <div className=\"bg-purple-500 rounded-lg w-1/2 p-8\">\r\n                \r\n                <form onSubmit={handleOTPSubmit}>\r\n                  <p className=\"text-black\">\r\n                    Verification code sent to {formData.PhoneNumber}. Please\r\n                    enter the code below:\r\n                  </p>\r\n                  <div className=\"mt-4\">\r\n                    <label htmlFor=\"otp\" className=\"tblack\">\r\n                      OTP:\r\n                    </label>\r\n                    <input\r\n                      type=\"text\"\r\n                      id=\"otp\"\r\n                      name=\"OtpCode\"\r\n                      value={formData.OtpCode}\r\n                      onChange={handleChange}\r\n                      className=\"bg-gray-200 rounded-lg py-2 px-4 ml-4\"\r\n                    />\r\n                  </div>\r\n                  <div className=\"mt-8 flex justify-center\">\r\n                    <button\r\n                      type=\"submit\"\r\n                      className=\"bg-yellow-500 text-black rounded-lg py-2 px-4 hover:bg-yellow-600 cursor-pointer\"\r\n                    >\r\n                      Submit\r\n                    </button>\r\n                    <div className=\"sm:px-6 sm:flex sm:flex-row-reverse pt-3\">\r\n                    <span className=\"flex w-full rounded-md shadow-sm sm:ml-3 sm:w-auto\">\r\n                      <button\r\n                        type=\"button\"\r\n                        className=\"inline-flex justify-center w-full rounded-md border border-transparent px-4 py-2 bg-fuchsia-600 text-base leading-6 font-medium text-white shadow-sm hover:bg-fuchsia-500 focus:outline-none focus:border-fuchsia-700 focus:shadow-outline-indigo transition ease-in-out duration-150 sm:text-sm sm:leading-5\"\r\n                        onClick={handlePopupClose}\r\n                      >\r\n                        Close\r\n                      </button>\r\n                    </span>\r\n\r\n                    <span className=\"mt-3 flex w-full rounded-md shadow-sm sm:mt-0 sm:w-auto\">\r\n                      <button\r\n                        type=\"button\"\r\n                        className=\"inline-flex justify-center w-full rounded-md border border-transparent px-4 py-2 bg-fuchsia-600 text-base leading-6 font-medium text-white shadow-sm hover:bg-fuchsia-500 focus:outline-none focus:border-fuchsia-700 focus:shadow-outline-indigo transition ease-in-out duration-150 sm:text-sm sm:leading-5\"\r\n                        onClick={handleSendOtpClick}\r\n                      >\r\n                        Send again\r\n                      </button>\r\n                    </span>\r\n                  </div>\r\n                    \r\n                  </div>\r\n                </form>\r\n              \r\n              </div>\r\n            </div>\r\n          )} */}\r\n\r\n                    {showPopup && (\r\n                        <div className=\"fixed z-50 inset-1 overflow-y flex items-center justify-center bg-gray-500 bg-opacity-25\">\r\n                            <div className=\"bg-white rounded-lg w-full sm:w-3/4 md:w-1/2 lg:w-1/3 p-8\">\r\n                                <form onSubmit={handleOTPSubmit}>\r\n                                    <p className=\"text-black\">\r\n                                        Verification code sent to {formData.PhoneNumber}. Please\r\n                                        enter the code below:\r\n                                    </p>\r\n                                    <div className=\"mt-4\">\r\n                                        <label htmlFor=\"otp\" className=\"text-black\">\r\n                                            OTP:\r\n                                        </label>\r\n                                        <input\r\n                                            type=\"text\"\r\n                                            id=\"otp\"\r\n                                            name=\"OtpCode\"\r\n                                            value={formData.OtpCode}\r\n                                            onChange={handleChange}\r\n                                            className=\"bg-gray-200 rounded-lg py-2 px-4 ml-4 w-full sm:w-3/4 md:w-2/3 lg:w-1/2\"\r\n                                        />\r\n                                    </div>\r\n                                    <div className=\"mt-8 flex justify-center sm:justify-between\">\r\n                                        <button\r\n                                            type=\"submit\"\r\n                                            className=\"bg-purple-500 text-white rounded-lg py-2 px-4 hover:bg-purple-600 cursor-pointer\"\r\n                                        >\r\n                                            Submit\r\n                                        </button>\r\n                                        <button\r\n                                            type=\"button\"\r\n                                            className=\"bg-purple-500 text-white rounded-lg py-2 px-4 ml-4 hover:bg-purple-600 cursor-pointer\"\r\n                                            onClick={handleSendOtpClick}\r\n                                        >\r\n                                            Send again\r\n                                        </button>\r\n                                    </div>\r\n                                    <div className=\"sm:px-6 sm:flex sm:flex-row-reverse pt-3\">\r\n                                        <span className=\"flex w-full rounded-md shadow-sm sm:ml-3 sm:w-auto\">\r\n                                            <button\r\n                                                type=\"button\"\r\n                                                className=\"inline-flex justify-center w-full rounded-md border border-gray-300 px-4 py-2 bg-white text-base leading-6 font-medium text-gray-700 shadow-sm hover:text-gray-500 focus:outline-none focus:border-blue-300 focus:shadow-outline-blue transition ease-in-out duration-150 sm:text-sm sm:leading-5\"\r\n                                                onClick={handlePopupClose}\r\n                                            >\r\n                                                Close\r\n                                            </button>\r\n                                        </span>\r\n                                    </div>\r\n                                </form>\r\n                            </div>\r\n                        </div>\r\n                    )}\r\n\r\n                    {/* -----------------ERROR MESSAGE---------------------- */}\r\n                    {errorMessage && <div>{errorMessage}</div>}\r\n                </div>\r\n\r\n                <div className=\"sm:mt-10 sm:mx-auto sm:w-full sm:max-w-sm\">\r\n                    <div className=\"flex flex-col items-center justify-center\">\r\n                        <div className=\"mt-6\">\r\n                            <p className=\"text-sm font-medium text-gray-900\">\r\n                                Already have an account?{\" \"}\r\n                                <Link\r\n                                    to=\"/login\"\r\n                                    className=\"font-semibold leading-6 text-fuchsia-700 hover:text-yellow-500\"\r\n                                >\r\n                                    Login\r\n                                </Link>\r\n                            </p>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default SignUp;","C:\\Users\\CBE\\Desktop\\LoanNew\\cbe-loan-frontend\\src\\Components\\Login\\Login.jsx",["843","844","845"],[],"import { useState } from \"react\";\r\nimport { Link, useNavigate } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport loginDataService from \"./Service\";\r\n\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\n\r\nconst Login = () => {\r\n  const navigate = useNavigate();\r\n  const [PhoneNumber, setPhoneNumber] = useState(\"\");\r\n  const [Password, setPassword] = useState(\"\");\r\n  const [showForgotPasswordPopup, setShowForgotPasswordPopup] = useState(false);\r\n  const [phoneEntered, setPhoneEntered] = useState(false);\r\n  const [otp, setOtp] = useState(\"\");\r\n  const [Id, setId] = useState(\"\");\r\n  const [loginSuccessStatus, setLoginSuccessStatus] = useState(false);\r\n  const [loginError, setLoginError] = useState(null);\r\n  const handleApiAuthentication = async (PhoneNumber, Password) => {\r\n    setLoginSuccessStatus(false);\r\n    try {\r\n      const response = await axios.post(\r\n        \"https://10.3.6.135/api/v1/user/authenticate\",\r\n        {\r\n          PhoneNumber,\r\n          Password,\r\n        }\r\n      );\r\n      localStorage.setItem(\"token\", response.data.Result.JToken);\r\n      localStorage.setItem(\"UserId\", response.data.Result.UserId);\r\n      debugger;\r\n      setLoginSuccessStatus(true);\r\n      console.log(response.data);\r\n    } catch (error) {\r\n      if (error.response) {\r\n        setLoginError(error.response.data.Message);\r\n      } else if (error.request) {\r\n        setLoginError(\r\n          \"Error: No response received from the server\" + error.request\r\n        );\r\n      } else {\r\n        setLoginError(\"Error: \" + error.message);\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    handleApiAuthentication(PhoneNumber, Password);\r\n    if (loginSuccessStatus && !loginError) {\r\n      navigate(\"/company/1\");\r\n    } else {\r\n      navigate(\"/login\");\r\n    }\r\n  };\r\n\r\n  const handleForgotPasswordClick = () => {\r\n    setShowForgotPasswordPopup(true);\r\n  };\r\n\r\n  const handlePopupClose = () => {\r\n    setShowForgotPasswordPopup(false);\r\n    setPhoneEntered(false);\r\n    setOtp(\"\");\r\n  };\r\n\r\n  const handleSendOtpClick = () => {\r\n    // Send OTP to phone number\r\n    // After OTP is sent, you can set another state to indicate that the OTP has been sent\r\n  };\r\n\r\n  const handleVerifyClick = () => {\r\n    //  Verify OTP\r\n    // If OTP is verified successfully, you can redirect the user to a password reset page\r\n  };\r\n\r\n  const handlePhoneChange = (event) => {\r\n    // Validate phone number input\r\n    setPhoneEntered(true);\r\n  };\r\n\r\n  const handleOtpChange = (event) => {\r\n    // TODO: Validate OTP input\r\n    setOtp(event.target.value);\r\n  };\r\n  const showToastMessage = () => {\r\n    toast.success(\"Success Notification !\", {\r\n      position: toast.POSITION.TOP_RIGHT,\r\n    });\r\n  };\r\n  return (\r\n    <>\r\n      <div className=\"flex min-h-full flex-1 flex-col justify-center px-6 py-12 lg:px-8\">\r\n        <div className=\"sm:mx-auto sm:w-full sm:max-w-sm\">\r\n          <h2 className=\"mt-10 text-center text-2xl font-bold leading-9 tracking-tight text-gray-1000\">\r\n            Sign in to your account\r\n          </h2>\r\n        </div>\r\n\r\n        <div>\r\n          <button onClick={showToastMessage}>Notify</button>\r\n          <ToastContainer />\r\n        </div>\r\n\r\n        <div className=\"mt-10 sm:mx-auto sm:w-full sm:max-w-sm\">\r\n          <form className=\"space-y-6\" onSubmit={handleSubmit}>\r\n            <div className=\"text-red-600\">\r\n              {/* Display login error if it exists */}\r\n              {loginError && <div>{loginError}</div>}\r\n\r\n              {/* Rest of your component */}\r\n            </div>\r\n            <div>\r\n              <label\r\n                htmlFor=\"phoneNumber\"\r\n                className=\"block text-sm font-medium leading-6 text-gray-900\"\r\n              >\r\n                Phone number\r\n              </label>\r\n              <div className=\"mt-2\">\r\n                <input\r\n                  id=\"PhoneNumber\"\r\n                  name=\"PhoneNumber\"\r\n                  type=\"tel\"\r\n                  autoComplete=\"tel\"\r\n                  required\r\n                  className=\"block w-full rounded-md border-0 py-1.5 text-gray-900 pl-2 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6\"\r\n                  value={PhoneNumber}\r\n                  onChange={(event) => setPhoneNumber(event.target.value)}\r\n                />\r\n              </div>\r\n            </div>\r\n\r\n            <div>\r\n              <div className=\"flex items-center justify-between\">\r\n                <label\r\n                  htmlFor=\"password\"\r\n                  className=\"block text-sm font-medium leading-6 text-gray-900\"\r\n                >\r\n                  Password\r\n                </label>\r\n                <div className=\"text-sm\">\r\n                  <button\r\n                    type=\"button\"\r\n                    onClick={handleForgotPasswordClick}\r\n                    className=\"font-semibold text-fuchsia-700 hover:text-fuchsia-900\"\r\n                  >\r\n                    Forgot password?\r\n                  </button>\r\n                </div>\r\n              </div>\r\n              <div className=\"mt-2\">\r\n                <input\r\n                  id=\"Password\"\r\n                  name=\"Password\"\r\n                  type=\"Password\"\r\n                  autoComplete=\"current-password\"\r\n                  required\r\n                  className=\"block w-full rounded-md border-0 py-1.5 text-gray-900 pl-2 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6\"\r\n                  value={Password}\r\n                  onChange={(event) => setPassword(event.target.value)}\r\n                />\r\n              </div>\r\n            </div>\r\n\r\n            <div>\r\n              <button\r\n                type=\"submit\"\r\n                className=\"flex w-full justify-center rounded-md bg-fuchsia-700 px-3 py-1.5 text-sm font-semibold leading-6 text-white shadow-sm hover:bg-fuchsia-900 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600\"\r\n              >\r\n                Sign in\r\n              </button>\r\n            </div>\r\n          </form>\r\n\r\n          <p className=\"mt-10 text-center text-sm text-gray-500\">\r\n            Not a member?{\" \"}\r\n            <Link\r\n              to=\"/registrationPage\"\r\n              className=\"font-semibold leading-6 text-fuchsia-700 hover:text-yellow-500\"\r\n            >\r\n              Sign Up\r\n            </Link>\r\n          </p>\r\n\r\n          {showForgotPasswordPopup && (\r\n            <div className=\"fixed z-50 inset-1 overflow-y flex items-center justify-center\">\r\n              <div className=\"flex items-end justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0\">\r\n                <div className=\"fixed inset-0 transition-opacity\">\r\n                  <div className=\"absolute inset-0 bg-gray-500 opacity-75\"></div>\r\n                </div>\r\n                <span className=\"hidden sm:inline-block sm:align-middle sm:h-screen\"></span>\r\n                &#8203;\r\n                <div\r\n                  className=\"inline-block align-bottom bg-white rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full\"\r\n                  role=\"dialog\"\r\n                  aria-modal=\"true\"\r\n                  aria-labelledby=\"modal-headline\"\r\n                >\r\n                  <div className=\"bg-white px-4 pt-5 pb-4 sm:p-6 sm:pb-4\">\r\n                    {!phoneEntered && (\r\n                      <>\r\n                        <div className=\"sm:flex sm:items-start\">\r\n                          <div className=\"mt-3 text-center sm:mt-0 sm:ml-4 sm:text-left\">\r\n                            <h3\r\n                              className=\"text-lg leading-6 font-medium text-gray-900\"\r\n                              id=\"modal-headline\"\r\n                            >\r\n                              Forgot your password?\r\n                            </h3>\r\n                            <div className=\"mt-2\">\r\n                              <p className=\"text-sm leading-5 text-gray-500\">\r\n                                Enter the phone number associated with your\r\n                                account and we'll send you a verification code\r\n                                to reset your password.\r\n                              </p>\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n\r\n                        <div className=\"mt-5\">\r\n                          <input\r\n                            type=\"tel\"\r\n                            name=\"phone\"\r\n                            id=\"phone\"\r\n                            autoComplete=\"tel\"\r\n                            required\r\n                            className=\"block w-full rounded-md border-gray-300 shadow-sm py-2 px-3 focus:outline-none focus:ring-fuchsia-500 focus:border-fuchsia-500 sm:text-sm sm:leading-5\"\r\n                            placeholder=\"Phone number\"\r\n                            onChange={handlePhoneChange}\r\n                          />\r\n                        </div>\r\n\r\n                        <div className=\"mt-5 sm:mt-6\">\r\n                          <span className=\"flex w-full rounded-md shadow-sm\">\r\n                            <button\r\n                              type=\"button\"\r\n                              className=\"inline-flex justify-center w-full rounded-md border border-transparent px-4 py-2 bg-fuchsia-600 text-base leading-6 font-medium text-white shadow-sm hover:bg-fuchsia-500 focus:outline-none focus:border-fuchsia-700 focus:shadow-outline-indigo transition ease-in-out duration-150 sm:text-sm sm:leading-5\"\r\n                              onClick={handleSendOtpClick}\r\n                            >\r\n                              Send verification code\r\n                            </button>\r\n                          </span>\r\n                        </div>\r\n                      </>\r\n                    )}\r\n\r\n                    {phoneEntered && (\r\n                      <>\r\n                        <div className=\"sm:flex sm:items-start\">\r\n                          <div className=\"mt-3 text-center sm:mt-0 sm:ml-4 sm:text-left\">\r\n                            <h3\r\n                              className=\"text-lg leading-6 font-medium text-gray-900\"\r\n                              id=\"modal-headline\"\r\n                            >\r\n                              Enter verification code\r\n                            </h3>\r\n                            <div className=\"mt-4\">\r\n                              <p className=\"text-sm leading-5 text-gray-500\">\r\n                                We've sent a verification code to your phone\r\n                                number. Please enter it below to reset your\r\n                                password.\r\n                              </p>{\" \"}\r\n                            </div>{\" \"}\r\n                          </div>\r\n                          <div className=\"mt-5\">\r\n                            <input\r\n                              type=\"text\"\r\n                              name=\"otp\"\r\n                              id=\"otp\"\r\n                              autoComplete=\"one-time-code\"\r\n                              required\r\n                              className=\"block w-full rounded-md border-gray-300 shadow-sm py-2 px-3 focus:outline-none focus:ring-fuchsia-500 focus:border-fuchsia-500 sm:text-sm sm:leading-5\"\r\n                              placeholder=\"Verification code\"\r\n                              value={otp}\r\n                              onChange={handleOtpChange}\r\n                            />\r\n                          </div>\r\n\r\n                          <div className=\"mt-5 sm:mt-6\">\r\n                            <span className=\"flex w-full rounded-md shadow-sm\">\r\n                              <button\r\n                                type=\"button\"\r\n                                className=\"inline-flex justify-center w-full rounded-md border border-transparent px-4 py-2 bg-fuchsia-600 text-base leading-6 font-medium text-white shadow-sm hover:bg-fuchsia-500 focus:outline-none focus:border-fuchsia-700 focus:shadow-outline-indigo transition ease-in-out duration-150 sm:text-sm sm:leading-5\"\r\n                                onClick={handleVerifyClick}\r\n                              >\r\n                                Verify\r\n                              </button>\r\n                            </span>\r\n                          </div>\r\n                        </div>\r\n                      </>\r\n                    )}\r\n                  </div>\r\n\r\n                  <div className=\"bg-gray-50 px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse\">\r\n                    <span className=\"flex w-full rounded-md shadow-sm sm:ml-3 sm:w-auto\">\r\n                      <button\r\n                        type=\"button\"\r\n                        className=\"inline-flex justify-center w-full rounded-md border border-transparent px-4 py-2 bg-fuchsia-600 text-base leading-6 font-medium text-white shadow-sm hover:bg-fuchsia-500 focus:outline-none focus:border-fuchsia-700 focus:shadow-outline-indigo transition ease-in-out duration-150 sm:text-sm sm:leading-5\"\r\n                        onClick={handlePopupClose}\r\n                      >\r\n                        Close\r\n                      </button>\r\n                    </span>\r\n\r\n                    <span className=\"mt-3 flex w-full rounded-md shadow-sm sm:mt-0 sm:w-auto\">\r\n                      <button\r\n                        type=\"button\"\r\n                        className=\"inline-flex justify-center w-full rounded-md border border-transparent px-4 py-2 bg-fuchsia-600 text-base leading-6 font-medium text-white shadow-sm hover:bg-fuchsia-500 focus:outline-none focus:border-fuchsia-700 focus:shadow-outline-indigo transition ease-in-out duration-150 sm:text-sm sm:leading-5\"\r\n                        onClick={handleSendOtpClick}\r\n                      >\r\n                        Send again\r\n                      </button>\r\n                    </span>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n","C:\\Users\\CBE\\Desktop\\LoanNew\\cbe-loan-frontend\\src\\Components\\Product\\Product.jsx",["846","847","848","849","850","851","852","853"],[],"import { useParams, useNavigate, Link } from \"react-router-dom\";\r\nimport SpecificEligibilityLoanData from '../Data/SpecificEligibilityLoanData.json';\r\nimport { useState } from \"react\";\r\nimport { LiaGreaterThanSolid } from \"react-icons/lia\";\r\nimport LoanModal from '../Modal/LoanModal';\r\nimport EligibilityCriteria from \"../EligibilityCriteria/SpecificEligibilityCriteria\";\r\nimport HorizontalTabs from './HorizontalTabs';\r\n\r\nconst Product = () => {\r\n    const navigate = useNavigate();\r\n\r\n    const { baseLine, groupId } = useParams();\r\n\r\n    const productBaseLine = SpecificEligibilityLoanData.product_line.filter(productLine => productLine.id == baseLine);\r\n    // loan modal1 start\r\n    const [isModalOpen, setIsModalOpen] = useState(false)\r\n    const [specificEligibilityCriteria, setSpecificEligibilityCriteria] = useState(\"\");\r\n    const [generalEligibilityCriteria, setGeneralEligibilityCriteria] = useState(\"\");\r\n    const [specificElements, setSpecificElements] = useState();\r\n\r\n    const [isGeneralModalOpen, setIsGeneralModalOpen] = useState(false)\r\n\r\n    //for general eligibility\r\n\r\n    function handleGeneralOpenModal() {\r\n        setIsGeneralModalOpen(true)\r\n    }\r\n\r\n    function handleGeneralCloseModal() {\r\n        setIsGeneralModalOpen(false)\r\n    }\r\n    //for specific eligibility\r\n    function handleOpenModal() {\r\n        setIsModalOpen(true)\r\n    }\r\n    function handleCloseModal() {\r\n        setIsModalOpen(false)\r\n    }\r\n    const handleGoProductGroup = () => {\r\n        navigate('/');\r\n    }\r\n    const handleGoSelfProductGroup = () => {\r\n        navigate(1);\r\n    }\r\n    return (\r\n        <div>\r\n            <header className=\"px-4 bg-gray-50 border border-gray-200 p-2 space-x-2\">\r\n                <button className=\"text-purple-600 underline hover:font-semibold inline capitalize\" data-toggle=\"tooltip\" title=\"Click it go back\" onClick={handleGoProductGroup}>\r\n                    {\r\n                        productBaseLine.map(productLine => productLine.name)\r\n                    }\r\n                </button>\r\n                <div className=\"inline\">\r\n                    <LiaGreaterThanSolid className=\"text-purple-600 inline\" />\r\n                </div>\r\n                <div className=\"inline\">\r\n                    <Link className=\"text-purple-600 capitalize underline hover:font-semibold visited:text-purple-650\" data-toggle=\"tooltip\" title=\"Click it go back\" onClick={handleGoSelfProductGroup}>\r\n                        {\r\n                            productBaseLine.map(pr => (pr.group.filter(gr => gr.id == groupId)).map(selectedGroup => (selectedGroup.name)))\r\n                        }\r\n                    </Link>\r\n                </div>\r\n            </header>\r\n            <section>\r\n                <header>\r\n                    {/* <h2>Search result</h2> */}\r\n                </header>\r\n                {/* specific eligibility criteria modal */}\r\n                {\r\n                    specificEligibilityCriteria && (\r\n                        <>\r\n                            <div className='border rounded-md p-1'>\r\n                                {/* \"`${item.}Specific Eligibility}`\" */}\r\n                                <LoanModal className=\"border rounded-md p-1\" isOpen={isModalOpen} onClose={handleCloseModal}\r\n                                    title={`${specificElements.name} specific eligibility criteria`}>\r\n                                    <EligibilityCriteria criteria={specificEligibilityCriteria} />\r\n                                </LoanModal>\r\n                            </div>\r\n                        </>\r\n                    )\r\n                }\r\n                {/* general eligibility criteria modal  */}\r\n                {\r\n                    generalEligibilityCriteria && (\r\n                        <LoanModal isOpen={isGeneralModalOpen} onClose={handleGeneralCloseModal} title=\"General eligibility criteria\">\r\n                            <HorizontalTabs criteria={generalEligibilityCriteria} />\r\n                            {/* {generalEligibilityCriteria} */}\r\n                        </LoanModal>\r\n                    )\r\n                }\r\n                <article>\r\n                    {/* product cards */}\r\n                    <div className=\"mx-w-[1240px] mx-auto grid gap-1 ease-in-out px-4\">\r\n                        {\r\n                            productBaseLine.map(pr => (pr.group.filter(gr => gr.id == groupId)).map(selectedGroup => (\r\n                                <div className=\"w-full border-2 shadow-xl flex flex-col my-4 rounded-lg\">\r\n                                    <header className=\"text-2xl bg-[purple] text-white ease-in-out border text-center uppercase\">\r\n                                        {\r\n                                            selectedGroup.name\r\n                                        }\r\n                                    </header>\r\n                                    <div className=\"px-8 text-xl items-center justify-center\">\r\n                                        {\r\n                                            selectedGroup.product.map((item, index) => (\r\n                                                <>\r\n                                                    <Link to={`/product/${baseLine}/${groupId}/${item.id}`}>\r\n                                                        <p className=\"space-x-2 p-3 hover:cursor-pointer hover:font-bold hover:text-[purple] hover:underline first:capitalize hover:uppercase hover:scale-105 hover:gap-1 ease-in-out duration-300 \">\r\n                                                            <strong>\r\n                                                                {\r\n                                                                    index + 1\r\n                                                                }\r\n                                                            </strong>\r\n                                                            .\r\n                                                            <span>\r\n                                                                {\r\n                                                                    item.name\r\n                                                                }\r\n                                                            </span>\r\n                                                        </p>\r\n                                                    </Link>\r\n                                                </>\r\n                                            ))\r\n                                        }\r\n                                    </div>\r\n                                </div>\r\n                            )))\r\n                        }\r\n                    </div>\r\n                </article>\r\n            </section>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Product;","C:\\Users\\CBE\\Desktop\\LoanNew\\cbe-loan-frontend\\src\\Components\\Product\\LoanProductLine.jsx",[],[],"C:\\Users\\CBE\\Desktop\\LoanNew\\cbe-loan-frontend\\src\\Components\\NotFound\\NotFound.jsx",[],[],"C:\\Users\\CBE\\Desktop\\LoanNew\\cbe-loan-frontend\\src\\Components\\Product\\ProductDetail.jsx",["854","855","856","857","858","859"],[],"import { useParams, useNavigate } from \"react-router-dom\";\r\nimport { LiaGreaterThanSolid } from \"react-icons/lia\";\r\nimport SpecificEligibilityLoanData from '../Data/SpecificEligibilityLoanData.json';\r\nimport EligibilityCriteria from \"../EligibilityCriteria/SpecificEligibilityCriteria\";\r\nimport { useState } from \"react\";\r\nimport GeneralEligililityCriteriaLoanData from \"../Data/GeneralEligililityCriteriaLoanData.json\";\r\nimport HorizontalTabs from './HorizontalTabs';\r\nimport LoanModal from '../Modal/LoanModal';\r\n\r\nconst ProductDetail = () => {\r\n    const { baseLine, groupId, productId } = useParams();\r\n    const navigate = useNavigate();\r\n    const productBaseLine = SpecificEligibilityLoanData.product_line.filter(productLine => productLine.id == baseLine);\r\n    const [isGeneralModalOpen, setIsGeneralModalOpen] = useState(false)\r\n    const [generalEligibilityCriteria, setGeneralEligibilityCriteria] = useState(\"\");\r\n\r\n    function handleGeneralOpenModal() {\r\n        setIsGeneralModalOpen(true)\r\n    }\r\n\r\n    function handleGeneralCloseModal() {\r\n        setIsGeneralModalOpen(false)\r\n    }\r\n\r\n    const handleGoProductGroup = () => {\r\n        navigate(`/product/${baseLine}/${groupId}`);\r\n    }\r\n    const handleGoProductLine = () => {\r\n        navigate(`/`);\r\n    }\r\n    const doYouHaveAccount = () => {\r\n        const confirmed = window.confirm('Do you have account on CBE Loan?');\r\n        if (confirmed) {\r\n            // Navigate to login\r\n            navigate('/login');\r\n        }\r\n        else {\r\n            // Navigate to signup page\r\n            return navigate('/registrationPage');\r\n        }\r\n    }\r\n    return (\r\n        <div>\r\n            <div>\r\n                <header className=\"px-4 bg-gray-50 border border-gray-200 p-2 space-x-2\">\r\n                    <button className=\"text-purple-600 underline hover:font-semibold inline capitalize\" data-toggle=\"tooltip\" title=\"Click it go back\" onClick={handleGoProductLine}>\r\n                        {\r\n                            productBaseLine.map(productLine => productLine.name)\r\n                        }\r\n                    </button>\r\n                    <div className=\"inline\">\r\n                        <LiaGreaterThanSolid className=\"text-purple-600 inline\" />\r\n                    </div>\r\n                    <div className=\"inline\">\r\n                        <button className=\"text-purple-600 capitalize underline hover:font-semibold visited:text-purple-650\" data-toggle=\"tooltip\" title=\"Click it go back\" onClick={handleGoProductGroup}>\r\n                            {\r\n                                productBaseLine.map(pr => (pr.group.filter(gr => gr.id == groupId)).map(selectedGroup => (selectedGroup.name)))\r\n                            }\r\n                        </button>\r\n                    </div>\r\n                    <div className=\"inline\">\r\n                        <LiaGreaterThanSolid className=\"text-purple-600 inline\" />\r\n                    </div>\r\n                    <div className=\"inline\">\r\n                        <button className=\"text-purple-600 capitalize underline hover:font-semibold visited:text-purple-650\" data-toggle=\"tooltip\" title=\"Click it go back\">\r\n                            {\r\n                                productBaseLine.map(pr => (pr.group.filter(gr => gr.id == groupId)).map(selectedGroup => (selectedGroup.product.filter(pro => pro.id == productId)).map(selectedProduct => selectedProduct.name)))\r\n                            }\r\n                        </button>\r\n                    </div>\r\n                </header>\r\n                <header className=\"px-2 bg-gray-50 border border-purple-200 p-2 space-x-2\">\r\n                    <button onClick={() => { handleGeneralOpenModal(); setGeneralEligibilityCriteria(GeneralEligililityCriteriaLoanData.map(general => general.requiredDocuments)) }}\r\n                        className=\"text-purple-600 inline w-[200px] rounded-md font-medium text-center\">\r\n                        <span> General Eligibility Criteria </span>\r\n                    </button>\r\n                </header>\r\n            </div>\r\n            {\r\n                generalEligibilityCriteria && (\r\n                    <LoanModal isOpen={isGeneralModalOpen} onClose={handleGeneralCloseModal} title=\"General eligibility criteria\">\r\n                        <HorizontalTabs criteria={generalEligibilityCriteria} />\r\n                        {/* {generalEligibilityCriteria} */}\r\n                    </LoanModal>\r\n                )\r\n            }\r\n            <section>\r\n                <article>\r\n                    <div className=\"mx-w-[1240px] mx-auto grid gap-1 ease-in-out px-4\">\r\n                        {\r\n                            productBaseLine.map(pr => (pr.group.filter(gr => gr.id == groupId)).map(selectedGroup => (selectedGroup.product.filter(pro => pro.id == productId)).map((selectedProduct) => (\r\n                                <div className=\"w-full border-2 shadow-xl flex flex-col my-4 rounded-lg\">\r\n                                    <header className=\"text-2xl bg-[purple] text-white ease-in-out border text-center capitalize\">\r\n                                        {selectedProduct.name} Specific Eligibility Criteria\r\n                                    </header>\r\n                                    <div className=\"px-8 text-xl items-center justify-center\">\r\n                                        {\r\n                                            selectedProduct.specificEligibilityCriteria.length > 0 ? (\r\n                                                <EligibilityCriteria criteria={selectedProduct.specificEligibilityCriteria} />\r\n                                            ) : \"\"\r\n                                        }\r\n                                        <button className=\"block bg-[purple] w-[150px] rounded-md font-medium my-6 text-white mx-auto py-2 text-center\" onClick={doYouHaveAccount}>Apply</button>\r\n                                    </div>\r\n                                </div>\r\n                            ))))\r\n\r\n                        }\r\n                    </div>\r\n                </article>\r\n            </section>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ProductDetail;","C:\\Users\\CBE\\Desktop\\LoanNew\\cbe-loan-frontend\\src\\Components\\Navigation\\Customer\\LeftNav.jsx",["860","861","862","863","864","865","866","867","868","869","870","871","872","873","874","875","876","877","878","879","880","881","882","883","884","885","886","887","888","889","890","891","892","893","894","895","896","897","898","899","900","901","902","903","904","905","906","907","908","909","910","911","912","913","914","915","916","917","918","919","920","921","922","923","924","925","926","927","928","929","930","931","932","933","934","935","936","937","938","939","940","941","942","943","944","945","946","947","948","949","950","951","952","953","954","955","956","957","958","959","960","961","962","963","964","965","966"],[],"import { useState, useEffect } from \"react\";\r\nimport {\r\n  BsArrowLeftShort,\r\n  BsChevronDown,\r\n  BsPlus,\r\n  BsSearch,\r\n} from \"react-icons/bs\";\r\nimport { AiFillEnvironment } from \"react-icons/ai\";\r\nimport { RiDashboardFill } from \"react-icons/ri\";\r\nimport { GrProjects } from \"react-icons/gr\";\r\nimport { GiProgression } from \"react-icons/gi\";\r\nimport { FcOrganization } from \"react-icons/fc\";\r\nimport cbeLogo from \"../../Images/favicon.ico\";\r\nimport Tooltips from \"../../Tooltip/Tooltips\";\r\nimport \"./style.css\";\r\nimport { Link, Navigate } from \"react-router-dom\";\r\nimport { useParams, useNavigate } from \"react-router-dom\";\r\nimport Basic from \"../../Company/Basic\";\r\nimport classNames from \"classnames\";\r\nimport { TextField } from \"@mui/material\";\r\nimport loanDataService from \"../../Company/Service\";\r\nimport { InputLabel, MenuItem, FormControl, Select } from \"@mui/material\";\r\n// import { BsArrowLeftShort, BsSearch, BsChevronDown, BsPlus } from \"react-icons/bs\";\r\nimport CompanyModal from \"./CompanyModal\";\r\nimport { IconButton } from \"@mui/material\";\r\nimport { BsWindowPlus } from \"react-icons/bs\";\r\nimport { BiSkipNext } from \"react-icons/bi\";\r\nimport { RiSkipBackMiniFill } from \"react-icons/ri\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { useUploadFile } from \"dex-react-file-upload\";\r\nconst LeftNav = () => {\r\n  let navigate = useNavigate();\r\n  const { Id } = useParams();\r\n\r\n  const initialCompanyState = {\r\n    Id: null,\r\n    Name: \"\",\r\n    NoOfBranch: \"\",\r\n    EstablishmentYear: \"\",\r\n    TINNumber: \"\",\r\n    TINCertificate: \"\",\r\n    CompanyTypeID: \"\",\r\n    EntityTypeID: \"\",\r\n    VATNumber: \"\",\r\n    VATCertificate: \"\",\r\n  };\r\n  //realted to martial status\r\n  const [martailStatus, setMartailStatus] = useState();\r\n  const [martailStatusHold, setMartailStatusHold] = useState();\r\n  const [martailStatusHoldSetData, setMartailStatusHoldSetData] = useState([]);\r\n  //\r\n\r\n  //end maertial status\r\n  //related to upload file\r\n  const [selectedFiles, setSelectedFiles] = useState(undefined);\r\n  // const [folderName, setFolderName] = useState(\"\");\r\n  //\r\n  const [currentFile, setCurrentFile] = useState(undefined);\r\n  const [progress, setProgress] = useState(0);\r\n  const [message, setMessage] = useState(\"\");\r\n  const [fileInfos, setFileInfos] = useState([]);\r\n  const [selectedPathLin, setSelectedPathLin] = useState();\r\n  const [selectedPathTRN, setSelectedPathTRN] = useState();\r\n  const [selectedPathLinEdit, setSelectedPathLinEdit] = useState();\r\n  const [selectedPathTRNEdit, setSelectedPathTRNEdit] = useState();\r\n  const [toggleTaxSoleInfo, setToggleTaxInfo] = useState(false);\r\n  const [toggleGruantorSoleInfo, setToggleGruantorInfo] = useState(false);\r\n  const [toggleMarriedInfo, setToggleMarriedInfo] = useState(false);\r\n  //related to registration number\r\n  //NGO\r\n  const [selectedPathPL, setSelectedPathPL] = useState();\r\n  const [selectedPathLD, setSelectedPathLD] = useState();\r\n  const [selectedPathPLEdit, setSelectedPathPLEdit] = useState();\r\n  const [selectedPathLDEdit, setSelectedPathLDEdit] = useState();\r\n  const [getNGOAndEmbassyInformation, setGetNGOAndEmbassyInformation] =\r\n    useState([]);\r\n  const [ngoAndEmbassyInformationId, setNGOAndEmbassyInformationId] =\r\n    useState();\r\n  const [NGOAndEmbassyInfoIdForLocal, setNGOAndEmbassyInfoIdForLocal] =\r\n    useState();\r\n  const [editNGOAndEmbassyInfo, setEditNGOAndEmbassyInfo] = useState({\r\n    Id: ngoAndEmbassyInformationId,\r\n    AuthRefNo: \"\",\r\n    AuthDate: \"\",\r\n    UploadPermisionLetter: selectedPathPLEdit,\r\n    UploadParentCompanyLegalDocument: selectedPathLDEdit,\r\n  });\r\n  const selectFile2Edit = (event) => {\r\n    setSelectedFiles(event.target.files);\r\n  };\r\n  const upload2Edit = () => {\r\n    let currentFile = selectedFiles[0];\r\n    setProgress(0);\r\n    setCurrentFile(currentFile);\r\n    loanDataService\r\n      .upload(currentFile, (event) => {\r\n        setProgress(Math.round((100 * event.loaded) / event.total));\r\n      })\r\n      .then((response) => {\r\n        setMessage(response.data.message);\r\n        setSelectedPathPLEdit(response.data.Result);\r\n      })\r\n      .then((files) => {\r\n        setFileInfos(files.data);\r\n      })\r\n      .catch(() => {\r\n        setProgress(0);\r\n        // setMessage(\"Could not upload the file!\");\r\n        setCurrentFile(undefined);\r\n      });\r\n    setSelectedFiles(undefined);\r\n  };\r\n\r\n  const selectFile3Edit = (event) => {\r\n    setSelectedFiles(event.target.files);\r\n  };\r\n  const upload3Edit = () => {\r\n    let currentFile = selectedFiles[0];\r\n    setProgress(0);\r\n    setCurrentFile(currentFile);\r\n    loanDataService\r\n      .upload(currentFile, (event) => {\r\n        setProgress(Math.round((100 * event.loaded) / event.total));\r\n      })\r\n      .then((response) => {\r\n        setMessage(response.data.message);\r\n        setSelectedPathLDEdit(response.data.Result);\r\n      })\r\n      .then((files) => {\r\n        setFileInfos(files.data);\r\n      })\r\n      .catch(() => {\r\n        setProgress(0);\r\n        // setMessage(\"Could not upload the file!\");\r\n        setCurrentFile(undefined);\r\n      });\r\n    setSelectedFiles(undefined);\r\n  };\r\n  //ENDE EDIT NGO\r\n  //file upload NGO\r\n  const selectFile2 = (event) => {\r\n    setSelectedFiles(event.target.files);\r\n  };\r\n  const upload2 = () => {\r\n    let currentFile = selectedFiles[0];\r\n    setProgress(0);\r\n    setCurrentFile(currentFile);\r\n    loanDataService\r\n      .upload(currentFile, (event) => {\r\n        setProgress(Math.round((100 * event.loaded) / event.total));\r\n      })\r\n      .then((response) => {\r\n        setMessage(response.data.message);\r\n        setSelectedPathPL(response.data.Result);\r\n      })\r\n      .then((files) => {\r\n        setFileInfos(files.data);\r\n      })\r\n      .catch(() => {\r\n        setProgress(0);\r\n        // setMessage(\"Could not upload the file!\");\r\n        setCurrentFile(undefined);\r\n      });\r\n    setSelectedFiles(undefined);\r\n  };\r\n\r\n  const selectFile3 = (event) => {\r\n    setSelectedFiles(event.target.files);\r\n  };\r\n  const upload3 = () => {\r\n    let currentFile = selectedFiles[0];\r\n    setProgress(0);\r\n    setCurrentFile(currentFile);\r\n    loanDataService\r\n      .upload(currentFile, (event) => {\r\n        setProgress(Math.round((100 * event.loaded) / event.total));\r\n      })\r\n      .then((response) => {\r\n        setMessage(response.data.message);\r\n        setSelectedPathLD(response.data.Result);\r\n      })\r\n      .then((files) => {\r\n        setFileInfos(files.data);\r\n      })\r\n      .catch(() => {\r\n        setProgress(0);\r\n        // setMessage(\"Could not upload the file!\");\r\n        setCurrentFile(undefined);\r\n      });\r\n    setSelectedFiles(undefined);\r\n  };\r\n  const initialNGOAndEmbassyInfoState = {\r\n    Id: null,\r\n    AuthRefNo: \"\",\r\n    AuthDate: \"\",\r\n    UploadPermisionLetter: \"\",\r\n    UploadParentCompanyLegalDocument: \"\",\r\n  };\r\n  const getNGOAndEmbassyInformationBy = (ngoAndEmbassyInformationId) => {\r\n    loanDataService\r\n      .getNGOAndEmbassyInformationByNGOId(ngoAndEmbassyInformationId)\r\n      .then((res) => {\r\n        setEditNGOAndEmbassyInfo({\r\n          ...editNGOAndEmbassyInfo,\r\n          Id: ngoAndEmbassyInformationId,\r\n          AuthRefNo: res.data.Result.AuthRefNo,\r\n          AuthDate: res.data.Result.AuthDate,\r\n          UploadPermisionLetter: res.data.Result.UploadPermisionLetter,\r\n          UploadParentCompanyLegalDocument:\r\n            res.data.Result.UploadParentCompanyLegalDocument,\r\n        });\r\n        //\r\n        setNGOAndEmbassyInfoIdForLocal(ngoAndEmbassyInformationId);\r\n      })\r\n      .catch((err) => console.log(err));\r\n  };\r\n\r\n  const updateCompanyNGOAndEmbassyInformationById = () => {\r\n    // event.preventDefault();\r\n    loanDataService\r\n      .updateCompanyNGOAndEmbassyInformation(\r\n        NGOAndEmbassyInfoIdForLocal,\r\n        editNGOAndEmbassyInfo\r\n      )\r\n      .then((response) => {\r\n        // navigation(\"/company/1\");\r\n        console.log(response);\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n    //\r\n  };\r\n  useEffect(() => {\r\n    updateCompanyNGOAndEmbassyInformationById();\r\n  }, []);\r\n\r\n  const [NGOAndEmbassyInfo, setNGOAndEmbassyInfo] = useState(\r\n    initialNGOAndEmbassyInfoState\r\n  );\r\n  const initialNGOAndEmbassyState = {\r\n    Id: null,\r\n    AuthRefNo: \"\",\r\n    AuthDate: \"\",\r\n    UploadPermisionLetter: \"\",\r\n    UploadParentCompanyLegalDocument: \"\",\r\n  };\r\n  const [NGOAndEmbassy, setNGOAndEmbassy] = useState(initialNGOAndEmbassyState);\r\n\r\n  const [\r\n    isCompanyNGOAndEmbassyInformationEditModalOpen,\r\n    setIsCompanyNGOAndEmbassyInformationEditModalOpen,\r\n  ] = useState(false);\r\n\r\n  const [isCompanyNGOAndEmbassyModalOpen, setIsCompanyNGOAndEmbassyModalOpen] =\r\n    useState(false);\r\n  function handleGeneralCloseModal() {\r\n    isCompanyNGOAndEmbassyModalOpen(false);\r\n  }\r\n  function handleCompanyNGOAndEmbassyInformationEditOpenModal() {\r\n    setIsCompanyNGOAndEmbassyInformationEditModalOpen(true);\r\n  }\r\n  function handleCompanyNGOAndEmbassyInformationEditCloseModal() {\r\n    setIsCompanyNGOAndEmbassyInformationEditModalOpen(false);\r\n  }\r\n  function handleCompanyNGOAndEmbassyOpenModal() {\r\n    setIsCompanyNGOAndEmbassyModalOpen(true);\r\n  }\r\n  function handleCompanyNGOAndEmbassyCloseModal() {\r\n    setIsCompanyNGOAndEmbassyModalOpen(false);\r\n  }\r\n  const newNGOAndEmbassyInfo = () => {\r\n    setNGOAndEmbassyInfo(initialNGOAndEmbassyInfoState);\r\n    setSubmitted(false);\r\n  };\r\n  const handleInputChangeNGOAndEmbassy = (event) => {\r\n    const { name, value } = event.target;\r\n    setNGOAndEmbassy({ ...NGOAndEmbassy, [name]: value });\r\n  };\r\n  const saveNGOAndEmbassy = () => {\r\n    var data = {\r\n      CompanyID: holdId,\r\n      AuthRefNo: NGOAndEmbassy.AuthRefNo,\r\n      AuthDate: NGOAndEmbassy.AuthDate,\r\n      UploadPermisionLetter: selectedPathPL,\r\n      UploadParentCompanyLegalDocument: selectedPathLD,\r\n    };\r\n    loanDataService\r\n      .addNGOAndEmbassy(data, holdId)\r\n      .then((response) => {\r\n        setNGOAndEmbassy({\r\n          Id: response.data.Id,\r\n          //CompanyID: response.data.CompanyID,\r\n          AuthRefNo: response.data.AuthRefNo,\r\n          AuthDate: response.data.AuthDate,\r\n          UploadPermisionLetter: response.data.UploadPermisionLetter,\r\n          UploadParentCompanyLegalDocument:\r\n            response.data.UploadParentCompanyLegalDocument,\r\n        });\r\n        setSubmitted(true);\r\n        console.log(response.data);\r\n        setHoldId(response.data.Result.Id);\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n  useEffect(() => {\r\n    const getCompanyNGOAndEmbassyInformationById = () => {\r\n      setIsLoading(true);\r\n      loanDataService\r\n        .getCompanyNGOAndEmbassyInformation()\r\n        .then((response) => {\r\n          setGetNGOAndEmbassyInformation(response.data.Result);\r\n          setNGOAndEmbassyInformationId(response.data.Result.Id);\r\n        })\r\n        .catch((e) => {\r\n          console.log(e);\r\n        });\r\n      setIsLoading(false);\r\n    };\r\n    getCompanyNGOAndEmbassyInformationById();\r\n  }, []);\r\n  //end file upload NGO\r\n  //Ngo end\r\n\r\n  //edit Trade\r\n  const selectFile1Edit = (event) => {\r\n    setSelectedFiles(event.target.files);\r\n  };\r\n  const upload1Edit = () => {\r\n    let currentFile = selectedFiles[0];\r\n    setProgress(0);\r\n    setCurrentFile(currentFile);\r\n    loanDataService\r\n      .upload(currentFile, (event) => {\r\n        setProgress(Math.round((100 * event.loaded) / event.total));\r\n      })\r\n      .then((response) => {\r\n        setMessage(response.data.message);\r\n        setSelectedPathTRNEdit(response.data.Result);\r\n      })\r\n      .then((files) => {\r\n        setFileInfos(files.data);\r\n      })\r\n      .catch(() => {\r\n        setProgress(0);\r\n        // setMessage(\"Could not upload the file!\");\r\n        setCurrentFile(undefined);\r\n      });\r\n    setSelectedFiles(undefined);\r\n  };\r\n  //releted to trade licence\r\n  const selectFileEdit = (event) => {\r\n    setSelectedFiles(event.target.files);\r\n  };\r\n  const uploadEdit = () => {\r\n    let currentFile = selectedFiles[0];\r\n    setProgress(0);\r\n    setCurrentFile(currentFile);\r\n    loanDataService\r\n      .upload(currentFile, (event) => {\r\n        setProgress(Math.round((100 * event.loaded) / event.total));\r\n      })\r\n      .then((response) => {\r\n        setMessage(response.data.message);\r\n        setSelectedPathLinEdit(response.data.Result);\r\n      })\r\n      .then((files) => {\r\n        setFileInfos(files.data);\r\n      })\r\n      .catch(() => {\r\n        setProgress(0);\r\n        // setMessage(\"Could not upload the file!\");\r\n        setCurrentFile(undefined);\r\n      });\r\n    setSelectedFiles(undefined);\r\n  };\r\n  //end edit trade\r\n  const selectFile1 = (event) => {\r\n    setSelectedFiles(event.target.files);\r\n  };\r\n  const upload1 = () => {\r\n    let currentFile = selectedFiles[0];\r\n    setProgress(0);\r\n    setCurrentFile(currentFile);\r\n    loanDataService\r\n      .upload(currentFile, (event) => {\r\n        setProgress(Math.round((100 * event.loaded) / event.total));\r\n      })\r\n      .then((response) => {\r\n        setMessage(response.data.message);\r\n        setSelectedPathTRN(response.data.Result);\r\n        //\r\n      })\r\n      .then((files) => {\r\n        setFileInfos(files.data);\r\n      })\r\n      .catch(() => {\r\n        setProgress(0);\r\n        // setMessage(\"Could not upload the file!\");\r\n        setCurrentFile(undefined);\r\n      });\r\n    setSelectedFiles(undefined);\r\n  };\r\n  //releted to trade licence\r\n  const selectFile = (event) => {\r\n    setSelectedFiles(event.target.files);\r\n  };\r\n  const upload = () => {\r\n    let currentFile = selectedFiles[0];\r\n    setProgress(0);\r\n    setCurrentFile(currentFile);\r\n    loanDataService\r\n      .upload(currentFile, (event) => {\r\n        setProgress(Math.round((100 * event.loaded) / event.total));\r\n      })\r\n      .then((response) => {\r\n        setMessage(response.data.message);\r\n        setSelectedPathLin(response.data.Result);\r\n        console.log(\"new path\");\r\n        console.log(response.data.Result);\r\n      })\r\n      .then((files) => {\r\n        setFileInfos(files.data);\r\n      })\r\n      .catch(() => {\r\n        setProgress(0);\r\n        // setMessage(\"Could not upload the file!\");\r\n        setCurrentFile(undefined);\r\n      });\r\n    setSelectedFiles(undefined);\r\n  };\r\n  //end upload file\r\n  //edit company\r\n  const [activeStep, setActiveStep] = useState(0);\r\n  const [open, setOpen] = useState(true);\r\n  const [subMenuOpen, setSubMenuOpen] = useState(false);\r\n  const [leftNav, setLeftNav] = useState();\r\n  const [submitted, setSubmitted] = useState(false);\r\n  const [currentIndex, setCurrentIndex] = useState(-1);\r\n  const [companyTypes, setCompanyTypes] = useState([]);\r\n  const [entityTypes, setEntityTypes] = useState([]);\r\n  const [companies, setCompanies] = useState([]);\r\n  const [companyId, setCompanyId] = useState();\r\n  const [addressId, setAddressId] = useState();\r\n  const [addressIdForLocal, setAddressIdForLocal] = useState();\r\n\r\n  const [getAddress, setGetAddress] = useState([]);\r\n  const [getContactInformation, setGetContactInformation] = useState();\r\n  const [contactInformationId, setContactInformationId] = useState();\r\n  const [getAccountInformation, setGetAccountInformation] = useState();\r\n  const [getTradeInformation, setGetTradeInformation] = useState();\r\n  const [\r\n    getSoleAndPartinershipInformation,\r\n    setGetSoleAndPartinershipInformation,\r\n  ] = useState();\r\n  const [getSoleTaxId, setGetSoleTaxId] = useState();\r\n  // const refresh = () => window.location.reload(true);\r\n  const [holdId, setHoldId] = useState([]);\r\n  const [getSoleTax, setGetSoleTax] = useState();\r\n  const [getSoleGrauntor, setGetSoleGrauntor] = useState();\r\n  //\r\n  const [accountInformationId, setAccountInformationId] = useState();\r\n  const [tradeInformationId, setTradeInformationId] = useState();\r\n  const [\r\n    soleAndPartinershipInformationId,\r\n    setSoleAndPartinershipInformationId,\r\n  ] = useState();\r\n  const [taxInformationId, setTaxInformationId] = useState();\r\n  const [grauntorInformationId, setGrauntorInformationId] = useState();\r\n\r\n  const [company, setCompany] = useState(initialCompanyState);\r\n  //update company\r\n  localStorage.setItem(\"CompanyId\", companyId);\r\n  // localStorage.setItem(\"addressIdForLocal\", addressIdForLocal);\r\n  // localStorage.setItem(\"ContactInformationId\", contactInformationId);\r\n  const [contactInfoIdForLocal, setContactInfoIdForLocal] = useState();\r\n  const [accountInfoIdForLocal, setAccountInfoIdForLocal] = useState();\r\n  const [tradeInfoIdForLocal, setTradeInfoIdForLocal] = useState();\r\n\r\n  // const { Id } = useParams();AddressId\r\n\r\n  //edit address end\r\n  //update company information\r\n  const [editCompany, setEditCompany] = useState({\r\n    Id: companyId,\r\n    Name: \"\",\r\n    NoOfBranch: \"\",\r\n    EstablishmentYear: \"\",\r\n    TINNumber: \"\",\r\n    TINCertificate: \"\",\r\n    CompanyTypeID: \"\",\r\n    VATNumber: \"\",\r\n    VATCertificate: \"\",\r\n    EntityTypeID: \"\",\r\n  });\r\n  const [editAddress, setEditAddress] = useState({\r\n    Id: addressId,\r\n    CountryId: \"\",\r\n    RegionId: \"\",\r\n    ZoneSubCity: \"\",\r\n    Woreda: \"\",\r\n    City: \"\",\r\n    Kebele: \"\",\r\n    HouseNo: \"\",\r\n    BuildingNo: \"\",\r\n    StreetAddress: \"\",\r\n  });\r\n  const [editContactInformation, setEditContactInformation] = useState({\r\n    Id: contactInformationId,\r\n    DesignatedPersonFName: \"\",\r\n    DesignatedPersonMName: \"\",\r\n    DesignatedPersonLName: \"\",\r\n    Position: \"\",\r\n    MobileNo: \"\",\r\n    Telephone: \"\",\r\n    Email: \"\",\r\n  });\r\n  const [editAccountInfo, setEditAccountInfo] = useState({\r\n    Id: accountInformationId,\r\n    AccountNo: \"\",\r\n    CustomerId: \"\",\r\n    Branch: \"\",\r\n    District: \"\",\r\n    Other: \"\",\r\n  });\r\n  const [editTradeInfo, setEditTradeInfo] = useState({\r\n    Id: tradeInformationId,\r\n    TradeRegistrationNo: \"\",\r\n    UploadTradeRegCerti: selectedPathTRNEdit,\r\n    TradeLicenseNo: \"\",\r\n    IssueDate: \"\",\r\n    RenewedDate: \"\",\r\n    ValidityDate: \"\",\r\n    TradeBusinessTypeID: \"\",\r\n    UploadTradeLicense: selectedPathLinEdit,\r\n  });\r\n  const [editTaxInfo, setEditTaxInfo] = useState({\r\n    Id: taxInformationId,\r\n    Name: \"\",\r\n    TinNo: \"\",\r\n    IssueDate: \"\",\r\n    Expireddate: \"\",\r\n    TaxDebi: \"\",\r\n    TaxClearanceCertificate: \"\",\r\n  });\r\n\r\n  const [editSoleAndPrtinershipInfo, setEditSoleAndPrtinershipInfo] = useState({\r\n    Id: soleAndPartinershipInformationId,\r\n    CompanyID: \"\",\r\n    GuarantorId: \"\",\r\n    TaxClearanceID: \"\",\r\n    FirstName: \"\",\r\n    MiddleName: \"\",\r\n    LastName: \"\",\r\n    NationalityID: \"\",\r\n    CountryOfOriginID: \"\",\r\n    CountryOfResidenceID: \"\",\r\n    ProofOfIdentityTypeID: \"\",\r\n    UploadProofOfIdentity: \"\",\r\n    ProofOfIdentityIssuedDate: \"\",\r\n    ProofOfIdentityExpiredDate: \"\",\r\n    MartailStatusID: \"\",\r\n  });\r\n  //start\r\n  const getSoleANdPartinershipById = (soleAndPartinershipInformationId) => {\r\n    loanDataService\r\n      .getSolleAndPartinershipById(soleAndPartinershipInformationId)\r\n      .then((res) => {\r\n        setEditSoleAndPrtinershipInfo({\r\n          ...editSoleAndPrtinershipInfo,\r\n          Id: res.data.Result.Id,\r\n          CompanyID: res.data.Result.CompanyID,\r\n          GuarantorId: res.data.Result.GuarantorId,\r\n          TaxClearanceID: res.data.Result.TaxClearanceID,\r\n          FirstName: res.data.Result.FirstName,\r\n          MiddleName: res.data.Result.MiddleName,\r\n          LastName: res.data.Result.LastName,\r\n          NationalityID: res.data.Result.NationalityID,\r\n          CountryOfOriginID: res.data.Result.CountryOfOriginID,\r\n          CountryOfResidenceID: res.data.Result.CountryOfResidenceID,\r\n          ProofOfIdentityTypeID: res.data.Result.ProofOfIdentityTypeID,\r\n          UploadProofOfIdentity: res.data.Result.UploadProofOfIdentity,\r\n          ProofOfIdentityIssuedDate: res.data.Result.ProofOfIdentityIssuedDate,\r\n          ProofOfIdentityExpiredDate:\r\n            res.data.Result.ProofOfIdentityExpiredDate,\r\n          MartailStatusID: res.data.Result.MartailStatusID,\r\n        });\r\n      })\r\n      .catch((err) => console.log(err));\r\n  };\r\n  useEffect(() => {\r\n    getSoleANdPartinershipById();\r\n  }, []);\r\n  const updateSoleAndPartinershipInfo = () => {\r\n    loanDataService\r\n      .getSolleAndPartinership(\r\n        soleAndPartinershipInformationId,\r\n        editSoleAndPrtinershipInfo\r\n      )\r\n      .then((response) => {\r\n        // navigation(\"/company/1\");\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n  useEffect(() => {\r\n    updateSoleAndPartinershipInfo();\r\n  }, []);\r\n\r\n  //end\r\n  const updateTaxById = (taxInformationId) => {\r\n    loanDataService\r\n      .getSoleTax1(taxInformationId)\r\n      .then((res) => {\r\n        setEditTaxInfo({\r\n          ...editTaxInfo,\r\n          Id: taxInformationId,\r\n          Name: res.data.Result.Name,\r\n          TinNo: res.data.Result.TinNo,\r\n          IssueDate: res.data.Result.IssueDate,\r\n          Expireddate: res.data.Result.Expireddate,\r\n          TaxDebi: res.data.Result.TaxDebi,\r\n          TaxClearanceCertificate: res.data.Result.TaxClearanceCertificate,\r\n        });\r\n      })\r\n      .catch((err) => console.log(err));\r\n  };\r\n  useEffect(() => {\r\n    updateTaxById();\r\n  }, []);\r\n  const updateTaxInfo = () => {\r\n    loanDataService\r\n      .updateTax(taxInformationId, editTaxInfo)\r\n      .then((response) => {\r\n        // navigation(\"/company/1\");\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n  useEffect(() => {\r\n    updateTaxInfo();\r\n  }, []);\r\n\r\n  const updateCompanyById = (companyId) => {\r\n    loanDataService\r\n      .getCompanyById(companyId)\r\n      .then((res) => {\r\n        setEditCompany({\r\n          ...editCompany,\r\n          Id: companyId,\r\n          Name: res.data.Result.Name,\r\n          NoOfBranch: res.data.Result.NoOfBranch,\r\n          EstablishmentYear: res.data.Result.EstablishmentYear,\r\n          TINNumber: res.data.Result.TINNumber,\r\n          TINCertificate: res.data.Result.TINCertificate,\r\n          CompanyType: res.data.Result.CompanyType,\r\n          VATNumber: res.data.Result.VATNumber,\r\n          VATCertificate: res.data.Result.VATCertificate,\r\n          EntityType: res.data.Result.EntityType,\r\n        });\r\n      })\r\n      .catch((err) => console.log(err));\r\n  };\r\n  useEffect(() => {\r\n    updateCompanyById();\r\n  }, []);\r\n  const updateCompanyInfo = () => {\r\n    loanDataService\r\n      .updateCompany(companyId, editCompany)\r\n      .then((response) => {\r\n        // navigation(\"/company/1\");\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n  useEffect(() => {\r\n    updateCompanyInfo();\r\n  }, []);\r\n  const getAddressByCompanyId = (addressId) => {\r\n    loanDataService\r\n      .getAddressById(addressId)\r\n      .then((res) => {\r\n        setEditAddress({\r\n          ...editAddress,\r\n          Id: addressId,\r\n          CountryId: res.data.Result.CountryId,\r\n          RegionId: res.data.Result.RegionId,\r\n          ZoneSubCity: res.data.Result.ZoneSubCity,\r\n          Woreda: res.data.Result.Woreda,\r\n          City: res.data.Result.City,\r\n          Kebele: res.data.Result.Kebele,\r\n          HouseNo: res.data.Result.HouseNo,\r\n          BuildingNo: res.data.Result.BuildingNo,\r\n          StreetAddress: res.data.Result.StreetAddress,\r\n        });\r\n        //\r\n        setAddressIdForLocal(addressId);\r\n      })\r\n      .catch((err) => console.log(err));\r\n  };\r\n  useEffect(() => {\r\n    getAddressByCompanyId();\r\n  }, []);\r\n  const updateCompanyAddressById = () => {\r\n    // event.preventDefault();\r\n    loanDataService\r\n      .updateCompanyAddress(addressIdForLocal, editAddress)\r\n      .then((response) => {\r\n        // navigation(\"/company/1\");\r\n\r\n        console.log(response);\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n  useEffect(() => {\r\n    updateCompanyAddressById();\r\n  }, []);\r\n  const getContactInformationBy = (contactInformationId) => {\r\n    loanDataService\r\n      .getContactInformationById(contactInformationId)\r\n      .then((res) => {\r\n        setEditContactInformation({\r\n          ...editContactInformation,\r\n          Id: contactInformationId,\r\n          DesignatedPersonFName: res.data.Result.DesignatedPersonFName,\r\n          DesignatedPersonMName: res.data.Result.DesignatedPersonMName,\r\n          DesignatedPersonLName: res.data.Result.DesignatedPersonLName,\r\n          Position: res.data.Result.Position,\r\n          MobileNo: res.data.Result.MobileNo,\r\n          Telephone: res.data.Result.Telephone,\r\n          Email: res.data.Result.Email,\r\n        });\r\n        //\r\n        setContactInfoIdForLocal(contactInformationId);\r\n      })\r\n      .catch((err) => console.log(err));\r\n  };\r\n  useEffect(() => {\r\n    getContactInformationBy();\r\n  }, []);\r\n  const updateCompanyContactInformationById = () => {\r\n    // event.preventDefault();\r\n    loanDataService\r\n      .updateCompanyContactInformation(\r\n        contactInfoIdForLocal,\r\n        editContactInformation\r\n      )\r\n      .then((response) => {\r\n        // navigation(\"/company/1\");\r\n        console.log(response);\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n    //\r\n  };\r\n  useEffect(() => {\r\n    updateCompanyContactInformationById();\r\n  }, []);\r\n\r\n  const getAccountInformationBy = (accountInformationId) => {\r\n    loanDataService\r\n      .getAccountInformationById(accountInformationId)\r\n      .then((res) => {\r\n        setEditAccountInfo({\r\n          ...editAccountInfo,\r\n          Id: accountInformationId,\r\n          AccountNo: res.data.Result.AccountNo,\r\n          CustomerId: res.data.Result.CustomerId,\r\n          Branch: res.data.Result.Branch,\r\n          District: res.data.Result.District,\r\n          Other: res.data.Result.Other,\r\n        });\r\n        //\r\n        setAccountInfoIdForLocal(accountInformationId);\r\n      })\r\n      .catch((err) => console.log(err));\r\n  };\r\n  useEffect(() => {\r\n    getContactInformationBy();\r\n  }, []);\r\n  const updateCompanyAccountInformationById = () => {\r\n    // event.preventDefault();\r\n    loanDataService\r\n      .updateCompanyAccountInformation(accountInfoIdForLocal, editAccountInfo)\r\n      .then((response) => {\r\n        // navigation(\"/company/1\");\r\n        console.log(response);\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n    //\r\n  };\r\n  useEffect(() => {\r\n    updateCompanyAccountInformationById();\r\n  }, []);\r\n\r\n  const getTradeInformationBy = (tradeInformationId) => {\r\n    loanDataService\r\n      .getTradeInformationById(tradeInformationId)\r\n      .then((res) => {\r\n        setEditTradeInfo({\r\n          ...editTradeInfo,\r\n          Id: tradeInformationId,\r\n          TradeRegistrationNo: res.data.Result.TradeRegistrationNo,\r\n          UploadTradeRegCerti: res.data.Result.UploadTradeRegCerti,\r\n          TradeLicenseNo: res.data.Result.TradeLicenseNo,\r\n          IssueDate: res.data.Result.IssueDate,\r\n          RenewedDate: res.data.Result.RenewedDate,\r\n          ValidityDate: res.data.Result.ValidityDate,\r\n          TradeBusinessTypeID: res.data.Result.TradeBusinessTypeID,\r\n          UploadTradeLicense: res.data.Result.UploadTradeLicense,\r\n        });\r\n        setTradeInfoIdForLocal(tradeInformationId);\r\n      })\r\n      .catch((err) => console.log(err));\r\n  };\r\n  useEffect(() => {\r\n    getTradeInformationBy();\r\n  }, []);\r\n  const updateCompanyTradeInformationById = () => {\r\n    loanDataService\r\n      .updateCompanyTradeInformation(tradeInfoIdForLocal, editTradeInfo)\r\n      .then((response) => {\r\n        // navigation(\"/company/1\");\r\n        console.log(response);\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n  useEffect(() => {\r\n    updateCompanyTradeInformationById();\r\n  }, []);\r\n  //end update information\r\n  //start employee\r\n  const [isCompanyEmployeeSoleModalOpen, setIsCompanyEmployeeSoleModalOpen] =\r\n    useState(false);\r\n  function handleGeneralCloseModal() {\r\n    isCompanyEmployeeSoleModalOpen(false);\r\n  }\r\n  const [employeeInfoIdForLocal, setEmployeeInfoIdForLocal] = useState(false);\r\n  const [getEmployeeInformation, setGetEmployeeInformation] = useState([]);\r\n  const [employeeInformationId, setEmployeeInformationId] = useState(false);\r\n  const [martialStatusIdInformationId, setMartialStatusIdInformationId] =\r\n    useState(null);\r\n\r\n  function handleCompanyEmployeeSoleOpenModal() {\r\n    setIsCompanyEmployeeSoleModalOpen(true);\r\n  }\r\n  function handleCompanyEmployeeSoleCloseModal() {\r\n    setIsCompanyEmployeeSoleModalOpen(false);\r\n  }\r\n\r\n  //martail status\r\n  const initialMartailStatusMarriedState = {\r\n    Id: null,\r\n    SoleAndPartnerShipID: martialStatusIdInformationId,\r\n    FirstName: \"\",\r\n    MiddleName: \"\",\r\n    LastName: \"\",\r\n    NationalityID: \"\",\r\n    CountryOfOriginID: \"\",\r\n    CountryOfResidenceID: \"\",\r\n    ProofOfIdentityTypeID: \"\",\r\n    ProofOfIdentity: \"\",\r\n    MarriageDate: \"\",\r\n    MarriageCertificate: \"\",\r\n    MarriageCertificateIssuer: \"\",\r\n    ProofOfIdentityIssueDate: \"\",\r\n    ProofOfIdentityExpirDate: \"\",\r\n  };\r\n  const [holdMarried, setMarried] = useState([]);\r\n  const [holdDivorced, setDivorced] = useState([]);\r\n  const [holdWidowed, setWidowed] = useState([]);\r\n  const [holdUnmarried, setUnmarried] = useState([]);\r\n  const [martailStatusMarried, setMartailStatusMarried] = useState(\r\n    initialMartailStatusMarriedState\r\n  );\r\n  const newMartailStatusMarried = () => {\r\n    setMartailStatusMarried(initialMartailStatusMarriedState);\r\n    setSubmitted(false);\r\n  };\r\n  const handleInputChangeMartailStatusMarried = (event) => {\r\n    const { name, value } = event.target;\r\n    setMartailStatusMarried({ ...martailStatusMarried, [name]: value });\r\n  };\r\n  const saveMarried = () => {\r\n    var data = {\r\n      SoleAndPartnerShipID: martailStatusMarried.SoleAndPartnerShipID,\r\n      FirstName: martailStatusMarried.FirstName,\r\n      MiddleName: martailStatusMarried.MiddleName,\r\n      LastName: martailStatusMarried.LastName,\r\n      NationalityID: martailStatusMarried.NationalityID,\r\n      CountryOfOriginID: martailStatusMarried.CountryOfOriginID,\r\n      CountryOfResidenceID: martailStatusMarried.CountryOfResidenceID,\r\n      ProofOfIdentityTypeID: martailStatusMarried.ProofOfIdentityTypeID,\r\n      ProofOfIdentity: martailStatusMarried.ProofOfIdentity,\r\n      MarriageDate: martailStatusMarried.MarriageDate,\r\n      MarriageCertificate: martailStatusMarried.MarriageCertificate,\r\n      MarriageCertificateIssuer: martailStatusMarried.MarriageCertificateIssuer,\r\n      ProofOfIdentityIssueDate: martailStatusMarried.ProofOfIdentityIssueDate,\r\n      ProofOfIdentityExpirDate: martailStatusMarried.ProofOfIdentityExpirDate,\r\n    };\r\n    loanDataService\r\n      .marriedSole(data, martialStatusIdInformationId)\r\n      .then((response) => {\r\n        setMartailStatusMarried({\r\n          Id: response.data.Id,\r\n          SoleAndPartnerShipID: response.data.SolleAndPartnerShipID,\r\n          FirstName: response.data.FirstName,\r\n          MiddleName: response.data.MiddleName,\r\n          LastName: response.data.LastName,\r\n          NationalityID: response.data.NationalityID,\r\n          CountryOfOriginID: response.data.CountryOfOriginID,\r\n          CountryOfResidenceID: response.data.CountryOfResidenceID,\r\n          ProofOfIdentityTypeID: response.data.ProofOfIdentityTypeID,\r\n          ProofOfIdentity: response.data.ProofOfIdentity,\r\n          MarriageDate: response.data.MarriageDate,\r\n          MarriageCertificate: response.data.MarriageCertificate,\r\n          MarriageCertificateIssuer: response.data.MarriageCertificateIssuer,\r\n          ProofOfIdentityIssueDate: response.data.ProofOfIdentityIssueDate,\r\n          ProofOfIdentityExpirDate: response.data.ProofOfIdentityExpirDate,\r\n        });\r\n        setSubmitted(true);\r\n        // console.log(response.data);\r\n        // setHoldId(response.data.Result.Id);\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n  const getsoleMarriedMatialStatus = (Id) => {\r\n    console.log(Id);\r\n    loanDataService\r\n      .getMartialStatusBySoleMarriedId(Id)\r\n      .then((response) => {\r\n        setMarried(response.data.Result);\r\n        console.log(response.data.Result);\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n  //starts married ediet\r\n  const [editMarriedInfo, setEditMarriedInfo] = useState({\r\n    Id: taxInformationId,\r\n    FirstName: \"\",\r\n    MiddleName: \"\",\r\n    LastName: \"\",\r\n    NationalityID: \"\",\r\n    CountryOfOriginID: \"\",\r\n    CountryOfResidenceID: \"\",\r\n    ProofOfIdentityTypeID: \"\",\r\n    ProofOfIdentity: \"\",\r\n    MarriageDate: \"\",\r\n    MarriageCertificate: \"\",\r\n    MarriageCertificateIssuer: \"\",\r\n    ProofOfIdentityIssueDate: \"\",\r\n    ProofOfIdentityExpirDate: \"\",\r\n  });\r\n  const updateMarriedById = (taxInformationId) => {\r\n    loanDataService\r\n      .getMarried(taxInformationId)\r\n      .then((res) => {\r\n        setEditMarriedInfo({\r\n          ...editMarriedInfo,\r\n          Id: taxInformationId,\r\n          FirstName: res.data.Result.FirstName,\r\n          MiddleName: res.data.Result.MiddleName,\r\n          LastName: res.data.Result.LastName,\r\n          NationalityID: res.data.Result.NationalityID,\r\n          CountryOfOriginID: res.data.Result.CountryOfOriginID,\r\n          CountryOfResidenceID: res.data.Result.CountryOfResidenceID,\r\n          ProofOfIdentityTypeID: res.data.Result.ProofOfIdentityTypeID,\r\n          ProofOfIdentity: res.data.Result.ProofOfIdentity,\r\n          MarriageDate: res.data.Result.MarriageDate,\r\n          MarriageCertificate: res.data.Result.MarriageCertificate,\r\n          MarriageCertificateIssuer: res.data.Result.MarriageCertificateIssuer,\r\n          ProofOfIdentityIssueDate: res.data.Result.ProofOfIdentityIssueDate,\r\n          ProofOfIdentityExpirDate: res.data.Result.ProofOfIdentityExpirDate,\r\n        });\r\n      })\r\n      .catch((err) => console.log(err));\r\n  };\r\n  useEffect(() => {\r\n    updateMarriedById();\r\n  }, []);\r\n  const updateMarriedInfo = () => {\r\n    loanDataService\r\n      .updateMarried(taxInformationId, editMarriedInfo)\r\n      .then((response) => {\r\n        // navigation(\"/company/1\");\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n  useEffect(() => {\r\n    updateMarriedInfo();\r\n  }, []);\r\n  //marriedEdit end\r\n\r\n  //Divorced start\r\n  const initialMartailStatusDivorcedState = {\r\n    Id: null,\r\n    SoleAndPartnerShipID: martialStatusIdInformationId,\r\n    DateOfDivorced: \"\",\r\n    MarriageCert: \"\",\r\n    UploadMarriageCert: \"\",\r\n    DivorcedCertIssuer: \"\",\r\n    UnmarriedCert: \"\",\r\n    UploadUnmarriedCert: \"\",\r\n    IssuedDate: \"\",\r\n    ExpiredDate: \"\",\r\n    UnMarrageCertiIssuer: \"\",\r\n    CourtDecision: \"\",\r\n    UploadCourtDecision: \"\",\r\n  };\r\n  const [martailStatusDivorced, setMartailStatusDivorced] = useState(\r\n    initialMartailStatusDivorcedState\r\n  );\r\n  const newMartailStatusDivorced = () => {\r\n    setMartailStatusDivorced(initialMartailStatusDivorcedState);\r\n    setSubmitted(false);\r\n  };\r\n  const handleInputChangeMartailStatusDivorced = (event) => {\r\n    const { name, value } = event.target;\r\n    setMartailStatusDivorced({ ...martailStatusDivorced, [name]: value });\r\n  };\r\n  const saveDivorced = () => {\r\n    var data = {\r\n      SoleAndPartnerShipID: martailStatusDivorced.SoleAndPartnerShipID,\r\n      DateOfDivorced: martailStatusDivorced.DateOfDivorced,\r\n      MarriageCert: martailStatusDivorced.MarriageCert,\r\n      UploadMarriageCert: martailStatusDivorced.UploadMarriageCert,\r\n      DivorcedCertIssuer: martailStatusDivorced.DivorcedCertIssuer,\r\n      UnmarriedCert: martailStatusDivorced.UnmarriedCert,\r\n      UploadUnmarriedCert: martailStatusDivorced.UploadUnmarriedCert,\r\n      IssuedDate: martailStatusDivorced.IssuedDate,\r\n      ExpiredDate: martailStatusDivorced.ExpiredDate,\r\n      UnMarrageCertiIssuer: martailStatusDivorced.UnMarrageCertiIssuer,\r\n      CourtDecision: martailStatusDivorced.CourtDecision,\r\n      UploadCourtDecision: martailStatusDivorced.UploadCourtDecision,\r\n    };\r\n    loanDataService\r\n      .DivorcedSole(data, martialStatusIdInformationId)\r\n      .then((response) => {\r\n        setMartailStatusDivorced({\r\n          Id: response.data.Id,\r\n          SoleAndPartnerShipID: response.data.SoleAndPartnerShipID,\r\n          DateOfDivorced: response.data.DateOfDivorced,\r\n          MarriageCert: response.data.MarriageCert,\r\n          UploadMarriageCert: response.data.UploadMarriageCert,\r\n          DivorcedCertIssuer: response.data.DivorcedCertIssuer,\r\n          UnmarriedCert: response.data.UnmarriedCert,\r\n          UploadUnmarriedCert: response.data.UploadUnmarriedCert,\r\n          IssuedDate: response.data.IssuedDate,\r\n          ExpiredDate: response.data.ExpiredDate,\r\n          UnMarrageCertiIssuer: response.data.UnMarrageCertiIssuer,\r\n          CourtDecision: response.data.CourtDecision,\r\n          UploadCourtDecision: response.data.UploadCourtDecision,\r\n        });\r\n        setSubmitted(true);\r\n        // console.log(response.data);\r\n        // setHoldId(response.data.Result.Id);\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n  const getsoleDivorcedMatialStatus = (Id) => {\r\n    console.log(Id);\r\n    loanDataService\r\n      .getMartialStatusBySoleDivorcedId(Id)\r\n      .then((response) => {\r\n        setDivorced(response.data.Result);\r\n        console.log(response.data.Result);\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n  //starts divorced edit\r\n  const [editDivorcedInfo, setEditDivorcedInfo] = useState({\r\n    Id: taxInformationId,\r\n    SoleAndPartnerShipID: martialStatusIdInformationId,\r\n    DateOfDivorced: \"\",\r\n    MarriageCert: \"\",\r\n    UploadMarriageCert: \"\",\r\n    DivorcedCertIssuer: \"\",\r\n    UnmarriedCert: \"\",\r\n    UploadUnmarriedCert: \"\",\r\n    IssuedDate: \"\",\r\n    ExpiredDate: \"\",\r\n    UnMarrageCertiIssuer: \"\",\r\n    CourtDecision: \"\",\r\n    UploadCourtDecision: \"\",\r\n  });\r\n  const updateDivorcedById = (taxInformationId) => {\r\n    loanDataService\r\n      .getDivorced(taxInformationId)\r\n      .then((res) => {\r\n        setEditDivorcedInfo({\r\n          ...editDivorcedInfo,\r\n          Id: taxInformationId,\r\n          SoleAndPartnerShipID: res.data.Result.SoleAndPartnerShipID,\r\n          DateOfDivorced: res.data.Result.DateOfDivorced,\r\n          MarriageCert: res.data.Result.MarriageCert,\r\n          UploadMarriageCert: res.data.Result.UploadMarriageCert,\r\n          DivorcedCertIssuer: res.data.Result.DivorcedCertIssuer,\r\n          UnmarriedCert: res.data.Result.UnmarriedCert,\r\n          UploadUnmarriedCert: res.data.Result.UploadUnmarriedCert,\r\n          IssuedDate: res.data.Result.IssuedDate,\r\n          ExpiredDate: res.data.Result.ExpiredDate,\r\n          UnMarrageCertiIssuer: res.data.Result.UnMarrageCertiIssuer,\r\n          CourtDecision: res.data.Result.CourtDecision,\r\n          UploadCourtDecision: res.data.Result.UploadCourtDecision,\r\n        });\r\n      })\r\n      .catch((err) => console.log(err));\r\n  };\r\n  useEffect(() => {\r\n    updateMarriedById();\r\n  }, []);\r\n  const updateDivorcedInfo = () => {\r\n    loanDataService\r\n      .updateDivorced(taxInformationId, editDivorcedInfo)\r\n      .then((response) => {\r\n        // navigation(\"/company/1\");\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n  useEffect(() => {\r\n    updateDivorcedInfo();\r\n  }, []);\r\n  //divorced Edit end\r\n  //end Divorced\r\n  //widowed starts\r\n  //widowed edit starts\r\n  const [editWidowedInfo, setEditWidowedInfo] = useState({\r\n    Id: taxInformationId,\r\n    Name: \"\",\r\n    TinNo: \"\",\r\n    IssueDate: \"\",\r\n    Expireddate: \"\",\r\n    TaxDebi: \"\",\r\n    TaxClearanceCertificate: \"\",\r\n  });\r\n  const updateWidowedById = (taxInformationId) => {\r\n    loanDataService\r\n      .getWidowed(taxInformationId)\r\n      .then((res) => {\r\n        setEditWidowedInfo({\r\n          ...editWidowedInfo,\r\n          Id: taxInformationId,\r\n          Name: res.data.Result.Name,\r\n          TinNo: res.data.Result.TinNo,\r\n          IssueDate: res.data.Result.IssueDate,\r\n          Expireddate: res.data.Result.Expireddate,\r\n          TaxDebi: res.data.Result.TaxDebi,\r\n          TaxClearanceCertificate: res.data.Result.TaxClearanceCertificate,\r\n        });\r\n      })\r\n      .catch((err) => console.log(err));\r\n  };\r\n  useEffect(() => {\r\n    updateTaxById();\r\n  }, []);\r\n  const updateWidowedInfo = () => {\r\n    loanDataService\r\n      .updateWidowed(taxInformationId, editTaxInfo)\r\n      .then((response) => {\r\n        // navigation(\"/company/1\");\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n  useEffect(() => {\r\n    updateWidowedInfo();\r\n  }, []);\r\n  //widwodEdit end\r\n  const initialMartailStatusWidowedState = {\r\n    Id: null,\r\n    SoleAndPartnerShipID: martialStatusIdInformationId,\r\n    DateOfWidowed: \"\",\r\n    MarraigeCertificate: \"\",\r\n    MarraigeCertificateIssuer: \"\",\r\n    UnmarriedCertificate: \"\",\r\n    UnmarraiedCertificateIssuer: \"\",\r\n    UnmarriedCertificateIssuDate: \"\",\r\n    UnmarriedCertificateExpiredDate: \"\",\r\n    CourtDecision: \"\",\r\n  };\r\n  const [martailStatusWidowed, setMartailStatusWidowed] = useState(\r\n    initialMartailStatusWidowedState\r\n  );\r\n  const newMartailStatusWidowed = () => {\r\n    setMartailStatusWidowed(initialMartailStatusWidowedState);\r\n    setSubmitted(false);\r\n  };\r\n  const handleInputChangeMartailStatusWidowed = (event) => {\r\n    const { name, value } = event.target;\r\n    setMartailStatusWidowed({ ...martailStatusWidowed, [name]: value });\r\n  };\r\n  const saveWidowed = () => {\r\n    var data = {\r\n      SoleAndPartnerShipID: martailStatusDivorced.SoleAndPartnerShipID,\r\n      DateOfWidowed: martailStatusDivorced.DateOfWidowed,\r\n      MarraigeCertificate: martailStatusDivorced.MarraigeCertificate,\r\n      MarraigeCertificateIssuer:\r\n        martailStatusDivorced.MarraigeCertificateIssuer,\r\n      UnmarriedCertificate: martailStatusDivorced.UnmarriedCertificate,\r\n      UnmarraiedCertificateIssuer:\r\n        martailStatusDivorced.UnmarraiedCertificateIssuer,\r\n      UnmarriedCertificateIssuDate:\r\n        martailStatusDivorced.UnmarriedCertificateIssuDate,\r\n      UnmarriedCertificateExpiredDate:\r\n        martailStatusDivorced.UnmarriedCertificateExpiredDate,\r\n      CourtDecision: martailStatusDivorced.CourtDecision,\r\n    };\r\n    loanDataService\r\n      .WidowedSole(data, martialStatusIdInformationId)\r\n      .then((response) => {\r\n        setMartailStatusWidowed({\r\n          Id: response.data.Id,\r\n          SoleAndPartnerShipID: response.data.SoleAndPartnerShipID,\r\n          DateOfWidowed: response.data.DateOfWidowed,\r\n          MarraigeCertificate: response.data.MarraigeCertificate,\r\n          MarraigeCertificateIssuer: response.data.MarraigeCertificateIssuer,\r\n          UnmarriedCertificate: response.data.UnmarriedCertificate,\r\n          UnmarraiedCertificateIssuer:\r\n            response.data.UnmarraiedCertificateIssuer,\r\n          UnmarriedCertificateIssuDate:\r\n            response.data.UnmarriedCertificateIssuDate,\r\n          UnmarriedCertificateExpiredDate:\r\n            response.data.UnmarriedCertificateExpiredDate,\r\n          CourtDecision: response.data.CourtDecision,\r\n        });\r\n        setSubmitted(true);\r\n        // console.log(response.data);\r\n        // setHoldId(response.data.Result.Id);\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n  const getsoleWidowedMatialStatus = (Id) => {\r\n    console.log(Id);\r\n    loanDataService\r\n      .getMartialStatusBySoleWidowedId(Id)\r\n      .then((response) => {\r\n        setWidowed(response.data.Result);\r\n        console.log(response.data.Result);\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n  //end widowed\r\n  //start unmarried\r\n  //starts unmarried ediet\r\n  const [editUnmarriedInfo, setEditUnmarriedInfo] = useState({\r\n    Id: taxInformationId,\r\n    UnMarriedCertficate: \"\",\r\n    UnMarriedCertficateIssueDate: \"\",\r\n    UnMarriedCertficateExpiredDate: \"\",\r\n    UnMarriedCertficateIssuer: \"\",\r\n  });\r\n  const updateUnmarriedById = (taxInformationId) => {\r\n    loanDataService\r\n      .getUnmarried(taxInformationId)\r\n      .then((res) => {\r\n        setEditUnmarriedInfo({\r\n          ...editUnmarriedInfo,\r\n          Id: taxInformationId,\r\n          UnMarriedCertficate: res.data.Result.UnMarriedCertficate,\r\n          UnMarriedCertficateIssueDate:\r\n            res.data.Result.UnMarriedCertficateIssueDate,\r\n          UnMarriedCertficateExpiredDate:\r\n            res.data.Result.UnMarriedCertficateExpiredDate,\r\n          UnMarriedCertficateIssuer: res.data.Result.UnMarriedCertficateIssuer,\r\n        });\r\n      })\r\n      .catch((err) => console.log(err));\r\n  };\r\n  useEffect(() => {\r\n    updateTaxById();\r\n  }, []);\r\n  const updateUnmarriedInfo = () => {\r\n    loanDataService\r\n      .updateUnmarried(taxInformationId, editTaxInfo)\r\n      .then((response) => {\r\n        // navigation(\"/company/1\");\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n  useEffect(() => {\r\n    updateUnmarriedInfo();\r\n  }, []);\r\n  //widwodEdit end\r\n  //end unmarried\r\n  const initialMartailStatusUnmarriedState = {\r\n    Id: null,\r\n    SoleAndPartnerShipID: martialStatusIdInformationId,\r\n    UnMarriedCertficate: \"\",\r\n    UnMarriedCertficateIssueDate: \"\",\r\n    UnMarriedCertficateExpiredDate: \"\",\r\n    UnMarriedCertficateIssuer: \"\",\r\n  };\r\n  const [martailStatusUnmarried, setMartailStatusUnmarried] = useState(\r\n    initialMartailStatusUnmarriedState\r\n  );\r\n  const newMartailStatusUnmarried = () => {\r\n    setMartailStatusUnmarried(initialMartailStatusUnmarriedState);\r\n    setSubmitted(false);\r\n  };\r\n  const handleInputChangeMartailStatusUnmarried = (event) => {\r\n    const { name, value } = event.target;\r\n    setMartailStatusUnmarried({ ...martailStatusUnmarried, [name]: value });\r\n  };\r\n  const saveUnmarried = () => {\r\n    var data = {\r\n      SoleAndPartnerShipID: martailStatusUnmarried.SoleAndPartnerShipID,\r\n      UnMarriedCertficate: martailStatusUnmarried.UnMarriedCertficate,\r\n      UnMarriedCertficateIssueDate:\r\n        martailStatusUnmarried.UnMarriedCertficateIssueDate,\r\n      UnMarriedCertficateExpiredDate:\r\n        martailStatusUnmarried.UnMarriedCertficateExpiredDate,\r\n      UnMarriedCertficateIssuer:\r\n        martailStatusUnmarried.UnMarriedCertficateIssuer,\r\n    };\r\n    loanDataService\r\n      .UnmarriedSole(data, martialStatusIdInformationId)\r\n      .then((response) => {\r\n        setMartailStatusUnmarried({\r\n          Id: response.data.Id,\r\n          SoleAndPartnerShipID: response.data.SoleAndPartnerShipID,\r\n          UnMarriedCertficate: response.data.UnMarriedCertficate,\r\n          UnMarriedCertficateIssueDate:\r\n            response.data.UnMarriedCertficateIssueDate,\r\n          UnMarriedCertficateExpiredDate:\r\n            response.data.UnMarriedCertficateExpiredDate,\r\n          UnMarriedCertficateIssuer: response.data.UnMarriedCertficateIssuer,\r\n        });\r\n        setSubmitted(true);\r\n        // console.log(response.data);\r\n        // setHoldId(response.data.Result.Id);\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n  const getsoleUnmarriedMatialStatus = (Id) => {\r\n    console.log(Id);\r\n    loanDataService\r\n      .getMartialStatusBySoleUnmarriedId(Id)\r\n      .then((response) => {\r\n        setUnmarried(response.data.Result);\r\n        console.log(response.data.Result);\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n  //end unmarried\r\n\r\n  //end martail status\r\n  const [editEmployeeInfo, setEditEmployeeInfo] = useState({\r\n    Id: employeeInformationId,\r\n    BudgetYear: \"\",\r\n    NumOfPermanentEmp: \"\",\r\n    NumOfTempEmp: \"\",\r\n    NumOfContractEmp: \"\",\r\n    SeniorMngtStaffIDTM: \"\",\r\n    TotalWorkExperiance: \"\",\r\n    RelatedWorkExperiance: \"\",\r\n    UploadCV: \"\",\r\n    AttachWorkExperience: \"\",\r\n  });\r\n  const getEmployeeInformationBy = (employeeInformationId) => {\r\n    loanDataService\r\n      .getEmployeeInformationById(employeeInformationId)\r\n      .then((res) => {\r\n        setEditEmployeeInfo({\r\n          ...editEmployeeInfo,\r\n          Id: employeeInformationId,\r\n          BudgetYear: res.data.Result.BudgetYear,\r\n          NumOfPermanentEmp: res.data.Result.NumOfPermanentEmp,\r\n          NumOfTempEmp: res.data.Result.NumOfTempEmp,\r\n          NumOfContractEmp: res.data.Result.NumOfContractEmp,\r\n          SeniorMngtStaffIDTM: res.data.Result.SeniorMngtStaffIDTM,\r\n          TotalWorkExperiance: res.data.Result.TotalWorkExperiance,\r\n          RelatedWorkExperiance: res.data.Result.RelatedWorkExperiance,\r\n          UploadCV: res.data.Result.UploadCV,\r\n          AttachWorkExperience: res.data.Result.AttachWorkExperience,\r\n        });\r\n        // setEmployeeInfoIdForLocal(employeeInformationId);\r\n      })\r\n      .catch((err) => console.log(err));\r\n  };\r\n  const updateCompanyEmployeeInformationById = () => {\r\n    loanDataService\r\n      .updateCompanyEmployeeInformation(employeeInformationId, editEmployeeInfo)\r\n      .then((response) => {\r\n        console.log(response);\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n  useEffect(() => {\r\n    updateCompanyEmployeeInformationById();\r\n  }, []);\r\n\r\n  const initialEmployeeState = {\r\n    Id: null,\r\n    BudgetYear: \"\",\r\n    NumOfPermanentEmp: \"\",\r\n    NumOfTempEmp: \"\",\r\n    NumOfContractEmp: \"\",\r\n    SeniorMngtStaffIDTM: \"\",\r\n    TotalWorkExperiance: \"\",\r\n    RelatedWorkExperiance: \"\",\r\n    UploadCV: \"\",\r\n    AttachWorkExperience: \"\",\r\n  };\r\n  const [employee, setEmployee] = useState(initialEmployeeState);\r\n  const newEmployee = () => {\r\n    setEmployee(initialEmployeeState);\r\n    setSubmitted(false);\r\n  };\r\n  const handleInputChangeEmployee = (event) => {\r\n    const { name, value } = event.target;\r\n    setEmployee({ ...employee, [name]: value });\r\n  };\r\n  const saveEmployee = () => {\r\n    var data = {\r\n      BudgetYear: employee.BudgetYear,\r\n      NumOfPermanentEmp: employee.NumOfPermanentEmp,\r\n      NumOfTempEmp: employee.NumOfTempEmp,\r\n      NumOfContractEmp: employee.NumOfContractEmp,\r\n      SeniorMngtStaffIDTM: employee.SeniorMngtStaffIDTM,\r\n      TotalWorkExperiance: employee.TotalWorkExperiance,\r\n      RelatedWorkExperiance: employee.RelatedWorkExperiance,\r\n      UploadCV: employee.UploadCV, //uplod will be do\r\n      AttachWorkExperience: employee.AttachWorkExperience,\r\n    };\r\n    loanDataService\r\n      .addEmployee(data, holdId)\r\n      .then((response) => {\r\n        setEmployee({\r\n          Id: response.data.Id,\r\n          BudgetYear: response.data.BudgetYear,\r\n          NumOfPermanentEmp: response.data.NumOfPermanentEmp,\r\n          NumOfTempEmp: response.data.NumOfTempEmp,\r\n          NumOfContractEmp: response.data.NumOfContractEmp,\r\n          SeniorMngtStaffIDTM: response.data.SeniorMngtStaffIDTM,\r\n          TotalWorkExperiance: response.data.TotalWorkExperiance,\r\n          RelatedWorkExperiance: response.data.RelatedWorkExperiance,\r\n          UploadCV: response.data.UploadCV,\r\n          AttachWorkExperience: response.data.AttachWorkExperience,\r\n        });\r\n        setSubmitted(true);\r\n        console.log(response.data);\r\n        setHoldId(response.data.Result.Id);\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n  useEffect(() => {\r\n    const getCompanyEmployeeInformationByCompanyId = () => {\r\n      setIsLoading(true);\r\n      loanDataService\r\n        .getCompanyEmployeeInformation(holdId)\r\n        .then((response) => {\r\n          setGetEmployeeInformation(response.data.Result);\r\n          console.log(response.data.Result);\r\n        })\r\n        .catch((e) => {\r\n          console.log(e);\r\n        });\r\n      setIsLoading(false);\r\n    };\r\n    getCompanyEmployeeInformationByCompanyId();\r\n  }, []);\r\n  //end employee\r\n\r\n  //PLC AND SHARE\r\n  const [selectedPathAoAD, setSelectedPathAoAD] = useState();\r\n  const [selectedPathMD, setSelectedPathMD] = useState();\r\n  const [selectedPathMoUD, setSelectedPathMoUD] = useState();\r\n  const [selectedPathAoADEdit, setSelectedPathAoADEdit] = useState();\r\n  const [selectedPathMDEdit, setSelectedPathMDEdit] = useState();\r\n  const [selectedPathMoUDEdit, setSelectedPathMoUDEdit] = useState();\r\n  function handleCompanyPLCAndShareInformationEditOpenModal() {\r\n    setIsCompanyPLCAndShareInformationEditModalOpen(true);\r\n  }\r\n  function handleCompanyPLCAndShareInformationEditCloseModal() {\r\n    setIsCompanyPLCAndShareInformationEditModalOpen(false);\r\n  }\r\n  const [plcAndShareInformationId, setPLCAndShareInformationId] = useState();\r\n  const [PLCAndShareInfoIdForLocal, setPLCAndShareInfoIdForLocal] = useState(\r\n    []\r\n  );\r\n  function handleCompanyPLCAndShareOpenModal() {\r\n    setIsCompanyPLCAndShareModalOpen(true);\r\n  }\r\n  function handleCompanyPLCAndShareCloseModal() {\r\n    setIsCompanyPLCAndShareModalOpen(false);\r\n  }\r\n  const [isCompanyPLCAndShareModalOpen, setIsCompanyPLCAndShareModalOpen] =\r\n    useState(false);\r\n  function handleGeneralCloseModal() {\r\n    isCompanyPLCAndShareModalOpen(false);\r\n  }\r\n  const [\r\n    isCompanyPLCAndShareInformationEditModalOpen,\r\n    setIsCompanyPLCAndShareInformationEditModalOpen,\r\n  ] = useState(false);\r\n  function handleCompanyPLCAndShareInformationEditOpenModal() {\r\n    setIsCompanyPLCAndShareInformationEditModalOpen(true);\r\n  }\r\n  function handleCompanyPLCAndShareInformationEditCloseModal() {\r\n    setIsCompanyPLCAndShareInformationEditModalOpen(false);\r\n  }\r\n  //PLC\r\n  const selectFile4Edit = (event) => {\r\n    setSelectedFiles(event.target.files);\r\n  };\r\n  const upload4Edit = () => {\r\n    let currentFile = selectedFiles[0];\r\n    setProgress(0);\r\n    setCurrentFile(currentFile);\r\n    loanDataService\r\n      .upload(currentFile, (event) => {\r\n        setProgress(Math.round((100 * event.loaded) / event.total));\r\n      })\r\n      .then((response) => {\r\n        setMessage(response.data.message);\r\n        setSelectedPathPLEdit(response.data.Result);\r\n      })\r\n      .then((files) => {\r\n        setFileInfos(files.data);\r\n      })\r\n      .catch(() => {\r\n        setProgress(0);\r\n        // setMessage(\"Could not upload the file!\");\r\n        setCurrentFile(undefined);\r\n      });\r\n    setSelectedFiles(undefined);\r\n  };\r\n\r\n  const selectFile5Edit = (event) => {\r\n    setSelectedFiles(event.target.files);\r\n  };\r\n  const upload5Edit = () => {\r\n    let currentFile = selectedFiles[0];\r\n    setProgress(0);\r\n    setCurrentFile(currentFile);\r\n    loanDataService\r\n      .upload(currentFile, (event) => {\r\n        setProgress(Math.round((100 * event.loaded) / event.total));\r\n      })\r\n      .then((response) => {\r\n        setMessage(response.data.message);\r\n        setSelectedPathAoADEdit(response.data.Result);\r\n      })\r\n      .then((files) => {\r\n        setFileInfos(files.data);\r\n      })\r\n      .catch(() => {\r\n        setProgress(0);\r\n        // setMessage(\"Could not upload the file!\");\r\n        setCurrentFile(undefined);\r\n      });\r\n    setSelectedFiles(undefined);\r\n  };\r\n  const selectFile6Edit = (event) => {\r\n    setSelectedFiles(event.target.files);\r\n  };\r\n  const upload6Edit = () => {\r\n    let currentFile = selectedFiles[0];\r\n    setProgress(0);\r\n    setCurrentFile(currentFile);\r\n    loanDataService\r\n      .upload(currentFile, (event) => {\r\n        setProgress(Math.round((100 * event.loaded) / event.total));\r\n      })\r\n      .then((response) => {\r\n        setMessage(response.data.message);\r\n        setSelectedPathMDEdit(response.data.Result);\r\n      })\r\n      .then((files) => {\r\n        setFileInfos(files.data);\r\n      })\r\n      .catch(() => {\r\n        setProgress(0);\r\n        // setMessage(\"Could not upload the file!\");\r\n        setCurrentFile(undefined);\r\n      });\r\n    setSelectedFiles(undefined);\r\n  };\r\n\r\n  const selectFile4 = (event) => {\r\n    setSelectedFiles(event.target.files);\r\n  };\r\n  const upload4 = () => {\r\n    let currentFile = selectedFiles[0];\r\n    setProgress(0);\r\n    setCurrentFile(currentFile);\r\n    loanDataService\r\n      .upload(currentFile, (event) => {\r\n        setProgress(Math.round((100 * event.loaded) / event.total));\r\n      })\r\n      .then((response) => {\r\n        setMessage(response.data.message);\r\n        setSelectedPathMoUD(response.data.Result);\r\n      })\r\n      .then((files) => {\r\n        setFileInfos(files.data);\r\n      })\r\n      .catch(() => {\r\n        setProgress(0);\r\n        // setMessage(\"Could not upload the file!\");\r\n        setCurrentFile(undefined);\r\n      });\r\n    setSelectedFiles(undefined);\r\n  };\r\n  const selectFile5 = (event) => {\r\n    setSelectedFiles(event.target.files);\r\n  };\r\n  const upload5 = () => {\r\n    let currentFile = selectedFiles[0];\r\n    setProgress(0);\r\n    setCurrentFile(currentFile);\r\n    loanDataService\r\n      .upload(currentFile, (event) => {\r\n        setProgress(Math.round((100 * event.loaded) / event.total));\r\n      })\r\n      .then((response) => {\r\n        setMessage(response.data.message);\r\n        setSelectedPathAoAD(response.data.Result);\r\n      })\r\n      .then((files) => {\r\n        setFileInfos(files.data);\r\n      })\r\n      .catch(() => {\r\n        setProgress(0);\r\n        // setMessage(\"Could not upload the file!\");\r\n        setCurrentFile(undefined);\r\n      });\r\n    setSelectedFiles(undefined);\r\n  };\r\n  const selectFile6 = (event) => {\r\n    setSelectedFiles(event.target.files);\r\n  };\r\n  const upload6 = () => {\r\n    let currentFile = selectedFiles[0];\r\n    setProgress(0);\r\n    setCurrentFile(currentFile);\r\n    loanDataService\r\n      .upload(currentFile, (event) => {\r\n        setProgress(Math.round((100 * event.loaded) / event.total));\r\n      })\r\n      .then((response) => {\r\n        setMessage(response.data.message);\r\n        setSelectedPathMD(response.data.Result);\r\n      })\r\n      .then((files) => {\r\n        setFileInfos(files.data);\r\n      })\r\n      .catch(() => {\r\n        setProgress(0);\r\n        // setMessage(\"Could not upload the file!\");\r\n        setCurrentFile(undefined);\r\n      });\r\n    setSelectedFiles(undefined);\r\n  };\r\n  // END PLC\r\n  const [editPLCAndShareInfo, setEditPLCAndShareInfo] = useState({\r\n    Id: plcAndShareInformationId,\r\n    // TaxClearanceID: \"\",\r\n    CompanyID: \"\",\r\n    MoUDate: \"\",\r\n    MoUReferenceNumber: \"\",\r\n    MoUAuthDate: \"\",\r\n    MoUAuthRefNumber: \"\",\r\n    MoUDocument: selectedPathMoUDEdit,\r\n    MoUIssuer: \"\",\r\n    AoADate: \"\",\r\n    AoAReferenceNumber: \"\",\r\n    AoAAuthDate: \"\",\r\n    AoAAuthRefNumber: \"\",\r\n    AoADocument: selectedPathAoADEdit,\r\n    MinuteDate: \"\",\r\n    MinuteReferenceNumber: \"\",\r\n    MinuteAuthDate: \"\",\r\n    MinuteAuthRefNumber: \"\",\r\n    MinuteDocument: selectedPathMDEdit,\r\n    MinuteIssuer: \"\",\r\n    MinuteAgenda: \"\",\r\n  });\r\n  const getPLCAndShareInformationBy = (PLCAndShareInformationId) => {\r\n    loanDataService\r\n      .getPLCAndShareInformationById(PLCAndShareInformationId)\r\n      .then((res) => {\r\n        setEditPLCAndShareInfo({\r\n          ...editPLCAndShareInfo,\r\n          Id: PLCAndShareInformationId,\r\n          MoUDate: res.data.Result.MoUDate,\r\n          // GuarantorId: res.data.Result.GuarantorId,\r\n          // TaxClearanceID: res.data.Result.TaxClearanceID,\r\n          CompanyID: res.data.Result.CompanyID,\r\n          MoUReferenceNumber: res.data.Result.MoUReferenceNumber,\r\n          MoUAuthDate: res.data.Result.MoUAuthDate,\r\n          MoUAuthRefNumber: res.data.Result.MoUAuthRefNumber,\r\n          MoUDocument: res.data.Result.MoUDocument,\r\n          MoUIssuer: res.data.Result.MoUIssuer,\r\n          AoADate: res.data.Result.AoADate,\r\n          AoAReferenceNumber: res.data.Result.AoAReferenceNumber,\r\n          AoAAuthDate: res.data.Result.AoAAuthDate,\r\n          AoAAuthRefNumber: res.data.Result.AoAAuthRefNumber,\r\n          AoADocument: res.data.Result.AoADocument,\r\n          MinuteDate: res.data.Result.MinuteDate,\r\n          MinuteReferenceNumber: res.data.Result.MinuteReferenceNumber,\r\n          MinuteAuthDate: res.data.Result.MinuteAuthDate,\r\n          MinuteAuthRefNumber: res.data.Result.MinuteAuthRefNumber,\r\n          MinuteDocument: res.data.Result.MinuteDocument,\r\n          MinuteIssuer: res.data.Result.MinuteIssuer,\r\n          MinuteAgenda: res.data.Result.MinuteAgenda,\r\n        });\r\n        setPLCAndShareInfoIdForLocal(PLCAndShareInformationId);\r\n      })\r\n      .catch((err) => console.log(err));\r\n  };\r\n  const updateCompanyPLCAndShareInformationById = () => {\r\n    loanDataService\r\n      .updateCompanyPLCAndShareInformation(\r\n        PLCAndShareInfoIdForLocal,\r\n        editPLCAndShareInfo\r\n      )\r\n      .then((response) => {\r\n        console.log(response);\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n  useEffect(() => {\r\n    updateCompanyPLCAndShareInformationById();\r\n  }, []);\r\n  const [getPLCAndShareInformation, setGetPLCAndShareInformation] = useState(\r\n    []\r\n  );\r\n  const initialPLCAndShareState = {\r\n    Id: null,\r\n    GuarantorId: null,\r\n    TaxClearanceID: null,\r\n    MoUDate: \"\",\r\n    MoUReferenceNumber: \"\",\r\n    MoUAuthDate: \"\",\r\n    MoUAuthRefNumber: \"\",\r\n    MoUDocument: \"\",\r\n    MoUIssuer: \"\",\r\n    AoADate: \"\",\r\n    AoAReferenceNumber: \"\",\r\n    AoAAuthDate: \"\",\r\n    AoAAuthRefNumber: \"\",\r\n    AoADocument: \"\",\r\n    MinuteDate: \"\",\r\n    MinuteReferenceNumber: \"\",\r\n    MinuteAuthDate: \"\",\r\n    MinuteAuthRefNumber: \"\",\r\n    MinuteDocument: \"\",\r\n    MinuteIssuer: \"\",\r\n    MinuteAgenda: \"\",\r\n  };\r\n  const [PLCAndShare, setPLCAndShare] = useState(initialPLCAndShareState);\r\n  const newPLCAndShare = () => {\r\n    setPLCAndShare(initialPLCAndShareState);\r\n    setSubmitted(false);\r\n  };\r\n  const handleInputChangePLCAndShare = (event) => {\r\n    const { name, value } = event.target;\r\n    setPLCAndShare({ ...PLCAndShare, [name]: value });\r\n  };\r\n  const savePLCAndShare = () => {\r\n    var data = {\r\n      GuarantorId: null,\r\n      TaxClearanceID: null,\r\n      MoUDate: PLCAndShare.MoUDate,\r\n      MoUReferenceNumber: PLCAndShare.MoUReferenceNumber,\r\n      MoUAuthDate: PLCAndShare.MoUAuthDate,\r\n      MoUAuthRefNumber: PLCAndShare.MoUAuthRefNumber,\r\n      MoUDocument: selectedPathMoUD,\r\n      MoUIssuer: PLCAndShare.MoUIssuer,\r\n      AoADate: PLCAndShare.AoADate,\r\n      AoAReferenceNumber: PLCAndShare.AoAReferenceNumber,\r\n      AoAAuthDate: PLCAndShare.AoAAuthDate,\r\n      AoAAuthRefNumber: PLCAndShare.AoAAuthRefNumber,\r\n      AoADocument: selectedPathAoAD,\r\n      MinuteDate: PLCAndShare.MinuteDate,\r\n      MinuteReferenceNumber: PLCAndShare.MinuteReferenceNumber,\r\n      MinuteAuthDate: PLCAndShare.MinuteAuthDate,\r\n      MinuteAuthRefNumber: PLCAndShare.MinuteAuthRefNumber,\r\n      MinuteDocument: selectedPathMD,\r\n      MinuteIssuer: PLCAndShare.MinuteIssuer,\r\n      MinuteAgenda: PLCAndShare.MinuteAgenda,\r\n    };\r\n    loanDataService\r\n      .addPLCAndShare(data, holdId)\r\n      .then((response) => {\r\n        setPLCAndShare({\r\n          Id: response.data.Id,\r\n          GuarantorId: response.data.GuarantorId,\r\n          TaxClearanceID: response.data.TaxClearanceID,\r\n          MoUDate: response.data.MoUDate,\r\n          MoUReferenceNumber: response.data.MoUReferenceNumber,\r\n          MoUAuthDate: response.data.MoUAuthDate,\r\n          MoUAuthRefNumber: response.data.MoUAuthRefNumber,\r\n          MoUDocument: response.data.MoUDocument,\r\n          MoUIssuer: response.data.MoUIssuer,\r\n          AoADate: response.data.AoADate,\r\n          AoAReferenceNumber: response.data.AoAReferenceNumber,\r\n          AoAAuthDate: response.data.AoAAuthDate,\r\n          AoAAuthRefNumber: response.data.AoAAuthRefNumber,\r\n          AoADocument: response.data.AoADocument,\r\n          MinuteDate: response.data.MinuteDate,\r\n          MinuteReferenceNumber: response.data.MinuteReferenceNumber,\r\n          MinuteAuthDate: response.data.MinuteAuthDate,\r\n          MinuteAuthRefNumber: response.data.MinuteAuthRefNumber,\r\n          MinuteDocument: response.data.MinuteDocument,\r\n          MinuteIssuer: response.data.MinuteIssuer,\r\n          MinuteAgenda: response.data.MinuteAgenda,\r\n        });\r\n        setSubmitted(true);\r\n        console.log(response.data);\r\n        setHoldId(response.data.Result.Id);\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n  useEffect(() => {\r\n    const getCompanyPLCAndShareInformationById = () => {\r\n      setIsLoading(true);\r\n      loanDataService\r\n        .getCompanyPLCAndShareInformation()\r\n        .then((response) => {\r\n          setGetPLCAndShareInformation(response.data.Result);\r\n          setPLCAndShareInformationId(response.data.Result.Id);\r\n        })\r\n        .catch((e) => {\r\n          console.log(e);\r\n        });\r\n      setIsLoading(false);\r\n    };\r\n    getCompanyPLCAndShareInformationById();\r\n  }, []);\r\n  //  const [PLCAndShare, setPLCAndShare] = useState(\r\n  //    initialPLCAndShareState\r\n  //adress\r\n  const initialAdressState = {\r\n    Id: null,\r\n    CountryID: \"\",\r\n    RegionID: \"\",\r\n    ZoneSubCity: \"\",\r\n    Woreda: \"\",\r\n    City: \"\",\r\n    Kebele: \"\",\r\n    HouseNo: \"\",\r\n    BuildingNo: \"\",\r\n    StreetAddress: \"\",\r\n  };\r\n  const [address, setAddress] = useState(initialAdressState);\r\n  //end address\r\n  //start contact information\r\n  const initialContactInfoState = {\r\n    Id: null,\r\n    DesignatedPersonFName: \"\",\r\n    DesignatedPersonMName: \"\",\r\n    DesignatedPersonLName: \"\",\r\n    Position: \"\",\r\n    MobileNo: \"\",\r\n    Telephone: \"\",\r\n    Email: \"\",\r\n  };\r\n  const [contactInfo, setContactInfo] = useState(initialContactInfoState);\r\n  //end address\r\n  //account Info\r\n  const initialAccountInfoState = {\r\n    Id: null,\r\n    AccountNo: \"\",\r\n    CustomerId: \"\",\r\n    Branch: \"\",\r\n    District: \"\",\r\n    Other: \"\",\r\n  };\r\n  const [accountInfo, setAccountInfo] = useState(initialAccountInfoState);\r\n  //tax\r\n  const initialMarriedTaxInfoState = {\r\n    Id: null,\r\n    Name: \"\",\r\n    TinNo: \"\",\r\n    IssueDate: \"\",\r\n    ExpiredDate: \"\",\r\n    TaxDebi: \"\",\r\n    TaxClearanceCertificate: \"\",\r\n  };\r\n  const [marriedTaxInfo, setMarriedTaxInfo] = useState(\r\n    initialMarriedTaxInfoState\r\n  );\r\n  const initialTaxNGOInfoState = {\r\n    Id: null,\r\n    Name: \"\",\r\n    TinNo: \"\",\r\n    IssueDate: \"\",\r\n    ExpiredDate: \"\",\r\n    TaxDebi: \"\",\r\n    TaxClearanceCertificate: \"\",\r\n  };\r\n  const [taxNGOInfo, setTaxNGOInfo] = useState(initialTaxNGOInfoState);\r\n  const initialTaxSoleInfoState = {\r\n    Id: null,\r\n    Name: \"\",\r\n    TinNo: \"\",\r\n    IssueDate: \"\",\r\n    ExpiredDate: \"\",\r\n    TaxDebi: \"\",\r\n    TaxClearanceCertificate: \"\",\r\n  };\r\n  const [taxSoleInfo, setTaxSoleInfo] = useState(initialTaxSoleInfoState);\r\n  const initialTradeInfoState = {\r\n    Id: null,\r\n    TradeRegistrationNo: \"\",\r\n    UploadTradeRegCerti: \"\",\r\n    TradeLicenseNo: \"\",\r\n    IssueDate: \"\",\r\n    RenewedDate: \"\",\r\n    ValidityDate: \"\",\r\n    TradeBusinessTypeID: \"\",\r\n    UploadTradeLicense: \"\",\r\n  };\r\n\r\n  const initialGrauntorSoleInfoState = {\r\n    Id: null,\r\n    Name: \"\",\r\n    GuarantorSpouseId: null,\r\n    GuarantorUnmarriedId: null,\r\n    taxClerance: [\r\n      {\r\n        Id: null,\r\n        Name: \"\",\r\n        TinNo: \"\",\r\n        IssueDate: \"\",\r\n        Expireddate: \"\",\r\n        TaxDebi: \"\",\r\n        TaxClearanceCertificate: \"\",\r\n      },\r\n    ],\r\n  };\r\n  const [grauntorSoleInfo, setGrauntorSoleInfo] = useState(\r\n    initialGrauntorSoleInfoState\r\n  );\r\n  const [taxClerance, setTaxClerance] = useState(\r\n    initialGrauntorSoleInfoState.taxClerance\r\n  );\r\n\r\n  const [tradeInfo, setTradeInfo] = useState(initialTradeInfoState);\r\n  // const [country, setCountry] = useState(\"\");\r\n  const initialSoleAndPartnershipState = {\r\n    Id: null,\r\n    CompanyID: holdId,\r\n    GuarantorId: \"\",\r\n    TaxClearanceID: \"\",\r\n    FirstName: \"\",\r\n    MiddleName: \"\",\r\n    LastName: \"\",\r\n    NationalityID: \"\",\r\n    CountryOfOriginID: \"\",\r\n    CountryOfResidenceID: \"\",\r\n    ProofOfIdentityTypeID: \"\",\r\n    UploadProofOfIdentity: \"\",\r\n    ProofOfIdentityIssuedDate: \"\",\r\n    ProofOfIdentityExpiredDate: \"\",\r\n    MartailStatusID: \"\",\r\n    // UploadTradeLicense: \"\",\r\n  };\r\n\r\n  const [soleAndPartnership, setSoleAndPartnership] = useState(\r\n    initialSoleAndPartnershipState\r\n  );\r\n\r\n  const [city, setCity] = useState(\"\");\r\n  const [email, setEmail] = useState(\"\");\r\n  const [phoneNumber, setPhoneNumber] = useState(\"\");\r\n  const [selectedValue, setSelectedValue] = useState(null);\r\n  //new\r\n  const [country, setContry] = useState([]);\r\n  const [region, setRegion] = useState([]);\r\n\r\n  const [holdUserId, setHoldUserId] = useState([]);\r\n\r\n  const [tradeSector, setTradeSector] = useState([]);\r\n  const [holdTradeSectorId, setHoldTradeSectorId] = useState([]);\r\n  const [tradeIndustryType, setTradeIndustryType] = useState([]);\r\n  const [tradeIndustryTypeId, setTradeIndustryTypeId] = useState([]);\r\n  const [tradeBusinessType, setTradeBusinessType] = useState([]);\r\n  const [maritalStatus, setMaritalStatus] = useState([]);\r\n  const [proofOfIdentityType, setProofOfIdentityType] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [isCompanyModalOpen, setIsCompanyModalOpen] = useState(false);\r\n  const [isCompanyAddressModalOpen, setIsCompanyAddressModalOpen] =\r\n    useState(false);\r\n  //update company information\r\n  const [\r\n    isCompanyDivorcedInformationEditModalOpen,\r\n    setIsCompanyDivorcedInformationEditModalOpen,\r\n  ] = useState(false);\r\n  function handleCompanyDivorcedEditCloseModal() {\r\n    setIsCompanyDivorcedInformationEditModalOpen(false);\r\n  }\r\n  function handleCompanyDivorcedInformationEditOpenModal() {\r\n    setIsCompanyDivorcedInformationEditModalOpen(true);\r\n  }\r\n  function handleCompanyDivorcedInformationEditCloseModal() {\r\n    setIsCompanyDivorcedInformationEditModalOpen(false);\r\n  }\r\n\r\n  const [\r\n    isCompanyMarriedInformationEditModalOpen,\r\n    setIsCompanyMarriedInformationEditModalOpen,\r\n  ] = useState(false);\r\n  function handleCompanyMarriedEditCloseModal() {\r\n    setIsCompanyMarriedInformationEditModalOpen(false);\r\n  }\r\n  function handleCompanyMarriedInformationEditOpenModal() {\r\n    setIsCompanyMarriedInformationEditModalOpen(true);\r\n  }\r\n  function handleCompanyMarriedInformationEditCloseModal() {\r\n    setIsCompanyMarriedInformationEditModalOpen(false);\r\n  }\r\n\r\n  const [\r\n    isCompanyUnmarriedInformationEditModalOpen,\r\n    setIsCompanyUnmarriedInformationEditModalOpen,\r\n  ] = useState(false);\r\n  function handleCompanyUnmarriedEditCloseModal() {\r\n    setIsCompanyUnmarriedInformationEditModalOpen(false);\r\n  }\r\n  function handleCompanyUnmarriedInformationEditOpenModal() {\r\n    setIsCompanyUnmarriedInformationEditModalOpen(true);\r\n  }\r\n  function handleCompanyUnmarriedInformationEditCloseModal() {\r\n    setIsCompanyUnmarriedInformationEditModalOpen(false);\r\n  }\r\n\r\n  const [\r\n    isCompanyWidowedInformationEditModalOpen,\r\n    setIsCompanyWidowedInformationEditModalOpen,\r\n  ] = useState(false);\r\n  function handleCompanyWidowedEditCloseModal() {\r\n    setIsCompanyWidowedInformationEditModalOpen(false);\r\n  }\r\n\r\n  function handleCompanyWidowedInformationEditOpenModal() {\r\n    setIsCompanyWidowedInformationEditModalOpen(true);\r\n  }\r\n  function handleCompanyWidowedInformationEditCloseModal() {\r\n    setIsCompanyWidowedInformationEditModalOpen(false);\r\n  }\r\n\r\n  const [\r\n    isCompanyTaxInformationEditModalOpen,\r\n    setIsCompanyTaxInformationEditModalOpen,\r\n  ] = useState(false);\r\n  function handleCompanyTaxEditCloseModal() {\r\n    setIsCompanyTaxInformationEditModalOpen(false);\r\n  }\r\n  const [\r\n    isCompanySoleAndPartnershipInformationEditModalOpen,\r\n    setIsCompanySoleAndPartnershipInformationEditModalOpen,\r\n  ] = useState(false);\r\n  function handleCompanySoleAndPrtinershipEditCloseModal() {\r\n    setIsCompanySoleAndPartnershipInformationEditModalOpen(false);\r\n  }\r\n  const [\r\n    isCompanyTradeInformationEditModalOpen,\r\n    setIsCompanyTradeInformationEditModalOpen,\r\n  ] = useState(false);\r\n  const [isCompanyAddressEditModalOpen, setIsCompanyAddressEditModalOpen] =\r\n    useState(false);\r\n  const [\r\n    isCompanyAccountInformationEditModalOpen,\r\n    setIsCompanyAccountInformationEditModalOpen,\r\n  ] = useState(false);\r\n  const [\r\n    isCompanyContactInformationEditModalOpen,\r\n    setIsCompanyContactInformationEditModalOpen,\r\n  ] = useState(false);\r\n  const [\r\n    isCompanyEmployeeInformationEditModalOpen,\r\n    setIsCompanyEmployeeInformationEditModalOpen,\r\n  ] = useState(false);\r\n  const [\r\n    isCompanyEmployeeInformationDetialModalOpen,\r\n    setIsCompanyEmployeeInformationDetialModalOpen,\r\n  ] = useState(false);\r\n  const [\r\n    isCompanyEmployeeInformationDetailModalOpen,\r\n    setIsCompanyEmployeeInformationDetailModalOpen,\r\n  ] = useState(false);\r\n\r\n  const [isCompanyEditModalOpen, setIsCompanyEditModalOpen] = useState(false);\r\n  //update company information end\r\n  const [isCompanyContactModalOpen, setIsCompanyContactModalOpen] =\r\n    useState(false);\r\n  const [isCompanyAccountModalOpen, setIsCompanyAccountModalOpen] =\r\n    useState(false);\r\n  const [isCompanyTradeModalOpen, setIsCompanyTradeModalOpen] = useState(false);\r\n  function handleGeneralCloseModal() {\r\n    isCompanyTradeModalOpen(false);\r\n  }\r\n  const [isCompanyTaxModalOpen, setIsCompanyTaxModalOpen] = useState(false);\r\n  const [HandleSoleId, setHandleSoleId] = useState(false);\r\n  function handleGeneralCloseModal() {\r\n    isCompanyTaxModalOpen(false);\r\n  }\r\n\r\n  const [isCompanyGrauntorSoleModalOpen, setIsCompanyGrauntorSoleModalOpen] =\r\n    useState(false);\r\n  function handleGeneralCloseModal() {\r\n    isCompanyGrauntorSoleModalOpen(false);\r\n  }\r\n  const [\r\n    isCompanyMartailStatusWidowedModalOpen,\r\n    setIsCompanyMartailStatusWidowedModalOpen,\r\n  ] = useState(false);\r\n  function handleGeneralCloseModal() {\r\n    isCompanyMartailStatusWidowedModalOpen(false);\r\n  }\r\n  const [\r\n    isCompanyMartailStatusUnmarriedModalOpen,\r\n    setIsCompanyMartailStatusUnmarriedModalOpen,\r\n  ] = useState(false);\r\n  function handleGeneralCloseModal() {\r\n    isCompanyMartailStatusUnmarriedModalOpen(false);\r\n  }\r\n\r\n  const [\r\n    isCompanyMartailStatusDivorcedModalOpen,\r\n    setIsCompanyMartailStatusDivorcedModalOpen,\r\n  ] = useState(false);\r\n  function handleGeneralCloseModal() {\r\n    isCompanyMartailStatusDivorcedModalOpen(false);\r\n  }\r\n  const [isCompanyMartailStatusModalOpen, setIsCompanyMartailStatusModalOpen] =\r\n    useState(false);\r\n  function handleGeneralCloseModal() {\r\n    isCompanyMartailStatusModalOpen(false);\r\n  }\r\n  const [isCompanyTaxSoleModalOpen, setIsCompanyTaxSoleModalOpen] =\r\n    useState(false);\r\n  function handleGeneralCloseModal() {\r\n    isCompanyTaxSoleModalOpen(false);\r\n  }\r\n\r\n  const [isCompanyMarriedTaxModalOpen, setIsCompanyMarriedTaxModalOpen] =\r\n    useState(false);\r\n  function handleGeneralCloseModal() {\r\n    isCompanyMarriedTaxModalOpen(false);\r\n  }\r\n\r\n  const [\r\n    isCompanySoleAndPrtinershipModalOpen,\r\n    setIsCompanySoleAndPrtinershipModalOpen,\r\n  ] = useState(false);\r\n  function handleGeneralCloseModal() {\r\n    isCompanySoleAndPrtinershipModalOpen(false);\r\n  }\r\n  function handleGeneralCloseModal() {\r\n    isCompanyAccountModalOpen(false);\r\n  }\r\n  function handleGeneralCloseModal() {\r\n    setIsCompanyModalOpen(false);\r\n  }\r\n  // company modal start\r\n  function handleGeneralCloseModal() {\r\n    setIsCompanyModalOpen(false);\r\n  }\r\n  function handleGeneralOpenModal() {\r\n    setIsCompanyModalOpen(true);\r\n  }\r\n\r\n  function handleCompanyGrauntorSoleOpenModal() {\r\n    setIsCompanyGrauntorSoleModalOpen(true);\r\n  }\r\n  function handleCompanyGrauntorSoleCloseModal() {\r\n    setIsCompanyGrauntorSoleModalOpen(false);\r\n  }\r\n  function handleCompanyMartailStatusWidowedOpenModal() {\r\n    setIsCompanyMartailStatusWidowedModalOpen(true);\r\n  }\r\n  function handleCompanyMartailStatusWidowedCloseModal() {\r\n    setIsCompanyMartailStatusWidowedModalOpen(false);\r\n  }\r\n\r\n  function handleCompanyMartailStatusUnmarriedOpenModal() {\r\n    setIsCompanyMartailStatusUnmarriedModalOpen(true);\r\n  }\r\n  function handleCompanyMartailStatusUnmarriedCloseModal() {\r\n    setIsCompanyMartailStatusUnmarriedModalOpen(false);\r\n  }\r\n\r\n  function handleCompanyMartailStatusDivorcedOpenModal() {\r\n    setIsCompanyMartailStatusDivorcedModalOpen(true);\r\n  }\r\n  function handleCompanyMartailStatusDivorcedCloseModal() {\r\n    setIsCompanyMartailStatusDivorcedModalOpen(false);\r\n  }\r\n  function handleCompanyMartailStatusOpenModal() {\r\n    setIsCompanyMartailStatusModalOpen(true);\r\n  }\r\n  function handleCompanyMartailStatusCloseModal() {\r\n    setIsCompanyMartailStatusModalOpen(false);\r\n  }\r\n\r\n  function handleCompanyMarriedTaxOpenModal() {\r\n    setIsCompanyMarriedTaxModalOpen(true);\r\n  }\r\n  function handleCompanyMarriedTaxCloseModal() {\r\n    setIsCompanyMarriedTaxModalOpen(false);\r\n  }\r\n  function handleCompanyTaxSoleOpenModal() {\r\n    setIsCompanyTaxSoleModalOpen(true);\r\n  }\r\n  function handleCompanyTaxSoleCloseModal() {\r\n    setIsCompanyTaxSoleModalOpen(false);\r\n  }\r\n  function handleCompanySoleAndPrtinershipOpenModal() {\r\n    setIsCompanySoleAndPrtinershipModalOpen(true);\r\n  }\r\n  function handleCompanySoleAndPrtinershipCloseModal() {\r\n    setIsCompanySoleAndPrtinershipModalOpen(false);\r\n  }\r\n  function handleCompanyTradeOpenModal() {\r\n    setIsCompanyTradeModalOpen(true);\r\n  }\r\n  function handleCompanyTradeCloseModal() {\r\n    setIsCompanyTradeModalOpen(false);\r\n  }\r\n  function handleCompanyTaxOpenModal() {\r\n    setIsCompanyTaxModalOpen(true);\r\n  }\r\n  function handleCompanyTaxCloseModal() {\r\n    setIsCompanyTaxModalOpen(false);\r\n  }\r\n  function handleCompanyAccountOpenModal() {\r\n    setIsCompanyAccountModalOpen(true);\r\n  }\r\n  function handleCompanyAccountCloseModal() {\r\n    setIsCompanyAccountModalOpen(false);\r\n  }\r\n  function handleCompanyAddressCloseModal() {\r\n    setIsCompanyAddressModalOpen(false);\r\n  }\r\n\r\n  function handleCompanyAddressOpenModal() {\r\n    setIsCompanyAddressModalOpen(true);\r\n  }\r\n  function handleCompanyTaxInformationEditOpenModal() {\r\n    setIsCompanyTaxInformationEditModalOpen(true);\r\n  }\r\n  function handleCompanyTaxInformationEditCloseModal() {\r\n    setIsCompanyTaxInformationEditModalOpen(false);\r\n  }\r\n  //update company information\r\n\r\n  function handleCompanySoleAndPartnershipInformationEditOpenModal() {\r\n    setIsCompanySoleAndPartnershipInformationEditModalOpen(true);\r\n  }\r\n  function handleCompanySoleAndPartnershipInformationEditCloseModal() {\r\n    setIsCompanySoleAndPartnershipInformationEditModalOpen(false);\r\n  }\r\n  function handleCompanyTradeInformationEditOpenModal() {\r\n    setIsCompanyTradeInformationEditModalOpen(true);\r\n  }\r\n  function handleCompanyTradeInformationEditCloseModal() {\r\n    setIsCompanyTradeInformationEditModalOpen(false);\r\n  }\r\n  function handleCompanyAccountInformationEditOpenModal() {\r\n    setIsCompanyAccountInformationEditModalOpen(true);\r\n  }\r\n  function handleCompanyAccountInformationEditCloseModal() {\r\n    setIsCompanyAccountInformationEditModalOpen(false);\r\n  }\r\n  function handleCompanyContactInformationEditOpenModal() {\r\n    setIsCompanyContactInformationEditModalOpen(true);\r\n  }\r\n  function handleCompanyContactInformationEditCloseModal() {\r\n    setIsCompanyContactInformationEditModalOpen(false);\r\n  }\r\n  function handleCompanyEmployeeInformationdetailOpenModal() {\r\n    setIsCompanyEmployeeInformationDetailModalOpen(true);\r\n  }\r\n  function handleCompanyEmployeeInformationDetailCloseModal() {\r\n    setIsCompanyEmployeeInformationDetailModalOpen(false);\r\n  }\r\n  function handleCompanyEmployeeInformationEditOpenModal() {\r\n    setIsCompanyEmployeeInformationEditModalOpen(true);\r\n  }\r\n  function handleCompanyEmployeeInformationEditCloseModal() {\r\n    setIsCompanyEmployeeInformationEditModalOpen(false);\r\n  }\r\n\r\n  function handleCompanyAddressEditOpenModal() {\r\n    setIsCompanyAddressEditModalOpen(true);\r\n  }\r\n  function handleCompanyAddressEditCloseModal() {\r\n    setIsCompanyAddressEditModalOpen(false);\r\n  }\r\n  function handleCompanyEditOpenModal() {\r\n    // this.setCompanyId(compId); //test\r\n    setIsCompanyEditModalOpen(true);\r\n  }\r\n  function handleCompanyEditCloseModal() {\r\n    setIsCompanyEditModalOpen(false);\r\n  }\r\n  //end update company information\r\n\r\n  function handleCompanyContactCloseModal() {\r\n    setIsCompanyContactModalOpen(false);\r\n  }\r\n\r\n  function handleCompanyContactOpenModal() {\r\n    setIsCompanyContactModalOpen(true);\r\n  }\r\n  // company modal end\r\n  function handleGeneralOpenModal() {\r\n    setIsCompanyModalOpen(true);\r\n  }\r\n  const handleInputChange = (event) => {\r\n    const { name, value } = event.target;\r\n    setCompany({ ...company, [name]: value });\r\n  };\r\n\r\n  //\r\n  const saveCompany = () => {\r\n    var data = {\r\n      Name: company.Name,\r\n      NoOfBranch: company.NoOfBranch,\r\n      EstablishmentYear: company.EstablishmentYear,\r\n      TINNumber: company.TINNumber,\r\n      TINCertificate: company.TINCertificate,\r\n      CompanyTypeID: company.CompanyTypeID,\r\n      EntityTypeID: company.EntityTypeID,\r\n      VATNumber: company.VATNumber,\r\n      VATCertificate: company.VATCertificate,\r\n    };\r\n    loanDataService\r\n      .addCompany(data, holdUserId)\r\n      .then((response) => {\r\n        setCompany({\r\n          Id: response.data.Id,\r\n          Name: response.data.Name,\r\n          NoOfBranch: response.data.NoOfBranch,\r\n          EstablishmentYear: response.data.EstablishmentYear,\r\n          TINNumber: response.data.TINNumber,\r\n          TINCertificate: response.data.TINCertificate,\r\n          CompanyTypeID: response.data.CompanyTypeID,\r\n          EntityTypeID: response.data.EntityTypeID,\r\n          VATNumber: response.data.VATNumber,\r\n          VATCertificate: response.data.VATCertificate,\r\n        });\r\n        setSubmitted(true);\r\n        console.log(response.data);\r\n        setHoldId(response.data.Result.Id);\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n  //contact Info\r\n  const handleInputChangeContactInfo = (event) => {\r\n    const { name, value } = event.target;\r\n    setContactInfo({ ...contactInfo, [name]: value });\r\n  };\r\n  const saveContactInfo = () => {\r\n    var data = {\r\n      DesignatedPersonFName: contactInfo.DesignatedPersonFName,\r\n      DesignatedPersonMName: contactInfo.DesignatedPersonMName,\r\n      DesignatedPersonLName: contactInfo.DesignatedPersonLName,\r\n      Position: contactInfo.Position,\r\n      MobileNo: contactInfo.MobileNo,\r\n      Telephone: contactInfo.Telephone,\r\n      Email: contactInfo.Email,\r\n    };\r\n    loanDataService\r\n      .addContactInfo(data, holdId)\r\n      .then((response) => {\r\n        setContactInfo({\r\n          Id: response.data.Id,\r\n          DesignatedPersonFName: response.data.DesignatedPersonFName,\r\n          DesignatedPersonMName: response.data.DesignatedPersonMName,\r\n          DesignatedPersonLName: response.data.DesignatedPersonLName,\r\n          Position: response.data.Position,\r\n          MobileNo: response.data.MobileNo,\r\n          Telephone: response.data.Telephone,\r\n          Email: response.data.Email,\r\n        });\r\n        setSubmitted(true);\r\n        console.log(response.data);\r\n        // setHoldId(response.data.Result.Id);\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n  const newContactInfo = () => {\r\n    setContactInfo(initialContactInfoState);\r\n    setSubmitted(false);\r\n  };\r\n  //end contact info\r\n  //account Info\r\n  const handleInputChangeAccountInfo = (event) => {\r\n    const { name, value } = event.target;\r\n    setAccountInfo({ ...accountInfo, [name]: value });\r\n  };\r\n  const saveAccountInfo = () => {\r\n    var data = {\r\n      AccountNo: accountInfo.AccountNo,\r\n      CustomerId: accountInfo.CustomerId,\r\n      Branch: accountInfo.Branch,\r\n      District: accountInfo.District,\r\n      Other: accountInfo.Other,\r\n    };\r\n    loanDataService\r\n      .addAccountInfo(data, holdId)\r\n      .then((response) => {\r\n        setAccountInfo({\r\n          Id: response.data.Id,\r\n          AccountNo: response.data.AccountNo,\r\n          CustomerId: response.data.CustomerId,\r\n          Branch: response.data.Branch,\r\n          District: response.data.District,\r\n          Other: response.data.Other,\r\n        });\r\n        setSubmitted(true);\r\n        console.log(response.data);\r\n        // setHoldId(response.data.Result.Id);\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n  const newAccountInfo = () => {\r\n    setAccountInfo(initialAccountInfoState);\r\n    setSubmitted(false);\r\n  };\r\n  //end Account Info\r\n  //grauntor\r\n  const handleInputChangeGrauntorSoleInfo = (event) => {\r\n    const { name, value } = event.target;\r\n    setGrauntorSoleInfo({ ...grauntorSoleInfo, [name]: value });\r\n  };\r\n\r\n  // const handleInputChangeTaxClearance = (event) => {\r\n  //   const { name, value } = event.target;\r\n  //   setTaxClerance({ ...grauntorSoleInfo[taxClerance], [name]: value });\r\n  // };\r\n  const handleInputChangeTaxClearance = (event) => {\r\n    const { name, value } = event.target;\r\n    setGrauntorSoleInfo({\r\n      ...grauntorSoleInfo,\r\n      taxClerance: {\r\n        ...grauntorSoleInfo.taxClerance,\r\n        [name]: value,\r\n      },\r\n    });\r\n  };\r\n\r\n  const saveGrauntorSoleInfo = () => {\r\n    var data = {\r\n      Name: grauntorSoleInfo.Name,\r\n      GuarantorSpouseId: grauntorSoleInfo.GuarantorSpouseId,\r\n      GuarantorUnmarriedId: grauntorSoleInfo.GuarantorUnmarriedId,\r\n      taxClerance: {\r\n        Name: taxClerance.Name,\r\n        TinNo: taxClerance.TinNo,\r\n        IssueDate: taxClerance.IssueDate,\r\n        Expireddate: taxClerance.Expireddate,\r\n        TaxDebi: taxClerance.TaxDebi,\r\n        TaxClearanceCertificate: taxClerance.TaxClearanceCertificate,\r\n      },\r\n    };\r\n    loanDataService\r\n      .addGrauntorSoleInfo(data, HandleSoleId)\r\n      .then((response) => {\r\n        setGrauntorSoleInfo({\r\n          Id: response.data.Id,\r\n          Name: response.data.Name,\r\n          GuarantorSpouseId: response.data.GuarantorSpouseId,\r\n          GuarantorUnmarriedId: response.data.GuarantorUnmarriedId,\r\n          taxClerance: {\r\n            Id: response.data.Id,\r\n            Name: response.data.Name,\r\n            TinNo: response.data.TinNo,\r\n            IssueDate: response.data.IssueDate,\r\n            Expireddate: response.data.Expireddate,\r\n            TaxDebi: response.data.TaxDebi,\r\n            TaxClearanceCertificate: response.data.TaxClearanceCertificate,\r\n          },\r\n        });\r\n        setSubmitted(true);\r\n        console.log(response.data);\r\n        // setHoldId(response.data.Result.Id);\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n\r\n  //end grauntor\r\n  // tax info\r\n  //married Tax\r\n  const handleInputChangeMarriedTaxInfo = (event) => {\r\n    const { name, value } = event.target;\r\n    setMarriedTaxInfo({ ...marriedTaxInfo, [name]: value });\r\n  };\r\n  const saveMarriedTaxInfo = () => {\r\n    var data = {\r\n      Name: marriedTaxInfo.Name,\r\n      TinNo: marriedTaxInfo.TinNo,\r\n      IssueDate: marriedTaxInfo.IssueDate,\r\n      ExpiredDate: marriedTaxInfo.ExpiredDate,\r\n      TaxDebi: marriedTaxInfo.TaxDebi,\r\n      TaxClearanceCertificate: marriedTaxInfo.TaxClearanceCertificate,\r\n    };\r\n    loanDataService\r\n      .addMarriedTaxInfo(data, HandleSoleId)\r\n      .then((response) => {\r\n        setMarriedTaxInfo({\r\n          Id: response.data.Id,\r\n          Name: response.data.Name,\r\n          TinNo: response.data.TinNo,\r\n          IssueDate: response.data.IssueDate,\r\n          ExpiredDate: response.data.ExpiredDate,\r\n          TaxDebi: response.data.TaxDebi,\r\n          TaxClearanceCertificate: response.data.TaxClearanceCertificate,\r\n        });\r\n        setSubmitted(true);\r\n        console.log(response.data);\r\n        // setHoldId(response.data.Result.Id);\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n\r\n  const newMarriedTaxInfo = () => {\r\n    setMarriedTaxInfo(initialMarriedTaxInfoState);\r\n    setSubmitted(false);\r\n  };\r\n\r\n  //married tax end\r\n  const handleInputChangeTaxNGOInfo = (event) => {\r\n    const { name, value } = event.target;\r\n    setTaxNGOInfo({ ...taxNGOInfo, [name]: value });\r\n  };\r\n  const saveTaxNGOInfo = () => {\r\n    var data = {\r\n      Name: taxNGOInfo.Name,\r\n      TinNo: taxNGOInfo.TinNo,\r\n      IssueDate: taxNGOInfo.IssueDate,\r\n      ExpiredDate: taxNGOInfo.ExpiredDate,\r\n      TaxDebi: taxNGOInfo.TaxDebi,\r\n      TaxClearanceCertificate: taxNGOInfo.TaxClearanceCertificate,\r\n    };\r\n    loanDataService\r\n      .addTaxNGOInfo(data, HandleSoleId)\r\n      .then((response) => {\r\n        setTaxNGOInfo({\r\n          Id: response.data.Id,\r\n          Name: response.data.Name,\r\n          TinNo: response.data.TinNo,\r\n          IssueDate: response.data.IssueDate,\r\n          ExpiredDate: response.data.ExpiredDate,\r\n          TaxDebi: response.data.TaxDebi,\r\n          TaxClearanceCertificate: response.data.TaxClearanceCertificate,\r\n        });\r\n        setSubmitted(true);\r\n        console.log(response.data);\r\n        // setHoldId(response.data.Result.Id);\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n\r\n  const newTaxNGOInfo = () => {\r\n    setTaxNGOInfo(initialTaxNGOInfoState);\r\n    setSubmitted(false);\r\n  };\r\n  const handleInputChangeTaxSoleInfo = (event) => {\r\n    const { name, value } = event.target;\r\n    setTaxSoleInfo({ ...taxSoleInfo, [name]: value });\r\n  };\r\n  const saveTaxSoleInfo = () => {\r\n    var data = {\r\n      Name: taxSoleInfo.Name,\r\n      TinNo: taxSoleInfo.TinNo,\r\n      IssueDate: taxSoleInfo.IssueDate,\r\n      ExpiredDate: taxSoleInfo.ExpiredDate,\r\n      TaxDebi: taxSoleInfo.TaxDebi,\r\n      TaxClearanceCertificate: taxSoleInfo.TaxClearanceCertificate,\r\n    };\r\n    loanDataService\r\n      .addTaxSoleInfo(data, HandleSoleId)\r\n      .then((response) => {\r\n        setTaxSoleInfo({\r\n          Id: response.data.Id,\r\n          Name: response.data.Name,\r\n          TinNo: response.data.TinNo,\r\n          IssueDate: response.data.IssueDate,\r\n          ExpiredDate: response.data.ExpiredDate,\r\n          TaxDebi: response.data.TaxDebi,\r\n          TaxClearanceCertificate: response.data.TaxClearanceCertificate,\r\n        });\r\n        setSubmitted(true);\r\n        console.log(response.data);\r\n        // setHoldId(response.data.Result.Id);\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n\r\n  const newTaxSoleInfo = () => {\r\n    setTaxSoleInfo(initialTaxSoleInfoState);\r\n    setSubmitted(false);\r\n  };\r\n\r\n  const newGrauntorSoleInfo = () => {\r\n    setGrauntorSoleInfo(initialGrauntorSoleInfoState);\r\n    setSubmitted(false);\r\n  };\r\n  //end tax\r\n  //trade Info\r\n  const handleInputChangeTradeInfo = (event) => {\r\n    const { name, value } = event.target;\r\n    setTradeInfo({ ...tradeInfo, [name]: value });\r\n  };\r\n  const saveTradeInfo = () => {\r\n    var data = {\r\n      TradeRegistrationNo: tradeInfo.TradeRegistrationNo,\r\n      UploadTradeRegCerti: selectedPathTRN,\r\n      TradeLicenseNo: tradeInfo.TradeLicenseNo,\r\n      IssueDate: tradeInfo.IssueDate,\r\n      RenewedDate: tradeInfo.RenewedDate,\r\n      ValidityDate: tradeInfo.ValidityDate,\r\n      TradeBusinessTypeID: tradeInfo.TradeBusinessTypeID,\r\n      UploadTradeLicense: selectedPathLin,\r\n    };\r\n    loanDataService\r\n      .addATradeInfo(data, holdId)\r\n      .then((response) => {\r\n        setTradeInfo({\r\n          Id: response.data.Id,\r\n          TradeRegistrationNo: response.data.TradeRegistrationNo,\r\n          UploadTradeRegCerti: response.data.UploadTradeRegCerti,\r\n          TradeLicenseNo: response.data.TradeLicenseNo,\r\n          IssueDate: response.data.IssueDate,\r\n          RenewedDate: response.data.RenewedDate,\r\n          ValidityDate: response.data.ValidityDate,\r\n          TradeBusinessTypeID: response.data.TradeBusinessTypeID,\r\n          UploadTradeLicense: response.data.UploadTradeLicense,\r\n        });\r\n        setSubmitted(true);\r\n        console.log(response.data);\r\n        // setHoldId(response.data.Result.Id);\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n  const newTradeInfo = () => {\r\n    setTradeInfo(initialTradeInfoState);\r\n    setSubmitted(false);\r\n  };\r\n  //end tradeInfo\r\n  //sole and partnership\r\n  const handleInputChangeSoleAndPartnership = (event) => {\r\n    const { name, value } = event.target;\r\n    setSoleAndPartnership({ ...soleAndPartnership, [name]: value });\r\n  };\r\n  const saveSoleAndPartnership = () => {\r\n    var data = {\r\n      TaxClearanceID: null,\r\n      CompanyID: soleAndPartnership.CompanyID,\r\n      GuarantorId: null,\r\n      FirstName: soleAndPartnership.FirstName,\r\n      MiddleName: soleAndPartnership.MiddleName,\r\n      LastName: soleAndPartnership.LastName,\r\n      NationalityID: soleAndPartnership.NationalityID,\r\n      CountryOfOriginID: soleAndPartnership.CountryOfOriginID,\r\n      CountryOfResidenceID: soleAndPartnership.CountryOfResidenceID,\r\n      ProofOfIdentityTypeID: soleAndPartnership.ProofOfIdentityTypeID,\r\n      UploadProofOfIdentity: soleAndPartnership.UploadProofOfIdentity,\r\n      ProofOfIdentityIssuedDate: soleAndPartnership.ProofOfIdentityIssuedDate,\r\n      ProofOfIdentityExpiredDate: soleAndPartnership.ProofOfIdentityExpiredDate,\r\n      MartailStatusID: soleAndPartnership.MartailStatusID,\r\n    };\r\n    loanDataService\r\n      .addSoleAndPartnership(data, holdId)\r\n      .then((response) => {\r\n        setSoleAndPartnership({\r\n          Id: response.data.Id,\r\n          TaxClearanceID: response.data.TaxClearanceID,\r\n          CompanyID: holdId,\r\n          GuarantorId: response.data.GuarantorId,\r\n          FirstName: response.data.FirstName,\r\n          MiddleName: response.data.MiddleName,\r\n          LastName: response.data.LastName,\r\n          NationalityID: response.data.NationalityID,\r\n          CountryOfOriginID: response.data.CountryOfOriginID,\r\n          CountryOfResidenceID: response.data.CountryOfResidenceID,\r\n          ProofOfIdentityTypeID: response.data.ProofOfIdentityTypeID,\r\n          UploadProofOfIdentity: response.data.UploadProofOfIdentity,\r\n          ProofOfIdentityIssuedDate: response.data.ProofOfIdentityIssuedDate,\r\n          ProofOfIdentityExpiredDate: response.data.ProofOfIdentityExpiredDate,\r\n          MartailStatusID: response.data.MartailStatusID,\r\n        });\r\n        setSubmitted(true);\r\n        setMartailStatus(response.data.Message);\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n  const newSoleAndPartnership = () => {\r\n    setSoleAndPartnership(initialSoleAndPartnershipState);\r\n    setSubmitted(false);\r\n  };\r\n  //end sole and partnership\r\n\r\n  //adress\r\n  const handleInputChangeAdress = (event) => {\r\n    const { name, value } = event.target;\r\n    setAddress({ ...address, [name]: value });\r\n  };\r\n  const saveAddress = () => {\r\n    var data = {\r\n      CountryID: address.CountryID,\r\n      RegionID: address.RegionID,\r\n      ZoneSubCity: address.ZoneSubCity,\r\n      Woreda: address.Woreda,\r\n      City: address.City,\r\n      Kebele: address.Kebele,\r\n      HouseNo: address.HouseNo,\r\n      BuildingNo: address.BuildingNo,\r\n      StreetAddress: address.StreetAddress,\r\n    };\r\n    loanDataService\r\n      .addAdress(data, holdId)\r\n      .then((response) => {\r\n        setAddress({\r\n          Id: response.data.Id,\r\n          CountryID: response.data.CountryID,\r\n          RegionID: response.data.RegionID,\r\n          ZoneSubCity: response.data.ZoneSubCity,\r\n          Woreda: response.data.Woreda,\r\n          City: response.data.City,\r\n          Kebele: response.data.Kebele,\r\n          HouseNo: response.data.HouseNo,\r\n          BuildingNo: response.data.BuildingNo,\r\n          StreetAddress: response.data.StreetAddress,\r\n        });\r\n        setSubmitted(true);\r\n        console.log(response.data);\r\n        // setHoldId(response.data.Result.Id);\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n  const newAddress = () => {\r\n    setAddress(initialAdressState);\r\n    setSubmitted(false);\r\n  };\r\n  //end adress\r\n  const newCompany = () => {\r\n    setCompany(initialCompanyState);\r\n    setSubmitted(false);\r\n  };\r\n  const handleChange = (value) => {\r\n    setSelectedValue(value);\r\n  };\r\n  const fetchCompanyEntity = () => {\r\n    loanDataService\r\n      .getEntitype()\r\n      .then((response) => {\r\n        // console.log(response.data.Result);\r\n        setEntityTypes(response.data.Result);\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n  useEffect(() => {\r\n    fetchCompanyEntity();\r\n  }, []);\r\n  //view\r\n  const getCompanies = () => {\r\n    loanDataService\r\n      .companies()\r\n      .then((response) => {\r\n        // console.log(\"test one\" + response.data.Result);\r\n        setCompanies(response.data.Result);\r\n        debugger;\r\n        setCompanyId(response.data.Result.map((c) => c.Id));\r\n        localStorage.setItem(\r\n          \"companyIdTemp\",\r\n          response.data.Result.map((c) => c.Id)\r\n        );\r\n        debugger;\r\n        // setHoldId(response.data.Result.map((c) => c.Id));\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n  useEffect(() => {\r\n    getCompanies();\r\n  }, []);\r\n  const fetchCompanies = () => {\r\n    loanDataService\r\n      .getCompanyType()\r\n      .then((response) => {\r\n        // console.log(response.data.Result);\r\n        setCompanyTypes(response.data.Result);\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n  useEffect(() => {\r\n    fetchCompanies();\r\n  }, []);\r\n  const fetchContry = () => {\r\n    loanDataService\r\n      .getCountry()\r\n      .then((response) => {\r\n        // console.log(response.data.Result);\r\n        setContry(response.data.Result);\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n  useEffect(() => {\r\n    fetchContry();\r\n  }, []);\r\n  const fetchRegion = () => {\r\n    loanDataService\r\n      .getRegion()\r\n      .then((response) => {\r\n        // console.log(response.data.Result);\r\n        setRegion(response.data.Result);\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n  useEffect(() => {\r\n    fetchRegion();\r\n  }, []);\r\n  useEffect(() => {\r\n    const getTradeSector = () => {\r\n      setIsLoading(true);\r\n      loanDataService\r\n        .getTradeSectorId()\r\n        .then((response) => {\r\n          setTradeSector(response.data.Result);\r\n        })\r\n        .catch((e) => {\r\n          console.log(e);\r\n        });\r\n      setIsLoading(false);\r\n    };\r\n    getTradeSector();\r\n  }, []);\r\n  const fireOnChangeMartialStatus = (Name) => {\r\n    console.log(\"  setHoldTradeSectorId: \" + Name);\r\n    // getTradeIndustryType;\r\n    console.log(\"Onchange is fired\");\r\n  };\r\n  const handleTradeIndustryType = (holdTradeSectorId) => {\r\n    setIsLoading(true);\r\n    loanDataService\r\n      .getTradeIndustryType(holdTradeSectorId)\r\n      .then((response) => {\r\n        // console.log(response.data.Result);\r\n        setTradeIndustryType(response.data.Result);\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n    setIsLoading(false);\r\n  };\r\n  useEffect(() => {\r\n    handleTradeIndustryType();\r\n  }, []);\r\n  const handleTradeBusinessType = (tradeIndustryTypeId) => {\r\n    setIsLoading(true);\r\n    loanDataService\r\n      .getTradeBusinessTypeId(tradeIndustryTypeId)\r\n      .then((response) => {\r\n        // console.log(response.data.Result);\r\n        setTradeBusinessType(response.data.Result);\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n    setIsLoading(false);\r\n  };\r\n  useEffect(() => {\r\n    handleTradeBusinessType();\r\n  }, []);\r\n  const fetchMaritalStatus = () => {\r\n    loanDataService\r\n      .getMaritalStatus()\r\n      .then((response) => {\r\n        // console.log(response.data.Result);\r\n        setMaritalStatus(response.data.Result);\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n  useEffect(() => {\r\n    fetchMaritalStatus();\r\n  }, []);\r\n  const handleNext = () => {\r\n    if (activeStep < 3) setActiveStep((prevActiveStep) => prevActiveStep + 1);\r\n  };\r\n  const handleBack = () => {\r\n    if (activeStep !== 0) setActiveStep((prevActiveStep) => prevActiveStep - 1);\r\n  };\r\n  const handleSkip = () => {\r\n    setActiveStep((prevActiveStep) => prevActiveStep + 1);\r\n    setHoldId(localStorage.getItem(\"companyIdTemp\"));\r\n  };\r\n  const handleSubmit = () => {\r\n    setActiveStep((prevActiveStep) => prevActiveStep + 1);\r\n  };\r\n  const handleSelection = (navigate) => {\r\n    setLeftNav(navigate);\r\n  };\r\n\r\n  const deleteCompanyUsingId = () => {\r\n    loanDataService\r\n      .deleteCompanyById(company.Id)\r\n      .then((response) => {\r\n        // console.log(response.data);\r\n        navigate(\"/company\");\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n  useEffect(() => {\r\n    const getCompanyAddressById = () => {\r\n      setIsLoading(true);\r\n      loanDataService\r\n        .getCompanyAddress()\r\n        .then((response) => {\r\n          setGetAddress(response.data.Result);\r\n\r\n          setAddressId(response.data.Result.Id);\r\n        })\r\n        .catch((e) => {\r\n          console.log(e);\r\n        });\r\n      setIsLoading(false);\r\n    };\r\n    getCompanyAddressById();\r\n  }, []);\r\n\r\n  // setGetContactInformation\r\n  useEffect(() => {\r\n    const getCompanyContactInformationById = () => {\r\n      setIsLoading(true);\r\n      loanDataService\r\n        .getCompanyContactInformation()\r\n        .then((response) => {\r\n          setGetContactInformation(response.data.Result);\r\n          setContactInformationId(response.data.Result.Id);\r\n          // console.log(\"Tiztaw\");\r\n          // console.log(response.data.Result.Id);\r\n        })\r\n        .catch((e) => {\r\n          console.log(e);\r\n        });\r\n      setIsLoading(false);\r\n    };\r\n    getCompanyContactInformationById();\r\n  }, []);\r\n  //   const handleId =(companyId) =>{\r\n  // return companyId;\r\n  //   }\r\n  useEffect(() => {\r\n    const getCompanyAccountInformationById = () => {\r\n      setIsLoading(true);\r\n      loanDataService\r\n        .getCompanyAccountInformation()\r\n        .then((response) => {\r\n          setGetAccountInformation(response.data.Result);\r\n          setAccountInformationId(response.data.Result.Id);\r\n        })\r\n        .catch((e) => {\r\n          console.log(e);\r\n        });\r\n      setIsLoading(false);\r\n    };\r\n    getCompanyAccountInformationById();\r\n  }, []);\r\n  useEffect(() => {\r\n    const getCompanyTradeInformationById = () => {\r\n      setIsLoading(true);\r\n      loanDataService\r\n        .getCompanyTradeInformation(holdId)\r\n        .then((response) => {\r\n          setGetTradeInformation(response.data.Result);\r\n          console.log(response.data.Result);\r\n          setTradeInformationId(response.data.Result.Id);\r\n        })\r\n        .catch((e) => {\r\n          console.log(e);\r\n        });\r\n      setIsLoading(false);\r\n    };\r\n    getCompanyTradeInformationById();\r\n  }, []);\r\n  useEffect(() => {\r\n    const getCompanySoleAndPartinershipInformationById = () => {\r\n      setIsLoading(true);\r\n      loanDataService\r\n        .getCompanySoleAndPartinershipInformation(holdId)\r\n        .then((response) => {\r\n          setGetSoleAndPartinershipInformation(response.data.Result);\r\n          //\r\n          console.log(response.data.Result);\r\n          console.log(\"response.data.Result\");\r\n          // setSoleAndPartinershipInformationId(response.data.Result.Id);\r\n        })\r\n        .catch((e) => {\r\n          console.log(e);\r\n        });\r\n      setIsLoading(false);\r\n    };\r\n    getCompanySoleAndPartinershipInformationById();\r\n  }, []);\r\n\r\n  const fetchProofOfIdentityType = () => {\r\n    loanDataService\r\n      .getProofOfIdentityTypes()\r\n      .then((response) => {\r\n        // console.log(response.data.Result);\r\n        setProofOfIdentityType(response.data.Result);\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n  useEffect(() => {\r\n    fetchProofOfIdentityType();\r\n  }, []);\r\n\r\n  const fetchSoleTax = (Id) => {\r\n    setIsLoading(true);\r\n    loanDataService\r\n      .getSoleTax1(Id)\r\n      .then((response) => {\r\n        setGetSoleTax(response.data.Result);\r\n        // setTaxInformationId(response.data.Result.Id);\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n    // window.location.reload(false);\r\n  };\r\n  useEffect(() => {\r\n    fetchSoleTax();\r\n  }, []);\r\n\r\n  const fetchMartialStatus = (martailStatus) => {\r\n    setIsLoading(true);\r\n    if (martailStatus == \"Married\") {\r\n      console.log(martailStatus);\r\n      handleCompanyMartailStatusOpenModal();\r\n    } else if (martailStatus == \"unMarried\") {\r\n      handleCompanyMartailStatusUnmarriedOpenModal();\r\n      console.log(martailStatus);\r\n    } else if (martailStatus == \"widowed\") {\r\n      handleCompanyMartailStatusWidowedOpenModal();\r\n      console.log(martailStatus);\r\n    } else if (martailStatus == \"divorced\") {\r\n      handleCompanyMartailStatusDivorcedOpenModal();\r\n      console.log(martailStatus);\r\n    } else {\r\n      console.log(\"please select martial status\");\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    fetchMartialStatus();\r\n  }, []);\r\n  const fetchSoleGrauntor = (Id) => {\r\n    setIsLoading(true);\r\n    loanDataService\r\n      .getSoleGrauntor1(Id)\r\n      .then((response) => {\r\n        setGetSoleGrauntor(response.data.Result);\r\n        setGrauntorInformationId(response.data.Result.Id);\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n  useEffect(() => {\r\n    fetchSoleGrauntor();\r\n  }, []);\r\n  const Menus = [\r\n    { title: \"Company\", icon: <RiDashboardFill />, link: \"company/:1/:1\" },\r\n    { title: \"Stepper \", icon: <FcOrganization />, link: \"company/:1/:2\" },\r\n    {\r\n      title: \"Loan Status\",\r\n      icon: <GiProgression />,\r\n      spacing: true,\r\n      link: \"company/:1/:3\",\r\n    },\r\n    {\r\n      title: \"projects\",\r\n      icon: <GrProjects />,\r\n      submenu: true,\r\n      submenuItems: [\r\n        { title: \"submenu 1\" },\r\n        { title: \"submenu 2\" },\r\n        { title: \"submenu 3\" },\r\n      ],\r\n    },\r\n  ];\r\n  return (\r\n    <div className=\"flex\">\r\n      <div\r\n        className={`bg-purple-500 h-screen p-5 pt-8 ${\r\n          open ? \"w-72\" : \"w-20\"\r\n        } duration-300 relative   `}\r\n      >\r\n        <BsArrowLeftShort\r\n          className={`bg-white text-dark-purple text-3xl rounded-full\r\n          absolute -right-3 top-9 border border-dark-purpule cursor-pointer ${\r\n            !open && \"rotate-180 \"\r\n          }`}\r\n          onClick={() => setOpen(!open)}\r\n        />\r\n        <div className=\"inline-flex\">\r\n          <img\r\n            src={cbeLogo}\r\n            height=\"40px\"\r\n            width=\"40px\"\r\n            className={`bg-amber-300 text-4xl rounded cursor-pointer block float-left mr-2 duration-500 ${\r\n              open && \"rotate-[360deg]\"\r\n            }`}\r\n          />\r\n          <h1\r\n            className={`text-white origin-left font-medium text-2xl duration-300 ${\r\n              !open && \"scale-0\"\r\n            }`}\r\n          >\r\n            Customer page\r\n          </h1>\r\n        </div>\r\n        <ui className=\" \">\r\n          {Menus.map((menu, index) => (\r\n            <>\r\n              <li\r\n                key={index}\r\n                className={`text-gray-300 text-sm flex items-center gap-4 cursor-pointer p-2 hover:bg-white\r\n                   tooltip  dark:bg-gray-700 rounded-md  ${\r\n                     menu.spacing ? \"mt-9\" : \"mt-2\"\r\n                   }`}\r\n              >\r\n                {open && (\r\n                  <span className=\"text-2xl block float-left\">{menu.icon}</span>\r\n                )}\r\n\r\n                {!open && (\r\n                  <span\r\n                    className=\"text-2xl block float-left mb-4\"\r\n                    data-toggle=\"tooltip\"\r\n                    title={`${menu.title}`}\r\n                  >\r\n                    <Tooltips text={`${menu.title}`}>{menu.icon}</Tooltips>\r\n                  </span>\r\n                )}\r\n                <span\r\n                  className={`text-base font-medium flex-1 duration-200  ${\r\n                    !open && \"hidden\"\r\n                  }`}\r\n                >\r\n                  <button></button>\r\n                  <button onClick={() => handleSelection(menu.link)}>\r\n                    {menu.title}\r\n                  </button>\r\n                </span>\r\n                {menu.submenu && open && (\r\n                  <BsChevronDown\r\n                    className={`${subMenuOpen && \"rotate-180\"}`}\r\n                    onClick={() => setSubMenuOpen(!subMenuOpen)}\r\n                  />\r\n                )}\r\n              </li>\r\n              {menu.submenu && open && subMenuOpen && (\r\n                <ul>\r\n                  {menu.submenuItems.map((submenuItem, index) => (\r\n                    <li\r\n                      key={index}\r\n                      className=\"text-gray-300 text-sm flex items-center gap-4 cursor-pointer p-2 px-5 hover:bg-white rounded-md\"\r\n                    >\r\n                      {submenuItem.title}\r\n                    </li>\r\n                  ))}\r\n                </ul>\r\n              )}\r\n            </>\r\n          ))}\r\n        </ui>\r\n      </div>\r\n      <div className=\"px-4\">\r\n        <div className=\"w-full max-w-md mb-6 items-center pt-2 pb-2 px-4\">\r\n          <div className=\"relative pt-1\">\r\n            <div className=\"flex mb-2 items-center justify-between\">\r\n              <div className=\"flex items-center\">\r\n                <div\r\n                  className={classNames(\r\n                    \"flex items-center justify-center w-8 h-8 rounded-full mr-2\",\r\n                    activeStep >= 0\r\n                      ? \"bg-[purple] text-white\"\r\n                      : \"bg-gray-300 text-gray-500\"\r\n                  )}\r\n                >\r\n                  {activeStep >= 0 ? (\r\n                    <span className=\"text-sm font-bold\">1</span>\r\n                  ) : (\r\n                    <span className=\"text-sm font-bold\">1</span>\r\n                  )}\r\n                </div>\r\n                <div\r\n                  className={classNames(\r\n                    \"flex-grow h-1\",\r\n                    activeStep >= 1 ? \"bg-[purple]\" : \"bg-gray-300\"\r\n                  )}\r\n                ></div>\r\n              </div>\r\n              <div className=\"flex items-center\">\r\n                <div\r\n                  className={classNames(\r\n                    \"flex items-center justify-center w-8 h-8 rounded-full mx-2\",\r\n                    activeStep >= 1\r\n                      ? \"bg-[purple] text-white\"\r\n                      : \"bg-gray-300 text-gray-500\"\r\n                  )}\r\n                >\r\n                  {activeStep >= 1 ? (\r\n                    <span className=\"text-sm font-bold\">2</span>\r\n                  ) : (\r\n                    <span className=\"text-sm font-bold\">2</span>\r\n                  )}\r\n                </div>\r\n                <div\r\n                  className={classNames(\r\n                    \"flex-grow h-1\",\r\n                    activeStep >= 2 ? \"bg-[purple]\" : \"bg-gray-300\"\r\n                  )}\r\n                ></div>\r\n              </div>\r\n\r\n              <div className=\"flex items-center\">\r\n                <div\r\n                  className={classNames(\r\n                    \"flex items-center justify-center w-8 h-8 rounded-full mx-2\",\r\n                    activeStep >= 2\r\n                      ? \"bg-[purple] text-white\"\r\n                      : \"bg-gray-300 text-gray-500\"\r\n                  )}\r\n                >\r\n                  {activeStep >= 1 ? (\r\n                    <span className=\"text-sm font-bold\">3</span>\r\n                  ) : (\r\n                    <span className=\"text-sm font-bold\">3</span>\r\n                  )}\r\n                </div>\r\n                <div\r\n                  className={classNames(\r\n                    \"flex-grow h-1\",\r\n                    activeStep >= 3 ? \"bg-[purple]\" : \"bg-gray-300\"\r\n                  )}\r\n                ></div>\r\n              </div>\r\n\r\n              <div className=\"flex items-center\">\r\n                <div\r\n                  className={classNames(\r\n                    \"flex items-center justify-center w-8 h-8 rounded-full mx-2\",\r\n                    activeStep >= 3\r\n                      ? \"bg-[purple] text-white\"\r\n                      : \"bg-gray-300 text-gray-500\"\r\n                  )}\r\n                >\r\n                  {activeStep >= 3 ? (\r\n                    <span className=\"text-sm font-bold\">4</span>\r\n                  ) : (\r\n                    <span className=\"text-sm font-bold\">4</span>\r\n                  )}\r\n                </div>\r\n                <div\r\n                  className={classNames(\r\n                    \"flex-grow h-1\",\r\n                    activeStep >= 4 ? \"bg-[purple]\" : \"bg-gray-300\"\r\n                  )}\r\n                ></div>\r\n              </div>\r\n              <div className=\"flex items-center\">\r\n                <div\r\n                  className={classNames(\r\n                    \"flex items-center justify-center w-8 h-8 rounded-full mx-2\",\r\n                    activeStep >= 4\r\n                      ? \"bg-[purple] text-white\"\r\n                      : \"bg-gray-300 text-gray-500\"\r\n                  )}\r\n                >\r\n                  {activeStep >= 4 ? (\r\n                    <span className=\"text-sm font-bold\">5</span>\r\n                  ) : (\r\n                    <span className=\"text-sm font-bold\">5</span>\r\n                  )}\r\n                </div>\r\n                <div\r\n                  className={classNames(\r\n                    \"flex-grow h-1\",\r\n                    activeStep >= 5 ? \"bg-[purple]\" : \"bg-gray-300\"\r\n                  )}\r\n                ></div>\r\n              </div>\r\n              <div className=\"flex items-center\">\r\n                <div\r\n                  className={classNames(\r\n                    \"flex items-center justify-center w-8 h-8 rounded-full mx-2\",\r\n                    activeStep >= 5\r\n                      ? \"bg-[purple] text-white\"\r\n                      : \"bg-gray-300 text-gray-500\"\r\n                  )}\r\n                >\r\n                  {activeStep >= 5 ? (\r\n                    <span className=\"text-sm font-bold\">6</span>\r\n                  ) : (\r\n                    <span className=\"text-sm font-bold\">6</span>\r\n                  )}\r\n                </div>\r\n                <div\r\n                  className={classNames(\r\n                    \"flex-grow h-1\",\r\n                    activeStep >= 6 ? \"bg-[purple]\" : \"bg-gray-300\"\r\n                  )}\r\n                ></div>\r\n              </div>\r\n              <div className=\"flex items-center\">\r\n                <div\r\n                  className={classNames(\r\n                    \"flex items-center justify-center w-8 h-8 rounded-full mx-2\",\r\n                    activeStep >= 6\r\n                      ? \"bg-[purple] text-white\"\r\n                      : \"bg-gray-300 text-gray-500\"\r\n                  )}\r\n                >\r\n                  {activeStep >= 6 ? (\r\n                    <span className=\"text-sm font-bold\">7</span>\r\n                  ) : (\r\n                    <span className=\"text-sm font-bold\">7</span>\r\n                  )}\r\n                </div>\r\n                <div\r\n                  className={classNames(\r\n                    \"flex-grow h-1\",\r\n                    activeStep >= 7 ? \"bg-[purple]\" : \"bg-gray-300\"\r\n                  )}\r\n                ></div>\r\n              </div>\r\n              {/* <div className=\"flex items-center\">\r\n                <div\r\n                  className={classNames(\r\n                    \"flex items-center justify-center w-8 h-8 rounded-full mx-2\",\r\n                    activeStep >= 7\r\n                      ? \"bg-[purple] text-white\"\r\n                      : \"bg-gray-300 text-gray-500\"\r\n                  )}\r\n                >\r\n                  {activeStep >= 6 ? (\r\n                    <span className=\"text-sm font-bold\">7</span>\r\n                  ) : (\r\n                    <span className=\"text-sm font-bold\">7</span>\r\n                  )}\r\n                </div>\r\n                <div\r\n                  className={classNames(\r\n                    \"flex-grow h-1\",\r\n                    activeStep >= 7 ? \"bg-[purple]\" : \"bg-gray-300\"\r\n                  )}\r\n                ></div>\r\n              </div> */}\r\n              <div className=\"flex items-center\">\r\n                <div\r\n                  className={classNames(\r\n                    \"flex items-center justify-center w-8 h-8 rounded-full mx-2\",\r\n                    activeStep >= 7\r\n                      ? \"bg-[purple] text-white\"\r\n                      : \"bg-gray-300 text-gray-500\"\r\n                  )}\r\n                >\r\n                  {activeStep >= 7 ? (\r\n                    <span className=\"text-sm font-bold\">8</span>\r\n                  ) : (\r\n                    <span className=\"text-sm font-bold\">8</span>\r\n                  )}\r\n                </div>\r\n                <div\r\n                  className={classNames(\r\n                    \"flex-grow h-1\",\r\n                    activeStep >= 8 ? \"bg-[purple]\" : \"bg-gray-300\"\r\n                  )}\r\n                ></div>\r\n              </div>\r\n\r\n              <div className=\"flex items-center\">\r\n                <div\r\n                  className={classNames(\r\n                    \"flex items-center justify-center w-8 h-8 rounded-full mx-2\",\r\n                    activeStep >= 8\r\n                      ? \"bg-[purple] text-white\"\r\n                      : \"bg-gray-300 text-gray-500\"\r\n                  )}\r\n                >\r\n                  {activeStep >= 7 ? (\r\n                    <span className=\"text-sm font-bold\">9</span>\r\n                  ) : (\r\n                    <span className=\"text-sm font-bold\">9</span>\r\n                  )}\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\"flex mb-2 items-center justify-between\">\r\n              <div className=\"text-xs text-gray-500 font-bold\">Company</div>\r\n              <div className=\"text-xs text-gray-500 font-bold \">Address </div>\r\n              <div className=\"text-xs text-gray-500 font-bold\">Employee</div>\r\n              <div className=\"text-xs text-gray-500 font-bold\">Contact</div>\r\n              <div className=\"text-xs text-gray-500 font-bold\">\r\n                Account Info\r\n              </div>\r\n              <div className=\"text-xs text-gray-500 font-bold\">Trade Info</div>\r\n              <div className=\"text-xs text-gray-500 font-bold\">NGO</div>\r\n              <div className=\"text-xs text-gray-500 font-bold\">Partnership</div>\r\n              <div className=\"text-xs text-gray-500 font-bold\">PLC </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        {/* Steeper end */}\r\n        <div>\r\n          {activeStep === 0 && (\r\n            <>\r\n              <div className=\"flex\">\r\n                <button\r\n                  onClick={() => {\r\n                    handleGeneralOpenModal();\r\n                  }}\r\n                  className=\"text-purple-600 rounded-md font-medium \"\r\n                >\r\n                  <span>\r\n                    <IconButton aria-label=\"Add\" color=\"secondary\">\r\n                      <BsPlus /> Add\r\n                    </IconButton>\r\n                  </span>\r\n                  {/* if the company is already registered, Skip button will active  */}\r\n                </button>\r\n                <button\r\n                  className=\"text-purple-600 inline w-[150px] rounded-md font-medium \"\r\n                  onClick={handleSkip}\r\n                >\r\n                  <span>\r\n                    <IconButton aria-label=\"Skip\" color=\"secondary\">\r\n                      <BiSkipNext /> Skip\r\n                    </IconButton>\r\n                  </span>\r\n                </button>\r\n              </div>\r\n\r\n              <CompanyModal\r\n                isOpen={isCompanyModalOpen}\r\n                onClose={handleGeneralCloseModal}\r\n                title=\"Add company basic information\"\r\n              >\r\n                <div className=\"grid grid-cols-1 gap-4 submit-form\">\r\n                  <div className=\"submit-form \">\r\n                    {submitted ? (\r\n                      <div>\r\n                        <h4>You submitted successfully!</h4>\r\n                        <button\r\n                          className=\"btn btn-success\"\r\n                          onClick={newCompany}\r\n                        >\r\n                          Add\r\n                        </button>\r\n                      </div>\r\n                    ) : (\r\n                      <div className=\"relative center justify-center flex-1 w-full max-w-full grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\">\r\n                        <TextField\r\n                          id=\"Name\"\r\n                          label=\"Name\"\r\n                          variant=\"standard\"\r\n                          color=\"secondary\"\r\n                          size=\"\"\r\n                          required\r\n                          sx={{ width: \"45ch\" }}\r\n                          value={company.Name}\r\n                          onChange={handleInputChange}\r\n                          name=\"Name\"\r\n                          className=\"w-full max-w-full\"\r\n                        />\r\n                        <TextField\r\n                          id=\"NoOfBranch\"\r\n                          label=\"Number Of Branch\"\r\n                          variant=\"standard\"\r\n                          color=\"secondary\"\r\n                          size=\"\"\r\n                          required\r\n                          value={company.NoOfBranch}\r\n                          onChange={handleInputChange}\r\n                          name=\"NoOfBranch\"\r\n                        />\r\n                        <TextField\r\n                          id=\"EstablishmentYear\"\r\n                          label=\"Establishment Year\"\r\n                          variant=\"standard\"\r\n                          color=\"secondary\"\r\n                          size=\"\"\r\n                          required\r\n                          value={company.EstablishmentYear}\r\n                          onChange={handleInputChange}\r\n                          name=\"EstablishmentYear\"\r\n                        />\r\n                        <TextField\r\n                          id=\"TINNumber\"\r\n                          label=\"TIN Number\"\r\n                          variant=\"standard\"\r\n                          color=\"secondary\"\r\n                          size=\"\"\r\n                          required\r\n                          value={company.TINNumber}\r\n                          onChange={handleInputChange}\r\n                          name=\"TINNumber\"\r\n                        />\r\n                        <TextField\r\n                          id=\"TINCertificate\"\r\n                          label=\"TIN Certificate\"\r\n                          variant=\"standard\"\r\n                          color=\"secondary\"\r\n                          size=\"\"\r\n                          required\r\n                          value={company.TINCertificate}\r\n                          onChange={handleInputChange}\r\n                          name=\"TINCertificate\"\r\n                        />\r\n                        <FormControl variant=\"standard\" sx={{ minWidth: 120 }}>\r\n                          <InputLabel id=\"CompanyType\" color=\"secondary\">\r\n                            {\" \"}\r\n                            Company Type\r\n                          </InputLabel>\r\n                          <Select\r\n                            color=\"secondary\"\r\n                            onChange={(event) =>\r\n                              (company.CompanyTypeID = event.target.value)\r\n                            }\r\n                            labelId=\"CompanyType\"\r\n                            id=\"CompanyTypeSelect\"\r\n                            // value={age}\r\n                            label=\"Company Type\"\r\n                          >\r\n                            <MenuItem value=\"\">\r\n                              <em>None</em>\r\n                            </MenuItem>\r\n                            {companyTypes.map((company) => (\r\n                              <MenuItem key={company.Id} value={company.Id}>\r\n                                {company.Name}\r\n                              </MenuItem>\r\n                            ))}\r\n                          </Select>\r\n                        </FormControl>\r\n\r\n                        <TextField\r\n                          id=\"VATNumber\"\r\n                          label=\"VAT Number\"\r\n                          variant=\"standard\"\r\n                          color=\"secondary\"\r\n                          size=\"\"\r\n                          required\r\n                          value={company.VATNumber}\r\n                          onChange={handleInputChange}\r\n                          name=\"VATNumber\"\r\n                        />\r\n                        <TextField\r\n                          id=\"VATCertificate\"\r\n                          label=\"VAT Certificate\"\r\n                          variant=\"standard\"\r\n                          color=\"secondary\"\r\n                          size=\"\"\r\n                          required\r\n                          value={company.VATCertificate}\r\n                          onChange={handleInputChange}\r\n                          name=\"VATCertificate\"\r\n                        />\r\n                        <FormControl variant=\"standard\" sx={{ minWidth: 120 }}>\r\n                          <InputLabel id=\"EntityTypelbl\" color=\"secondary\">\r\n                            {\" \"}\r\n                            Entity Type\r\n                          </InputLabel>\r\n                          <Select\r\n                            color=\"secondary\"\r\n                            onChange={(event) =>\r\n                              (company.EntityTypeID = event.target.value)\r\n                            }\r\n                            labelId=\"EntityTypelbl\"\r\n                            id=\"EntityTypeSelect\"\r\n                            label=\"Entity Type\"\r\n                          >\r\n                            <MenuItem value=\"\">\r\n                              <em>None</em>\r\n                            </MenuItem>\r\n                            {entityTypes.map((entity) => (\r\n                              <MenuItem\r\n                                key={entity.Id}\r\n                                EntityTypeListID={entity.Id}\r\n                                value={entity.Id}\r\n                              >\r\n                                {entity.Name}\r\n                              </MenuItem>\r\n                            ))}\r\n                          </Select>\r\n                        </FormControl>\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n\r\n                  <div className=\"flex justify-between\">\r\n                    <button\r\n                      className=\"bg-gray-300 hover:bg-gray-400 text-gray-800 font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\"\r\n                      onClick={handleSkip}\r\n                    >\r\n                      Skip\r\n                    </button>\r\n                    <button\r\n                      className=\"bg-[purple] hover:bg-purple-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\"\r\n                      onClick={() => {\r\n                        handleNext();\r\n                        saveCompany();\r\n                      }}\r\n                    >\r\n                      Save and Next\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n              </CompanyModal>\r\n              <div className=\"rounded-lg overflow-hidden\">\r\n                <table className=\"table table-bordered table-striped bg-purple-100\">\r\n                  <thead>\r\n                    <th className=\"px-2 py-4\"> Name </th>\r\n                    <th className=\"px-2 py-4\"> No Branch </th>\r\n                    <th className=\"px-2 py-4\"> Establishment Year </th>\r\n                    <th className=\"px-2 py-4\"> TIN Number </th>\r\n                    <th className=\"px-2 py-4\"> TIN Certificate </th>\r\n                    <th className=\"px-2 py-4\"> VAT Number </th>\r\n                    <th className=\"px-2 py-4\"> VAT Certificate </th>\r\n                    <th className=\"px-2 py-4\"> Action </th>\r\n                  </thead>\r\n                  <tbody>\r\n                    {companies.map((company, index) => (\r\n                      <tr\r\n                        className=\"bg-white\r\n                      border-b border-purple-200\"\r\n                        key={index}\r\n                      >\r\n                        {/* <td>{company.Id}</td> */}\r\n                        <td className=\"p-2\">{company.Name}</td>\r\n                        <td className=\"p-2\">{company.NoOfBranch}</td>\r\n                        <td className=\"p-2\">{company.EstablishmentYear}</td>\r\n                        <td className=\"p-2\">{company.TINNumber}</td>\r\n                        <td className=\"p-2\">{company.TINCertificate}</td>\r\n                        <td className=\"p-2\">{company.VATNumber}</td>\r\n                        <td className=\"p-2\">{company.VATCertificate}</td>\r\n                        {/* <td>{company.Address.Country}</td> */}\r\n\r\n                        <td>\r\n                          {\" \"}\r\n                          <button\r\n                            onClick={() => {\r\n                              handleCompanyEditOpenModal();\r\n                              updateCompanyById(company.Id);\r\n                            }}\r\n                            className=\"text-purple-600 rounded-md font-semibold \"\r\n                          >\r\n                            <span>\r\n                              <IconButton aria-label=\"Add\" color=\"secondary\">\r\n                                <BsPlus /> Edit\r\n                              </IconButton>\r\n                            </span>\r\n                          </button>\r\n                        </td>\r\n                      </tr>\r\n                    ))}\r\n                  </tbody>\r\n                </table>\r\n              </div>\r\n              <CompanyModal\r\n                isOpen={isCompanyEditModalOpen}\r\n                onClose={handleCompanyEditCloseModal}\r\n                title=\"Add company Edit information\"\r\n              >\r\n                <div>\r\n                  <form onSubmit={updateCompanyInfo}>\r\n                    <div className=\"grid grid-cols-1 gap-4 submit-form\">\r\n                      <div className=\"submit-form \">\r\n                        <div className=\"relative center justify-center flex-1 w-full max-w-full grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\">\r\n                          <TextField\r\n                            id=\"Name\"\r\n                            label=\"Name\"\r\n                            variant=\"standard\"\r\n                            color=\"secondary\"\r\n                            size=\"\"\r\n                            required\r\n                            sx={{ width: \"45ch\" }}\r\n                            value={editCompany.Name}\r\n                            onChange={(e) =>\r\n                              setEditCompany({\r\n                                ...editCompany,\r\n                                Name: e.target.value,\r\n                              })\r\n                            }\r\n                            // onChange={handleInputChange}\r\n                            name=\"Name\"\r\n                            className=\"w-full max-w-full\"\r\n                          />\r\n\r\n                          <TextField\r\n                            id=\"NoOfBranch\"\r\n                            label=\"Number Of Branch\"\r\n                            variant=\"standard\"\r\n                            color=\"secondary\"\r\n                            size=\"\"\r\n                            required\r\n                            value={editCompany.NoOfBranch}\r\n                            onChange={(e) =>\r\n                              setEditCompany({\r\n                                ...editCompany,\r\n                                NoOfBranch: e.target.value,\r\n                              })\r\n                            }\r\n                            // onChange={handleInputChange}\r\n                            name=\"NoOfBranch\"\r\n                          />\r\n                          <TextField\r\n                            id=\"EstablishmentYear\"\r\n                            label=\"Establishment Year\"\r\n                            variant=\"standard\"\r\n                            color=\"secondary\"\r\n                            size=\"\"\r\n                            required\r\n                            value={editCompany.EstablishmentYear}\r\n                            onChange={(e) =>\r\n                              setEditCompany({\r\n                                ...editCompany,\r\n                                EstablishmentYear: e.target.value,\r\n                              })\r\n                            }\r\n                            // onChange={handleInputChange}\r\n                            name=\"EstablishmentYear\"\r\n                          />\r\n                          <TextField\r\n                            id=\"TINNumber\"\r\n                            label=\"TIN Number\"\r\n                            variant=\"standard\"\r\n                            color=\"secondary\"\r\n                            size=\"\"\r\n                            required\r\n                            value={editCompany.TINNumber}\r\n                            onChange={(e) =>\r\n                              setEditCompany({\r\n                                ...editCompany,\r\n                                TINNumber: e.target.value,\r\n                              })\r\n                            }\r\n                            //onChange={handleInputChange}\r\n                            name=\"TINNumber\"\r\n                          />\r\n                          <TextField\r\n                            id=\"TINCertificate\"\r\n                            label=\"TIN Certificate\"\r\n                            variant=\"standard\"\r\n                            color=\"secondary\"\r\n                            size=\"\"\r\n                            required\r\n                            value={editCompany.TINCertificate}\r\n                            onChange={(e) =>\r\n                              setEditCompany({\r\n                                ...editCompany,\r\n                                TINCertificate: e.target.value,\r\n                              })\r\n                            }\r\n                            //onChange={handleInputChange}\r\n                            name=\"TINCertificate\"\r\n                          />\r\n                          <FormControl\r\n                            variant=\"standard\"\r\n                            sx={{ minWidth: 120 }}\r\n                          >\r\n                            <InputLabel id=\"CompanyType\" color=\"secondary\">\r\n                              {\" \"}\r\n                              Company Type\r\n                            </InputLabel>\r\n                            <Select\r\n                              color=\"secondary\"\r\n                              onChange={(event) =>\r\n                                (editCompany.CompanyTypeID = event.target.value)\r\n                              }\r\n                              labelId=\"CompanyType\"\r\n                              id=\"CompanyTypeSelect\"\r\n                              // value={age}\r\n                              label=\"Company Type\"\r\n                            >\r\n                              <MenuItem value=\"\">\r\n                                <em>None</em>\r\n                              </MenuItem>\r\n                              {companyTypes.map((company) => (\r\n                                <MenuItem key={company.Id} value={company.Id}>\r\n                                  {company.Name}\r\n                                </MenuItem>\r\n                              ))}\r\n                            </Select>\r\n                          </FormControl>\r\n\r\n                          <TextField\r\n                            id=\"VATNumber\"\r\n                            label=\"VAT Number\"\r\n                            variant=\"standard\"\r\n                            color=\"secondary\"\r\n                            size=\"\"\r\n                            required\r\n                            value={editCompany.VATNumber}\r\n                            onChange={(e) =>\r\n                              setEditCompany({\r\n                                ...editCompany,\r\n                                VATNumber: e.target.value,\r\n                              })\r\n                            }\r\n                            // onChange={handleInputChange}\r\n                            name=\"VATNumber\"\r\n                          />\r\n                          <TextField\r\n                            id=\"VATCertificate\"\r\n                            label=\"VAT Certificate\"\r\n                            variant=\"standard\"\r\n                            color=\"secondary\"\r\n                            size=\"\"\r\n                            required\r\n                            value={editCompany.VATCertificate}\r\n                            onChange={(e) =>\r\n                              setEditCompany({\r\n                                ...editCompany,\r\n                                VATCertificate: e.target.value,\r\n                              })\r\n                            }\r\n                            //onChange={handleInputChange}\r\n                            name=\"VATCertificate\"\r\n                          />\r\n                          <FormControl\r\n                            variant=\"standard\"\r\n                            sx={{ minWidth: 120 }}\r\n                          >\r\n                            <InputLabel id=\"EntityTypelbl\" color=\"secondary\">\r\n                              {\" \"}\r\n                              Entity Type\r\n                            </InputLabel>\r\n                            <Select\r\n                              color=\"secondary\"\r\n                              onChange={(event) =>\r\n                                (editCompany.EntityTypeID = event.target.value)\r\n                              }\r\n                              labelId=\"EntityTypelbl\"\r\n                              id=\"EntityTypeSelect\"\r\n                              label=\"Entity Type\"\r\n                            >\r\n                              <MenuItem value=\"\">\r\n                                <em>None</em>\r\n                              </MenuItem>\r\n                              {entityTypes.map((entity) => (\r\n                                <MenuItem\r\n                                  key={entity.Id}\r\n                                  EntityTypeListID={entity.Id}\r\n                                  value={entity.Id}\r\n                                >\r\n                                  {entity.Name}\r\n                                </MenuItem>\r\n                              ))}\r\n                            </Select>\r\n                          </FormControl>\r\n                        </div>\r\n                        <button className=\"btn btn-info\">Update</button>\r\n                      </div>\r\n                    </div>\r\n                  </form>\r\n                </div>\r\n              </CompanyModal>\r\n            </>\r\n          )}\r\n          {activeStep === 1 && (\r\n            <>\r\n              <div className=\"flex\">\r\n                <button\r\n                  className=\"text-purple-600 inline w-[150px] rounded-md font-medium \"\r\n                  onClick={handleBack}\r\n                >\r\n                  <span>\r\n                    <IconButton aria-label=\"Skip\" color=\"secondary\">\r\n                      <RiSkipBackMiniFill /> Back\r\n                    </IconButton>\r\n                  </span>\r\n                </button>\r\n                <button\r\n                  onClick={() => {\r\n                    handleCompanyAddressOpenModal();\r\n                  }}\r\n                  className=\"text-purple-600 rounded-md font-medium \"\r\n                >\r\n                  <span>\r\n                    <IconButton aria-label=\"Add\" color=\"secondary\">\r\n                      <BsPlus /> Add\r\n                    </IconButton>\r\n                  </span>\r\n                </button>\r\n                <button\r\n                  className=\"text-purple-600 inline w-[150px] rounded-md font-medium \"\r\n                  onClick={handleSkip}\r\n                >\r\n                  <span>\r\n                    <IconButton aria-label=\"Skip\" color=\"secondary\">\r\n                      <BiSkipNext /> Skip\r\n                    </IconButton>\r\n                  </span>\r\n                </button>\r\n              </div>\r\n              <CompanyModal\r\n                isOpen={isCompanyAddressModalOpen}\r\n                onClose={handleCompanyAddressCloseModal}\r\n                title=\"Add company Address information\"\r\n              >\r\n                <div>\r\n                  <div className=\"submit-form\">\r\n                    {submitted ? (\r\n                      <div>\r\n                        <h4>You submitted successfully!</h4>\r\n                        <button\r\n                          className=\"btn btn-success\"\r\n                          onClick={newAddress}\r\n                        >\r\n                          Add\r\n                        </button>\r\n                      </div>\r\n                    ) : (\r\n                      <div className=\"relative center justify-center flex-1 w-full max-w-full grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\">\r\n                        <FormControl variant=\"standard\" sx={{ width: \"45ch\" }}>\r\n                          <InputLabel id=\"countrylbl\" color=\"secondary\">\r\n                            {\" \"}\r\n                            Country{\" \"}\r\n                          </InputLabel>\r\n                          <Select\r\n                            color=\"secondary\"\r\n                            onChange={(event) =>\r\n                              (address.CountryID = event.target.value)\r\n                            }\r\n                            labelId=\"countrylbl\"\r\n                            id=\"countrySelect\"\r\n                            label=\"Country\"\r\n                          >\r\n                            <MenuItem value=\"\">\r\n                              <em>None</em>\r\n                            </MenuItem>\r\n                            {country.map((newContry) => (\r\n                              <MenuItem\r\n                                key={newContry.Id}\r\n                                CountryID={newContry.Id}\r\n                                value={newContry.Id}\r\n                              >\r\n                                {newContry.Name}\r\n                              </MenuItem>\r\n                            ))}\r\n                          </Select>\r\n                        </FormControl>\r\n\r\n                        <FormControl variant=\"standard\">\r\n                          <InputLabel id=\"regionlbl\" color=\"secondary\">\r\n                            {\" \"}\r\n                            Region{\" \"}\r\n                          </InputLabel>\r\n                          <Select\r\n                            color=\"secondary\"\r\n                            onChange={(event) =>\r\n                              (address.RegionID = event.target.value)\r\n                            }\r\n                            labelId=\"regionlbl\"\r\n                            id=\"regionSelect\"\r\n                            label=\"Region\"\r\n                          >\r\n                            <MenuItem value=\"\">\r\n                              <em>None</em>\r\n                            </MenuItem>\r\n                            {region.map((newRegion) => (\r\n                              <MenuItem\r\n                                key={newRegion.Id}\r\n                                RegionID={newRegion.Id}\r\n                                value={newRegion.Id}\r\n                              >\r\n                                {newRegion.Name}\r\n                              </MenuItem>\r\n                            ))}\r\n                          </Select>\r\n                        </FormControl>\r\n                        <TextField\r\n                          id=\"ZoneSubCity\"\r\n                          label=\"Zone Sub City\"\r\n                          variant=\"standard\"\r\n                          color=\"secondary\"\r\n                          size=\"\"\r\n                          required\r\n                          value={address.ZoneSubCity}\r\n                          onChange={handleInputChangeAdress}\r\n                          name=\"ZoneSubCity\"\r\n                        />\r\n                        <TextField\r\n                          id=\"Woreda\"\r\n                          label=\"Woreda\"\r\n                          variant=\"standard\"\r\n                          color=\"secondary\"\r\n                          size=\"\"\r\n                          required\r\n                          value={address.Woreda}\r\n                          onChange={handleInputChangeAdress}\r\n                          name=\"Woreda\"\r\n                        />\r\n                        <TextField\r\n                          id=\"City\"\r\n                          label=\"City\"\r\n                          variant=\"standard\"\r\n                          color=\"secondary\"\r\n                          size=\"\"\r\n                          required\r\n                          value={address.City}\r\n                          onChange={handleInputChangeAdress}\r\n                          name=\"City\"\r\n                        />\r\n                        <TextField\r\n                          id=\"Kebele\"\r\n                          label=\"Kebele\"\r\n                          variant=\"standard\"\r\n                          color=\"secondary\"\r\n                          size=\"\"\r\n                          required\r\n                          value={address.Kebele}\r\n                          onChange={handleInputChangeAdress}\r\n                          name=\"Kebele\"\r\n                        />\r\n                        <TextField\r\n                          id=\"HouseNo\"\r\n                          label=\"HouseNo\"\r\n                          variant=\"standard\"\r\n                          color=\"secondary\"\r\n                          size=\"\"\r\n                          required\r\n                          value={address.HouseNo}\r\n                          onChange={handleInputChangeAdress}\r\n                          name=\"HouseNo\"\r\n                        />\r\n                        <TextField\r\n                          id=\"BuildingNo\"\r\n                          label=\"BuildingNo\"\r\n                          variant=\"standard\"\r\n                          color=\"secondary\"\r\n                          size=\"\"\r\n                          required\r\n                          value={address.BuildingNo}\r\n                          onChange={handleInputChangeAdress}\r\n                          name=\"BuildingNo\"\r\n                        />\r\n                        <TextField\r\n                          id=\"StreetAddress\"\r\n                          label=\"StreetAddress\"\r\n                          variant=\"standard\"\r\n                          color=\"secondary\"\r\n                          size=\"\"\r\n                          required\r\n                          value={address.StreetAddress}\r\n                          onChange={handleInputChangeAdress}\r\n                          name=\"StreetAddress\"\r\n                        />\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n\r\n                  <div className=\"flex justify-between\">\r\n                    <button\r\n                      className=\"bg-gray-300 hover:bg-gray-400 text-gray-800 font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\"\r\n                      onClick={handleBack}\r\n                    >\r\n                      Back\r\n                    </button>\r\n                    <button\r\n                      className=\"bg-gray-300 hover:bg-gray-400 text-gray-800 font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\"\r\n                      onClick={handleSkip}\r\n                    >\r\n                      Skip\r\n                    </button>\r\n                    <button\r\n                      className=\"bg-[purple] hover:bg-purple-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\"\r\n                      onClick={() => {\r\n                        handleNext();\r\n                        saveAddress();\r\n                      }}\r\n                    >\r\n                      Save and Next\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n              </CompanyModal>\r\n              <div className=\"rounded-lg overflow-hidden\">\r\n                <table className=\"table table-bordered table-striped bg-purple-100\">\r\n                  <thead>\r\n                    <tr className=\"bg-purple-200 \">\r\n                      <th className=\"px-2 py-4\"> Country </th>\r\n                      <th className=\"px-2 py-4\"> RegionID </th>\r\n                      <th className=\"px-2 py-4\"> ZoneSubCity </th>\r\n                      <th className=\"px-2 py-4\"> Woreda </th>\r\n                      <th className=\"px-2 py-4\"> City </th>\r\n                      <th className=\"px-2 py-4\"> Kebele </th>\r\n                      <th className=\"px-2 py-4\"> HouseNo </th>\r\n                      <th className=\"px-2 py-4\">BuildingNo</th>\r\n                      <th className=\"px-2 py-4\">StreetAddress</th>\r\n                      <th className=\"px-2 py-4\"> Action </th>\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                    {getAddress.length > 0 ? (\r\n                      getAddress.map((getCompanyAddress, index) => (\r\n                        <tr\r\n                          className=\"bg-white\r\n                      border-b border-purple-200\"\r\n                          key={index}\r\n                        >\r\n                          {/* <td className=\"p-2\">{getAddress.Id}</td> */}\r\n                          <td className=\"p-2\">{getCompanyAddress.Country}</td>\r\n                          <td className=\"p-2\">{getCompanyAddress.Region}</td>\r\n                          <td className=\"p-2\">\r\n                            {getCompanyAddress.ZoneSubCity}\r\n                          </td>\r\n                          <td className=\"p-2\">{getCompanyAddress.Woreda}</td>\r\n                          <td className=\"p-2\">{getCompanyAddress.City}</td>\r\n                          <td className=\"p-2\">{getCompanyAddress.Kebele}</td>\r\n                          <td className=\"p-2\">{getCompanyAddress.HouseNo}</td>\r\n                          <td className=\"p-2\">\r\n                            {getCompanyAddress.BuildingNo}\r\n                          </td>\r\n                          <td className=\"p-2\">\r\n                            {getCompanyAddress.StreetAddress}\r\n                          </td>\r\n                          <td className=\"p-2\">\r\n                            {\" \"}\r\n                            <button\r\n                              onClick={() => {\r\n                                handleCompanyAddressEditOpenModal();\r\n                                getAddressByCompanyId(getCompanyAddress.Id);\r\n                              }}\r\n                              className=\"text-purple-600 rounded-md font-semibold \"\r\n                            >\r\n                              <span>\r\n                                <IconButton aria-label=\"add\" color=\"secondary\">\r\n                                  <BsPlus /> Edit\r\n                                </IconButton>\r\n                              </span>\r\n                            </button>\r\n                          </td>\r\n                        </tr>\r\n                      ))\r\n                    ) : (\r\n                      <tr>\r\n                        <td className=\"p-2 text-red-600\">Data not found</td>\r\n                      </tr>\r\n                    )}\r\n                  </tbody>\r\n                </table>\r\n              </div>\r\n              <CompanyModal\r\n                isOpen={isCompanyAddressEditModalOpen}\r\n                onClose={handleCompanyAddressEditCloseModal}\r\n                title=\"Add company Address Edit information\"\r\n              >\r\n                <div>\r\n                  <form onSubmit={updateCompanyAddressById}>\r\n                    <div className=\"grid grid-cols-1 gap-4 submit-form\">\r\n                      <div className=\"submit-form \">\r\n                        <div className=\"relative center justify-center flex-1 w-full max-w-full grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\">\r\n                          <FormControl\r\n                            variant=\"standard\"\r\n                            sx={{ width: \"45ch\" }}\r\n                          >\r\n                            <InputLabel id=\"countrylbl\" color=\"secondary\">\r\n                              {\" \"}\r\n                              Country{\" \"}\r\n                            </InputLabel>\r\n                            <Select\r\n                              color=\"secondary\"\r\n                              onChange={(event) =>\r\n                                (editAddress.CountryId = event.target.value)\r\n                              }\r\n                              labelId=\"countrylbl\"\r\n                              id=\"countrySelect\"\r\n                              label=\"Country\"\r\n                            >\r\n                              <MenuItem value=\"\">\r\n                                <em>None</em>\r\n                              </MenuItem>\r\n                              {country.map((newContry) => (\r\n                                <MenuItem\r\n                                  key={newContry.Id}\r\n                                  CountryID={newContry.Id}\r\n                                  value={newContry.Id}\r\n                                >\r\n                                  {newContry.Name}\r\n                                </MenuItem>\r\n                              ))}\r\n                            </Select>\r\n                          </FormControl>\r\n                          <FormControl variant=\"standard\">\r\n                            <InputLabel id=\"regionlbl\" color=\"secondary\">\r\n                              {\" \"}\r\n                              Region{\" \"}\r\n                            </InputLabel>\r\n                            <Select\r\n                              color=\"secondary\"\r\n                              onChange={(event) =>\r\n                                (editAddress.RegionId = event.target.value)\r\n                              }\r\n                              labelId=\"regionlbl\"\r\n                              id=\"regionSelect\"\r\n                              label=\"Region\"\r\n                            >\r\n                              <MenuItem value=\"\">\r\n                                <em>None</em>\r\n                              </MenuItem>\r\n                              {region.map((newRegion) => (\r\n                                <MenuItem\r\n                                  key={newRegion.Id}\r\n                                  RegionID={newRegion.Id}\r\n                                  value={newRegion.Id}\r\n                                >\r\n                                  {newRegion.Name}\r\n                                </MenuItem>\r\n                              ))}\r\n                            </Select>\r\n                          </FormControl>\r\n                          <TextField\r\n                            id=\"ZoneSubCity\"\r\n                            label=\"Zone Sub City\"\r\n                            variant=\"standard\"\r\n                            color=\"secondary\"\r\n                            size=\"\"\r\n                            required\r\n                            value={editAddress.ZoneSubCity}\r\n                            onChange={(e) =>\r\n                              setEditAddress({\r\n                                ...editAddress,\r\n                                ZoneSubCity: e.target.value,\r\n                              })\r\n                            }\r\n                            // onChange={handleInputChangeAdress}\r\n                            name=\"ZoneSubCity\"\r\n                          />\r\n\r\n                          <TextField\r\n                            id=\"Woreda\"\r\n                            label=\"Woreda\"\r\n                            variant=\"standard\"\r\n                            color=\"secondary\"\r\n                            size=\"\"\r\n                            required\r\n                            value={editAddress.Woreda}\r\n                            onChange={(e) =>\r\n                              setEditAddress({\r\n                                ...editAddress,\r\n                                Woreda: e.target.value,\r\n                              })\r\n                            }\r\n                            // onChange={handleInputChangeAdress}\r\n                            name=\"Woreda\"\r\n                          />\r\n                          <TextField\r\n                            id=\"City\"\r\n                            label=\"City\"\r\n                            variant=\"standard\"\r\n                            color=\"secondary\"\r\n                            size=\"\"\r\n                            required\r\n                            value={editAddress.City}\r\n                            onChange={(e) =>\r\n                              setEditAddress({\r\n                                ...editAddress,\r\n                                City: e.target.value,\r\n                              })\r\n                            }\r\n                            // onChange={handleInputChangeAdress}\r\n                            name=\"City\"\r\n                          />\r\n                          <TextField\r\n                            id=\"Kebele\"\r\n                            label=\"Kebele\"\r\n                            variant=\"standard\"\r\n                            color=\"secondary\"\r\n                            size=\"\"\r\n                            required\r\n                            value={editAddress.Kebele}\r\n                            onChange={(e) =>\r\n                              setEditAddress({\r\n                                ...editAddress,\r\n                                Kebele: e.target.value,\r\n                              })\r\n                            }\r\n                            // onChange={handleInputChangeAdress}\r\n                            name=\"Kebele\"\r\n                          />\r\n                          <TextField\r\n                            id=\"HouseNo\"\r\n                            label=\"HouseNo\"\r\n                            variant=\"standard\"\r\n                            color=\"secondary\"\r\n                            size=\"\"\r\n                            required\r\n                            value={editAddress.HouseNo}\r\n                            onChange={(e) =>\r\n                              setEditAddress({\r\n                                ...editAddress,\r\n                                HouseNo: e.target.value,\r\n                              })\r\n                            }\r\n                            // onChange={handleInputChangeAdress}\r\n                            name=\"HouseNo\"\r\n                          />\r\n                          <TextField\r\n                            id=\"BuildingNo\"\r\n                            label=\"BuildingNo\"\r\n                            variant=\"standard\"\r\n                            color=\"secondary\"\r\n                            size=\"\"\r\n                            required\r\n                            value={editAddress.BuildingNo}\r\n                            onChange={(e) =>\r\n                              setEditAddress({\r\n                                ...editAddress,\r\n                                BuildingNo: e.target.value,\r\n                              })\r\n                            }\r\n                            // onChange={handleInputChangeAdress}\r\n                            name=\"BuildingNo\"\r\n                          />\r\n                          <TextField\r\n                            id=\"StreetAddress\"\r\n                            label=\"StreetAddress\"\r\n                            variant=\"standard\"\r\n                            color=\"secondary\"\r\n                            size=\"\"\r\n                            required\r\n                            value={editAddress.StreetAddress}\r\n                            onChange={(e) =>\r\n                              setEditAddress({\r\n                                ...editAddress,\r\n                                StreetAddress: e.target.value,\r\n                              })\r\n                            }\r\n                            // onChange={handleInputChangeAdress}\r\n                            name=\"StreetAddress\"\r\n                          />\r\n                        </div>\r\n                        <button type=\"submit\" className=\"btn btn-info\">\r\n                          Update\r\n                        </button>\r\n                      </div>\r\n                    </div>\r\n                  </form>\r\n                </div>\r\n              </CompanyModal>\r\n            </>\r\n          )}\r\n          {activeStep === 2 && (\r\n            <>\r\n              <div className=\"flex\">\r\n                <button\r\n                  className=\"text-purple-600 inline w-[150px] rounded-md font-medium \"\r\n                  onClick={handleBack}\r\n                >\r\n                  <span>\r\n                    <IconButton aria-label=\"Skip\" color=\"secondary\">\r\n                      <RiSkipBackMiniFill /> Back\r\n                    </IconButton>\r\n                  </span>\r\n                </button>\r\n                <button\r\n                  onClick={() => {\r\n                    handleCompanyEmployeeSoleOpenModal();\r\n                  }}\r\n                  className=\"text-purple-600 rounded-md font-medium \"\r\n                >\r\n                  <span>\r\n                    <IconButton aria-label=\"Add\" color=\"secondary\">\r\n                      <BsPlus /> Add\r\n                    </IconButton>\r\n                  </span>\r\n                  {/* if the company is already registered, Skip button will active  */}\r\n                </button>\r\n                <button\r\n                  className=\"text-purple-600 inline w-[150px] rounded-md font-medium \"\r\n                  onClick={handleSkip}\r\n                >\r\n                  <span>\r\n                    <IconButton aria-label=\"Skip\" color=\"secondary\">\r\n                      <BiSkipNext /> Skip\r\n                    </IconButton>\r\n                  </span>\r\n                </button>\r\n              </div>\r\n              <CompanyModal\r\n                isOpen={isCompanyEmployeeSoleModalOpen}\r\n                onClose={handleCompanyEmployeeSoleCloseModal}\r\n                title=\"Add company Employee information\"\r\n              >\r\n                <div>\r\n                  <div className=\"submit-form\">\r\n                    {submitted ? (\r\n                      <div>\r\n                        <h4>You submitted successfully!</h4>\r\n                        <button\r\n                          className=\"btn btn-success\"\r\n                          onClick={newEmployee}\r\n                        >\r\n                          Add\r\n                        </button>\r\n                      </div>\r\n                    ) : (\r\n                      <div className=\"relative center justify-center flex-1 w-full max-w-full grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\">\r\n                        <TextField\r\n                          id=\"BudgetYear\"\r\n                          label=\"BudgetYear\"\r\n                          variant=\"standard\"\r\n                          color=\"secondary\"\r\n                          size=\"\"\r\n                          required\r\n                          value={employee.BudgetYear}\r\n                          onChange={handleInputChangeEmployee}\r\n                          name=\"BudgetYear\"\r\n                        />\r\n                        <TextField\r\n                          id=\"NumOfPermanentEmp\"\r\n                          label=\"NumOfPermanentEmp\"\r\n                          variant=\"standard\"\r\n                          color=\"secondary\"\r\n                          size=\"\"\r\n                          required\r\n                          value={employee.NumOfPermanentEmp}\r\n                          onChange={handleInputChangeEmployee}\r\n                          name=\"NumOfPermanentEmp\"\r\n                        />\r\n                        <TextField\r\n                          id=\"NumOfTempEmp\"\r\n                          label=\"NumOfTempEmp\"\r\n                          variant=\"standard\"\r\n                          color=\"secondary\"\r\n                          size=\"\"\r\n                          required\r\n                          value={employee.NumOfTempEmp}\r\n                          onChange={handleInputChangeEmployee}\r\n                          name=\"NumOfTempEmp\"\r\n                        />\r\n                        <TextField\r\n                          id=\"NumOfContractEmp\"\r\n                          label=\"NumOfContractEmp\"\r\n                          variant=\"standard\"\r\n                          color=\"secondary\"\r\n                          size=\"\"\r\n                          required\r\n                          value={employee.NumOfContractEmp}\r\n                          onChange={handleInputChangeEmployee}\r\n                          name=\"NumOfContractEmp\"\r\n                        />\r\n                        <TextField\r\n                          id=\"SeniorMngtStaffIDTM\"\r\n                          label=\"SeniorMngtStaffIDTM\"\r\n                          variant=\"standard\"\r\n                          color=\"secondary\"\r\n                          size=\"\"\r\n                          required\r\n                          value={employee.SeniorMngtStaffIDTM}\r\n                          onChange={handleInputChangeEmployee}\r\n                          name=\"SeniorMngtStaffIDTM\"\r\n                        />\r\n                        <TextField\r\n                          id=\"TotalWorkExperiance\"\r\n                          label=\"TotalWorkExperiance\"\r\n                          variant=\"standard\"\r\n                          color=\"secondary\"\r\n                          size=\"\"\r\n                          required\r\n                          value={employee.TotalWorkExperiance}\r\n                          onChange={handleInputChangeEmployee}\r\n                          name=\"TotalWorkExperiance\"\r\n                        />\r\n                        <TextField\r\n                          id=\"RelatedWorkExperiance\"\r\n                          label=\"RelatedWorkExperiance\"\r\n                          variant=\"standard\"\r\n                          color=\"secondary\"\r\n                          size=\"\"\r\n                          required\r\n                          value={employee.RelatedWorkExperiance}\r\n                          onChange={handleInputChangeEmployee}\r\n                          name=\"RelatedWorkExperiance\"\r\n                        />\r\n                        <TextField\r\n                          id=\"UploadCV\"\r\n                          label=\"UploadCV\"\r\n                          variant=\"standard\"\r\n                          color=\"secondary\"\r\n                          size=\"\"\r\n                          required\r\n                          value={employee.UploadCV}\r\n                          onChange={handleInputChangeEmployee}\r\n                          name=\"UploadCV\"\r\n                        />\r\n                        <TextField\r\n                          id=\"AttachWorkExperience\"\r\n                          label=\"AttachWorkExperience\"\r\n                          variant=\"standard\"\r\n                          color=\"secondary\"\r\n                          size=\"\"\r\n                          required\r\n                          value={employee.AttachWorkExperience}\r\n                          onChange={handleInputChangeEmployee}\r\n                          name=\"AttachWorkExperience\"\r\n                        />\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n                  <div className=\"flex justify-between\">\r\n                    <button\r\n                      className=\"bg-gray-300 hover:bg-gray-400 text-gray-800 font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\"\r\n                      onClick={handleBack}\r\n                    >\r\n                      Back\r\n                    </button>\r\n                    <button\r\n                      className=\"bg-[purple] hover:bg-purple-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\"\r\n                      onClick={() => {\r\n                        saveEmployee();\r\n                      }}\r\n                    >\r\n                      Save\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n              </CompanyModal>\r\n\r\n              <div className=\"rounded-lg overflow-hidden\">\r\n                <table className=\"table table-bordered table-striped bg-purple-100\">\r\n                  <thead>\r\n                    <tr className=\"bg-purple-200 \">\r\n                      <th className=\"px-2 py-4\"> Budget Year </th>\r\n                      <th className=\"px-2 py-4\">\r\n                        {\" \"}\r\n                        Number Of Permanent Employee{\" \"}\r\n                      </th>\r\n                      <th className=\"px-2 py-4\">\r\n                        {\" \"}\r\n                        Number Of Temporary Employee{\" \"}\r\n                      </th>\r\n                      <th className=\"px-2 py-4\">\r\n                        {\" \"}\r\n                        Number Of Contract Employee{\" \"}\r\n                      </th>\r\n                      <th className=\"px-2 py-4\">\r\n                        {\" \"}\r\n                        Senior Management Staff IDTM{\" \"}\r\n                      </th>\r\n                      <th className=\"px-2 py-4\"> Total Work Experiance </th>\r\n                      <th className=\"px-2 py-4\"> Related Work Experiance </th>\r\n                      <th className=\"px-2 py-4\"> Action </th>\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                    {getEmployeeInformation.map(\r\n                      (employeeInformation, index) => (\r\n                        // <tr key={loan.loan_id} rowSpan=\"3\">\r\n                        <tr key={index}>\r\n                          {/* <td className=\"p-2\">{ContactInformation.Id}</td> */}\r\n                          <td className=\"p-2\">\r\n                            {employeeInformation.BudgetYear}\r\n                          </td>\r\n                          <td className=\"p-2\">\r\n                            {employeeInformation.NumOfPermanentEmp}\r\n                          </td>\r\n                          <td className=\"p-2\">\r\n                            {employeeInformation.NumOfTempEmp}\r\n                          </td>\r\n                          <td className=\"p-2\">\r\n                            {employeeInformation.NumOfContractEmp}\r\n                          </td>\r\n                          <td className=\"p-2\">\r\n                            {employeeInformation.SeniorMngtStaffIDTM}\r\n                          </td>\r\n                          <td className=\"p-2\">\r\n                            {employeeInformation.TotalWorkExperiance}\r\n                          </td>\r\n                          <td className=\"p-2\">\r\n                            {employeeInformation.RelatedWorkExperiance}\r\n                          </td>\r\n                          <td>\r\n                            {\" \"}\r\n                            <button\r\n                              onClick={() => {\r\n                                handleCompanyEmployeeInformationdetailOpenModal();\r\n                                getEmployeeInformationBy(\r\n                                  employeeInformation.Id\r\n                                );\r\n                                setEmployeeInformationId(\r\n                                  employeeInformation.Id\r\n                                );\r\n                              }}\r\n                              className=\"text-purple-600 rounded-md font-semibold \"\r\n                            >\r\n                              Employee Detail\r\n                            </button>\r\n                          </td>\r\n                          <td>\r\n                            {\" \"}\r\n                            <button\r\n                              onClick={() => {\r\n                                handleCompanyEmployeeInformationEditOpenModal();\r\n                                getEmployeeInformationBy(\r\n                                  employeeInformation.Id\r\n                                );\r\n                                setEmployeeInformationId(\r\n                                  employeeInformation.Id\r\n                                );\r\n                              }}\r\n                              className=\"text-purple-600 rounded-md font-semibold \"\r\n                            >\r\n                              <span>\r\n                                <IconButton aria-label=\"Add\" color=\"secondary\">\r\n                                  <BsPlus /> Edit\r\n                                </IconButton>\r\n                              </span>\r\n                            </button>\r\n                          </td>\r\n                        </tr>\r\n                      )\r\n                    )}\r\n                  </tbody>\r\n                </table>\r\n              </div>\r\n              <CompanyModal\r\n                isOpen={isCompanyEmployeeInformationEditModalOpen}\r\n                onClose={handleCompanyEmployeeInformationEditCloseModal}\r\n                title=\"Add company Employee Edit information\"\r\n              >\r\n                <div>\r\n                  <form onSubmit={updateCompanyEmployeeInformationById}>\r\n                    <div className=\"grid grid-cols-1 gap-4 submit-form\">\r\n                      <div className=\"submit-form \">\r\n                        <div className=\"relative center justify-center flex-1 w-full max-w-full grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\">\r\n                          <TextField\r\n                            id=\"BudgetYear\"\r\n                            label=\"BudgetYear\"\r\n                            variant=\"standard\"\r\n                            color=\"secondary\"\r\n                            size=\"\"\r\n                            required\r\n                            value={editEmployeeInfo.BudgetYear}\r\n                            onChange={(e) =>\r\n                              setEditEmployeeInfo({\r\n                                ...editEmployeeInfo,\r\n                                BudgetYear: e.target.value,\r\n                              })\r\n                            }\r\n                            name=\"BudgetYear\"\r\n                          />\r\n                          <TextField\r\n                            id=\"NumOfPermanentEmp\"\r\n                            label=\"NumOfPermanentEmp\"\r\n                            variant=\"standard\"\r\n                            color=\"secondary\"\r\n                            size=\"\"\r\n                            required\r\n                            value={editEmployeeInfo.NumOfPermanentEmp}\r\n                            onChange={(e) =>\r\n                              setEditEmployeeInfo({\r\n                                ...editEmployeeInfo,\r\n                                NumOfPermanentEmp: e.target.value,\r\n                              })\r\n                            }\r\n                            name=\"NumOfPermanentEmp\"\r\n                          />\r\n                          <TextField\r\n                            id=\"NumOfTempEmp\"\r\n                            label=\"NumOfTempEmp\"\r\n                            variant=\"standard\"\r\n                            color=\"secondary\"\r\n                            size=\"\"\r\n                            required\r\n                            value={editEmployeeInfo.NumOfTempEmp}\r\n                            onChange={(e) =>\r\n                              setEditEmployeeInfo({\r\n                                ...editEmployeeInfo,\r\n                                NumOfTempEmp: e.target.value,\r\n                              })\r\n                            }\r\n                            name=\"NumOfTempEmp\"\r\n                          />\r\n                          <TextField\r\n                            id=\"NumOfContractEmp\"\r\n                            label=\"NumOfContractEmp\"\r\n                            variant=\"standard\"\r\n                            color=\"secondary\"\r\n                            size=\"\"\r\n                            required\r\n                            value={editEmployeeInfo.NumOfContractEmp}\r\n                            onChange={(e) =>\r\n                              setEditEmployeeInfo({\r\n                                ...editEmployeeInfo,\r\n                                NumOfContractEmp: e.target.value,\r\n                              })\r\n                            }\r\n                            name=\"NumOfContractEmp\"\r\n                          />\r\n                          <TextField\r\n                            id=\"SeniorMngtStaffIDTM\"\r\n                            label=\"SeniorMngtStaffIDTM\"\r\n                            variant=\"standard\"\r\n                            color=\"secondary\"\r\n                            size=\"\"\r\n                            required\r\n                            value={editEmployeeInfo.SeniorMngtStaffIDTM}\r\n                            onChange={(e) =>\r\n                              setEditEmployeeInfo({\r\n                                ...editEmployeeInfo,\r\n                                SeniorMngtStaffIDTM: e.target.value,\r\n                              })\r\n                            }\r\n                            name=\"SeniorMngtStaffIDTM\"\r\n                          />\r\n                          <TextField\r\n                            id=\"TotalWorkExperiance\"\r\n                            label=\"TotalWorkExperiance\"\r\n                            variant=\"standard\"\r\n                            color=\"secondary\"\r\n                            size=\"\"\r\n                            required\r\n                            value={editEmployeeInfo.TotalWorkExperiance}\r\n                            onChange={(e) =>\r\n                              setEditEmployeeInfo({\r\n                                ...editEmployeeInfo,\r\n                                TotalWorkExperiance: e.target.value,\r\n                              })\r\n                            }\r\n                            name=\"TotalWorkExperiance\"\r\n                          />\r\n                          <TextField\r\n                            id=\"RelatedWorkExperiance\"\r\n                            label=\"RelatedWorkExperiance\"\r\n                            variant=\"standard\"\r\n                            color=\"secondary\"\r\n                            size=\"\"\r\n                            required\r\n                            value={editEmployeeInfo.RelatedWorkExperiance}\r\n                            onChange={(e) =>\r\n                              setEditEmployeeInfo({\r\n                                ...editEmployeeInfo,\r\n                                RelatedWorkExperiance: e.target.value,\r\n                              })\r\n                            }\r\n                            name=\"RelatedWorkExperiance\"\r\n                          />\r\n                          <TextField\r\n                            id=\"UploadCV\"\r\n                            label=\"UploadCV\"\r\n                            variant=\"standard\"\r\n                            color=\"secondary\"\r\n                            size=\"\"\r\n                            required\r\n                            value={editEmployeeInfo.UploadCV}\r\n                            onChange={(e) =>\r\n                              setEditEmployeeInfo({\r\n                                ...editEmployeeInfo,\r\n                                UploadCV: e.target.value,\r\n                              })\r\n                            }\r\n                            name=\"UploadCV\"\r\n                          />\r\n                          <TextField\r\n                            id=\"AttachWorkExperience\"\r\n                            label=\"AttachWorkExperience\"\r\n                            variant=\"standard\"\r\n                            color=\"secondary\"\r\n                            size=\"\"\r\n                            required\r\n                            value={editEmployeeInfo.AttachWorkExperience}\r\n                            onChange={(e) =>\r\n                              setEditEmployeeInfo({\r\n                                ...editEmployeeInfo,\r\n                                AttachWorkExperience: e.target.value,\r\n                              })\r\n                            }\r\n                            name=\"AttachWorkExperience\"\r\n                          />\r\n                        </div>\r\n                        <button type=\"submit\" className=\"btn btn-info\">\r\n                          Update\r\n                        </button>\r\n                      </div>\r\n                    </div>\r\n                  </form>\r\n                </div>\r\n              </CompanyModal>\r\n              <CompanyModal\r\n                isOpen={isCompanyEmployeeInformationDetailModalOpen}\r\n                onClose={handleCompanyEmployeeInformationDetailCloseModal}\r\n                title=\"Add company Employee detail information\"\r\n              >\r\n                <div>\r\n                  <form onSubmit={updateCompanyEmployeeInformationById}>\r\n                    <div className=\"grid grid-cols-1 gap-4 submit-form\">\r\n                      <div className=\"submit-form \">\r\n                        <div className=\"relative center justify-center flex-1 w-full max-w-full grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\">\r\n                          <TextField\r\n                            id=\"BudgetYear\"\r\n                            label=\"BudgetYear\"\r\n                            variant=\"standard\"\r\n                            color=\"secondary\"\r\n                            size=\"\"\r\n                            required\r\n                            value={employee.BudgetYear}\r\n                            onChange={handleInputChangeEmployee}\r\n                            name=\"BudgetYear\"\r\n                          />\r\n                          <TextField\r\n                            id=\"NumOfPermanentEmp\"\r\n                            label=\"NumOfPermanentEmp\"\r\n                            variant=\"standard\"\r\n                            color=\"secondary\"\r\n                            size=\"\"\r\n                            required\r\n                            value={employee.NumOfPermanentEmp}\r\n                            onChange={handleInputChangeEmployee}\r\n                            name=\"NumOfPermanentEmp\"\r\n                          />\r\n                          <TextField\r\n                            id=\"NumOfTempEmp\"\r\n                            label=\"NumOfTempEmp\"\r\n                            variant=\"standard\"\r\n                            color=\"secondary\"\r\n                            size=\"\"\r\n                            required\r\n                            value={employee.NumOfTempEmp}\r\n                            onChange={handleInputChangeEmployee}\r\n                            name=\"NumOfTempEmp\"\r\n                          />\r\n                          <TextField\r\n                            id=\"NumOfContractEmp\"\r\n                            label=\"NumOfContractEmp\"\r\n                            variant=\"standard\"\r\n                            color=\"secondary\"\r\n                            size=\"\"\r\n                            required\r\n                            value={employee.NumOfContractEmp}\r\n                            onChange={handleInputChangeEmployee}\r\n                            name=\"NumOfContractEmp\"\r\n                          />\r\n                          <TextField\r\n                            id=\"SeniorMngtStaffIDTM\"\r\n                            label=\"SeniorMngtStaffIDTM\"\r\n                            variant=\"standard\"\r\n                            color=\"secondary\"\r\n                            size=\"\"\r\n                            required\r\n                            value={employee.SeniorMngtStaffIDTM}\r\n                            onChange={handleInputChangeEmployee}\r\n                            name=\"SeniorMngtStaffIDTM\"\r\n                          />\r\n                          <TextField\r\n                            id=\"TotalWorkExperiance\"\r\n                            label=\"TotalWorkExperiance\"\r\n                            variant=\"standard\"\r\n                            color=\"secondary\"\r\n                            size=\"\"\r\n                            required\r\n                            value={employee.TotalWorkExperiance}\r\n                            onChange={handleInputChangeEmployee}\r\n                            name=\"TotalWorkExperiance\"\r\n                          />\r\n                          <TextField\r\n                            id=\"RelatedWorkExperiance\"\r\n                            label=\"RelatedWorkExperiance\"\r\n                            variant=\"standard\"\r\n                            color=\"secondary\"\r\n                            size=\"\"\r\n                            required\r\n                            value={employee.RelatedWorkExperiance}\r\n                            onChange={handleInputChangeEmployee}\r\n                            name=\"RelatedWorkExperiance\"\r\n                          />\r\n                          <TextField\r\n                            id=\"UploadCV\"\r\n                            label=\"UploadCV\"\r\n                            variant=\"standard\"\r\n                            color=\"secondary\"\r\n                            size=\"\"\r\n                            required\r\n                            value={employee.UploadCV}\r\n                            onChange={handleInputChangeEmployee}\r\n                            name=\"UploadCV\"\r\n                          />\r\n                          <TextField\r\n                            id=\"AttachWorkExperience\"\r\n                            label=\"AttachWorkExperience\"\r\n                            variant=\"standard\"\r\n                            color=\"secondary\"\r\n                            size=\"\"\r\n                            required\r\n                            value={employee.AttachWorkExperience}\r\n                            onChange={handleInputChangeEmployee}\r\n                            name=\"AttachWorkExperience\"\r\n                          />\r\n                        </div>\r\n                        <button type=\"submit\" className=\"btn btn-info\">\r\n                          Update\r\n                        </button>\r\n                      </div>\r\n                    </div>\r\n                  </form>\r\n                </div>\r\n              </CompanyModal>\r\n            </>\r\n          )}\r\n          {activeStep === 3 && (\r\n            <>\r\n              <div className=\"flex\">\r\n                <button\r\n                  className=\"text-purple-600 inline w-[150px] rounded-md font-medium \"\r\n                  onClick={handleBack}\r\n                >\r\n                  <span>\r\n                    <IconButton aria-label=\"Skip\" color=\"secondary\">\r\n                      <RiSkipBackMiniFill /> Back\r\n                    </IconButton>\r\n                  </span>\r\n                </button>\r\n                <button\r\n                  onClick={() => {\r\n                    handleCompanyContactOpenModal();\r\n                  }}\r\n                  className=\"text-purple-600 rounded-md font-medium \"\r\n                >\r\n                  <span>\r\n                    <IconButton aria-label=\"Add\" color=\"secondary\">\r\n                      <BsPlus /> Add\r\n                    </IconButton>\r\n                  </span>\r\n                  {/* if the company is already registered, Skip button will active  */}\r\n                </button>\r\n                <button\r\n                  className=\"text-purple-600 inline w-[150px] rounded-md font-medium \"\r\n                  onClick={handleSkip}\r\n                >\r\n                  <span>\r\n                    <IconButton aria-label=\"Skip\" color=\"secondary\">\r\n                      <BiSkipNext /> Skip\r\n                    </IconButton>\r\n                  </span>\r\n                </button>\r\n              </div>\r\n              <CompanyModal\r\n                isOpen={isCompanyContactModalOpen}\r\n                onClose={handleCompanyContactCloseModal}\r\n                title=\"Add company contact information\"\r\n              >\r\n                <div>\r\n                  <div className=\"submit-form\">\r\n                    {submitted ? (\r\n                      <div>\r\n                        <h4>You submitted successfully!</h4>\r\n                        <button\r\n                          className=\"btn btn-success\"\r\n                          onClick={newContactInfo}\r\n                        >\r\n                          Add\r\n                        </button>\r\n                      </div>\r\n                    ) : (\r\n                      <div className=\"relative center justify-center flex-1 w-full max-w-full grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\">\r\n                        <TextField\r\n                          id=\"DesignatedPersonFName\"\r\n                          label=\"Designated Person First Name\"\r\n                          variant=\"standard\"\r\n                          color=\"secondary\"\r\n                          size=\"\"\r\n                          sx={{ width: \"45ch\" }}\r\n                          required\r\n                          value={contactInfo.DesignatedPersonFName}\r\n                          onChange={handleInputChangeContactInfo}\r\n                          name=\"DesignatedPersonFName\"\r\n                        />\r\n                        <TextField\r\n                          id=\"DesignatedPersonMName\"\r\n                          label=\"Designated Person Middle Name\"\r\n                          variant=\"standard\"\r\n                          color=\"secondary\"\r\n                          size=\"\"\r\n                          required\r\n                          value={contactInfo.DesignatedPersonMName}\r\n                          onChange={handleInputChangeContactInfo}\r\n                          name=\"DesignatedPersonMName\"\r\n                        />\r\n                        <TextField\r\n                          id=\"DesignatedPersonLName\"\r\n                          label=\"Designated Person Last Name\"\r\n                          variant=\"standard\"\r\n                          color=\"secondary\"\r\n                          size=\"\"\r\n                          required\r\n                          value={contactInfo.DesignatedPersonLName}\r\n                          onChange={handleInputChangeContactInfo}\r\n                          name=\"DesignatedPersonLName\"\r\n                        />\r\n                        <TextField\r\n                          id=\"Position\"\r\n                          label=\"Position\"\r\n                          variant=\"standard\"\r\n                          color=\"secondary\"\r\n                          size=\"\"\r\n                          required\r\n                          value={contactInfo.Position}\r\n                          onChange={handleInputChangeContactInfo}\r\n                          name=\"Position\"\r\n                        />\r\n                        <TextField\r\n                          id=\"MobileNo\"\r\n                          label=\"Mobile Number\"\r\n                          variant=\"standard\"\r\n                          color=\"secondary\"\r\n                          size=\"\"\r\n                          required\r\n                          value={contactInfo.MobileNo}\r\n                          onChange={handleInputChangeContactInfo}\r\n                          name=\"MobileNo\"\r\n                        />\r\n                        <TextField\r\n                          id=\"Telephone\"\r\n                          label=\"Telephone\"\r\n                          variant=\"standard\"\r\n                          color=\"secondary\"\r\n                          size=\"\"\r\n                          required\r\n                          value={contactInfo.Telephone}\r\n                          onChange={handleInputChangeContactInfo}\r\n                          name=\"Telephone\"\r\n                        />\r\n                        <TextField\r\n                          id=\"Email\"\r\n                          label=\"Email\"\r\n                          variant=\"standard\"\r\n                          color=\"secondary\"\r\n                          size=\"\"\r\n                          required\r\n                          value={contactInfo.Email}\r\n                          onChange={handleInputChangeContactInfo}\r\n                          name=\"Email\"\r\n                        />\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n                  <div className=\"flex justify-between\">\r\n                    <button\r\n                      className=\"bg-gray-300 hover:bg-gray-400 text-gray-800 font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\"\r\n                      onClick={handleBack}\r\n                    >\r\n                      Back\r\n                    </button>\r\n                    <button\r\n                      className=\"bg-[purple] hover:bg-purple-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\"\r\n                      onClick={() => {\r\n                        handleNext();\r\n                        saveContactInfo();\r\n                      }}\r\n                    >\r\n                      Save And Next\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n              </CompanyModal>\r\n\r\n              <div className=\"rounded-lg overflow-hidden\">\r\n                <table className=\"table table-bordered table-striped bg-purple-100\">\r\n                  <thead>\r\n                    <tr className=\"bg-purple-200 \">\r\n                      <th className=\"px-2 py-4\"> Name </th>\r\n                      <th className=\"px-2 py-4\"> MName </th>\r\n                      <th className=\"px-2 py-4\"> LName </th>\r\n                      <th className=\"px-2 py-4\"> Position </th>\r\n                      <th className=\"px-2 py-4\"> MobileNo </th>\r\n                      <th className=\"px-2 py-4\"> Telephone </th>\r\n                      <th className=\"px-2 py-4\"> Email </th>\r\n                      <th className=\"px-2 py-4\"> Action </th>\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                    {getContactInformation.map((ContactInformation, index) => (\r\n                      // <tr key={loan.loan_id} rowSpan=\"3\">\r\n                      <tr key={index}>\r\n                        {/* <td className=\"p-2\">{ContactInformation.Id}</td> */}\r\n                        <td className=\"p-2\">\r\n                          {ContactInformation.DesignatedPersonFName}\r\n                        </td>\r\n                        <td className=\"p-2\">\r\n                          {ContactInformation.DesignatedPersonMName}\r\n                        </td>\r\n                        <td className=\"p-2\">\r\n                          {ContactInformation.DesignatedPersonLName}\r\n                        </td>\r\n                        <td className=\"p-2\">{ContactInformation.Position}</td>\r\n                        <td className=\"p-2\">{ContactInformation.MobileNo}</td>\r\n                        <td className=\"p-2\">{ContactInformation.Telephone}</td>\r\n                        <td className=\"p-2\">{ContactInformation.Email}</td>\r\n\r\n                        <td>\r\n                          {\" \"}\r\n                          <button\r\n                            onClick={() => {\r\n                              handleCompanyContactInformationEditOpenModal();\r\n                              getContactInformationBy(ContactInformation.Id);\r\n                            }}\r\n                            className=\"text-purple-600 rounded-md font-semibold \"\r\n                          >\r\n                            <span>\r\n                              <IconButton aria-label=\"Add\" color=\"secondary\">\r\n                                <BsPlus /> Edit\r\n                              </IconButton>\r\n                            </span>\r\n                          </button>\r\n                        </td>\r\n                      </tr>\r\n                    ))}\r\n                  </tbody>\r\n                </table>\r\n              </div>\r\n              <CompanyModal\r\n                isOpen={isCompanyContactInformationEditModalOpen}\r\n                onClose={handleCompanyContactInformationEditCloseModal}\r\n                title=\"Add company contact Edit information\"\r\n              >\r\n                <div>\r\n                  <form onSubmit={updateCompanyContactInformationById}>\r\n                    <div className=\"grid grid-cols-1 gap-4 submit-form\">\r\n                      <div className=\"submit-form \">\r\n                        <div className=\"relative center justify-center flex-1 w-full max-w-full grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\">\r\n                          <TextField\r\n                            id=\"DesignatedPersonFName\"\r\n                            label=\"Designated Person First Name\"\r\n                            variant=\"standard\"\r\n                            color=\"secondary\"\r\n                            size=\"\"\r\n                            sx={{ width: \"45ch\" }}\r\n                            required\r\n                            value={editContactInformation.DesignatedPersonFName}\r\n                            onChange={(e) =>\r\n                              setEditContactInformation({\r\n                                ...editContactInformation,\r\n                                DesignatedPersonFName: e.target.value,\r\n                              })\r\n                            }\r\n                            // onChange={handleInputChangeContactInfo}\r\n                            name=\"DesignatedPersonFName\"\r\n                          />\r\n                          <TextField\r\n                            id=\"DesignatedPersonMName\"\r\n                            label=\"Designated Person Middle Name\"\r\n                            variant=\"standard\"\r\n                            color=\"secondary\"\r\n                            size=\"\"\r\n                            required\r\n                            value={editContactInformation.DesignatedPersonMName}\r\n                            onChange={(e) =>\r\n                              setEditContactInformation({\r\n                                ...editContactInformation,\r\n                                DesignatedPersonMName: e.target.value,\r\n                              })\r\n                            }\r\n                            name=\"DesignatedPersonMName\"\r\n                          />\r\n                          <TextField\r\n                            id=\"DesignatedPersonLName\"\r\n                            label=\"Designated Person Last Name\"\r\n                            variant=\"standard\"\r\n                            color=\"secondary\"\r\n                            size=\"\"\r\n                            required\r\n                            value={editContactInformation.DesignatedPersonLName}\r\n                            onChange={(e) =>\r\n                              setEditContactInformation({\r\n                                ...editContactInformation,\r\n                                DesignatedPersonLName: e.target.value,\r\n                              })\r\n                            }\r\n                            name=\"DesignatedPersonLName\"\r\n                          />\r\n                          <TextField\r\n                            id=\"Position\"\r\n                            label=\"Position\"\r\n                            variant=\"standard\"\r\n                            color=\"secondary\"\r\n                            size=\"\"\r\n                            required\r\n                            value={editContactInformation.Position}\r\n                            onChange={(e) =>\r\n                              setEditContactInformation({\r\n                                ...editContactInformation,\r\n                                Position: e.target.value,\r\n                              })\r\n                            }\r\n                            name=\"Position\"\r\n                          />\r\n                          <TextField\r\n                            id=\"MobileNo\"\r\n                            label=\"Mobile Number\"\r\n                            variant=\"standard\"\r\n                            color=\"secondary\"\r\n                            size=\"\"\r\n                            required\r\n                            value={editContactInformation.MobileNo}\r\n                            onChange={(e) =>\r\n                              setEditContactInformation({\r\n                                ...editContactInformation,\r\n                                MobileNo: e.target.value,\r\n                              })\r\n                            }\r\n                            name=\"MobileNo\"\r\n                          />\r\n                          <TextField\r\n                            id=\"Telephone\"\r\n                            label=\"Telephone\"\r\n                            variant=\"standard\"\r\n                            color=\"secondary\"\r\n                            size=\"\"\r\n                            required\r\n                            value={editContactInformation.Telephone}\r\n                            onChange={(e) =>\r\n                              setEditContactInformation({\r\n                                ...editContactInformation,\r\n                                Telephone: e.target.value,\r\n                              })\r\n                            }\r\n                            name=\"Telephone\"\r\n                          />\r\n                          <TextField\r\n                            id=\"Email\"\r\n                            label=\"Email\"\r\n                            variant=\"standard\"\r\n                            color=\"secondary\"\r\n                            size=\"\"\r\n                            required\r\n                            value={editContactInformation.Email}\r\n                            onChange={(e) =>\r\n                              setEditContactInformation({\r\n                                ...editContactInformation,\r\n                                Email: e.target.value,\r\n                              })\r\n                            }\r\n                            name=\"Email\"\r\n                          />\r\n                        </div>\r\n                        <button type=\"submit\" className=\"btn btn-info\">\r\n                          Update\r\n                        </button>\r\n                      </div>\r\n                    </div>\r\n                  </form>\r\n                </div>\r\n              </CompanyModal>\r\n            </>\r\n          )}\r\n          {activeStep === 4 && (\r\n            <>\r\n              <div className=\"flex\">\r\n                <button\r\n                  className=\"text-purple-600 inline w-[150px] rounded-md font-medium \"\r\n                  onClick={handleBack}\r\n                >\r\n                  <span>\r\n                    <IconButton aria-label=\"Skip\" color=\"secondary\">\r\n                      <RiSkipBackMiniFill /> Back\r\n                    </IconButton>\r\n                  </span>\r\n                </button>\r\n                <button\r\n                  onClick={() => {\r\n                    handleCompanyAccountOpenModal();\r\n                  }}\r\n                  className=\"text-purple-600 rounded-md font-medium \"\r\n                >\r\n                  <span>\r\n                    <IconButton aria-label=\"Add\" color=\"secondary\">\r\n                      <BsPlus /> Add\r\n                    </IconButton>\r\n                  </span>\r\n                  {/* if the company is already registered, Skip button will active  */}\r\n                </button>\r\n                <button\r\n                  className=\"text-purple-600 inline w-[150px] rounded-md font-medium \"\r\n                  onClick={handleSkip}\r\n                >\r\n                  <span>\r\n                    <IconButton aria-label=\"Skip\" color=\"secondary\">\r\n                      <BiSkipNext /> Skip\r\n                    </IconButton>\r\n                  </span>\r\n                </button>\r\n              </div>\r\n              <CompanyModal\r\n                isOpen={isCompanyAccountModalOpen}\r\n                onClose={handleCompanyAccountCloseModal}\r\n                title=\"Add company Account information\"\r\n              >\r\n                <div className=\"grid grid-cols-1 gap-4 submit-form\">\r\n                  <div className=\"submit-form\">\r\n                    {submitted ? (\r\n                      <div>\r\n                        <h4>You submitted successfully!</h4>\r\n                        <button\r\n                          className=\"btn btn-success\"\r\n                          onClick={newAccountInfo}\r\n                        >\r\n                          Add\r\n                        </button>\r\n                      </div>\r\n                    ) : (\r\n                      <div className=\"relative center justify-center flex-1 w-full max-w-full grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\">\r\n                        <TextField\r\n                          id=\"AccountNo\"\r\n                          label=\"Account Number\"\r\n                          variant=\"standard\"\r\n                          color=\"secondary\"\r\n                          size=\"\"\r\n                          required\r\n                          value={accountInfo.AccountNo}\r\n                          onChange={handleInputChangeAccountInfo}\r\n                          name=\"AccountNo\"\r\n                        />\r\n                        <TextField\r\n                          id=\"CustomerId\"\r\n                          label=\"Customer Id\"\r\n                          variant=\"standard\"\r\n                          color=\"secondary\"\r\n                          size=\"\"\r\n                          required\r\n                          value={accountInfo.CustomerId}\r\n                          onChange={handleInputChangeAccountInfo}\r\n                          name=\"CustomerId\"\r\n                        />\r\n                        <TextField\r\n                          id=\"Branch\"\r\n                          label=\"Branch\"\r\n                          variant=\"standard\"\r\n                          color=\"secondary\"\r\n                          size=\"\"\r\n                          required\r\n                          value={accountInfo.Branch}\r\n                          onChange={handleInputChangeAccountInfo}\r\n                          name=\"Branch\"\r\n                        />\r\n                        <TextField\r\n                          id=\"District\"\r\n                          label=\"District\"\r\n                          variant=\"standard\"\r\n                          color=\"secondary\"\r\n                          size=\"\"\r\n                          required\r\n                          value={accountInfo.District}\r\n                          onChange={handleInputChangeAccountInfo}\r\n                          name=\"District\"\r\n                        />\r\n                        <TextField\r\n                          id=\"Other\"\r\n                          label=\"Other\"\r\n                          variant=\"standard\"\r\n                          color=\"secondary\"\r\n                          size=\"\"\r\n                          required\r\n                          value={accountInfo.Other}\r\n                          onChange={handleInputChangeAccountInfo}\r\n                          name=\"Other\"\r\n                        />\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n                  <div className=\"flex justify-between\">\r\n                    <button\r\n                      className=\"bg-gray-300 hover:bg-gray-400 text-gray-800 font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\"\r\n                      onClick={handleBack}\r\n                    >\r\n                      Back\r\n                    </button>\r\n                    {/* <button\r\n                      className=\"bg-gray-300 hover:bg-gray-400 text-gray-800 font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\"\r\n                      onClick={handleSkip}\r\n                    >\r\n                      Skip\r\n                    </button> */}\r\n                    <button\r\n                      className=\"bg-[purple] hover:bg-purple-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\"\r\n                      onClick={() => {\r\n                        handleNext();\r\n                        saveAccountInfo();\r\n                      }}\r\n                    >\r\n                      save and next\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n              </CompanyModal>\r\n              <div className=\"rounded-lg overflow-hidden\">\r\n                <table className=\"table table-bordered table-striped bg-purple-100\">\r\n                  <thead>\r\n                    {/* <tr className=\"bg-purple-200 \"> */}\r\n                    <th className=\"px-2 py-4\"> AccountNo </th>\r\n                    <th className=\"px-2 py-4\"> CustomerId </th>\r\n                    <th className=\"px-2 py-4\"> Branch </th>\r\n                    <th className=\"px-2 py-4\"> District </th>\r\n                    <th className=\"px-2 py-4\"> Other </th>\r\n                    <th className=\"px-2 py-4\"> Action </th>\r\n                  </thead>\r\n                  <tbody>\r\n                    {getAccountInformation.map((account, index) => (\r\n                      <tr key={index}>\r\n                        <td>{account.AccountNo}</td>\r\n                        <td>{account.CustomerId}</td>\r\n                        <td>{account.Branch}</td>\r\n                        <td>{account.District}</td>\r\n                        <td>{account.Other}</td>\r\n                        <td>\r\n                          {\" \"}\r\n                          <button\r\n                            onClick={() => {\r\n                              handleCompanyAccountInformationEditOpenModal();\r\n                              getAccountInformationBy(account.Id);\r\n                            }}\r\n                            className=\"text-purple-600 rounded-md font-semibold \"\r\n                          >\r\n                            <span>\r\n                              <IconButton aria-label=\"Add\" color=\"secondary\">\r\n                                <BsPlus /> Edit\r\n                              </IconButton>\r\n                            </span>\r\n                          </button>\r\n                        </td>\r\n                      </tr>\r\n                    ))}\r\n                  </tbody>\r\n                </table>\r\n              </div>\r\n              <CompanyModal\r\n                isOpen={isCompanyAccountInformationEditModalOpen}\r\n                onClose={handleCompanyAccountInformationEditCloseModal}\r\n                title=\"Add company account Edit information\"\r\n              >\r\n                <div>\r\n                  <form onSubmit={updateCompanyAccountInformationById}>\r\n                    <div className=\"grid grid-cols-1 gap-4 submit-form\">\r\n                      <div className=\"submit-form \">\r\n                        <div className=\"relative center justify-center flex-1 w-full max-w-full grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\">\r\n                          <TextField\r\n                            id=\"AccountNo\"\r\n                            label=\"Account Number\"\r\n                            variant=\"standard\"\r\n                            color=\"secondary\"\r\n                            size=\"\"\r\n                            required\r\n                            value={editAccountInfo.AccountNo}\r\n                            onChange={(e) =>\r\n                              setEditAccountInfo({\r\n                                ...editAccountInfo,\r\n                                AccountNo: e.target.value,\r\n                              })\r\n                            }\r\n                            name=\"AccountNo\"\r\n                          />\r\n\r\n                          <TextField\r\n                            id=\"CustomerId\"\r\n                            label=\"Customer Id\"\r\n                            variant=\"standard\"\r\n                            color=\"secondary\"\r\n                            size=\"\"\r\n                            required\r\n                            value={editAccountInfo.CustomerId}\r\n                            onChange={(e) =>\r\n                              setEditAccountInfo({\r\n                                ...editAccountInfo,\r\n                                CustomerId: e.target.value,\r\n                              })\r\n                            }\r\n                            name=\"CustomerId\"\r\n                          />\r\n                          <TextField\r\n                            id=\"Branch\"\r\n                            label=\"Branch\"\r\n                            variant=\"standard\"\r\n                            color=\"secondary\"\r\n                            size=\"\"\r\n                            required\r\n                            value={editAccountInfo.Branch}\r\n                            onChange={(e) =>\r\n                              setEditAccountInfo({\r\n                                ...editAccountInfo,\r\n                                Branch: e.target.value,\r\n                              })\r\n                            }\r\n                            name=\"Branch\"\r\n                          />\r\n                          <TextField\r\n                            id=\"District\"\r\n                            label=\"District\"\r\n                            variant=\"standard\"\r\n                            color=\"secondary\"\r\n                            size=\"\"\r\n                            required\r\n                            value={editAccountInfo.District}\r\n                            onChange={(e) =>\r\n                              setEditAccountInfo({\r\n                                ...editAccountInfo,\r\n                                District: e.target.value,\r\n                              })\r\n                            }\r\n                            name=\"District\"\r\n                          />\r\n                          <TextField\r\n                            id=\"Other\"\r\n                            label=\"Other\"\r\n                            variant=\"standard\"\r\n                            color=\"secondary\"\r\n                            size=\"\"\r\n                            required\r\n                            value={editAccountInfo.Other}\r\n                            onChange={(e) =>\r\n                              setEditAccountInfo({\r\n                                ...editAccountInfo,\r\n                                Other: e.target.value,\r\n                              })\r\n                            }\r\n                            name=\"Other\"\r\n                          />\r\n                        </div>\r\n                        <button type=\"submit\" className=\"btn btn-info\">\r\n                          Update\r\n                        </button>\r\n                      </div>\r\n                    </div>\r\n                  </form>\r\n                </div>\r\n              </CompanyModal>\r\n            </>\r\n          )}\r\n          {activeStep === 5 && (\r\n            <>\r\n              <div className=\"flex\">\r\n                <button\r\n                  className=\"text-purple-600 inline w-[150px] rounded-md font-medium \"\r\n                  onClick={handleBack}\r\n                >\r\n                  <span>\r\n                    <IconButton aria-label=\"Skip\" color=\"secondary\">\r\n                      <RiSkipBackMiniFill /> Back\r\n                    </IconButton>\r\n                  </span>\r\n                </button>\r\n                <button\r\n                  onClick={() => {\r\n                    handleCompanyTradeOpenModal();\r\n                  }}\r\n                  className=\"text-purple-600 rounded-md font-medium \"\r\n                >\r\n                  <span>\r\n                    <IconButton aria-label=\"Add\" color=\"secondary\">\r\n                      <BsPlus /> Add\r\n                    </IconButton>\r\n                  </span>\r\n                  {/* if the company is already registered, Skip button will active  */}\r\n                </button>\r\n                <button\r\n                  className=\"text-purple-600 inline w-[150px] rounded-md font-medium \"\r\n                  onClick={handleSkip}\r\n                >\r\n                  <span>\r\n                    <IconButton aria-label=\"Skip\" color=\"secondary\">\r\n                      <BiSkipNext /> Skip\r\n                    </IconButton>\r\n                  </span>\r\n                </button>\r\n              </div>\r\n              <CompanyModal\r\n                isOpen={isCompanyTradeModalOpen}\r\n                onClose={handleCompanyTradeCloseModal}\r\n                title=\"Add company Trade information\"\r\n              >\r\n                <div>\r\n                  <div className=\"submit-form\">\r\n                    {submitted ? (\r\n                      <div>\r\n                        <h4>You submitted successfully!</h4>\r\n                        <button\r\n                          className=\"btn btn-success\"\r\n                          onClick={newTradeInfo}\r\n                        >\r\n                          Add\r\n                        </button>\r\n                      </div>\r\n                    ) : (\r\n                      <div className=\"relative center justify-center flex-1 w-full max-w-full grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\">\r\n                        <TextField\r\n                          id=\"TradeRegistrationNo\"\r\n                          label=\"Trade Registration Nnumber\"\r\n                          variant=\"standard\"\r\n                          color=\"secondary\"\r\n                          size=\"\"\r\n                          required\r\n                          value={tradeInfo.TradeRegistrationNo}\r\n                          onChange={handleInputChangeTradeInfo}\r\n                          name=\"TradeRegistrationNo\"\r\n                        />\r\n                        <div>\r\n                          {currentFile && (\r\n                            <div className=\"progress\">\r\n                              <div\r\n                                className=\"progress-bar progress-bar-info progress-bar-striped\"\r\n                                role=\"progressbar\"\r\n                                aria-valuenow={progress}\r\n                                aria-valuemin=\"0\"\r\n                                aria-valuemax=\"100\"\r\n                                style={{ width: progress + \"%\" }}\r\n                              >\r\n                                {progress}%\r\n                              </div>\r\n                            </div>\r\n                          )}\r\n\r\n                          <label className=\"btn btn-default\">\r\n                            <input type=\"file\" onChange={selectFile1} />\r\n                          </label>\r\n\r\n                          <button\r\n                            className=\"btn btn-success\"\r\n                            disabled={!selectedFiles}\r\n                            onClick={upload1}\r\n                          >\r\n                            Upload\r\n                          </button>\r\n                          <div className=\"alert alert-light\" role=\"alert\">\r\n                            {message}\r\n                          </div>\r\n                        </div>\r\n\r\n                        <TextField\r\n                          id=\"TradeLicenseNo\"\r\n                          label=\"Trade License Number\"\r\n                          variant=\"standard\"\r\n                          color=\"secondary\"\r\n                          size=\"\"\r\n                          required\r\n                          value={tradeInfo.TradeLicenseNo}\r\n                          onChange={handleInputChangeTradeInfo}\r\n                          name=\"TradeLicenseNo\"\r\n                        />\r\n                        <TextField\r\n                          id=\"IssueDate\"\r\n                          label=\"IssueDate\"\r\n                          variant=\"standard\"\r\n                          color=\"secondary\"\r\n                          size=\"\"\r\n                          required\r\n                          value={tradeInfo.IssueDate}\r\n                          onChange={handleInputChangeTradeInfo}\r\n                          name=\"IssueDate\"\r\n                        />\r\n                        <TextField\r\n                          id=\"RenewedDate\"\r\n                          label=\"Renewed Date\"\r\n                          variant=\"standard\"\r\n                          color=\"secondary\"\r\n                          size=\"\"\r\n                          required\r\n                          value={tradeInfo.RenewedDate}\r\n                          onChange={handleInputChangeTradeInfo}\r\n                          name=\"RenewedDate\"\r\n                        />\r\n                        <TextField\r\n                          id=\"ValidityDate\"\r\n                          label=\"Validity Date\"\r\n                          variant=\"standard\"\r\n                          color=\"secondary\"\r\n                          size=\"\"\r\n                          required\r\n                          value={tradeInfo.ValidityDate}\r\n                          onChange={handleInputChangeTradeInfo}\r\n                          name=\"ValidityDate\"\r\n                        />\r\n                        <FormControl variant=\"standard\" sx={{ minWidth: 120 }}>\r\n                          <InputLabel id=\"countrylbl\" color=\"secondary\">\r\n                            {\" \"}\r\n                            TradeSector{\" \"}\r\n                          </InputLabel>\r\n                          <Select\r\n                            color=\"secondary\"\r\n                            onChange={(event) => {\r\n                              handleTradeIndustryType(event.target.value);\r\n                              setHoldTradeSectorId(event.target.value);\r\n                            }}\r\n                            labelId=\"countrylbl\"\r\n                            id=\"countrySelect\"\r\n                            label=\"Country\"\r\n                          >\r\n                            <MenuItem value=\"\">\r\n                              <em>None</em>\r\n                            </MenuItem>\r\n                            {tradeSector.map((newTradeSector) => (\r\n                              <MenuItem\r\n                                key={newTradeSector.Id}\r\n                                // CountryID={newTradeSector.Id}\r\n                                value={newTradeSector.Id}\r\n                              >\r\n                                {newTradeSector.Name}\r\n                              </MenuItem>\r\n                            ))}\r\n                          </Select>\r\n                        </FormControl>\r\n                        <FormControl variant=\"standard\" sx={{ minWidth: 120 }}>\r\n                          <InputLabel id=\"countrylbl\" color=\"secondary\">\r\n                            {\" \"}\r\n                            Trade Industry type{\" \"}\r\n                          </InputLabel>\r\n                          <Select\r\n                            color=\"secondary\"\r\n                            onChange={(event) => {\r\n                              handleTradeBusinessType(event.target.value);\r\n                              setTradeIndustryTypeId(event.target.value);\r\n                            }}\r\n                            labelId=\"countrylbl\"\r\n                            id=\"countrySelect\"\r\n                            label=\"Country\"\r\n                          >\r\n                            <MenuItem value=\"\">\r\n                              <em>None</em>\r\n                            </MenuItem>\r\n                            {tradeIndustryType.map((newTradeIndustrayType) => (\r\n                              <MenuItem\r\n                                key={newTradeIndustrayType.Id}\r\n                                // CountryID={newTradeIndustrayType.Id}\r\n                                value={newTradeIndustrayType.Id}\r\n                              >\r\n                                {newTradeIndustrayType.Name}\r\n                              </MenuItem>\r\n                            ))}\r\n                          </Select>\r\n                        </FormControl>\r\n\r\n                        <FormControl variant=\"standard\" sx={{ minWidth: 120 }}>\r\n                          <InputLabel id=\"countrylbl\" color=\"secondary\">\r\n                            {\" \"}\r\n                            Trade Industry type{\" \"}\r\n                          </InputLabel>\r\n                          <Select\r\n                            color=\"secondary\"\r\n                            onChange={(event) =>\r\n                              (tradeInfo.TradeBusinessTypeID =\r\n                                event.target.value)\r\n                            }\r\n                            labelId=\"countrylbl\"\r\n                            id=\"countrySelect\"\r\n                            label=\"Country\"\r\n                          >\r\n                            <MenuItem value=\"\">\r\n                              <em>None</em>\r\n                            </MenuItem>\r\n                            {tradeBusinessType.map((newTradeIndustrayType) => (\r\n                              <MenuItem\r\n                                key={newTradeIndustrayType.Id}\r\n                                TradeBusinessTypeID={newTradeIndustrayType.Id}\r\n                                value={newTradeIndustrayType.Id}\r\n                              >\r\n                                {newTradeIndustrayType.Name}\r\n                              </MenuItem>\r\n                            ))}\r\n                          </Select>\r\n                        </FormControl>\r\n                        <div>\r\n                          {currentFile && (\r\n                            <div className=\"progress\">\r\n                              <div\r\n                                className=\"progress-bar progress-bar-info progress-bar-striped\"\r\n                                role=\"progressbar\"\r\n                                aria-valuenow={progress}\r\n                                aria-valuemin=\"0\"\r\n                                aria-valuemax=\"100\"\r\n                                style={{ width: progress + \"%\" }}\r\n                              >\r\n                                {progress}%\r\n                              </div>\r\n                            </div>\r\n                          )}\r\n\r\n                          <label className=\"btn btn-default\">\r\n                            <input type=\"file\" onChange={selectFile} />\r\n                          </label>\r\n\r\n                          <button\r\n                            className=\"btn btn-success\"\r\n                            disabled={!selectedFiles}\r\n                            onClick={upload}\r\n                          >\r\n                            Uploaded\r\n                          </button>\r\n                          <div className=\"alert alert-light\" role=\"alert\">\r\n                            {message}\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n                  <div className=\"flex justify-between\">\r\n                    <button\r\n                      className=\"bg-gray-300 hover:bg-gray-400 text-gray-800 font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\"\r\n                      onClick={handleBack}\r\n                    >\r\n                      Back\r\n                    </button>\r\n                    <button\r\n                      className=\"bg-gray-300 hover:bg-gray-400 text-gray-800 font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\"\r\n                      onClick={handleSkip}\r\n                    >\r\n                      Skip\r\n                    </button>\r\n                    <button\r\n                      className=\"bg-[purple] hover:bg-purple-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\"\r\n                      onClick={() => {\r\n                        handleNext();\r\n                        saveTradeInfo();\r\n                      }}\r\n                    >\r\n                      save and next\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n              </CompanyModal>\r\n              <div className=\"rounded-lg overflow-hidden\">\r\n                <table className=\"table table-bordered table-striped bg-purple-100\">\r\n                  <thead>\r\n                    <th className=\"px-2 py-4\"> Trade Registration No </th>\r\n                    {/* <th className=\"px-2 py-4\"> Upload Trade Reg Certi</th> */}\r\n                    <th className=\"px-2 py-4\"> TradeLicenseNo</th>\r\n                    <th className=\"px-2 py-4\"> IssueDate </th>\r\n                    <th className=\"px-2 py-4\"> Renewed Date </th>\r\n                    <th className=\"px-2 py-4\"> Validity Date </th>\r\n                    <th className=\"px-2 py-4\"> TradeBusinessTypeID</th>\r\n                    {/* <th className=\"px-2 py-4\"> UploadTradeLicense</th> */}\r\n                    <th className=\"px-2 py-4\"> Action </th>\r\n                  </thead>\r\n                  <tbody>\r\n                    {getTradeInformation.map((tradeInformation, index) => (\r\n                      // <tr key={loan.loan_id} rowSpan=\"3\">\r\n                      <tr key={index}>\r\n                        {/* <td>{tradeInformation.Id}</td> */}\r\n                        <td>{tradeInformation.TradeRegistrationNo}</td>\r\n                        {/* <td>{tradeInformation.UploadTradeRegCerti}</td> */}\r\n                        <td>{tradeInformation.TradeLicenseNo}</td>\r\n                        <td>{tradeInformation.IssueDate}</td>\r\n                        <td>{tradeInformation.RenewedDate}</td>\r\n                        <td>{tradeInformation.ValidityDate}</td>\r\n                        <td>{tradeInformation.tradeBusinessType}</td>\r\n                        {/* <td>{tradeInformation.UploadTradeLicense}</td> */}\r\n                        <td>\r\n                          {\" \"}\r\n                          <button\r\n                            onClick={() => {\r\n                              handleCompanyTradeInformationEditOpenModal();\r\n                              getTradeInformationBy(tradeInformation.Id);\r\n                            }}\r\n                            className=\"text-purple-600 rounded-md font-semibold \"\r\n                          >\r\n                            <span>\r\n                              <IconButton aria-label=\"Add\" color=\"secondary\">\r\n                                <BsPlus /> Edit\r\n                              </IconButton>\r\n                            </span>\r\n                          </button>\r\n                        </td>\r\n                      </tr>\r\n                    ))}\r\n                  </tbody>\r\n                </table>\r\n              </div>\r\n              <CompanyModal\r\n                isOpen={isCompanyTradeInformationEditModalOpen}\r\n                onClose={handleCompanyTradeInformationEditCloseModal}\r\n                title=\"Add company account Edit information\"\r\n              >\r\n                <div>\r\n                  <form onSubmit={updateCompanyTradeInformationById}>\r\n                    <div className=\"grid grid-cols-1 gap-4 submit-form\">\r\n                      <div className=\"submit-form \">\r\n                        <div className=\"relative center justify-center flex-1 w-full max-w-full grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\">\r\n                          <TextField\r\n                            id=\"TradeRegistrationNo\"\r\n                            label=\"Trade Registration Nnumber\"\r\n                            variant=\"standard\"\r\n                            color=\"secondary\"\r\n                            size=\"\"\r\n                            required\r\n                            value={editTradeInfo.TradeRegistrationNo}\r\n                            onChange={(e) =>\r\n                              setEditTradeInfo({\r\n                                ...editTradeInfo,\r\n                                TradeRegistrationNo: e.target.value,\r\n                              })\r\n                            }\r\n                            name=\"TradeRegistrationNo\"\r\n                          />\r\n                          <div>\r\n                            {currentFile && (\r\n                              <div className=\"progress\">\r\n                                <div\r\n                                  className=\"progress-bar progress-bar-info progress-bar-striped\"\r\n                                  role=\"progressbar\"\r\n                                  aria-valuenow={progress}\r\n                                  aria-valuemin=\"0\"\r\n                                  aria-valuemax=\"100\"\r\n                                  style={{ width: progress + \"%\" }}\r\n                                >\r\n                                  {progress}%\r\n                                </div>\r\n                              </div>\r\n                            )}\r\n                            <label className=\"btn btn-default\">\r\n                              <input type=\"file\" onChange={selectFile1Edit} />\r\n                            </label>\r\n\r\n                            <button\r\n                              className=\"btn btn-success\"\r\n                              disabled={!selectedFiles}\r\n                              onClick={upload1Edit}\r\n                            >\r\n                              Upload\r\n                            </button>\r\n                            <div className=\"alert alert-light\" role=\"alert\">\r\n                              {message}\r\n                            </div>\r\n                          </div>\r\n\r\n                          <TextField\r\n                            id=\"TradeLicenseNo\"\r\n                            label=\"Trade License Number\"\r\n                            variant=\"standard\"\r\n                            color=\"secondary\"\r\n                            size=\"\"\r\n                            required\r\n                            // value={tradeInfo.TradeLicenseNo}\r\n                            // onChange={handleInputChangeTradeInfo}\r\n                            value={editTradeInfo.TradeLicenseNo}\r\n                            onChange={(e) =>\r\n                              setEditTradeInfo({\r\n                                ...editTradeInfo,\r\n                                TradeLicenseNo: e.target.value,\r\n                              })\r\n                            }\r\n                            name=\"TradeLicenseNo\"\r\n                          />\r\n                          <TextField\r\n                            id=\"IssueDate\"\r\n                            label=\"IssueDate\"\r\n                            variant=\"standard\"\r\n                            color=\"secondary\"\r\n                            size=\"\"\r\n                            required\r\n                            // value={tradeInfo.IssueDate}\r\n                            // onChange={handleInputChangeTradeInfo}\r\n                            value={editTradeInfo.IssueDate}\r\n                            onChange={(e) =>\r\n                              setEditTradeInfo({\r\n                                ...editTradeInfo,\r\n                                IssueDate: e.target.value,\r\n                              })\r\n                            }\r\n                            name=\"IssueDate\"\r\n                          />\r\n                          <TextField\r\n                            id=\"RenewedDate\"\r\n                            label=\"Renewed Date\"\r\n                            variant=\"standard\"\r\n                            color=\"secondary\"\r\n                            size=\"\"\r\n                            required\r\n                            // value={tradeInfo.RenewedDate}\r\n                            // onChange={handleInputChangeTradeInfo}\r\n                            value={editTradeInfo.RenewedDate}\r\n                            onChange={(e) =>\r\n                              setEditTradeInfo({\r\n                                ...editTradeInfo,\r\n                                RenewedDate: e.target.value,\r\n                              })\r\n                            }\r\n                            name=\"RenewedDate\"\r\n                          />\r\n                          <TextField\r\n                            id=\"ValidityDate\"\r\n                            label=\"Validity Date\"\r\n                            variant=\"standard\"\r\n                            color=\"secondary\"\r\n                            size=\"\"\r\n                            required\r\n                            // value={tradeInfo.ValidityDate}\r\n                            // onChange={handleInputChangeTradeInfo}\r\n                            value={editTradeInfo.ValidityDate}\r\n                            onChange={(e) =>\r\n                              setEditTradeInfo({\r\n                                ...editTradeInfo,\r\n                                ValidityDate: e.target.value,\r\n                              })\r\n                            }\r\n                            name=\"ValidityDate\"\r\n                          />\r\n                          <FormControl\r\n                            variant=\"standard\"\r\n                            sx={{ minWidth: 120 }}\r\n                          >\r\n                            <InputLabel id=\"countrylbl\" color=\"secondary\">\r\n                              {\" \"}\r\n                              TradeSector{\" \"}\r\n                            </InputLabel>\r\n                            <Select\r\n                              color=\"secondary\"\r\n                              onChange={(event) => {\r\n                                handleTradeIndustryType(event.target.value);\r\n                                setHoldTradeSectorId(event.target.value);\r\n                              }}\r\n                              labelId=\"countrylbl\"\r\n                              id=\"countrySelect\"\r\n                              label=\"Country\"\r\n                            >\r\n                              <MenuItem value=\"\">\r\n                                <em>None</em>\r\n                              </MenuItem>\r\n                              {tradeSector.map((newTradeSector) => (\r\n                                <MenuItem\r\n                                  key={newTradeSector.Id}\r\n                                  // CountryID={newTradeSector.Id}\r\n                                  value={newTradeSector.Id}\r\n                                >\r\n                                  {newTradeSector.Name}\r\n                                </MenuItem>\r\n                              ))}\r\n                            </Select>\r\n                          </FormControl>\r\n                          <FormControl\r\n                            variant=\"standard\"\r\n                            sx={{ minWidth: 120 }}\r\n                          >\r\n                            <InputLabel id=\"countrylbl\" color=\"secondary\">\r\n                              {\" \"}\r\n                              Trade Industry type{\" \"}\r\n                            </InputLabel>\r\n                            <Select\r\n                              color=\"secondary\"\r\n                              onChange={(event) => {\r\n                                handleTradeBusinessType(event.target.value);\r\n                                setTradeIndustryTypeId(event.target.value);\r\n                              }}\r\n                              labelId=\"countrylbl\"\r\n                              id=\"countrySelect\"\r\n                              label=\"Country\"\r\n                            >\r\n                              <MenuItem value=\"\">\r\n                                <em>None</em>\r\n                              </MenuItem>\r\n                              {tradeIndustryType.map(\r\n                                (newTradeIndustrayType) => (\r\n                                  <MenuItem\r\n                                    key={newTradeIndustrayType.Id}\r\n                                    // CountryID={newTradeIndustrayType.Id}\r\n                                    value={newTradeIndustrayType.Id}\r\n                                  >\r\n                                    {newTradeIndustrayType.Name}\r\n                                  </MenuItem>\r\n                                )\r\n                              )}\r\n                            </Select>\r\n                          </FormControl>\r\n\r\n                          <FormControl\r\n                            variant=\"standard\"\r\n                            sx={{ minWidth: 120 }}\r\n                          >\r\n                            <InputLabel id=\"countrylbl\" color=\"secondary\">\r\n                              {\" \"}\r\n                              Trade Industry type{\" \"}\r\n                            </InputLabel>\r\n                            <Select\r\n                              color=\"secondary\"\r\n                              onChange={(event) =>\r\n                                (tradeInfo.TradeBusinessTypeID =\r\n                                  event.target.value)\r\n                              }\r\n                              labelId=\"countrylbl\"\r\n                              id=\"countrySelect\"\r\n                              label=\"Country\"\r\n                            >\r\n                              <MenuItem value=\"\">\r\n                                <em>None</em>\r\n                              </MenuItem>\r\n                              {tradeBusinessType.map(\r\n                                (newTradeIndustrayType) => (\r\n                                  <MenuItem\r\n                                    key={newTradeIndustrayType.Id}\r\n                                    TradeBusinessTypeID={\r\n                                      newTradeIndustrayType.Id\r\n                                    }\r\n                                    value={newTradeIndustrayType.Id}\r\n                                  >\r\n                                    {newTradeIndustrayType.Name}\r\n                                  </MenuItem>\r\n                                )\r\n                              )}\r\n                            </Select>\r\n                          </FormControl>\r\n                          <div>\r\n                            {currentFile && (\r\n                              <div className=\"progress\">\r\n                                <div\r\n                                  className=\"progress-bar progress-bar-info progress-bar-striped\"\r\n                                  role=\"progressbar\"\r\n                                  aria-valuenow={progress}\r\n                                  aria-valuemin=\"0\"\r\n                                  aria-valuemax=\"100\"\r\n                                  style={{ width: progress + \"%\" }}\r\n                                >\r\n                                  {progress}%\r\n                                </div>\r\n                              </div>\r\n                            )}\r\n\r\n                            <label className=\"btn btn-default\">\r\n                              <input type=\"file\" onChange={selectFileEdit} />\r\n                            </label>\r\n\r\n                            <button\r\n                              className=\"btn btn-success\"\r\n                              disabled={!selectedFiles}\r\n                              onClick={uploadEdit}\r\n                            >\r\n                              Upload\r\n                            </button>\r\n                            <div className=\"alert alert-light\" role=\"alert\">\r\n                              {message}\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                        <button type=\"submit\" className=\"btn btn-info\">\r\n                          Update\r\n                        </button>\r\n                      </div>\r\n                    </div>\r\n                  </form>\r\n                </div>\r\n              </CompanyModal>\r\n            </>\r\n          )}\r\n          {activeStep === 6 && (\r\n            <>\r\n              <div className=\"flex\">\r\n                <button\r\n                  className=\"text-purple-600 inline w-[150px] rounded-md font-medium \"\r\n                  onClick={handleBack}\r\n                >\r\n                  <span>\r\n                    <IconButton aria-label=\"Skip\" color=\"secondary\">\r\n                      <RiSkipBackMiniFill /> Back\r\n                    </IconButton>\r\n                  </span>\r\n                </button>\r\n                <button\r\n                  onClick={() => {\r\n                    handleCompanyNGOAndEmbassyOpenModal();\r\n                  }}\r\n                  className=\"text-purple-600 rounded-md font-medium \"\r\n                >\r\n                  <span>\r\n                    <IconButton aria-label=\"Add\" color=\"secondary\">\r\n                      <BsPlus /> Add\r\n                    </IconButton>\r\n                  </span>\r\n                  {/* if the company is already registered, Skip button will active  */}\r\n                </button>\r\n                <button\r\n                  className=\"text-purple-600 inline w-[150px] rounded-md font-medium \"\r\n                  onClick={handleSkip}\r\n                >\r\n                  <span>\r\n                    <IconButton aria-label=\"Skip\" color=\"secondary\">\r\n                      <BiSkipNext /> Skip\r\n                    </IconButton>\r\n                  </span>\r\n                </button>\r\n              </div>\r\n              <CompanyModal\r\n                isOpen={isCompanyNGOAndEmbassyModalOpen}\r\n                onClose={handleCompanyNGOAndEmbassyCloseModal}\r\n                title=\"Add company NGO and Embassy information\"\r\n              >\r\n                <div>\r\n                  <div className=\"submit-form\">\r\n                    {submitted ? (\r\n                      <div>\r\n                        <h4>You submitted successfully!</h4>\r\n                        <button\r\n                          className=\"btn btn-success\"\r\n                          onClick={newNGOAndEmbassyInfo}\r\n                        >\r\n                          Add\r\n                        </button>\r\n                      </div>\r\n                    ) : (\r\n                      <div className=\"relative center justify-center flex-1 w-full max-w-full grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\">\r\n                        <TextField\r\n                          id=\"AuthRefNo\"\r\n                          label=\"AuthRefNo\"\r\n                          variant=\"standard\"\r\n                          color=\"secondary\"\r\n                          size=\"\"\r\n                          required\r\n                          value={NGOAndEmbassy.AuthRefNo}\r\n                          onChange={handleInputChangeNGOAndEmbassy}\r\n                          name=\"AuthRefNo\"\r\n                        />\r\n\r\n                        <TextField\r\n                          id=\"AuthDate\"\r\n                          label=\"AuthDate\"\r\n                          variant=\"standard\"\r\n                          color=\"secondary\"\r\n                          size=\"\"\r\n                          required\r\n                          value={NGOAndEmbassy.AuthDate}\r\n                          onChange={handleInputChangeNGOAndEmbassy}\r\n                          name=\"AuthDate\"\r\n                        />\r\n                        <div>\r\n                          {currentFile && (\r\n                            <div className=\"progress\">\r\n                              <div\r\n                                className=\"progress-bar progress-bar-info progress-bar-striped\"\r\n                                role=\"progressbar\"\r\n                                aria-valuenow={progress}\r\n                                aria-valuemin=\"0\"\r\n                                aria-valuemax=\"100\"\r\n                                style={{ width: progress + \"%\" }}\r\n                              >\r\n                                {progress}%\r\n                              </div>\r\n                            </div>\r\n                          )}\r\n\r\n                          <label className=\"btn btn-default\">\r\n                            <input type=\"file\" onChange={selectFile2} />\r\n                          </label>\r\n\r\n                          <button\r\n                            className=\"btn btn-success\"\r\n                            disabled={!selectedFiles}\r\n                            onClick={upload2}\r\n                          >\r\n                            Upload Permision Letter\r\n                          </button>\r\n                          <div className=\"alert alert-light\" role=\"alert\">\r\n                            {message}\r\n                          </div>\r\n                        </div>\r\n                        <div>\r\n                          {currentFile && (\r\n                            <div className=\"progress\">\r\n                              <div\r\n                                className=\"progress-bar progress-bar-info progress-bar-striped\"\r\n                                role=\"progressbar\"\r\n                                aria-valuenow={progress}\r\n                                aria-valuemin=\"0\"\r\n                                aria-valuemax=\"100\"\r\n                                style={{ width: progress + \"%\" }}\r\n                              >\r\n                                {progress}%\r\n                              </div>\r\n                            </div>\r\n                          )}\r\n                          <label className=\"btn btn-default\">\r\n                            <input type=\"file\" onChange={selectFile3} />\r\n                          </label>\r\n                          <button\r\n                            className=\"btn btn-success\"\r\n                            disabled={!selectedFiles}\r\n                            onClick={upload3}\r\n                          >\r\n                            Upload Parent Company Legal Document\r\n                          </button>\r\n                          <div className=\"alert alert-light\" role=\"alert\">\r\n                            {message}\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n                  <div className=\"flex justify-between\">\r\n                    <button\r\n                      className=\"bg-gray-300 hover:bg-gray-400 text-gray-800 font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\"\r\n                      onClick={handleBack}\r\n                    >\r\n                      Back\r\n                    </button>\r\n                    <button\r\n                      className=\"bg-[purple] hover:bg-purple-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\"\r\n                      onClick={() => {\r\n                        handleNext();\r\n                        saveNGOAndEmbassy();\r\n                      }}\r\n                    >\r\n                      save and next\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n              </CompanyModal>\r\n              <div>\r\n                <table\r\n                  className=\"table table-bordered table-striped\"\r\n                  border=\"1\"\r\n                >\r\n                  <thead>\r\n                    <th> AuthRefNo </th>\r\n                    <th> AuthDate </th>\r\n                    <th> UploadPermisionLetter </th>\r\n                    {/* <th> UploadParentCompanyLegalDocument </th> */}\r\n                    <th> Action</th>\r\n                  </thead>\r\n                  <tbody>\r\n                    {getNGOAndEmbassyInformation.map(\r\n                      (getNGOAndEmbassyInformation, index) => (\r\n                        // <tr key={loan.loan_id} rowSpan=\"3\">\r\n                        <tr key={index}>\r\n                          <td>{getNGOAndEmbassyInformation.AuthRefNo}</td>\r\n                          <td>{getNGOAndEmbassyInformation.AuthDate}</td>\r\n                          <td>\r\n                            {getNGOAndEmbassyInformation.UploadPermisionLetter}\r\n                          </td>\r\n                          <td>{getNGOAndEmbassyInformation.TaxClearanceID}</td>\r\n                          <td>\r\n                            <button\r\n                              onClick={() => {\r\n                                // refresh();\r\n                                setTaxInformationId(\r\n                                  getNGOAndEmbassyInformation.TaxClearanceID\r\n                                );\r\n                                handleCompanyTaxSoleOpenModal();\r\n                                setHandleSoleId(getNGOAndEmbassyInformation.Id);\r\n                                fetchSoleTax(\r\n                                  getNGOAndEmbassyInformation.TaxClearanceID\r\n                                );\r\n                              }}\r\n                              className=\"text-purple-600 rounded-md font-semibold \"\r\n                            >\r\n                              Tax detail\r\n                            </button>\r\n                          </td>\r\n                          <td>\r\n                            {\" \"}\r\n                            <button\r\n                              onClick={() => {\r\n                                handleCompanyNGOAndEmbassyInformationEditOpenModal();\r\n                                getNGOAndEmbassyInformationBy(\r\n                                  getNGOAndEmbassyInformation.Id\r\n                                );\r\n                              }}\r\n                              className=\"text-purple-600 rounded-md font-semibold \"\r\n                            >\r\n                              <span>\r\n                                <IconButton aria-label=\"Add\" color=\"secondary\">\r\n                                  <BsPlus /> Edit\r\n                                </IconButton>\r\n                              </span>\r\n                            </button>\r\n                          </td>\r\n                        </tr>\r\n                      )\r\n                    )}\r\n                  </tbody>\r\n                </table>\r\n              </div>\r\n              <CompanyModal\r\n                isOpen={isCompanyNGOAndEmbassyInformationEditModalOpen}\r\n                onClose={handleCompanyNGOAndEmbassyInformationEditCloseModal}\r\n                title=\"Add company NGOAndEmbassy Edit information\"\r\n              >\r\n                <div>\r\n                  <form onSubmit={updateCompanyNGOAndEmbassyInformationById}>\r\n                    <div className=\"grid grid-cols-1 gap-4 submit-form\">\r\n                      <div className=\"submit-form \">\r\n                        <div className=\"relative center justify-center flex-1 w-full max-w-full grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\">\r\n                          <TextField\r\n                            id=\"AuthRefNo\"\r\n                            label=\"AuthRefNo\"\r\n                            variant=\"standard\"\r\n                            color=\"secondary\"\r\n                            size=\"\"\r\n                            required\r\n                            value={editNGOAndEmbassyInfo.AuthRefNo}\r\n                            onChange={(e) =>\r\n                              setEditNGOAndEmbassyInfo({\r\n                                ...editNGOAndEmbassyInfo,\r\n                                AuthRefNo: e.target.value,\r\n                              })\r\n                            }\r\n                            name=\"AuthRefNo\"\r\n                          />\r\n\r\n                          <TextField\r\n                            id=\"AuthDate\"\r\n                            label=\"AuthDate\"\r\n                            variant=\"standard\"\r\n                            color=\"secondary\"\r\n                            size=\"\"\r\n                            required\r\n                            value={editNGOAndEmbassyInfo.AuthDate}\r\n                            onChange={(e) =>\r\n                              setEditNGOAndEmbassyInfo({\r\n                                ...editNGOAndEmbassyInfo,\r\n                                AuthDate: e.target.value,\r\n                              })\r\n                            }\r\n                            name=\"AuthDate\"\r\n                          />\r\n                          <div>\r\n                            {currentFile && (\r\n                              <div className=\"progress\">\r\n                                <div\r\n                                  className=\"progress-bar progress-bar-info progress-bar-striped\"\r\n                                  role=\"progressbar\"\r\n                                  aria-valuenow={progress}\r\n                                  aria-valuemin=\"0\"\r\n                                  aria-valuemax=\"100\"\r\n                                  style={{ width: progress + \"%\" }}\r\n                                >\r\n                                  {progress}%\r\n                                </div>\r\n                              </div>\r\n                            )}\r\n                            <label className=\"btn btn-default\">\r\n                              <input type=\"file\" onChange={selectFile2Edit} />\r\n                            </label>\r\n\r\n                            <button\r\n                              className=\"btn btn-success\"\r\n                              disabled={!selectedFiles}\r\n                              onClick={upload2Edit}\r\n                            >\r\n                              Upload\r\n                            </button>\r\n                            <div className=\"alert alert-light\" role=\"alert\">\r\n                              {message}\r\n                            </div>\r\n                          </div>\r\n                          <div>\r\n                            {currentFile && (\r\n                              <div className=\"progress\">\r\n                                <div\r\n                                  className=\"progress-bar progress-bar-info progress-bar-striped\"\r\n                                  role=\"progressbar\"\r\n                                  aria-valuenow={progress}\r\n                                  aria-valuemin=\"0\"\r\n                                  aria-valuemax=\"100\"\r\n                                  style={{ width: progress + \"%\" }}\r\n                                >\r\n                                  {progress}%\r\n                                </div>\r\n                              </div>\r\n                            )}\r\n                            <label className=\"btn btn-default\">\r\n                              <input type=\"file\" onChange={selectFile3Edit} />\r\n                            </label>\r\n\r\n                            <button\r\n                              className=\"btn btn-success\"\r\n                              disabled={!selectedFiles}\r\n                              onClick={upload3Edit}\r\n                            >\r\n                              Upload\r\n                            </button>\r\n                            <div className=\"alert alert-light\" role=\"alert\">\r\n                              {message}\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                        <button type=\"submit\" className=\"btn btn-info\">\r\n                          Update\r\n                        </button>\r\n                      </div>\r\n                    </div>\r\n                  </form>\r\n                </div>\r\n              </CompanyModal>\r\n\r\n              <div>\r\n                <CompanyModal\r\n                  isOpen={isCompanyTaxSoleModalOpen}\r\n                  onClose={handleCompanyTaxSoleCloseModal}\r\n                  title=\"Add company NGO tax information\"\r\n                >\r\n                  <div className=\"rounded-lg overflow-hidden\">\r\n                    {getSoleTax && (\r\n                      <table className=\"table table-bordered table-striped bg-purple-100\">\r\n                        <thead>\r\n                          <th className=\"px-2 py-4\"> Name </th>\r\n                          <th className=\"px-2 py-4\"> TinNo </th>\r\n                          <th className=\"px-2 py-4\"> Issue Date </th>\r\n                          <th className=\"px-2 py-4\"> Expired date </th>\r\n                          <th className=\"px-2 py-4\"> Tax Debi </th>\r\n                          <th className=\"px-2 py-4\">\r\n                            Tax Clearance Certificate\r\n                          </th>\r\n                          <th className=\"px-2 py-4\"> Action </th>\r\n                        </thead>\r\n                        <tbody>\r\n                          {/* {getSoleTax.map((soleTax, index) => ( */}\r\n                          <tr\r\n                          //  key={index}\r\n                          >\r\n                            {/* <td>{getSoleTax.Id}</td> */}\r\n                            <td>{getSoleTax.Name}</td>\r\n                            <td>{getSoleTax.TinNo}</td>\r\n                            <td>{getSoleTax.IssueDate}</td>\r\n                            <td>{getSoleTax.Expireddate}</td>\r\n                            <td>{getSoleTax.TaxDebi}</td>\r\n                            <td>{getSoleTax.TaxClearanceCertificate}</td>\r\n                            <button\r\n                              onClick={() => {\r\n                                handleCompanyTaxInformationEditOpenModal();\r\n                                updateTaxById(getSoleTax.Id);\r\n                                // saveTaxSoleInfo(sole.Id);\r\n                              }}\r\n                              className=\"text-purple-600 rounded-md font-semibold \"\r\n                            >\r\n                              <span>\r\n                                <IconButton aria-label=\"Add\" color=\"secondary\">\r\n                                  <BsPlus /> Edit\r\n                                </IconButton>\r\n                              </span>\r\n                            </button>\r\n                          </tr>\r\n                          {/* ))} */}\r\n                        </tbody>\r\n                      </table>\r\n                    )}\r\n                  </div>\r\n                  <button\r\n                    onClick={() => setToggleTaxInfo(!toggleTaxSoleInfo)}\r\n                    className=\"text-purple-600 rounded-md font-medium \"\r\n                  >\r\n                    Add Tax\r\n                  </button>\r\n                  {toggleTaxSoleInfo && (\r\n                    <div className=\"submit-form\">\r\n                      {submitted ? (\r\n                        <div>\r\n                          <h4>You submitted successfully!</h4>\r\n                          <button\r\n                            className=\"btn btn-success\"\r\n                            onClick={newTaxNGOInfo}\r\n                          >\r\n                            Add\r\n                          </button>\r\n                        </div>\r\n                      ) : (\r\n                        <div className=\"relative center justify-center flex-1 w-full max-w-full grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\">\r\n                          <TextField\r\n                            id=\"Name\"\r\n                            label=\"Name\"\r\n                            variant=\"standard\"\r\n                            color=\"secondary\"\r\n                            size=\"\"\r\n                            required\r\n                            value={taxNGOInfo.Name}\r\n                            onChange={handleInputChangeTaxNGOInfo}\r\n                            name=\"Name\"\r\n                          />\r\n                          <TextField\r\n                            id=\"TinNo\"\r\n                            label=\"TinNo\"\r\n                            variant=\"standard\"\r\n                            color=\"secondary\"\r\n                            size=\"\"\r\n                            required\r\n                            value={taxNGOInfo.TinNo}\r\n                            onChange={handleInputChangeTaxNGOInfo}\r\n                            name=\"TinNo\"\r\n                          />\r\n                          <TextField\r\n                            id=\"IssueDate\"\r\n                            label=\"IssueDate\"\r\n                            variant=\"standard\"\r\n                            color=\"secondary\"\r\n                            size=\"\"\r\n                            required\r\n                            value={taxNGOInfo.IssueDate}\r\n                            onChange={handleInputChangeTaxNGOInfo}\r\n                            name=\"IssueDate\"\r\n                          />\r\n                          <TextField\r\n                            id=\"ExpiredDate\"\r\n                            label=\"ExpiredDate\"\r\n                            variant=\"standard\"\r\n                            color=\"secondary\"\r\n                            size=\"\"\r\n                            required\r\n                            value={taxNGOInfo.ExpiredDate}\r\n                            onChange={handleInputChangeTaxNGOInfo}\r\n                            name=\"ExpiredDate\"\r\n                          />\r\n                          <TextField\r\n                            id=\"TaxDebi\"\r\n                            label=\"TaxDebi\"\r\n                            variant=\"standard\"\r\n                            color=\"secondary\"\r\n                            size=\"\"\r\n                            required\r\n                            value={taxNGOInfo.TaxDebi}\r\n                            onChange={handleInputChangeTaxNGOInfo}\r\n                            name=\"TaxDebi\"\r\n                          />\r\n                          <TextField\r\n                            id=\"TaxClearanceCertificate\"\r\n                            label=\"TaxClearanceCertificate\"\r\n                            variant=\"standard\"\r\n                            color=\"secondary\"\r\n                            size=\"\"\r\n                            required\r\n                            value={taxNGOInfo.TaxClearanceCertificate}\r\n                            onChange={handleInputChangeTaxNGOInfo}\r\n                            name=\"TaxClearanceCertificate\"\r\n                          />\r\n                        </div>\r\n                      )}\r\n                      <button\r\n                        className=\"bg-[purple] hover:bg-purple-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\"\r\n                        onClick={() => {\r\n                          saveTaxNGOInfo();\r\n                          setToggleTaxInfo(!toggleTaxSoleInfo);\r\n                        }}\r\n                      >\r\n                        save Tax\r\n                      </button>\r\n                    </div>\r\n                  )}\r\n                </CompanyModal>\r\n              </div>\r\n              <CompanyModal\r\n                isOpen={isCompanyTaxInformationEditModalOpen}\r\n                onClose={handleCompanyTaxEditCloseModal}\r\n                title=\"Add company sole and partinership tax edit information\"\r\n              >\r\n                <div>\r\n                  <form onSubmit={updateTaxInfo}>\r\n                    <div className=\"relative center justify-center flex-1 w-full max-w-full grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\">\r\n                      <TextField\r\n                        id=\"Name\"\r\n                        label=\"Name\"\r\n                        variant=\"standard\"\r\n                        color=\"secondary\"\r\n                        size=\"\"\r\n                        required\r\n                        value={editTaxInfo.Name}\r\n                        onChange={(e) =>\r\n                          setEditTaxInfo({\r\n                            ...editTaxInfo,\r\n                            Name: e.target.value,\r\n                          })\r\n                        }\r\n                        name=\"Name\"\r\n                      />\r\n                      <TextField\r\n                        id=\"TinNo\"\r\n                        label=\"TinNo\"\r\n                        variant=\"standard\"\r\n                        color=\"secondary\"\r\n                        size=\"\"\r\n                        required\r\n                        value={editTaxInfo.TinNo}\r\n                        onChange={(e) =>\r\n                          setEditTaxInfo({\r\n                            ...editTaxInfo,\r\n                            TinNo: e.target.value,\r\n                          })\r\n                        }\r\n                        name=\"TinNo\"\r\n                      />\r\n                      <TextField\r\n                        id=\"IssueDate\"\r\n                        label=\"IssueDate\"\r\n                        variant=\"standard\"\r\n                        color=\"secondary\"\r\n                        size=\"\"\r\n                        required\r\n                        value={editTaxInfo.IssueDate}\r\n                        onChange={(e) =>\r\n                          setEditTaxInfo({\r\n                            ...editTaxInfo,\r\n                            IssueDate: e.target.value,\r\n                          })\r\n                        }\r\n                        name=\"IssueDate\"\r\n                      />\r\n                      <TextField\r\n                        id=\"ExpiredDate\"\r\n                        label=\"ExpiredDate\"\r\n                        variant=\"standard\"\r\n                        color=\"secondary\"\r\n                        size=\"\"\r\n                        required\r\n                        value={editTaxInfo.Expireddate}\r\n                        onChange={(e) =>\r\n                          setEditTaxInfo({\r\n                            ...editTaxInfo,\r\n                            Expireddate: e.target.value,\r\n                          })\r\n                        }\r\n                        name=\"ExpiredDate\"\r\n                      />\r\n                      <TextField\r\n                        id=\"TaxDebi\"\r\n                        label=\"TaxDebi\"\r\n                        variant=\"standard\"\r\n                        color=\"secondary\"\r\n                        size=\"\"\r\n                        required\r\n                        value={editTaxInfo.TaxDebi}\r\n                        onChange={(e) =>\r\n                          setEditTaxInfo({\r\n                            ...editTaxInfo,\r\n                            TaxDebi: e.target.value,\r\n                          })\r\n                        }\r\n                        name=\"TaxDebi\"\r\n                      />\r\n                      <TextField\r\n                        id=\"TaxClearanceCertificate\"\r\n                        label=\"TaxClearanceCertificate\"\r\n                        variant=\"standard\"\r\n                        color=\"secondary\"\r\n                        size=\"\"\r\n                        required\r\n                        value={editTaxInfo.TaxClearanceCertificate}\r\n                        onChange={(e) =>\r\n                          setEditTaxInfo({\r\n                            ...editTaxInfo,\r\n                            TaxClearanceCertificate: e.target.value,\r\n                          })\r\n                        }\r\n                        name=\"TaxClearanceCertificate\"\r\n                      />\r\n                    </div>\r\n                    <div>\r\n                      <button type=\"submit\" className=\"btn btn-info\">\r\n                        Update\r\n                      </button>\r\n                    </div>\r\n                  </form>\r\n                </div>\r\n              </CompanyModal>\r\n            </>\r\n          )}\r\n\r\n          {activeStep === 7 && (\r\n            <>\r\n              <div className=\"flex\">\r\n                <button\r\n                  className=\"text-purple-600 inline w-[150px] rounded-md font-medium \"\r\n                  onClick={handleBack}\r\n                >\r\n                  <span>\r\n                    <IconButton aria-label=\"Skip\" color=\"secondary\">\r\n                      <RiSkipBackMiniFill /> Back\r\n                    </IconButton>\r\n                  </span>\r\n                </button>\r\n                <button\r\n                  onClick={() => {\r\n                    handleCompanySoleAndPrtinershipOpenModal();\r\n                    newSoleAndPartnership();\r\n                  }}\r\n                  className=\"text-purple-600 rounded-md font-medium \"\r\n                >\r\n                  <span>\r\n                    <IconButton aria-label=\"Add\" color=\"secondary\">\r\n                      <BsPlus /> Add\r\n                    </IconButton>\r\n                  </span>\r\n                  {/* if the company is already registered, Skip button will active  */}\r\n                </button>\r\n                <button\r\n                  className=\"text-purple-600 inline w-[150px] rounded-md font-medium \"\r\n                  onClick={handleSkip}\r\n                >\r\n                  <span>\r\n                    <IconButton aria-label=\"Skip\" color=\"secondary\">\r\n                      <BiSkipNext /> Skip\r\n                    </IconButton>\r\n                  </span>\r\n                </button>\r\n              </div>\r\n              <CompanyModal\r\n                isOpen={isCompanySoleAndPrtinershipModalOpen}\r\n                onClose={handleCompanySoleAndPrtinershipCloseModal}\r\n                title=\"Add company sole and partinership information\"\r\n              >\r\n                <div>\r\n                  <div className=\"submit-form\">\r\n                    {submitted ? (\r\n                      <div>\r\n                        <div>here is </div>\r\n                      </div>\r\n                    ) : (\r\n                      <div className=\"relative center justify-center flex-1 w-full max-w-full grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\">\r\n                        <TextField\r\n                          id=\"FirstName\"\r\n                          label=\"FirstName\"\r\n                          variant=\"standard\"\r\n                          color=\"secondary\"\r\n                          size=\"\"\r\n                          required\r\n                          value={soleAndPartnership.FirstName}\r\n                          onChange={handleInputChangeSoleAndPartnership}\r\n                          name=\"FirstName\"\r\n                        />\r\n                        <TextField\r\n                          id=\"MiddleName\"\r\n                          label=\"Middle Name\"\r\n                          variant=\"standard\"\r\n                          color=\"secondary\"\r\n                          size=\"\"\r\n                          required\r\n                          value={soleAndPartnership.MiddleName}\r\n                          onChange={handleInputChangeSoleAndPartnership}\r\n                          name=\"MiddleName\"\r\n                        />\r\n                        <TextField\r\n                          id=\"LastName\"\r\n                          label=\"Last Name\"\r\n                          variant=\"standard\"\r\n                          color=\"secondary\"\r\n                          size=\"\"\r\n                          required\r\n                          value={soleAndPartnership.LastName}\r\n                          onChange={handleInputChangeSoleAndPartnership}\r\n                          name=\"LastName\"\r\n                        />\r\n                        <FormControl variant=\"standard\" sx={{ minWidth: 120 }}>\r\n                          <InputLabel id=\"countrylbl\" color=\"secondary\">\r\n                            {\" \"}\r\n                            Nationality{\" \"}\r\n                          </InputLabel>\r\n                          <Select\r\n                            color=\"secondary\"\r\n                            onChange={(event) =>\r\n                              (soleAndPartnership.NationalityID =\r\n                                event.target.value)\r\n                            }\r\n                            labelId=\"countrylbl\"\r\n                            id=\"countrySelect\"\r\n                            label=\"Country\"\r\n                          >\r\n                            <MenuItem value=\"\">\r\n                              <em>None</em>\r\n                            </MenuItem>\r\n                            {country.map((yourCounty) => (\r\n                              <MenuItem\r\n                                key={yourCounty.Id}\r\n                                NationalityID={yourCounty.Id}\r\n                                value={yourCounty.Id}\r\n                              >\r\n                                {yourCounty.Name}\r\n                              </MenuItem>\r\n                            ))}\r\n                          </Select>\r\n                        </FormControl>\r\n                        <FormControl variant=\"standard\" sx={{ minWidth: 120 }}>\r\n                          <InputLabel id=\"countrylbl\" color=\"secondary\">\r\n                            {\" \"}\r\n                            Country Of Origin{\" \"}\r\n                          </InputLabel>\r\n                          <Select\r\n                            color=\"secondary\"\r\n                            onChange={(event) =>\r\n                              (soleAndPartnership.CountryOfOriginID =\r\n                                event.target.value)\r\n                            }\r\n                            labelId=\"countrylbl\"\r\n                            id=\"countrySelect\"\r\n                            label=\"Country\"\r\n                          >\r\n                            <MenuItem value=\"\">\r\n                              <em>None</em>\r\n                            </MenuItem>\r\n                            {country.map((yourCounty) => (\r\n                              <MenuItem\r\n                                key={yourCounty.Id}\r\n                                NationalityID={yourCounty.Id}\r\n                                value={yourCounty.Id}\r\n                              >\r\n                                {yourCounty.Name}\r\n                              </MenuItem>\r\n                            ))}\r\n                          </Select>\r\n                        </FormControl>\r\n                        <FormControl variant=\"standard\" sx={{ minWidth: 120 }}>\r\n                          <InputLabel id=\"countrylbl\" color=\"secondary\">\r\n                            {\" \"}\r\n                            Country Of Residence{\" \"}\r\n                          </InputLabel>\r\n                          <Select\r\n                            color=\"secondary\"\r\n                            onChange={(event) =>\r\n                              (soleAndPartnership.CountryOfResidenceID =\r\n                                event.target.value)\r\n                            }\r\n                            labelId=\"countrylbl\"\r\n                            id=\"countrySelect\"\r\n                            label=\"Country\"\r\n                          >\r\n                            <MenuItem value=\"\">\r\n                              <em>None</em>\r\n                            </MenuItem>\r\n                            {country.map((yourCounty) => (\r\n                              <MenuItem\r\n                                key={yourCounty.Id}\r\n                                NationalityID={yourCounty.Id}\r\n                                value={yourCounty.Id}\r\n                              >\r\n                                {yourCounty.Name}\r\n                              </MenuItem>\r\n                            ))}\r\n                          </Select>\r\n                        </FormControl>\r\n                        <FormControl variant=\"standard\" sx={{ minWidth: 120 }}>\r\n                          <InputLabel id=\"countrylbl\" color=\"secondary\">\r\n                            {\" \"}\r\n                            Proof Of Identity Type{\" \"}\r\n                          </InputLabel>\r\n                          <Select\r\n                            color=\"secondary\"\r\n                            onChange={(event) =>\r\n                              (soleAndPartnership.ProofOfIdentityTypeID =\r\n                                event.target.value)\r\n                            }\r\n                            labelId=\"countrylbl\"\r\n                            id=\"countrySelect\"\r\n                            label=\"Country\"\r\n                          >\r\n                            <MenuItem value=\"\">\r\n                              <em>None</em>\r\n                            </MenuItem>\r\n                            {proofOfIdentityType.map(\r\n                              (yourProofOfIdentityType) => (\r\n                                <MenuItem\r\n                                  key={yourProofOfIdentityType.Id}\r\n                                  ProofOfIdentityTypeID={\r\n                                    yourProofOfIdentityType.Id\r\n                                  }\r\n                                  value={yourProofOfIdentityType.Id}\r\n                                >\r\n                                  {yourProofOfIdentityType.Name}\r\n                                </MenuItem>\r\n                              )\r\n                            )}\r\n                          </Select>\r\n                        </FormControl>\r\n                        <TextField\r\n                          id=\"UploadProofOfIdentity\"\r\n                          label=\"UploadProofOfIdentity\"\r\n                          variant=\"standard\"\r\n                          color=\"secondary\"\r\n                          size=\"\"\r\n                          required\r\n                          value={soleAndPartnership.UploadProofOfIdentity}\r\n                          onChange={handleInputChangeSoleAndPartnership}\r\n                          name=\"UploadProofOfIdentity\"\r\n                        />\r\n                        <TextField\r\n                          id=\"ProofOfIdentityIssuedDate\"\r\n                          label=\"ProofOfIdentityIssuedDate\"\r\n                          variant=\"standard\"\r\n                          color=\"secondary\"\r\n                          size=\"\"\r\n                          required\r\n                          value={soleAndPartnership.ProofOfIdentityIssuedDate}\r\n                          onChange={handleInputChangeSoleAndPartnership}\r\n                          name=\"ProofOfIdentityIssuedDate\"\r\n                        />\r\n                        <TextField\r\n                          id=\"ProofOfIdentityExpiredDate\"\r\n                          label=\"ProofOfIdentityExpiredDate\"\r\n                          variant=\"standard\"\r\n                          color=\"secondary\"\r\n                          size=\"\"\r\n                          required\r\n                          value={soleAndPartnership.ProofOfIdentityExpiredDate}\r\n                          onChange={handleInputChangeSoleAndPartnership}\r\n                          name=\"ProofOfIdentityExpiredDate\"\r\n                        />\r\n                        <FormControl variant=\"standard\" sx={{ minWidth: 120 }}>\r\n                          <InputLabel id=\"countrylbl\" color=\"secondary\">\r\n                            {\" \"}\r\n                            Martail Status{\" \"}\r\n                          </InputLabel>\r\n                          <Select\r\n                            color=\"secondary\"\r\n                            onChange={(event) => {\r\n                              soleAndPartnership.MartailStatusID =\r\n                                event.target.value;\r\n                              setMartailStatusHold(\r\n                                (soleAndPartnership.MartailStatusID =\r\n                                  event.target.value)\r\n                              );\r\n                            }}\r\n                            labelId=\"countrylbl\"\r\n                            id=\"countrySelect\"\r\n                            label=\"Country\"\r\n                          >\r\n                            <MenuItem value=\"\">\r\n                              <em>None</em>\r\n                            </MenuItem>\r\n                            {maritalStatus.map((maritalSt) => (\r\n                              <MenuItem\r\n                                key={maritalSt.Id}\r\n                                NationalityID={maritalSt.Id}\r\n                                value={maritalSt.Id}\r\n                              >\r\n                                <button>{maritalSt.Name}</button>\r\n                              </MenuItem>\r\n                            ))}\r\n                          </Select>\r\n                        </FormControl>\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n                  <div className=\"flex justify-between\">\r\n                    <button\r\n                      className=\"bg-gray-300 hover:bg-gray-400 text-gray-800 font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\"\r\n                      onClick={handleBack}\r\n                    >\r\n                      Back\r\n                    </button>\r\n                    <button\r\n                      className=\"bg-[purple] hover:bg-purple-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\"\r\n                      onClick={saveSoleAndPartnership}\r\n                    >\r\n                      save\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n              </CompanyModal>\r\n              <div className=\"rounded-lg overflow-hidden\">\r\n                <table className=\"table table-bordered table-striped bg-purple-100\">\r\n                  <thead>\r\n                    <th className=\"px-2 py-4\"> First Name </th>\r\n                    <th className=\"px-2 py-4\"> Middle Name </th>\r\n                    <th className=\"px-2 py-4\"> Last Name </th>\r\n                    <th className=\"px-2 py-4\"> Nationality ID </th>\r\n                    <th className=\"px-2 py-4\"> Country Of Origin </th>\r\n                    <th className=\"px-2 py-4\"> Country Of Residence </th>\r\n                    <th className=\"px-2 py-4\"> Proof Of Identity Type</th>\r\n                    <th className=\"px-2 py-4\">Proof Of Identity Issued Date</th>\r\n                    <th className=\"px-2 py-4\">\r\n                      Proof Of Identity Expired Date\r\n                    </th>\r\n                    <th className=\"px-2 py-4\"> Martail Status datail</th>\r\n                    <th className=\"px-2 py-4\"> Tax Clearance</th>\r\n                    <th className=\"px-2 py-4\"> Grauntor</th>\r\n                    <th className=\"px-2 py-4\"> Action</th>\r\n                  </thead>\r\n                  <tbody>\r\n                    {getSoleAndPartinershipInformation.map((sole, index) => (\r\n                      // <tr key={loan.loan_id} rowSpan=\"3\">\r\n                      <tr key={index}>\r\n                        {/* <td>{sole.Id}</td> */}\r\n                        <td>{sole.FirstName}</td>\r\n                        <td>{sole.MiddleName}</td>\r\n                        <td>{sole.LastName}</td>\r\n                        <td>{sole.Nationality}</td>\r\n                        <td>{sole.CountryOfOrigin}</td>\r\n                        <td>{sole.CountryOfResidence}</td>\r\n                        <td>{sole.ProofOfIdentityType}</td>\r\n                        <td>{sole.ProofOfIdentityIssuedDate}</td>\r\n                        <td>{sole.ProofOfIdentityExpiredDate}</td>\r\n                        {/* <td>{sole.MartailStatus}</td> */}\r\n                        {/* <td>{sole.TaxClearanceID}</td> */}\r\n                        <td>\r\n                          <button\r\n                            onClick={() => {\r\n                              setHandleSoleId(sole.Id);\r\n                              fetchMartialStatus(sole.MartailStatus);\r\n                              setMartialStatusIdInformationId(sole.Id);\r\n                              getsoleMarriedMatialStatus(sole.Id);\r\n                              getsoleDivorcedMatialStatus(sole.Id);\r\n                              getsoleWidowedMatialStatus(sole.Id);\r\n                              getsoleUnmarriedMatialStatus(sole.Id);\r\n                            }}\r\n                            className=\"text-purple-600 rounded-md font-semibold \"\r\n                          >\r\n                            martial status detail\r\n                          </button>\r\n                        </td>\r\n                        <td>\r\n                          <button\r\n                            onClick={() => {\r\n                              // refresh();\r\n                              handleCompanyTaxSoleOpenModal();\r\n                              setHandleSoleId(sole.Id);\r\n                              fetchSoleTax(sole.TaxClearanceID);\r\n                            }}\r\n                            className=\"text-purple-600 rounded-md font-semibold \"\r\n                          >\r\n                            Tax detail\r\n                          </button>\r\n                        </td>\r\n                        <td>\r\n                          <button\r\n                            onClick={() => {\r\n                              // refresh();\r\n                              handleCompanyGrauntorSoleOpenModal();\r\n                              setHandleSoleId(sole.Id);\r\n                              fetchSoleGrauntor(sole.GuarantorId);\r\n                            }}\r\n                            className=\"text-purple-600 rounded-md font-semibold \"\r\n                          >\r\n                            grauntor detail\r\n                          </button>\r\n                        </td>\r\n                        {/* <td>\r\n                          <button\r\n                            onClick={() => {\r\n                              // refresh();\r\n                              handleCompanyEmployeeSoleOpenModal();\r\n                              setHandleSoleId(sole.Id);\r\n                              fetchSoleTax(sole.TaxClearanceID);\r\n                            }}\r\n                            className=\"text-purple-600 rounded-md font-semibold \"\r\n                          >\r\n                            Employee detail\r\n                          </button>\r\n                        </td> */}\r\n                        <td>\r\n                          <button\r\n                            onClick={() => {\r\n                              handleCompanySoleAndPartnershipInformationEditOpenModal();\r\n                              getSoleANdPartinershipById(sole.Id);\r\n                              setSoleAndPartinershipInformationId(sole.Id);\r\n                            }}\r\n                            className=\"text-purple-600 rounded-md font-semibold \"\r\n                          >\r\n                            <span>\r\n                              <IconButton aria-label=\"Add\" color=\"secondary\">\r\n                                <BsPlus /> Edit\r\n                              </IconButton>\r\n                            </span>\r\n                          </button>\r\n                        </td>\r\n                      </tr>\r\n                    ))}\r\n                  </tbody>\r\n                </table>\r\n              </div>\r\n              <div>\r\n                <CompanyModal\r\n                  isOpen={isCompanySoleAndPartnershipInformationEditModalOpen}\r\n                  onClose={handleCompanySoleAndPrtinershipEditCloseModal}\r\n                  title=\"Add company sole and partinership edit information\"\r\n                >\r\n                  <form onSubmit={updateSoleAndPartinershipInfo}>\r\n                    <div className=\"relative center justify-center flex-1 w-full max-w-full grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\">\r\n                      <TextField\r\n                        id=\"FirstName\"\r\n                        label=\"FirstName\"\r\n                        variant=\"standard\"\r\n                        color=\"secondary\"\r\n                        size=\"\"\r\n                        required\r\n                        value={editSoleAndPrtinershipInfo.FirstName}\r\n                        onChange={(e) =>\r\n                          setEditSoleAndPrtinershipInfo({\r\n                            ...editSoleAndPrtinershipInfo,\r\n                            FirstName: e.target.value,\r\n                          })\r\n                        }\r\n                        name=\"FirstName\"\r\n                      />\r\n                      <TextField\r\n                        id=\"MiddleName\"\r\n                        label=\"Middle Name\"\r\n                        variant=\"standard\"\r\n                        color=\"secondary\"\r\n                        size=\"\"\r\n                        required\r\n                        value={editSoleAndPrtinershipInfo.MiddleName}\r\n                        onChange={(e) =>\r\n                          setEditSoleAndPrtinershipInfo({\r\n                            ...editSoleAndPrtinershipInfo,\r\n                            MiddleName: e.target.value,\r\n                          })\r\n                        }\r\n                        name=\"MiddleName\"\r\n                      />\r\n                      <TextField\r\n                        id=\"LastName\"\r\n                        label=\"Last Name\"\r\n                        variant=\"standard\"\r\n                        color=\"secondary\"\r\n                        size=\"\"\r\n                        required\r\n                        value={editSoleAndPrtinershipInfo.LastName}\r\n                        onChange={(e) =>\r\n                          setEditSoleAndPrtinershipInfo({\r\n                            ...editSoleAndPrtinershipInfo,\r\n                            LastName: e.target.value,\r\n                          })\r\n                        }\r\n                        name=\"LastName\"\r\n                      />\r\n                      <FormControl variant=\"standard\" sx={{ minWidth: 120 }}>\r\n                        <InputLabel id=\"countrylbl\" color=\"secondary\">\r\n                          {\" \"}\r\n                          Nationality{\" \"}\r\n                        </InputLabel>\r\n                        <Select\r\n                          color=\"secondary\"\r\n                          onChange={(event) =>\r\n                            (editSoleAndPrtinershipInfo.NationalityID =\r\n                              event.target.value)\r\n                          }\r\n                          labelId=\"countrylbl\"\r\n                          id=\"countrySelect\"\r\n                          label=\"Country\"\r\n                        >\r\n                          <MenuItem value=\"\">\r\n                            <em>None</em>\r\n                          </MenuItem>\r\n                          {country.map((yourCounty) => (\r\n                            <MenuItem\r\n                              key={yourCounty.Id}\r\n                              NationalityID={yourCounty.Id}\r\n                              value={yourCounty.Id}\r\n                            >\r\n                              {yourCounty.Name}\r\n                            </MenuItem>\r\n                          ))}\r\n                        </Select>\r\n                      </FormControl>\r\n                      <FormControl variant=\"standard\" sx={{ minWidth: 120 }}>\r\n                        <InputLabel id=\"countrylbl\" color=\"secondary\">\r\n                          {\" \"}\r\n                          Country Of Origin{\" \"}\r\n                        </InputLabel>\r\n                        <Select\r\n                          color=\"secondary\"\r\n                          onChange={(event) =>\r\n                            (editSoleAndPrtinershipInfo.CountryOfOriginID =\r\n                              event.target.value)\r\n                          }\r\n                          labelId=\"countrylbl\"\r\n                          id=\"countrySelect\"\r\n                          label=\"Country\"\r\n                        >\r\n                          <MenuItem value=\"\">\r\n                            <em>None</em>\r\n                          </MenuItem>\r\n                          {country.map((yourCounty) => (\r\n                            <MenuItem\r\n                              key={yourCounty.Id}\r\n                              NationalityID={yourCounty.Id}\r\n                              value={yourCounty.Id}\r\n                            >\r\n                              {yourCounty.Name}\r\n                            </MenuItem>\r\n                          ))}\r\n                        </Select>\r\n                      </FormControl>\r\n                      <FormControl variant=\"standard\" sx={{ minWidth: 120 }}>\r\n                        <InputLabel id=\"countrylbl\" color=\"secondary\">\r\n                          {\" \"}\r\n                          Country Of Residence{\" \"}\r\n                        </InputLabel>\r\n                        <Select\r\n                          color=\"secondary\"\r\n                          onChange={(event) =>\r\n                            (editSoleAndPrtinershipInfo.CountryOfResidenceID =\r\n                              event.target.value)\r\n                          }\r\n                          labelId=\"countrylbl\"\r\n                          id=\"countrySelect\"\r\n                          label=\"Country\"\r\n                        >\r\n                          <MenuItem value=\"\">\r\n                            <em>None</em>\r\n                          </MenuItem>\r\n                          {country.map((yourCounty) => (\r\n                            <MenuItem\r\n                              key={yourCounty.Id}\r\n                              NationalityID={yourCounty.Id}\r\n                              value={yourCounty.Id}\r\n                            >\r\n                              {yourCounty.Name}\r\n                            </MenuItem>\r\n                          ))}\r\n                        </Select>\r\n                      </FormControl>\r\n                      <FormControl variant=\"standard\" sx={{ minWidth: 120 }}>\r\n                        <InputLabel id=\"countrylbl\" color=\"secondary\">\r\n                          {\" \"}\r\n                          Proof Of Identity Type{\" \"}\r\n                        </InputLabel>\r\n                        <Select\r\n                          color=\"secondary\"\r\n                          onChange={(event) =>\r\n                            (editSoleAndPrtinershipInfo.ProofOfIdentityTypeID =\r\n                              event.target.value)\r\n                          }\r\n                          labelId=\"countrylbl\"\r\n                          id=\"countrySelect\"\r\n                          label=\"Country\"\r\n                        >\r\n                          <MenuItem value=\"\">\r\n                            <em>None</em>\r\n                          </MenuItem>\r\n                          {proofOfIdentityType.map(\r\n                            (yourProofOfIdentityType) => (\r\n                              <MenuItem\r\n                                key={yourProofOfIdentityType.Id}\r\n                                ProofOfIdentityTypeID={\r\n                                  yourProofOfIdentityType.Id\r\n                                }\r\n                                value={yourProofOfIdentityType.Id}\r\n                              >\r\n                                {yourProofOfIdentityType.Name}\r\n                              </MenuItem>\r\n                            )\r\n                          )}\r\n                        </Select>\r\n                      </FormControl>\r\n                      <TextField\r\n                        id=\"UploadProofOfIdentity\"\r\n                        label=\"UploadProofOfIdentity\"\r\n                        variant=\"standard\"\r\n                        color=\"secondary\"\r\n                        size=\"\"\r\n                        required\r\n                        value={editSoleAndPrtinershipInfo.UploadProofOfIdentity}\r\n                        onChange={(e) =>\r\n                          setEditSoleAndPrtinershipInfo({\r\n                            ...editSoleAndPrtinershipInfo,\r\n                            UploadProofOfIdentity: e.target.value,\r\n                          })\r\n                        }\r\n                        name=\"UploadProofOfIdentity\"\r\n                      />\r\n                      <TextField\r\n                        id=\"ProofOfIdentityIssuedDate\"\r\n                        label=\"ProofOfIdentityIssuedDate\"\r\n                        variant=\"standard\"\r\n                        color=\"secondary\"\r\n                        size=\"\"\r\n                        required\r\n                        value={\r\n                          editSoleAndPrtinershipInfo.ProofOfIdentityIssuedDate\r\n                        }\r\n                        onChange={(e) =>\r\n                          setEditSoleAndPrtinershipInfo({\r\n                            ...editSoleAndPrtinershipInfo,\r\n                            ProofOfIdentityIssuedDate: e.target.value,\r\n                          })\r\n                        }\r\n                        name=\"ProofOfIdentityIssuedDate\"\r\n                      />\r\n                      <TextField\r\n                        id=\"ProofOfIdentityExpiredDate\"\r\n                        label=\"ProofOfIdentityExpiredDate\"\r\n                        variant=\"standard\"\r\n                        color=\"secondary\"\r\n                        size=\"\"\r\n                        required\r\n                        value={\r\n                          editSoleAndPrtinershipInfo.ProofOfIdentityExpiredDate\r\n                        }\r\n                        onChange={(e) =>\r\n                          setEditSoleAndPrtinershipInfo({\r\n                            ...editSoleAndPrtinershipInfo,\r\n                            ProofOfIdentityExpiredDate: e.target.value,\r\n                          })\r\n                        }\r\n                        name=\"ProofOfIdentityExpiredDate\"\r\n                      />\r\n                      <FormControl variant=\"standard\" sx={{ minWidth: 120 }}>\r\n                        <InputLabel id=\"countrylbl\" color=\"secondary\">\r\n                          {\" \"}\r\n                          Martail Status{\" \"}\r\n                        </InputLabel>\r\n                        <Select\r\n                          color=\"secondary\"\r\n                          onChange={(event) => {\r\n                            editSoleAndPrtinershipInfo.MartailStatusID =\r\n                              event.target.value;\r\n                            setMartailStatusHold(\r\n                              (editSoleAndPrtinershipInfo.MartailStatusID =\r\n                                event.target.value)\r\n                            );\r\n                          }}\r\n                          labelId=\"countrylbl\"\r\n                          id=\"countrySelect\"\r\n                          label=\"Country\"\r\n                        >\r\n                          <MenuItem value=\"\">\r\n                            <em>None</em>\r\n                          </MenuItem>\r\n                          {maritalStatus.map((maritalSt) => (\r\n                            <MenuItem\r\n                              key={maritalSt.Id}\r\n                              NationalityID={maritalSt.Id}\r\n                              value={maritalSt.Id}\r\n                            >\r\n                              <button>{maritalSt.Name}</button>\r\n                            </MenuItem>\r\n                          ))}\r\n                        </Select>\r\n                      </FormControl>\r\n                    </div>\r\n                    <div>\r\n                      <button type=\"submit\" className=\"btn btn-info\">\r\n                        Update\r\n                      </button>\r\n                    </div>\r\n                  </form>\r\n                </CompanyModal>\r\n              </div>\r\n              <div>\r\n                <CompanyModal\r\n                  isOpen={isCompanyMartailStatusModalOpen}\r\n                  onClose={handleCompanyMartailStatusCloseModal}\r\n                  title=\"Add martial status information\"\r\n                >\r\n                  <div className=\"rounded-lg overflow-hidden\">\r\n                    {holdMarried ? (\r\n                      <table className=\"table table-bordered table-striped bg-purple-100\">\r\n                        <thead>\r\n                          <th className=\"px-2 py-4\"> First Name</th>\r\n                          <th className=\"px-2 py-4\"> Middle Name</th>\r\n                          <th className=\"px-2 py-4\"> Last Name</th>\r\n                          <th className=\"px-2 py-4\"> Nationality</th>\r\n                          <th className=\"px-2 py-4\"> Country Of Origin</th>\r\n                          <th className=\"px-2 py-4\"> Country Of Residence</th>\r\n                          <th className=\"px-2 py-4\"> Proof Of Identity Type</th>\r\n                          <th className=\"px-2 py-4\"> Proof Of Identity</th>\r\n                          <th className=\"px-2 py-4\"> Marriage Date</th>\r\n                          <th className=\"px-2 py-4\">\r\n                            {\" \"}\r\n                            Marriage Certificate Issuer\r\n                          </th>\r\n                          <th className=\"px-2 py-4\">\r\n                            {\" \"}\r\n                            Proof Of Identity Issue Date\r\n                          </th>\r\n                          <th className=\"px-2 py-4\">\r\n                            {\" \"}\r\n                            Proof Of Identity Expir Date\r\n                          </th>\r\n                          <th className=\"px-2 py-4\"> Proof</th>\r\n                          <th className=\"px-2 py-4\"> Action </th>\r\n                        </thead>\r\n                        <tbody>\r\n                          {/* {getSoleTax.map((soleTax, index) => ( */}\r\n                          <tr\r\n                          // key={index}\r\n                          >\r\n                            <td>{holdMarried.FirstName}</td>\r\n                            <td>{holdMarried.MiddleName}</td>\r\n                            <td>{holdMarried.LastName}</td>\r\n                            <td>{holdMarried.Nationality}</td>\r\n                            <td>{holdMarried.CountryOfOrigin}</td>\r\n                            <td>{holdMarried.CountryOfResidence}</td>\r\n                            <td>{holdMarried.ProofOfIdentityType}</td>\r\n                            <td>{holdMarried.ProofOfIdentity}</td>\r\n                            <td>{holdMarried.MarriageDate}</td>\r\n                            <td>{holdMarried.MarriageCertificateIssuer}</td>\r\n                            <td>{holdMarried.ProofOfIdentityIssueDate}</td>\r\n                            <td>{holdMarried.ProofOfIdentityExpirDate}</td>\r\n                            <td>{holdMarried.TaxClearanceID}</td>\r\n                            {/* here the back must be responed the tax clerance Id */}\r\n\r\n                            <td>\r\n                              <button\r\n                                onClick={() => {\r\n                                  // refresh();\r\n                                  handleCompanyMarriedTaxOpenModal();\r\n                                  // setHandleSoleId(sole.Id);\r\n                                  // fetchSoleTax(sole.TaxClearanceID);\r\n                                }}\r\n                                className=\"text-purple-600 rounded-md font-semibold \"\r\n                              >\r\n                                Tax detail\r\n                              </button>\r\n                            </td>\r\n                            <button\r\n                              onClick={() => {\r\n                                handleCompanyMarriedInformationEditOpenModal();\r\n                                // updateTaxById(getSoleTax.Id);\r\n                                // saveTaxSoleInfo(sole.Id);\r\n                              }}\r\n                              className=\"text-purple-600 rounded-md font-semibold \"\r\n                            >\r\n                              <span>\r\n                                <IconButton aria-label=\"Add\" color=\"secondary\">\r\n                                  <BsPlus /> Edit\r\n                                </IconButton>\r\n                              </span>\r\n                            </button>\r\n                          </tr>\r\n                          {/* ))}  */}\r\n                        </tbody>\r\n                      </table>\r\n                    ) : (\r\n                      \"\"\r\n                    )}\r\n                  </div>\r\n                  <button\r\n                    onClick={() => setToggleMarriedInfo(!toggleMarriedInfo)}\r\n                    className=\"text-purple-600 rounded-md font-medium \"\r\n                  >\r\n                    Add Married\r\n                  </button>\r\n                  {toggleMarriedInfo && (\r\n                    <div className=\"submit-form\">\r\n                      {submitted ? (\r\n                        <div>\r\n                          <h4>You submitted successfully!</h4>\r\n                          <button\r\n                            className=\"btn btn-success\"\r\n                            onClick={newMartailStatusMarried}\r\n                          >\r\n                            Add\r\n                          </button>\r\n                        </div>\r\n                      ) : (\r\n                        <div className=\"relative center justify-center flex-1 w-full max-w-full grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\">\r\n                          <TextField\r\n                            id=\"FirstName\"\r\n                            label=\"FirstName\"\r\n                            variant=\"standard\"\r\n                            color=\"secondary\"\r\n                            size=\"\"\r\n                            required\r\n                            value={martailStatusMarried.FirstName}\r\n                            onChange={handleInputChangeMartailStatusMarried}\r\n                            name=\"FirstName\"\r\n                          />\r\n                          <TextField\r\n                            id=\"MiddleName\"\r\n                            label=\"MiddleName\"\r\n                            variant=\"standard\"\r\n                            color=\"secondary\"\r\n                            size=\"\"\r\n                            required\r\n                            value={martailStatusMarried.MiddleName}\r\n                            onChange={handleInputChangeMartailStatusMarried}\r\n                            name=\"MiddleName\"\r\n                          />\r\n                          <TextField\r\n                            id=\"LastName\"\r\n                            label=\"LastName\"\r\n                            variant=\"standard\"\r\n                            color=\"secondary\"\r\n                            size=\"\"\r\n                            required\r\n                            value={martailStatusMarried.LastName}\r\n                            onChange={handleInputChangeMartailStatusMarried}\r\n                            name=\"LastName\"\r\n                          />\r\n                          <FormControl\r\n                            variant=\"standard\"\r\n                            sx={{ minWidth: 120 }}\r\n                          >\r\n                            <InputLabel id=\"countrylbl\" color=\"secondary\">\r\n                              {\" \"}\r\n                              Nationality{\" \"}\r\n                            </InputLabel>\r\n                            <Select\r\n                              color=\"secondary\"\r\n                              onChange={(event) =>\r\n                                (martailStatusMarried.NationalityID =\r\n                                  event.target.value)\r\n                              }\r\n                              labelId=\"countrylbl\"\r\n                              id=\"countrySelect\"\r\n                              label=\"Country\"\r\n                            >\r\n                              <MenuItem value=\"\">\r\n                                <em>None</em>\r\n                              </MenuItem>\r\n                              {country.map((yourCounty) => (\r\n                                <MenuItem\r\n                                  key={yourCounty.Id}\r\n                                  NationalityID={yourCounty.Id}\r\n                                  value={yourCounty.Id}\r\n                                >\r\n                                  {yourCounty.Name}\r\n                                </MenuItem>\r\n                              ))}\r\n                            </Select>\r\n                          </FormControl>\r\n                          <FormControl\r\n                            variant=\"standard\"\r\n                            sx={{ minWidth: 120 }}\r\n                          >\r\n                            <InputLabel id=\"countrylbl\" color=\"secondary\">\r\n                              {\" \"}\r\n                              Country Of Origin{\" \"}\r\n                            </InputLabel>\r\n                            <Select\r\n                              color=\"secondary\"\r\n                              onChange={(event) =>\r\n                                (martailStatusMarried.CountryOfOriginID =\r\n                                  event.target.value)\r\n                              }\r\n                              labelId=\"countrylbl\"\r\n                              id=\"countrySelect\"\r\n                              label=\"Country\"\r\n                            >\r\n                              <MenuItem value=\"\">\r\n                                <em>None</em>\r\n                              </MenuItem>\r\n                              {country.map((yourCounty) => (\r\n                                <MenuItem\r\n                                  key={yourCounty.Id}\r\n                                  NationalityID={yourCounty.Id}\r\n                                  value={yourCounty.Id}\r\n                                >\r\n                                  {yourCounty.Name}\r\n                                </MenuItem>\r\n                              ))}\r\n                            </Select>\r\n                          </FormControl>\r\n                          <FormControl\r\n                            variant=\"standard\"\r\n                            sx={{ minWidth: 120 }}\r\n                          >\r\n                            <InputLabel id=\"countrylbl\" color=\"secondary\">\r\n                              {\" \"}\r\n                              Country Of Residence{\" \"}\r\n                            </InputLabel>\r\n                            <Select\r\n                              color=\"secondary\"\r\n                              onChange={(event) =>\r\n                                (martailStatusMarried.CountryOfResidenceID =\r\n                                  event.target.value)\r\n                              }\r\n                              labelId=\"countrylbl\"\r\n                              id=\"countrySelect\"\r\n                              label=\"Country\"\r\n                            >\r\n                              <MenuItem value=\"\">\r\n                                <em>None</em>\r\n                              </MenuItem>\r\n                              {country.map((yourCounty) => (\r\n                                <MenuItem\r\n                                  key={yourCounty.Id}\r\n                                  NationalityID={yourCounty.Id}\r\n                                  value={yourCounty.Id}\r\n                                >\r\n                                  {yourCounty.Name}\r\n                                </MenuItem>\r\n                              ))}\r\n                            </Select>\r\n                          </FormControl>\r\n                          <FormControl\r\n                            variant=\"standard\"\r\n                            sx={{ minWidth: 120 }}\r\n                          >\r\n                            <InputLabel id=\"countrylbl\" color=\"secondary\">\r\n                              {\" \"}\r\n                              Proof Of Identity Type{\" \"}\r\n                            </InputLabel>\r\n                            <Select\r\n                              color=\"secondary\"\r\n                              onChange={(event) =>\r\n                                (martailStatusMarried.ProofOfIdentityTypeID =\r\n                                  event.target.value)\r\n                              }\r\n                              labelId=\"countrylbl\"\r\n                              id=\"countrySelect\"\r\n                              label=\"Country\"\r\n                            >\r\n                              <MenuItem value=\"\">\r\n                                <em>None</em>\r\n                              </MenuItem>\r\n                              {proofOfIdentityType.map(\r\n                                (yourProofOfIdentityType) => (\r\n                                  <MenuItem\r\n                                    key={yourProofOfIdentityType.Id}\r\n                                    ProofOfIdentityTypeID={\r\n                                      yourProofOfIdentityType.Id\r\n                                    }\r\n                                    value={yourProofOfIdentityType.Id}\r\n                                  >\r\n                                    {yourProofOfIdentityType.Name}\r\n                                  </MenuItem>\r\n                                )\r\n                              )}\r\n                            </Select>\r\n                          </FormControl>\r\n                          <TextField\r\n                            id=\"ProofOfIdentity\"\r\n                            label=\"ProofOfIdentity\"\r\n                            variant=\"standard\"\r\n                            color=\"secondary\"\r\n                            size=\"\"\r\n                            required\r\n                            value={martailStatusMarried.ProofOfIdentity}\r\n                            onChange={handleInputChangeMartailStatusMarried}\r\n                            name=\"ProofOfIdentity\"\r\n                          />\r\n                          <TextField\r\n                            id=\"MarriageDate\"\r\n                            label=\"MarriageDate\"\r\n                            variant=\"standard\"\r\n                            color=\"secondary\"\r\n                            size=\"\"\r\n                            required\r\n                            value={martailStatusMarried.MarriageDate}\r\n                            onChange={handleInputChangeMartailStatusMarried}\r\n                            name=\"MarriageDate\"\r\n                          />\r\n                          <TextField\r\n                            id=\"MarriageCertificate\"\r\n                            label=\"MarriageCertificate\"\r\n                            variant=\"standard\"\r\n                            color=\"secondary\"\r\n                            size=\"\"\r\n                            required\r\n                            value={martailStatusMarried.MarriageCertificate}\r\n                            onChange={handleInputChangeMartailStatusMarried}\r\n                            name=\"MarriageCertificate\"\r\n                          />\r\n                          <TextField\r\n                            id=\"MarriageCertificateIssuer\"\r\n                            label=\"MarriageCertificateIssuer\"\r\n                            variant=\"standard\"\r\n                            color=\"secondary\"\r\n                            size=\"\"\r\n                            required\r\n                            value={\r\n                              martailStatusMarried.MarriageCertificateIssuer\r\n                            }\r\n                            onChange={handleInputChangeMartailStatusMarried}\r\n                            name=\"MarriageCertificateIssuer\"\r\n                          />\r\n                          <TextField\r\n                            id=\"ProofOfIdentityIssueDate\"\r\n                            label=\"ProofOfIdentityIssueDate\"\r\n                            variant=\"standard\"\r\n                            color=\"secondary\"\r\n                            size=\"\"\r\n                            required\r\n                            value={\r\n                              martailStatusMarried.ProofOfIdentityIssueDate\r\n                            }\r\n                            onChange={handleInputChangeMartailStatusMarried}\r\n                            name=\"ProofOfIdentityIssueDate\"\r\n                          />\r\n                          <TextField\r\n                            id=\"ProofOfIdentityExpirDate\"\r\n                            label=\"ProofOfIdentityExpirDate\"\r\n                            variant=\"standard\"\r\n                            color=\"secondary\"\r\n                            size=\"\"\r\n                            required\r\n                            value={\r\n                              martailStatusMarried.ProofOfIdentityExpirDate\r\n                            }\r\n                            onChange={handleInputChangeMartailStatusMarried}\r\n                            name=\"ProofOfIdentityExpirDate\"\r\n                          />\r\n                        </div>\r\n                      )}\r\n                    </div>\r\n                  )}\r\n                  <div>\r\n                    <button\r\n                      className=\"bg-[purple] hover:bg-purple-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\"\r\n                      onClick={() => {\r\n                        saveMarried();\r\n                        setToggleMarriedInfo(!toggleMarriedInfo);\r\n                      }}\r\n                    >\r\n                      save\r\n                    </button>\r\n                  </div>\r\n                </CompanyModal>\r\n                <CompanyModal\r\n                  isOpen={isCompanyMarriedInformationEditModalOpen}\r\n                  onClose={handleCompanyMarriedEditCloseModal}\r\n                  title=\"Married edit information\"\r\n                >\r\n                  <div>\r\n                    <form onSubmit={updateMarriedInfo}>\r\n                      <div className=\"relative center justify-center flex-1 w-full max-w-full grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\">\r\n                        <TextField\r\n                          id=\"FirstName\"\r\n                          label=\"FirstName\"\r\n                          variant=\"standard\"\r\n                          color=\"secondary\"\r\n                          size=\"\"\r\n                          required\r\n                          value={editMarriedInfo.FirstName}\r\n                          onChange={(e) =>\r\n                            setEditMarriedInfo({\r\n                              ...editMarriedInfo,\r\n                              Name: e.target.value,\r\n                            })\r\n                          }\r\n                          name=\"FirstName\"\r\n                        />\r\n                        <TextField\r\n                          id=\"MiddleName\"\r\n                          label=\"MiddleName\"\r\n                          variant=\"standard\"\r\n                          color=\"secondary\"\r\n                          size=\"\"\r\n                          required\r\n                          value={editMarriedInfo.MiddleName}\r\n                          onChange={(e) =>\r\n                            setEditMarriedInfo({\r\n                              ...editMarriedInfo,\r\n                              Name: e.target.value,\r\n                            })\r\n                          }\r\n                          name=\"MiddleName\"\r\n                        />\r\n                        <TextField\r\n                          id=\"LastName\"\r\n                          label=\"LastName\"\r\n                          variant=\"standard\"\r\n                          color=\"secondary\"\r\n                          size=\"\"\r\n                          required\r\n                          value={editMarriedInfo.LastName}\r\n                          onChange={(e) =>\r\n                            setEditMarriedInfo({\r\n                              ...editMarriedInfo,\r\n                              Name: e.target.value,\r\n                            })\r\n                          }\r\n                          name=\"LastName\"\r\n                        />\r\n\r\n                        <FormControl variant=\"standard\" sx={{ minWidth: 120 }}>\r\n                          <InputLabel id=\"countrylbl\" color=\"secondary\">\r\n                            {\" \"}\r\n                            Nationality{\" \"}\r\n                          </InputLabel>\r\n                          <Select\r\n                            color=\"secondary\"\r\n                            onChange={(event) =>\r\n                              (editMarriedInfo.NationalityID =\r\n                                event.target.value)\r\n                            }\r\n                            labelId=\"countrylbl\"\r\n                            id=\"countrySelect\"\r\n                            label=\"Country\"\r\n                          >\r\n                            <MenuItem value=\"\">\r\n                              <em>None</em>\r\n                            </MenuItem>\r\n                            {country.map((yourCounty) => (\r\n                              <MenuItem\r\n                                key={yourCounty.Id}\r\n                                NationalityID={yourCounty.Id}\r\n                                value={yourCounty.Id}\r\n                              >\r\n                                {yourCounty.Name}\r\n                              </MenuItem>\r\n                            ))}\r\n                          </Select>\r\n                        </FormControl>\r\n                        <FormControl variant=\"standard\" sx={{ minWidth: 120 }}>\r\n                          <InputLabel id=\"countrylbl\" color=\"secondary\">\r\n                            {\" \"}\r\n                            Country Of Origin{\" \"}\r\n                          </InputLabel>\r\n                          <Select\r\n                            color=\"secondary\"\r\n                            onChange={(event) =>\r\n                              (editMarriedInfo.CountryOfOriginID =\r\n                                event.target.value)\r\n                            }\r\n                            labelId=\"countrylbl\"\r\n                            id=\"countrySelect\"\r\n                            label=\"Country\"\r\n                          >\r\n                            <MenuItem value=\"\">\r\n                              <em>None</em>\r\n                            </MenuItem>\r\n                            {country.map((yourCounty) => (\r\n                              <MenuItem\r\n                                key={yourCounty.Id}\r\n                                NationalityID={yourCounty.Id}\r\n                                value={yourCounty.Id}\r\n                              >\r\n                                {yourCounty.Name}\r\n                              </MenuItem>\r\n                            ))}\r\n                          </Select>\r\n                        </FormControl>\r\n                        <FormControl variant=\"standard\" sx={{ minWidth: 120 }}>\r\n                          <InputLabel id=\"countrylbl\" color=\"secondary\">\r\n                            {\" \"}\r\n                            Country Of Residence{\" \"}\r\n                          </InputLabel>\r\n                          <Select\r\n                            color=\"secondary\"\r\n                            onChange={(event) =>\r\n                              (editMarriedInfo.CountryOfResidenceID =\r\n                                event.target.value)\r\n                            }\r\n                            labelId=\"countrylbl\"\r\n                            id=\"countrySelect\"\r\n                            label=\"Country\"\r\n                          >\r\n                            <MenuItem value=\"\">\r\n                              <em>None</em>\r\n                            </MenuItem>\r\n                            {country.map((yourCounty) => (\r\n                              <MenuItem\r\n                                key={yourCounty.Id}\r\n                                NationalityID={yourCounty.Id}\r\n                                value={yourCounty.Id}\r\n                              >\r\n                                {yourCounty.Name}\r\n                              </MenuItem>\r\n                            ))}\r\n                          </Select>\r\n                        </FormControl>\r\n                        <FormControl variant=\"standard\" sx={{ minWidth: 120 }}>\r\n                          <InputLabel id=\"countrylbl\" color=\"secondary\">\r\n                            {\" \"}\r\n                            Proof Of Identity Type{\" \"}\r\n                          </InputLabel>\r\n                          <Select\r\n                            color=\"secondary\"\r\n                            onChange={(event) =>\r\n                              (editMarriedInfo.ProofOfIdentityTypeID =\r\n                                event.target.value)\r\n                            }\r\n                            labelId=\"countrylbl\"\r\n                            id=\"countrySelect\"\r\n                            label=\"Country\"\r\n                          >\r\n                            <MenuItem value=\"\">\r\n                              <em>None</em>\r\n                            </MenuItem>\r\n                            {proofOfIdentityType.map(\r\n                              (yourProofOfIdentityType) => (\r\n                                <MenuItem\r\n                                  key={yourProofOfIdentityType.Id}\r\n                                  ProofOfIdentityTypeID={\r\n                                    yourProofOfIdentityType.Id\r\n                                  }\r\n                                  value={yourProofOfIdentityType.Id}\r\n                                >\r\n                                  {yourProofOfIdentityType.Name}\r\n                                </MenuItem>\r\n                              )\r\n                            )}\r\n                          </Select>\r\n                        </FormControl>\r\n                        <TextField\r\n                          id=\"ProofOfIdentity\"\r\n                          label=\"ProofOfIdentity\"\r\n                          variant=\"standard\"\r\n                          color=\"secondary\"\r\n                          size=\"\"\r\n                          required\r\n                          value={editMarriedInfo.ProofOfIdentity}\r\n                          onChange={(e) =>\r\n                            setEditMarriedInfo({\r\n                              ...editMarriedInfo,\r\n                              Name: e.target.value,\r\n                            })\r\n                          }\r\n                          name=\"ProofOfIdentity\"\r\n                        />\r\n                        <TextField\r\n                          id=\"MarriageDate\"\r\n                          label=\"MarriageDate\"\r\n                          variant=\"standard\"\r\n                          color=\"secondary\"\r\n                          size=\"\"\r\n                          required\r\n                          value={editMarriedInfo.MarriageDate}\r\n                          onChange={(e) =>\r\n                            setEditMarriedInfo({\r\n                              ...editMarriedInfo,\r\n                              Name: e.target.value,\r\n                            })\r\n                          }\r\n                          name=\"MarriageDate\"\r\n                        />\r\n                        <TextField\r\n                          id=\"MarriageCertificate\"\r\n                          label=\"MarriageCertificate\"\r\n                          variant=\"standard\"\r\n                          color=\"secondary\"\r\n                          size=\"\"\r\n                          required\r\n                          value={editMarriedInfo.MarriageCertificate}\r\n                          onChange={(e) =>\r\n                            setEditMarriedInfo({\r\n                              ...editMarriedInfo,\r\n                              Name: e.target.value,\r\n                            })\r\n                          }\r\n                          name=\"MarriageCertificate\"\r\n                        />\r\n                        <TextField\r\n                          id=\"MarriageCertificateIssuer\"\r\n                          label=\"MarriageCertificateIssuer\"\r\n                          variant=\"standard\"\r\n                          color=\"secondary\"\r\n                          size=\"\"\r\n                          required\r\n                          value={editMarriedInfo.MarriageCertificateIssuer}\r\n                          onChange={(e) =>\r\n                            setEditMarriedInfo({\r\n                              ...editMarriedInfo,\r\n                              Name: e.target.value,\r\n                            })\r\n                          }\r\n                          name=\"MarriageCertificateIssuer\"\r\n                        />\r\n                        <TextField\r\n                          id=\"ProofOfIdentityIssueDate\"\r\n                          label=\"ProofOfIdentityIssueDate\"\r\n                          variant=\"standard\"\r\n                          color=\"secondary\"\r\n                          size=\"\"\r\n                          required\r\n                          value={editMarriedInfo.ProofOfIdentityIssueDate}\r\n                          onChange={(e) =>\r\n                            setEditMarriedInfo({\r\n                              ...editMarriedInfo,\r\n                              Name: e.target.value,\r\n                            })\r\n                          }\r\n                          name=\"ProofOfIdentityIssueDate\"\r\n                        />\r\n                        <TextField\r\n                          id=\"ProofOfIdentityExpirDate\"\r\n                          label=\"ProofOfIdentityExpirDate\"\r\n                          variant=\"standard\"\r\n                          color=\"secondary\"\r\n                          size=\"\"\r\n                          required\r\n                          value={editMarriedInfo.ProofOfIdentityExpirDate}\r\n                          onChange={(e) =>\r\n                            setEditMarriedInfo({\r\n                              ...editMarriedInfo,\r\n                              Name: e.target.value,\r\n                            })\r\n                          }\r\n                          name=\"ProofOfIdentityExpirDate\"\r\n                        />\r\n                      </div>\r\n                      <div>\r\n                        <button type=\"submit\" className=\"btn btn-info\">\r\n                          Update\r\n                        </button>\r\n                      </div>\r\n                    </form>\r\n                  </div>\r\n                </CompanyModal>\r\n                <div>\r\n                  <CompanyModal\r\n                    isOpen={isCompanyMarriedTaxModalOpen}\r\n                    onClose={handleCompanyMarriedTaxCloseModal}\r\n                    title=\"Married Tax information\"\r\n                  >\r\n                    <div className=\"rounded-lg overflow-hidden\">\r\n                      {getSoleTax && (\r\n                        <table className=\"table table-bordered table-striped bg-purple-100\">\r\n                          <thead>\r\n                            <th className=\"px-2 py-4\"> Name </th>\r\n                            <th className=\"px-2 py-4\"> TinNo </th>\r\n                            <th className=\"px-2 py-4\"> Issue Date </th>\r\n                            <th className=\"px-2 py-4\"> Expired date </th>\r\n                            <th className=\"px-2 py-4\"> Tax Debi </th>\r\n                            <th className=\"px-2 py-4\">\r\n                              Tax Clearance Certificate\r\n                            </th>\r\n                            <th className=\"px-2 py-4\"> Action </th>\r\n                          </thead>\r\n                          <tbody>\r\n                            {/* {getSoleTax.map((soleTax, index) => ( */}\r\n                            <tr\r\n                            //  key={index}\r\n                            >\r\n                              {/* <td>{getSoleTax.Id}</td> */}\r\n                              <td>{getSoleTax.Name}</td>\r\n                              <td>{getSoleTax.TinNo}</td>\r\n                              <td>{getSoleTax.IssueDate}</td>\r\n                              <td>{getSoleTax.Expireddate}</td>\r\n                              <td>{getSoleTax.TaxDebi}</td>\r\n                              <td>{getSoleTax.TaxClearanceCertificate}</td>\r\n                              <button\r\n                                onClick={() => {\r\n                                  handleCompanyTaxInformationEditOpenModal();\r\n                                  updateTaxById(getSoleTax.Id);\r\n                                  // saveTaxSoleInfo(sole.Id);\r\n                                }}\r\n                                className=\"text-purple-600 rounded-md font-semibold \"\r\n                              >\r\n                                <span>\r\n                                  <IconButton\r\n                                    aria-label=\"Add\"\r\n                                    color=\"secondary\"\r\n                                  >\r\n                                    <BsPlus /> Edit\r\n                                  </IconButton>\r\n                                </span>\r\n                              </button>\r\n                            </tr>\r\n                            {/* ))} */}\r\n                          </tbody>\r\n                        </table>\r\n                      )}\r\n                    </div>\r\n                    <button\r\n                      onClick={() => setToggleTaxInfo(!toggleTaxSoleInfo)}\r\n                      className=\"text-purple-600 rounded-md font-medium \"\r\n                    >\r\n                      Add Tax\r\n                    </button>\r\n                    {toggleTaxSoleInfo && (\r\n                      <div className=\"submit-form\">\r\n                        {submitted ? (\r\n                          <div>\r\n                            <h4>You submitted successfully!</h4>\r\n                            <button\r\n                              className=\"btn btn-success\"\r\n                              onClick={newMarriedTaxInfo}\r\n                            >\r\n                              Add\r\n                            </button>\r\n                          </div>\r\n                        ) : (\r\n                          <div className=\"relative center justify-center flex-1 w-full max-w-full grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\">\r\n                            <TextField\r\n                              id=\"Name\"\r\n                              label=\"Name\"\r\n                              variant=\"standard\"\r\n                              color=\"secondary\"\r\n                              size=\"\"\r\n                              required\r\n                              value={marriedTaxInfo.Name}\r\n                              onChange={handleInputChangeMarriedTaxInfo}\r\n                              name=\"Name\"\r\n                            />\r\n                            <TextField\r\n                              id=\"TinNo\"\r\n                              label=\"TinNo\"\r\n                              variant=\"standard\"\r\n                              color=\"secondary\"\r\n                              size=\"\"\r\n                              required\r\n                              value={marriedTaxInfo.TinNo}\r\n                              onChange={handleInputChangeMarriedTaxInfo}\r\n                              name=\"TinNo\"\r\n                            />\r\n                            <TextField\r\n                              id=\"IssueDate\"\r\n                              label=\"IssueDate\"\r\n                              variant=\"standard\"\r\n                              color=\"secondary\"\r\n                              size=\"\"\r\n                              required\r\n                              value={marriedTaxInfo.IssueDate}\r\n                              onChange={handleInputChangeMarriedTaxInfo}\r\n                              name=\"IssueDate\"\r\n                            />\r\n                            <TextField\r\n                              id=\"ExpiredDate\"\r\n                              label=\"ExpiredDate\"\r\n                              variant=\"standard\"\r\n                              color=\"secondary\"\r\n                              size=\"\"\r\n                              required\r\n                              value={marriedTaxInfo.ExpiredDate}\r\n                              onChange={handleInputChangeMarriedTaxInfo}\r\n                              name=\"ExpiredDate\"\r\n                            />\r\n                            <TextField\r\n                              id=\"TaxDebi\"\r\n                              label=\"TaxDebi\"\r\n                              variant=\"standard\"\r\n                              color=\"secondary\"\r\n                              size=\"\"\r\n                              required\r\n                              value={marriedTaxInfo.TaxDebi}\r\n                              onChange={handleInputChangeMarriedTaxInfo}\r\n                              name=\"TaxDebi\"\r\n                            />\r\n                            <TextField\r\n                              id=\"TaxClearanceCertificate\"\r\n                              label=\"TaxClearanceCertificate\"\r\n                              variant=\"standard\"\r\n                              color=\"secondary\"\r\n                              size=\"\"\r\n                              required\r\n                              value={marriedTaxInfo.TaxClearanceCertificate}\r\n                              onChange={handleInputChangeMarriedTaxInfo}\r\n                              name=\"TaxClearanceCertificate\"\r\n                            />\r\n                          </div>\r\n                        )}\r\n                        <button\r\n                          className=\"bg-[purple] hover:bg-purple-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\"\r\n                          onClick={() => {\r\n                            saveMarriedTaxInfo();\r\n                            setToggleTaxInfo(!toggleTaxSoleInfo);\r\n                          }}\r\n                        >\r\n                          save Tax\r\n                        </button>\r\n                      </div>\r\n                    )}\r\n                  </CompanyModal>\r\n                </div>\r\n              </div>\r\n              <div>\r\n                <CompanyModal\r\n                  isOpen={isCompanyMartailStatusDivorcedModalOpen}\r\n                  onClose={handleCompanyMartailStatusDivorcedCloseModal}\r\n                  title=\"Add martial status divorced information\"\r\n                >\r\n                  <div className=\"rounded-lg overflow-hidden\">\r\n                    {holdDivorced ? (\r\n                      <table className=\"table table-bordered table-striped bg-purple-100\">\r\n                        <thead>\r\n                          <th className=\"px-2 py-4\"> Date Of Divorced</th>\r\n                          <th className=\"px-2 py-4\"> Marriage Cert</th>\r\n                          <th className=\"px-2 py-4\"> Upload Marriage Cert</th>\r\n                          <th className=\"px-2 py-4\"> Divorced Cert Issuer</th>\r\n                          <th className=\"px-2 py-4\"> Unmarried Cert</th>\r\n                          <th className=\"px-2 py-4\"> Upload Unmarried Cert</th>\r\n                          <th className=\"px-2 py-4\"> Issued Date</th>\r\n                          <th className=\"px-2 py-4\"> Expired Date</th>\r\n                          <th className=\"px-2 py-4\"> UnMarrage Certi Issuer</th>\r\n                          <th className=\"px-2 py-4\"> CourtDecision</th>\r\n                          <th className=\"px-2 py-4\"> Upload Court Decision</th>\r\n                          <th className=\"px-2 py-4\"> Action </th>\r\n                        </thead>\r\n                        <tbody>\r\n                          {/* {getSoleTax.map((soleTax, index) => ( */}\r\n                          <tr\r\n                          // key={index}\r\n                          >\r\n                            <td>{holdDivorced.DateOfDivorced}</td>\r\n                            <td>{holdDivorced.MarriageCert}</td>\r\n                            <td>{holdDivorced.UploadMarriageCert}</td>\r\n                            <td>{holdDivorced.DivorcedCertIssuer}</td>\r\n                            <td>{holdDivorced.UnmarriedCert}</td>\r\n                            <td>{holdDivorced.UploadUnmarriedCert}</td>\r\n                            <td>{holdDivorced.IssuedDate}</td>\r\n                            <td>{holdDivorced.ExpiredDate}</td>\r\n                            <td>{holdDivorced.UnMarrageCertiIssuer}</td>\r\n                            <td>{holdDivorced.CourtDecision}</td>\r\n                            <td>{holdDivorced.UploadCourtDecision}</td>\r\n                            <button\r\n                              onClick={() => {\r\n                                handleCompanyDivorcedInformationEditOpenModal();\r\n                                // updateTaxById(getSoleTax.Id);\r\n                                // saveTaxSoleInfo(sole.Id);\r\n                              }}\r\n                              className=\"text-purple-600 rounded-md font-semibold \"\r\n                            >\r\n                              <span>\r\n                                <IconButton aria-label=\"Add\" color=\"secondary\">\r\n                                  <BsPlus /> Edit\r\n                                </IconButton>\r\n                              </span>\r\n                            </button>\r\n                          </tr>\r\n                          {/* ))}  */}\r\n                        </tbody>\r\n                      </table>\r\n                    ) : (\r\n                      \"\"\r\n                    )}\r\n                  </div>\r\n                  <button\r\n                    onClick={() => setToggleMarriedInfo(!toggleMarriedInfo)}\r\n                    className=\"text-purple-600 rounded-md font-medium \"\r\n                  >\r\n                    Add Divorced\r\n                  </button>\r\n                  {toggleMarriedInfo && (\r\n                    <div className=\"submit-form\">\r\n                      {submitted ? (\r\n                        <div>\r\n                          <h4>You submitted successfully!</h4>\r\n                          <button\r\n                            className=\"btn btn-success\"\r\n                            onClick={newMartailStatusDivorced}\r\n                          >\r\n                            Add\r\n                          </button>\r\n                        </div>\r\n                      ) : (\r\n                        <div className=\"relative center justify-center flex-1 w-full max-w-full grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\">\r\n                          <TextField\r\n                            id=\"DateOfDivorced\"\r\n                            label=\"DateOfDivorced\"\r\n                            variant=\"standard\"\r\n                            color=\"secondary\"\r\n                            size=\"\"\r\n                            required\r\n                            value={martailStatusDivorced.DateOfDivorced}\r\n                            onChange={handleInputChangeMartailStatusDivorced}\r\n                            name=\"DateOfDivorced\"\r\n                          />\r\n                          <TextField\r\n                            id=\"MarriageCert\"\r\n                            label=\"MarriageCert\"\r\n                            variant=\"standard\"\r\n                            color=\"secondary\"\r\n                            size=\"\"\r\n                            required\r\n                            value={martailStatusDivorced.MarriageCert}\r\n                            onChange={handleInputChangeMartailStatusDivorced}\r\n                            name=\"MarriageCert\"\r\n                          />\r\n                          <TextField\r\n                            id=\"UploadMarriageCert\"\r\n                            label=\"UploadMarriageCert\"\r\n                            variant=\"standard\"\r\n                            color=\"secondary\"\r\n                            size=\"\"\r\n                            required\r\n                            value={martailStatusDivorced.UploadMarriageCert}\r\n                            onChange={handleInputChangeMartailStatusDivorced}\r\n                            name=\"UploadMarriageCert\"\r\n                          />\r\n                          <TextField\r\n                            id=\"DivorcedCertIssuer\"\r\n                            label=\"DivorcedCertIssuer\"\r\n                            variant=\"standard\"\r\n                            color=\"secondary\"\r\n                            size=\"\"\r\n                            required\r\n                            value={martailStatusDivorced.DivorcedCertIssuer}\r\n                            onChange={handleInputChangeMartailStatusDivorced}\r\n                            name=\"DivorcedCertIssuer\"\r\n                          />\r\n                          <TextField\r\n                            id=\"UnmarriedCert\"\r\n                            label=\"UnmarriedCert\"\r\n                            variant=\"standard\"\r\n                            color=\"secondary\"\r\n                            size=\"\"\r\n                            required\r\n                            value={martailStatusDivorced.UnmarriedCert}\r\n                            onChange={handleInputChangeMartailStatusDivorced}\r\n                            name=\"UnmarriedCert\"\r\n                          />\r\n                          <TextField\r\n                            id=\"UploadUnmarriedCert\"\r\n                            label=\"UploadUnmarriedCert\"\r\n                            variant=\"standard\"\r\n                            color=\"secondary\"\r\n                            size=\"\"\r\n                            required\r\n                            value={martailStatusDivorced.UploadUnmarriedCert}\r\n                            onChange={handleInputChangeMartailStatusDivorced}\r\n                            name=\"UploadUnmarriedCert\"\r\n                          />\r\n                          <TextField\r\n                            id=\"IssuedDate\"\r\n                            label=\"IssuedDate\"\r\n                            variant=\"standard\"\r\n                            color=\"secondary\"\r\n                            size=\"\"\r\n                            required\r\n                            value={martailStatusDivorced.IssuedDate}\r\n                            onChange={handleInputChangeMartailStatusDivorced}\r\n                            name=\"IssuedDate\"\r\n                          />\r\n                          <TextField\r\n                            id=\"ExpiredDate\"\r\n                            label=\"ExpiredDate\"\r\n                            variant=\"standard\"\r\n                            color=\"secondary\"\r\n                            size=\"\"\r\n                            required\r\n                            value={martailStatusDivorced.ExpiredDate}\r\n                            onChange={handleInputChangeMartailStatusDivorced}\r\n                            name=\"ExpiredDate\"\r\n                          />\r\n                          <TextField\r\n                            id=\"UnMarrageCertiIssuer\"\r\n                            label=\"UnMarrageCertiIssuer\"\r\n                            variant=\"standard\"\r\n                            color=\"secondary\"\r\n                            size=\"\"\r\n                            required\r\n                            value={martailStatusDivorced.UnMarrageCertiIssuer}\r\n                            onChange={handleInputChangeMartailStatusDivorced}\r\n                            name=\"UnMarrageCertiIssuer\"\r\n                          />\r\n                          <TextField\r\n                            id=\"CourtDecision\"\r\n                            label=\"CourtDecision\"\r\n                            variant=\"standard\"\r\n                            color=\"secondary\"\r\n                            size=\"\"\r\n                            required\r\n                            value={martailStatusDivorced.CourtDecision}\r\n                            onChange={handleInputChangeMartailStatusDivorced}\r\n                            name=\"CourtDecision\"\r\n                          />\r\n                          <TextField\r\n                            id=\"UploadCourtDecision\"\r\n                            label=\"UploadCourtDecision\"\r\n                            variant=\"standard\"\r\n                            color=\"secondary\"\r\n                            size=\"\"\r\n                            required\r\n                            value={martailStatusDivorced.UploadCourtDecision}\r\n                            onChange={handleInputChangeMartailStatusDivorced}\r\n                            name=\"UploadCourtDecision\"\r\n                          />\r\n                        </div>\r\n                      )}\r\n                    </div>\r\n                  )}\r\n                  <div>\r\n                    <button\r\n                      className=\"bg-[purple] hover:bg-purple-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\"\r\n                      onClick={() => {\r\n                        saveDivorced();\r\n                        setToggleMarriedInfo(!toggleMarriedInfo);\r\n                      }}\r\n                    >\r\n                      save\r\n                    </button>\r\n                  </div>\r\n                </CompanyModal>\r\n                <CompanyModal\r\n                  isOpen={isCompanyDivorcedInformationEditModalOpen}\r\n                  onClose={handleCompanyDivorcedEditCloseModal}\r\n                  title=\"Divorced edit information\"\r\n                >\r\n                  <div>\r\n                    <form onSubmit={updateDivorcedInfo}>\r\n                      <div className=\"relative center justify-center flex-1 w-full max-w-full grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\">\r\n                        <TextField\r\n                          id=\"DateOfDivorced\"\r\n                          label=\"DateOfDivorced\"\r\n                          variant=\"standard\"\r\n                          color=\"secondary\"\r\n                          size=\"\"\r\n                          required\r\n                          value={editDivorcedInfo.DateOfDivorced}\r\n                          onChange={(e) =>\r\n                            setEditDivorcedInfo({\r\n                              ...editDivorcedInfo,\r\n                              Name: e.target.value,\r\n                            })\r\n                          }\r\n                          name=\"DateOfDivorced\"\r\n                        />\r\n                        <TextField\r\n                          id=\"MarriageCert\"\r\n                          label=\"MarriageCert\"\r\n                          variant=\"standard\"\r\n                          color=\"secondary\"\r\n                          size=\"\"\r\n                          required\r\n                          value={editDivorcedInfo.MarriageCert}\r\n                          onChange={(e) =>\r\n                            setEditDivorcedInfo({\r\n                              ...editDivorcedInfo,\r\n                              Name: e.target.value,\r\n                            })\r\n                          }\r\n                          name=\"MarriageCert\"\r\n                        />\r\n                        <TextField\r\n                          id=\"UploadMarriageCert\"\r\n                          label=\"UploadMarriageCert\"\r\n                          variant=\"standard\"\r\n                          color=\"secondary\"\r\n                          size=\"\"\r\n                          required\r\n                          value={editDivorcedInfo.UploadMarriageCert}\r\n                          onChange={(e) =>\r\n                            setEditDivorcedInfo({\r\n                              ...editDivorcedInfo,\r\n                              Name: e.target.value,\r\n                            })\r\n                          }\r\n                          name=\"UploadMarriageCert\"\r\n                        />\r\n                        <TextField\r\n                          id=\"DivorcedCertIssuer\"\r\n                          label=\"DivorcedCertIssuer\"\r\n                          variant=\"standard\"\r\n                          color=\"secondary\"\r\n                          size=\"\"\r\n                          required\r\n                          value={editDivorcedInfo.DivorcedCertIssuer}\r\n                          onChange={(e) =>\r\n                            setEditDivorcedInfo({\r\n                              ...editDivorcedInfo,\r\n                              Name: e.target.value,\r\n                            })\r\n                          }\r\n                          name=\"DivorcedCertIssuer\"\r\n                        />\r\n                        <TextField\r\n                          id=\"UnmarriedCert\"\r\n                          label=\"UnmarriedCert\"\r\n                          variant=\"standard\"\r\n                          color=\"secondary\"\r\n                          size=\"\"\r\n                          required\r\n                          value={editDivorcedInfo.UnmarriedCert}\r\n                          onChange={(e) =>\r\n                            setEditDivorcedInfo({\r\n                              ...editDivorcedInfo,\r\n                              Name: e.target.value,\r\n                            })\r\n                          }\r\n                          name=\"UnmarriedCert\"\r\n                        />\r\n                        <TextField\r\n                          id=\"UploadUnmarriedCert\"\r\n                          label=\"UploadUnmarriedCert\"\r\n                          variant=\"standard\"\r\n                          color=\"secondary\"\r\n                          size=\"\"\r\n                          required\r\n                          value={editDivorcedInfo.UploadUnmarriedCert}\r\n                          onChange={(e) =>\r\n                            setEditDivorcedInfo({\r\n                              ...editDivorcedInfo,\r\n                              Name: e.target.value,\r\n                            })\r\n                          }\r\n                          name=\"UploadUnmarriedCert\"\r\n                        />\r\n                        <TextField\r\n                          id=\"IssuedDate\"\r\n                          label=\"IssuedDate\"\r\n                          variant=\"standard\"\r\n                          color=\"secondary\"\r\n                          size=\"\"\r\n                          required\r\n                          value={editDivorcedInfo.IssuedDate}\r\n                          onChange={(e) =>\r\n                            setEditDivorcedInfo({\r\n                              ...editDivorcedInfo,\r\n                              Name: e.target.value,\r\n                            })\r\n                          }\r\n                          name=\"IssuedDate\"\r\n                        />\r\n                        <TextField\r\n                          id=\"ExpiredDate\"\r\n                          label=\"ExpiredDate\"\r\n                          variant=\"standard\"\r\n                          color=\"secondary\"\r\n                          size=\"\"\r\n                          required\r\n                          value={editDivorcedInfo.ExpiredDate}\r\n                          onChange={(e) =>\r\n                            setEditDivorcedInfo({\r\n                              ...editDivorcedInfo,\r\n                              Name: e.target.value,\r\n                            })\r\n                          }\r\n                          name=\"ExpiredDate\"\r\n                        />\r\n                        <TextField\r\n                          id=\"UnMarrageCertiIssuer\"\r\n                          label=\"UnMarrageCertiIssuer\"\r\n                          variant=\"standard\"\r\n                          color=\"secondary\"\r\n                          size=\"\"\r\n                          required\r\n                          value={editDivorcedInfo.UnMarrageCertiIssuer}\r\n                          onChange={(e) =>\r\n                            setEditDivorcedInfo({\r\n                              ...editDivorcedInfo,\r\n                              Name: e.target.value,\r\n                            })\r\n                          }\r\n                          name=\"UnMarrageCertiIssuer\"\r\n                        />\r\n                        <TextField\r\n                          id=\"CourtDecision\"\r\n                          label=\"CourtDecision\"\r\n                          variant=\"standard\"\r\n                          color=\"secondary\"\r\n                          size=\"\"\r\n                          required\r\n                          value={editDivorcedInfo.CourtDecision}\r\n                          onChange={(e) =>\r\n                            setEditDivorcedInfo({\r\n                              ...editDivorcedInfo,\r\n                              Name: e.target.value,\r\n                            })\r\n                          }\r\n                          name=\"CourtDecision\"\r\n                        />\r\n                        <TextField\r\n                          id=\"UploadCourtDecision\"\r\n                          label=\"UploadCourtDecision\"\r\n                          variant=\"standard\"\r\n                          color=\"secondary\"\r\n                          size=\"\"\r\n                          required\r\n                          value={editDivorcedInfo.UploadCourtDecision}\r\n                          onChange={(e) =>\r\n                            setEditDivorcedInfo({\r\n                              ...editDivorcedInfo,\r\n                              Name: e.target.value,\r\n                            })\r\n                          }\r\n                          name=\"UploadCourtDecision\"\r\n                        />\r\n                      </div>\r\n                      <div>\r\n                        <button type=\"submit\" className=\"btn btn-info\">\r\n                          Update\r\n                        </button>\r\n                      </div>\r\n                    </form>\r\n                  </div>\r\n                </CompanyModal>\r\n              </div>\r\n              <div>\r\n                <CompanyModal\r\n                  isOpen={isCompanyMartailStatusUnmarriedModalOpen}\r\n                  onClose={handleCompanyMartailStatusUnmarriedCloseModal}\r\n                  title=\"Add martial status Unmarried information\"\r\n                >\r\n                  <div className=\"rounded-lg overflow-hidden\">\r\n                    {holdUnmarried ? (\r\n                      <table className=\"table table-bordered table-striped bg-purple-100\">\r\n                        <thead>\r\n                          <th className=\"px-2 py-4\"> UnMarried Certficate</th>\r\n                          <th className=\"px-2 py-4\">\r\n                            {\" \"}\r\n                            UnMarried Certficate Issue Date\r\n                          </th>\r\n                          <th className=\"px-2 py-4\">\r\n                            {\" \"}\r\n                            UnMarried Certficate Expired Date\r\n                          </th>\r\n                          <th className=\"px-2 py-4\">\r\n                            {\" \"}\r\n                            UnMarried Certficate Issue\r\n                          </th>\r\n                          <th className=\"px-2 py-4\"> Action </th>\r\n                        </thead>\r\n                        <tbody>\r\n                          {/* {getSoleTax.map((soleTax, index) => ( */}\r\n                          <tr\r\n                          // key={index}\r\n                          >\r\n                            <td>{holdUnmarried.UnMarriedCertficate}</td>\r\n                            <td>\r\n                              {holdUnmarried.UnMarriedCertficateIssueDate}\r\n                            </td>\r\n                            <td>\r\n                              {holdUnmarried.UnMarriedCertficateExpiredDate}\r\n                            </td>\r\n                            <td>{holdUnmarried.UnMarriedCertficateIssue}</td>\r\n                            <button\r\n                              onClick={() => {\r\n                                handleCompanyUnmarriedInformationEditOpenModal();\r\n                                // updateTaxById(getSoleTax.Id);\r\n                                // saveTaxSoleInfo(sole.Id);\r\n                              }}\r\n                              className=\"text-purple-600 rounded-md font-semibold \"\r\n                            >\r\n                              <span>\r\n                                <IconButton aria-label=\"Add\" color=\"secondary\">\r\n                                  <BsPlus /> Edit\r\n                                </IconButton>\r\n                              </span>\r\n                            </button>\r\n                          </tr>\r\n                          {/* ))}  */}\r\n                        </tbody>\r\n                      </table>\r\n                    ) : (\r\n                      \"\"\r\n                    )}\r\n                  </div>\r\n                  <button\r\n                    onClick={() => setToggleMarriedInfo(!toggleMarriedInfo)}\r\n                    className=\"text-purple-600 rounded-md font-medium \"\r\n                  >\r\n                    Add UnMarried\r\n                  </button>\r\n                  {toggleMarriedInfo && (\r\n                    <div className=\"submit-form\">\r\n                      {submitted ? (\r\n                        <div>\r\n                          <h4>You submitted successfully!</h4>\r\n                          <button\r\n                            className=\"btn btn-success\"\r\n                            onClick={newMartailStatusDivorced}\r\n                          >\r\n                            Add\r\n                          </button>\r\n                        </div>\r\n                      ) : (\r\n                        <div className=\"relative center justify-center flex-1 w-full max-w-full grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\">\r\n                          <TextField\r\n                            id=\"UnMarriedCertficate\"\r\n                            label=\"UnMarriedCertficate\"\r\n                            variant=\"standard\"\r\n                            color=\"secondary\"\r\n                            size=\"\"\r\n                            required\r\n                            value={martailStatusUnmarried.UnMarriedCertficate}\r\n                            onChange={handleInputChangeMartailStatusUnmarried}\r\n                            name=\"UnMarriedCertficate\"\r\n                          />\r\n                          <TextField\r\n                            id=\"UnMarriedCertficateIssueDate\"\r\n                            label=\"UnMarriedCertficateIssueDate\"\r\n                            variant=\"standard\"\r\n                            color=\"secondary\"\r\n                            size=\"\"\r\n                            required\r\n                            value={\r\n                              martailStatusUnmarried.UnMarriedCertficateIssueDate\r\n                            }\r\n                            onChange={handleInputChangeMartailStatusUnmarried}\r\n                            name=\"UnMarriedCertficateIssueDate\"\r\n                          />\r\n                          <TextField\r\n                            id=\"UnMarriedCertficateExpiredDate\"\r\n                            label=\"UnMarriedCertficateExpiredDate\"\r\n                            variant=\"standard\"\r\n                            color=\"secondary\"\r\n                            size=\"\"\r\n                            required\r\n                            value={\r\n                              martailStatusUnmarried.UnMarriedCertficateExpiredDate\r\n                            }\r\n                            onChange={handleInputChangeMartailStatusUnmarried}\r\n                            name=\"UnMarriedCertficateExpiredDate\"\r\n                          />\r\n                          <TextField\r\n                            id=\"UnMarriedCertficateIssuer\"\r\n                            label=\"UnMarriedCertficateIssuer\"\r\n                            variant=\"standard\"\r\n                            color=\"secondary\"\r\n                            size=\"\"\r\n                            required\r\n                            value={\r\n                              martailStatusUnmarried.UnMarriedCertficateIssuer\r\n                            }\r\n                            onChange={handleInputChangeMartailStatusUnmarried}\r\n                            name=\"UnMarriedCertficateIssuer\"\r\n                          />\r\n                        </div>\r\n                      )}\r\n                    </div>\r\n                  )}\r\n                  <div>\r\n                    <button\r\n                      className=\"bg-[purple] hover:bg-purple-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\"\r\n                      onClick={() => {\r\n                        saveUnmarried();\r\n                        setToggleMarriedInfo(!toggleMarriedInfo);\r\n                      }}\r\n                    >\r\n                      save\r\n                    </button>\r\n                  </div>\r\n                </CompanyModal>\r\n                <CompanyModal\r\n                  isOpen={isCompanyUnmarriedInformationEditModalOpen}\r\n                  onClose={handleCompanyUnmarriedEditCloseModal}\r\n                  title=\"Unmarried edit information\"\r\n                >\r\n                  <div>\r\n                    <form onSubmit={updateUnmarriedInfo}>\r\n                      <div className=\"relative center justify-center flex-1 w-full max-w-full grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\">\r\n                        <TextField\r\n                          id=\"UnMarriedCertficate\"\r\n                          label=\"UnMarriedCertficate\"\r\n                          variant=\"standard\"\r\n                          color=\"secondary\"\r\n                          size=\"\"\r\n                          required\r\n                          value={editUnmarriedInfo.UnMarriedCertficate}\r\n                          onChange={(e) =>\r\n                            setEditUnmarriedInfo({\r\n                              ...editUnmarriedInfo,\r\n                              Name: e.target.value,\r\n                            })\r\n                          }\r\n                          name=\"UnMarriedCertficate\"\r\n                        />\r\n                        <TextField\r\n                          id=\"UnMarriedCertficateIssueDate\"\r\n                          label=\"UnMarriedCertficateIssueDate\"\r\n                          variant=\"standard\"\r\n                          color=\"secondary\"\r\n                          size=\"\"\r\n                          required\r\n                          value={editUnmarriedInfo.UnMarriedCertficateIssueDate}\r\n                          onChange={(e) =>\r\n                            setEditUnmarriedInfo({\r\n                              ...editUnmarriedInfo,\r\n                              Name: e.target.value,\r\n                            })\r\n                          }\r\n                          name=\"UnMarriedCertficateIssueDate\"\r\n                        />\r\n                        <TextField\r\n                          id=\"UnMarriedCertficateExpiredDate\"\r\n                          label=\"UnMarriedCertficateExpiredDate\"\r\n                          variant=\"standard\"\r\n                          color=\"secondary\"\r\n                          size=\"\"\r\n                          required\r\n                          value={\r\n                            editUnmarriedInfo.UnMarriedCertficateExpiredDate\r\n                          }\r\n                          onChange={(e) =>\r\n                            setEditUnmarriedInfo({\r\n                              ...editUnmarriedInfo,\r\n                              Name: e.target.value,\r\n                            })\r\n                          }\r\n                          name=\"UnMarriedCertficateExpiredDate\"\r\n                        />\r\n                        <TextField\r\n                          id=\"UnMarriedCertficateIssuer\"\r\n                          label=\"UnMarriedCertficateIssuer\"\r\n                          variant=\"standard\"\r\n                          color=\"secondary\"\r\n                          size=\"\"\r\n                          required\r\n                          value={editUnmarriedInfo.UnMarriedCertficateIssuer}\r\n                          onChange={(e) =>\r\n                            setEditUnmarriedInfo({\r\n                              ...editUnmarriedInfo,\r\n                              Name: e.target.value,\r\n                            })\r\n                          }\r\n                          name=\"UnMarriedCertficateIssuer\"\r\n                        />\r\n                      </div>\r\n                      <div>\r\n                        <button type=\"submit\" className=\"btn btn-info\">\r\n                          Update\r\n                        </button>\r\n                      </div>\r\n                    </form>\r\n                  </div>\r\n                </CompanyModal>\r\n              </div>\r\n              <div>\r\n                <CompanyModal\r\n                  isOpen={isCompanyMartailStatusWidowedModalOpen}\r\n                  onClose={handleCompanyMartailStatusWidowedCloseModal}\r\n                  title=\"Add martial status widowed information\"\r\n                >\r\n                  <div className=\"rounded-lg overflow-hidden\">\r\n                    {holdWidowed ? (\r\n                      <table className=\"table table-bordered table-striped bg-purple-100\">\r\n                        <thead>\r\n                          <th className=\"px-2 py-4\"> Date Of Widowed</th>\r\n                          <th className=\"px-2 py-4\"> Marraige Certificate</th>\r\n                          <th className=\"px-2 py-4\">\r\n                            {\" \"}\r\n                            Marraige Certificate Issuer\r\n                          </th>\r\n                          <th className=\"px-2 py-4\"> Unmarried Certificate</th>\r\n                          <th className=\"px-2 py-4\">\r\n                            {\" \"}\r\n                            Unmarraied Certificate Issuer\r\n                          </th>\r\n                          <th className=\"px-2 py-4\">\r\n                            {\" \"}\r\n                            Unmarried Certificate Issu Date\r\n                          </th>\r\n                          <th className=\"px-2 py-4\">\r\n                            {\" \"}\r\n                            Unmarried Certificate Expired Date\r\n                          </th>\r\n                          <th className=\"px-2 py-4\"> Court Decision</th>\r\n                          <th className=\"px-2 py-4\"> Action </th>\r\n                        </thead>\r\n                        <tbody>\r\n                          {/* {getSoleTax.map((soleTax, index) => ( */}\r\n                          <tr\r\n                          // key={index}\r\n                          >\r\n                            <td>{holdWidowed.DateOfWidowed}</td>\r\n                            <td>{holdWidowed.MarraigeCertificate}</td>\r\n                            <td>{holdWidowed.MarraigeCertificateIssuer}</td>\r\n                            <td>{holdWidowed.UnmarriedCertificate}</td>\r\n                            <td>{holdWidowed.UnmarraiedCertificateIssuer}</td>\r\n                            <td>{holdWidowed.UnmarriedCertificateIssuDate}</td>\r\n                            <td>\r\n                              {holdWidowed.UnmarriedCertificateExpiredDate}\r\n                            </td>\r\n                            <td>{holdWidowed.CourtDecision}</td>\r\n                            <button\r\n                              onClick={() => {\r\n                                handleCompanyWidowedInformationEditOpenModal();\r\n                                // updateTaxById(getSoleTax.Id);\r\n                                // saveTaxSoleInfo(sole.Id);\r\n                              }}\r\n                              className=\"text-purple-600 rounded-md font-semibold \"\r\n                            >\r\n                              <span>\r\n                                <IconButton aria-label=\"Add\" color=\"secondary\">\r\n                                  <BsPlus /> Edit\r\n                                </IconButton>\r\n                              </span>\r\n                            </button>\r\n                          </tr>\r\n                          {/* ))}  */}\r\n                        </tbody>\r\n                      </table>\r\n                    ) : (\r\n                      \"\"\r\n                    )}\r\n                  </div>\r\n                  <button\r\n                    onClick={() => setToggleMarriedInfo(!toggleMarriedInfo)}\r\n                    className=\"text-purple-600 rounded-md font-medium \"\r\n                  >\r\n                    Add Widowed\r\n                  </button>\r\n                  {toggleMarriedInfo && (\r\n                    <div className=\"submit-form\">\r\n                      {submitted ? (\r\n                        <div>\r\n                          <h4>You submitted successfully!</h4>\r\n                          <button\r\n                            className=\"btn btn-success\"\r\n                            onClick={newMartailStatusWidowed}\r\n                          >\r\n                            Add\r\n                          </button>\r\n                        </div>\r\n                      ) : (\r\n                        <div className=\"relative center justify-center flex-1 w-full max-w-full grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\">\r\n                          <TextField\r\n                            id=\"DateOfWidowed\"\r\n                            label=\"DateOfWidowed\"\r\n                            variant=\"standard\"\r\n                            color=\"secondary\"\r\n                            size=\"\"\r\n                            required\r\n                            value={martailStatusWidowed.DateOfWidowed}\r\n                            onChange={handleInputChangeMartailStatusWidowed}\r\n                            name=\"DateOfWidowed\"\r\n                          />\r\n                          <TextField\r\n                            id=\"MarraigeCertificate\"\r\n                            label=\"MarraigeCertificate\"\r\n                            variant=\"standard\"\r\n                            color=\"secondary\"\r\n                            size=\"\"\r\n                            required\r\n                            value={martailStatusWidowed.MarraigeCertificate}\r\n                            onChange={handleInputChangeMartailStatusWidowed}\r\n                            name=\"MarraigeCertificate\"\r\n                          />\r\n                          <TextField\r\n                            id=\"MarraigeCertificateIssuer\"\r\n                            label=\"MarraigeCertificateIssuer\"\r\n                            variant=\"standard\"\r\n                            color=\"secondary\"\r\n                            size=\"\"\r\n                            required\r\n                            value={\r\n                              martailStatusWidowed.MarraigeCertificateIssuer\r\n                            }\r\n                            onChange={handleInputChangeMartailStatusWidowed}\r\n                            name=\"MarraigeCertificateIssuer\"\r\n                          />\r\n                          <TextField\r\n                            id=\"UnmarriedCertificate\"\r\n                            label=\"UnmarriedCertificate\"\r\n                            variant=\"standard\"\r\n                            color=\"secondary\"\r\n                            size=\"\"\r\n                            required\r\n                            value={martailStatusWidowed.UnmarriedCertificate}\r\n                            onChange={handleInputChangeMartailStatusWidowed}\r\n                            name=\"UnmarriedCertificate\"\r\n                          />\r\n                          <TextField\r\n                            id=\"UnmarraiedCertificateIssuer\"\r\n                            label=\"UnmarraiedCertificateIssuer\"\r\n                            variant=\"standard\"\r\n                            color=\"secondary\"\r\n                            size=\"\"\r\n                            required\r\n                            value={\r\n                              martailStatusWidowed.UnmarraiedCertificateIssuer\r\n                            }\r\n                            onChange={handleInputChangeMartailStatusWidowed}\r\n                            name=\"UnmarraiedCertificateIssuer\"\r\n                          />\r\n                          <TextField\r\n                            id=\"UnmarriedCertificateIssuDate\"\r\n                            label=\"UnmarriedCertificateIssuDate\"\r\n                            variant=\"standard\"\r\n                            color=\"secondary\"\r\n                            size=\"\"\r\n                            required\r\n                            value={\r\n                              martailStatusWidowed.UnmarriedCertificateIssuDate\r\n                            }\r\n                            onChange={handleInputChangeMartailStatusWidowed}\r\n                            name=\"UnmarriedCertificateIssuDate\"\r\n                          />\r\n                          <TextField\r\n                            id=\"UnmarriedCertificateExpiredDate\"\r\n                            label=\"UnmarriedCertificateExpiredDate\"\r\n                            variant=\"standard\"\r\n                            color=\"secondary\"\r\n                            size=\"\"\r\n                            required\r\n                            value={\r\n                              martailStatusWidowed.UnmarriedCertificateExpiredDate\r\n                            }\r\n                            onChange={handleInputChangeMartailStatusWidowed}\r\n                            name=\"UnmarriedCertificateExpiredDate\"\r\n                          />\r\n                          <TextField\r\n                            id=\"CourtDecision\"\r\n                            label=\"CourtDecision\"\r\n                            variant=\"standard\"\r\n                            color=\"secondary\"\r\n                            size=\"\"\r\n                            required\r\n                            value={martailStatusWidowed.CourtDecision}\r\n                            onChange={handleInputChangeMartailStatusWidowed}\r\n                            name=\"CourtDecision\"\r\n                          />\r\n                        </div>\r\n                      )}\r\n                    </div>\r\n                  )}\r\n                  <div>\r\n                    <button\r\n                      className=\"bg-[purple] hover:bg-purple-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\"\r\n                      onClick={() => {\r\n                        saveWidowed();\r\n                        setToggleMarriedInfo(!toggleMarriedInfo);\r\n                      }}\r\n                    >\r\n                      save\r\n                    </button>\r\n                  </div>\r\n                </CompanyModal>\r\n                <CompanyModal\r\n                  isOpen={isCompanyWidowedInformationEditModalOpen}\r\n                  onClose={handleCompanyWidowedEditCloseModal}\r\n                  title=\"Widowed edit information\"\r\n                >\r\n                  <div>\r\n                    <form onSubmit={updateWidowedInfo}>\r\n                      <div className=\"relative center justify-center flex-1 w-full max-w-full grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\">\r\n                        <TextField\r\n                          id=\"DateOfWidowed\"\r\n                          label=\"DateOfWidowed\"\r\n                          variant=\"standard\"\r\n                          color=\"secondary\"\r\n                          size=\"\"\r\n                          required\r\n                          value={editWidowedInfo.DateOfWidowed}\r\n                          onChange={(e) =>\r\n                            setEditWidowedInfo({\r\n                              ...editWidowedInfo,\r\n                              Name: e.target.value,\r\n                            })\r\n                          }\r\n                          name=\"DateOfWidowed\"\r\n                        />\r\n                        <TextField\r\n                          id=\"MarraigeCertificate\"\r\n                          label=\"MarraigeCertificate\"\r\n                          variant=\"standard\"\r\n                          color=\"secondary\"\r\n                          size=\"\"\r\n                          required\r\n                          value={editWidowedInfo.MarraigeCertificate}\r\n                          onChange={(e) =>\r\n                            setEditWidowedInfo({\r\n                              ...editWidowedInfo,\r\n                              Name: e.target.value,\r\n                            })\r\n                          }\r\n                          name=\"MarraigeCertificate\"\r\n                        />\r\n                        <TextField\r\n                          id=\"MarraigeCertificateIssuer\"\r\n                          label=\"MarraigeCertificateIssuer\"\r\n                          variant=\"standard\"\r\n                          color=\"secondary\"\r\n                          size=\"\"\r\n                          required\r\n                          value={editWidowedInfo.MarraigeCertificateIssuer}\r\n                          onChange={(e) =>\r\n                            setEditWidowedInfo({\r\n                              ...editWidowedInfo,\r\n                              Name: e.target.value,\r\n                            })\r\n                          }\r\n                          name=\"MarraigeCertificateIssuer\"\r\n                        />\r\n                        <TextField\r\n                          id=\"UnmarriedCertificate\"\r\n                          label=\"UnmarriedCertificate\"\r\n                          variant=\"standard\"\r\n                          color=\"secondary\"\r\n                          size=\"\"\r\n                          required\r\n                          value={editWidowedInfo.UnmarriedCertificate}\r\n                          onChange={(e) =>\r\n                            setEditWidowedInfo({\r\n                              ...editWidowedInfo,\r\n                              Name: e.target.value,\r\n                            })\r\n                          }\r\n                          name=\"UnmarriedCertificate\"\r\n                        />\r\n                        <TextField\r\n                          id=\"UnmarraiedCertificateIssuer\"\r\n                          label=\"UnmarraiedCertificateIssuer\"\r\n                          variant=\"standard\"\r\n                          color=\"secondary\"\r\n                          size=\"\"\r\n                          required\r\n                          value={editWidowedInfo.UnmarraiedCertificateIssuer}\r\n                          onChange={(e) =>\r\n                            setEditWidowedInfo({\r\n                              ...editWidowedInfo,\r\n                              Name: e.target.value,\r\n                            })\r\n                          }\r\n                          name=\"UnmarraiedCertificateIssuer\"\r\n                        />\r\n                        <TextField\r\n                          id=\"UnmarriedCertificateIssuDate\"\r\n                          label=\"UnmarriedCertificateIssuDate\"\r\n                          variant=\"standard\"\r\n                          color=\"secondary\"\r\n                          size=\"\"\r\n                          required\r\n                          value={editWidowedInfo.UnmarriedCertificateIssuDate}\r\n                          onChange={(e) =>\r\n                            setEditWidowedInfo({\r\n                              ...editWidowedInfo,\r\n                              Name: e.target.value,\r\n                            })\r\n                          }\r\n                          name=\"UnmarriedCertificateIssuDate\"\r\n                        />\r\n                        <TextField\r\n                          id=\"UnmarriedCertificateExpiredDate\"\r\n                          label=\"UnmarriedCertificateExpiredDate\"\r\n                          variant=\"standard\"\r\n                          color=\"secondary\"\r\n                          size=\"\"\r\n                          required\r\n                          value={\r\n                            editWidowedInfo.UnmarriedCertificateExpiredDate\r\n                          }\r\n                          onChange={(e) =>\r\n                            setEditWidowedInfo({\r\n                              ...editWidowedInfo,\r\n                              Name: e.target.value,\r\n                            })\r\n                          }\r\n                          name=\"UnmarriedCertificateExpiredDate\"\r\n                        />\r\n                        <TextField\r\n                          id=\"CourtDecision\"\r\n                          label=\"CourtDecision\"\r\n                          variant=\"standard\"\r\n                          color=\"secondary\"\r\n                          size=\"\"\r\n                          required\r\n                          value={editWidowedInfo.CourtDecision}\r\n                          onChange={(e) =>\r\n                            setEditWidowedInfo({\r\n                              ...editWidowedInfo,\r\n                              Name: e.target.value,\r\n                            })\r\n                          }\r\n                          name=\"CourtDecision\"\r\n                        />\r\n                      </div>\r\n                      <div>\r\n                        <button type=\"submit\" className=\"btn btn-info\">\r\n                          Update\r\n                        </button>\r\n                      </div>\r\n                    </form>\r\n                  </div>\r\n                </CompanyModal>\r\n              </div>\r\n              <div>\r\n                <CompanyModal\r\n                  isOpen={isCompanyTaxSoleModalOpen}\r\n                  onClose={handleCompanyTaxSoleCloseModal}\r\n                  title=\"Add company sole and partinership tax information\"\r\n                >\r\n                  <div className=\"rounded-lg overflow-hidden\">\r\n                    {getSoleTax && (\r\n                      <table className=\"table table-bordered table-striped bg-purple-100\">\r\n                        <thead>\r\n                          <th className=\"px-2 py-4\"> Name </th>\r\n                          <th className=\"px-2 py-4\"> TinNo </th>\r\n                          <th className=\"px-2 py-4\"> Issue Date </th>\r\n                          <th className=\"px-2 py-4\"> Expired date </th>\r\n                          <th className=\"px-2 py-4\"> Tax Debi </th>\r\n                          <th className=\"px-2 py-4\">\r\n                            Tax Clearance Certificate\r\n                          </th>\r\n                          <th className=\"px-2 py-4\"> Action </th>\r\n                        </thead>\r\n                        <tbody>\r\n                          {/* {getSoleTax.map((soleTax, index) => ( */}\r\n                          <tr\r\n                          // key={index}\r\n                          >\r\n                            {/* <td>{getSoleTax.Id}</td> */}\r\n                            <td>{getSoleTax.Name}</td>\r\n                            <td>{getSoleTax.TinNo}</td>\r\n                            <td>{getSoleTax.IssueDate}</td>\r\n                            <td>{getSoleTax.Expireddate}</td>\r\n                            <td>{getSoleTax.TaxDebi}</td>\r\n                            <td>{getSoleTax.TaxClearanceCertificate}</td>\r\n                            <button\r\n                              onClick={() => {\r\n                                handleCompanyTaxInformationEditOpenModal();\r\n                                updateTaxById(getSoleTax.Id);\r\n                                // saveTaxSoleInfo(sole.Id);\r\n                              }}\r\n                              className=\"text-purple-600 rounded-md font-semibold \"\r\n                            >\r\n                              <span>\r\n                                <IconButton aria-label=\"Add\" color=\"secondary\">\r\n                                  <BsPlus /> Edit\r\n                                </IconButton>\r\n                              </span>\r\n                            </button>\r\n                          </tr>\r\n                          {/* ))} */}\r\n                        </tbody>\r\n                      </table>\r\n                    )}\r\n                  </div>\r\n                  <button\r\n                    onClick={() => setToggleTaxInfo(!toggleTaxSoleInfo)}\r\n                    className=\"text-purple-600 rounded-md font-medium \"\r\n                  >\r\n                    Add Tax\r\n                  </button>\r\n                  {toggleTaxSoleInfo && (\r\n                    <div className=\"submit-form\">\r\n                      {submitted ? (\r\n                        <div>\r\n                          <h4>You submitted successfully!</h4>\r\n                          <button\r\n                            className=\"btn btn-success\"\r\n                            onClick={newTaxSoleInfo}\r\n                          >\r\n                            Add\r\n                          </button>\r\n                        </div>\r\n                      ) : (\r\n                        <div className=\"relative center justify-center flex-1 w-full max-w-full grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\">\r\n                          <TextField\r\n                            id=\"Name\"\r\n                            label=\"Name\"\r\n                            variant=\"standard\"\r\n                            color=\"secondary\"\r\n                            size=\"\"\r\n                            required\r\n                            value={taxSoleInfo.Name}\r\n                            onChange={handleInputChangeTaxSoleInfo}\r\n                            name=\"Name\"\r\n                          />\r\n                          <TextField\r\n                            id=\"TinNo\"\r\n                            label=\"TinNo\"\r\n                            variant=\"standard\"\r\n                            color=\"secondary\"\r\n                            size=\"\"\r\n                            required\r\n                            value={taxSoleInfo.TinNo}\r\n                            onChange={handleInputChangeTaxSoleInfo}\r\n                            name=\"TinNo\"\r\n                          />\r\n                          <TextField\r\n                            id=\"IssueDate\"\r\n                            label=\"IssueDate\"\r\n                            variant=\"standard\"\r\n                            color=\"secondary\"\r\n                            size=\"\"\r\n                            required\r\n                            value={taxSoleInfo.IssueDate}\r\n                            onChange={handleInputChangeTaxSoleInfo}\r\n                            name=\"IssueDate\"\r\n                          />\r\n                          <TextField\r\n                            id=\"ExpiredDate\"\r\n                            label=\"ExpiredDate\"\r\n                            variant=\"standard\"\r\n                            color=\"secondary\"\r\n                            size=\"\"\r\n                            required\r\n                            value={taxSoleInfo.ExpiredDate}\r\n                            onChange={handleInputChangeTaxSoleInfo}\r\n                            name=\"ExpiredDate\"\r\n                          />\r\n                          <TextField\r\n                            id=\"TaxDebi\"\r\n                            label=\"TaxDebi\"\r\n                            variant=\"standard\"\r\n                            color=\"secondary\"\r\n                            size=\"\"\r\n                            required\r\n                            value={taxSoleInfo.TaxDebi}\r\n                            onChange={handleInputChangeTaxSoleInfo}\r\n                            name=\"TaxDebi\"\r\n                          />\r\n                          <TextField\r\n                            id=\"TaxClearanceCertificate\"\r\n                            label=\"TaxClearanceCertificate\"\r\n                            variant=\"standard\"\r\n                            color=\"secondary\"\r\n                            size=\"\"\r\n                            required\r\n                            value={taxSoleInfo.TaxClearanceCertificate}\r\n                            onChange={handleInputChangeTaxSoleInfo}\r\n                            name=\"TaxClearanceCertificate\"\r\n                          />\r\n                        </div>\r\n                      )}\r\n                      <button\r\n                        className=\"bg-[purple] hover:bg-purple-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\"\r\n                        onClick={() => {\r\n                          saveTaxSoleInfo();\r\n                          setToggleTaxInfo(!toggleTaxSoleInfo);\r\n                        }}\r\n                      >\r\n                        save Tax\r\n                      </button>\r\n                    </div>\r\n                  )}\r\n                </CompanyModal>\r\n              </div>\r\n              <CompanyModal\r\n                isOpen={isCompanyTaxInformationEditModalOpen}\r\n                onClose={handleCompanyTaxEditCloseModal}\r\n                title=\"Add company sole and partinership tax edit information\"\r\n              >\r\n                <div>\r\n                  <form onSubmit={updateTaxInfo}>\r\n                    <div className=\"relative center justify-center flex-1 w-full max-w-full grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\">\r\n                      <TextField\r\n                        id=\"Name\"\r\n                        label=\"Name\"\r\n                        variant=\"standard\"\r\n                        color=\"secondary\"\r\n                        size=\"\"\r\n                        required\r\n                        value={editTaxInfo.Name}\r\n                        onChange={(e) =>\r\n                          setEditTaxInfo({\r\n                            ...editTaxInfo,\r\n                            Name: e.target.value,\r\n                          })\r\n                        }\r\n                        name=\"Name\"\r\n                      />\r\n                      <TextField\r\n                        id=\"TinNo\"\r\n                        label=\"TinNo\"\r\n                        variant=\"standard\"\r\n                        color=\"secondary\"\r\n                        size=\"\"\r\n                        required\r\n                        value={editTaxInfo.TinNo}\r\n                        onChange={(e) =>\r\n                          setEditTaxInfo({\r\n                            ...editTaxInfo,\r\n                            TinNo: e.target.value,\r\n                          })\r\n                        }\r\n                        name=\"TinNo\"\r\n                      />\r\n                      <TextField\r\n                        id=\"IssueDate\"\r\n                        label=\"IssueDate\"\r\n                        variant=\"standard\"\r\n                        color=\"secondary\"\r\n                        size=\"\"\r\n                        required\r\n                        value={editTaxInfo.IssueDate}\r\n                        onChange={(e) =>\r\n                          setEditTaxInfo({\r\n                            ...editTaxInfo,\r\n                            IssueDate: e.target.value,\r\n                          })\r\n                        }\r\n                        name=\"IssueDate\"\r\n                      />\r\n                      <TextField\r\n                        id=\"ExpiredDate\"\r\n                        label=\"ExpiredDate\"\r\n                        variant=\"standard\"\r\n                        color=\"secondary\"\r\n                        size=\"\"\r\n                        required\r\n                        value={editTaxInfo.Expireddate}\r\n                        onChange={(e) =>\r\n                          setEditTaxInfo({\r\n                            ...editTaxInfo,\r\n                            Expireddate: e.target.value,\r\n                          })\r\n                        }\r\n                        name=\"ExpiredDate\"\r\n                      />\r\n                      <TextField\r\n                        id=\"TaxDebi\"\r\n                        label=\"TaxDebi\"\r\n                        variant=\"standard\"\r\n                        color=\"secondary\"\r\n                        size=\"\"\r\n                        required\r\n                        value={editTaxInfo.TaxDebi}\r\n                        onChange={(e) =>\r\n                          setEditTaxInfo({\r\n                            ...editTaxInfo,\r\n                            TaxDebi: e.target.value,\r\n                          })\r\n                        }\r\n                        name=\"TaxDebi\"\r\n                      />\r\n                      <TextField\r\n                        id=\"TaxClearanceCertificate\"\r\n                        label=\"TaxClearanceCertificate\"\r\n                        variant=\"standard\"\r\n                        color=\"secondary\"\r\n                        size=\"\"\r\n                        required\r\n                        value={editTaxInfo.TaxClearanceCertificate}\r\n                        onChange={(e) =>\r\n                          setEditTaxInfo({\r\n                            ...editTaxInfo,\r\n                            TaxClearanceCertificate: e.target.value,\r\n                          })\r\n                        }\r\n                        name=\"TaxClearanceCertificate\"\r\n                      />\r\n                    </div>\r\n                    <div>\r\n                      <button type=\"submit\" className=\"btn btn-info\">\r\n                        Update\r\n                      </button>\r\n                    </div>\r\n                  </form>\r\n                </div>\r\n              </CompanyModal>\r\n              <div>\r\n                <CompanyModal\r\n                  isOpen={isCompanyGrauntorSoleModalOpen}\r\n                  onClose={handleCompanyGrauntorSoleCloseModal}\r\n                  title=\"Add company sole and partinership gruantor information\"\r\n                >\r\n                  <div className=\"rounded-lg overflow-hidden\">\r\n                    {getSoleGrauntor && (\r\n                      <table className=\"table table-bordered table-striped bg-purple-100\">\r\n                        <thead>\r\n                          <th className=\"px-2 py-4\"> Name </th>\r\n                          {/* <th className=\"px-2 py-4\"> GuarantorSpouseId </th>\r\n                          <th className=\"px-2 py-4\"> \"GuarantorUnmarriedId </th> */}\r\n                          <th className=\"px-2 py-4\"> TaxClerance Name</th>\r\n                          <th className=\"px-2 py-4\"> TinNo </th>\r\n                          <th className=\"px-2 py-4\">IssueDate</th>\r\n                          <th className=\"px-2 py-4\">Expireddate</th>\r\n                          <th className=\"px-2 py-4\">TaxDebi</th>\r\n                          <th className=\"px-2 py-4\">TaxClearanceCertificate</th>\r\n                          <th className=\"px-2 py-4\"> Action </th>\r\n                        </thead>\r\n                        <tbody>\r\n                          {/* {getSoleTax.map((soleTax, index) => ( */}\r\n                          <tr\r\n                          // key={index}\r\n                          >\r\n                            {/* <td>{getSoleTax.Id}</td> */}\r\n                            <td>{getSoleGrauntor.Name}</td>\r\n                            {/* <td>{getSoleGrauntor.GuarantorSpouseId}</td>\r\n                            <td>{getSoleGrauntor.GuarantorUnmarriedId}</td> */}\r\n                            <td>{getSoleGrauntor.TaxClerance.Name}</td>\r\n                            <td>{getSoleGrauntor.TaxClerance.TinNo}</td>\r\n                            <td>{getSoleGrauntor.TaxClerance.IssueDate}</td>\r\n                            <td>{getSoleGrauntor.TaxClerance.Expireddate}</td>\r\n                            <td>{getSoleGrauntor.TaxClerance.TaxDebi}</td>\r\n                            <td>\r\n                              {\r\n                                getSoleGrauntor.TaxClerance\r\n                                  .TaxClearanceCertificate\r\n                              }\r\n                            </td>\r\n                            <button\r\n                              onClick={() => {\r\n                                handleCompanyTaxInformationEditOpenModal();\r\n                                updateTaxById(getSoleTax.Id);\r\n                                // saveTaxSoleInfo(sole.Id);\r\n                              }}\r\n                              className=\"text-purple-600 rounded-md font-semibold \"\r\n                            >\r\n                              <span>\r\n                                <IconButton aria-label=\"Add\" color=\"secondary\">\r\n                                  <BsPlus /> Edit\r\n                                </IconButton>\r\n                              </span>\r\n                            </button>\r\n                          </tr>\r\n                          {/* ))}  */}\r\n                        </tbody>\r\n                      </table>\r\n                    )}\r\n                  </div>\r\n                  <button\r\n                    onClick={() =>\r\n                      setToggleGruantorInfo(!toggleGruantorSoleInfo)\r\n                    }\r\n                    className=\"text-purple-600 rounded-md font-medium \"\r\n                  >\r\n                    Add Tax\r\n                  </button>\r\n                  {toggleGruantorSoleInfo && (\r\n                    <div className=\"submit-form\">\r\n                      {submitted ? (\r\n                        <div>\r\n                          <h4>You submitted successfully!</h4>\r\n                          <button\r\n                            className=\"btn btn-success\"\r\n                            onClick={newTaxSoleInfo}\r\n                          >\r\n                            Add\r\n                          </button>\r\n                        </div>\r\n                      ) : (\r\n                        <div className=\"relative center justify-center flex-1 w-full max-w-full grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\">\r\n                          <TextField\r\n                            id=\"Name\"\r\n                            label=\"Name\"\r\n                            variant=\"standard\"\r\n                            color=\"secondary\"\r\n                            size=\"\"\r\n                            required\r\n                            value={grauntorSoleInfo.Name}\r\n                            onChange={handleInputChangeGrauntorSoleInfo}\r\n                            name=\"Name\"\r\n                          />\r\n                          <div className=\"form-Control\">\r\n                            <TextField\r\n                              id=\"taxClerance.Name\"\r\n                              label=\"tax Clerance Name\"\r\n                              variant=\"standard\"\r\n                              color=\"secondary\"\r\n                              size=\"\"\r\n                              required\r\n                              value={taxClerance.Name}\r\n                              onChange={handleInputChangeGrauntorSoleInfo}\r\n                              name=\"taxClerance.Name\"\r\n                            />\r\n                          </div>\r\n                          <TextField\r\n                            id=\"taxClerance.TinNo\"\r\n                            label=\"TaxCleranceTinNo\"\r\n                            variant=\"standard\"\r\n                            color=\"secondary\"\r\n                            size=\"\"\r\n                            required\r\n                            value={taxClerance.TinNo}\r\n                            onChange={handleInputChangeTaxClearance}\r\n                            name=\"taxClerance.TinNo\"\r\n                          />\r\n                          <TextField\r\n                            id=\"taxClerance.IssueDate\"\r\n                            label=\"TaxCleranceIssueDate\"\r\n                            variant=\"standard\"\r\n                            color=\"secondary\"\r\n                            size=\"\"\r\n                            required\r\n                            value={taxClerance.IssueDate}\r\n                            onChange={handleInputChangeTaxClearance}\r\n                            name=\"taxClerance.IssueDate\"\r\n                          />\r\n                          <TextField\r\n                            id=\"taxClerance.ExpiredDate\"\r\n                            label=\"TaxCleranceExpiredDate\"\r\n                            variant=\"standard\"\r\n                            color=\"secondary\"\r\n                            size=\"\"\r\n                            required\r\n                            value={taxClerance.Expireddate}\r\n                            onChange={handleInputChangeTaxClearance}\r\n                            name=\"taxClerance.ExpiredDate\"\r\n                          />\r\n                          <TextField\r\n                            id=\"taxClerance.TaxDebi\"\r\n                            label=\"TaxCleranceTaxDebi\"\r\n                            variant=\"standard\"\r\n                            color=\"secondary\"\r\n                            size=\"\"\r\n                            required\r\n                            value={taxClerance.TaxDebi}\r\n                            onChange={handleInputChangeTaxClearance}\r\n                            name=\"taxClerance.TaxDebi\"\r\n                          />\r\n                          <TextField\r\n                            id=\"taxClerance.Certificate\"\r\n                            label=\"TaxClearanceCertificate\"\r\n                            variant=\"standard\"\r\n                            color=\"secondary\"\r\n                            size=\"\"\r\n                            required\r\n                            value={taxClerance.TaxClearanceCertificate}\r\n                            onChange={handleInputChangeTaxClearance}\r\n                            name=\"TtaxClerance.Certificate\"\r\n                          />\r\n                        </div>\r\n                      )}\r\n                      <button\r\n                        className=\"bg-[purple] hover:bg-purple-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\"\r\n                        onClick={() => {\r\n                          saveGrauntorSoleInfo();\r\n                          setToggleGruantorInfo(!toggleGruantorSoleInfo);\r\n                        }}\r\n                      >\r\n                        save Gruantor\r\n                      </button>\r\n                    </div>\r\n                  )}\r\n                </CompanyModal>\r\n              </div>\r\n            </>\r\n          )}\r\n          {activeStep === 8 && (\r\n            <>\r\n              <div className=\"flex\">\r\n                <button\r\n                  className=\"text-purple-600 inline w-[150px] rounded-md font-medium \"\r\n                  onClick={handleBack}\r\n                >\r\n                  <span>\r\n                    <IconButton aria-label=\"Skip\" color=\"secondary\">\r\n                      <RiSkipBackMiniFill /> Back\r\n                    </IconButton>\r\n                  </span>\r\n                </button>\r\n                <button\r\n                  onClick={() => {\r\n                    handleCompanyPLCAndShareOpenModal();\r\n                  }}\r\n                  className=\"text-purple-600 rounded-md font-medium \"\r\n                >\r\n                  <span>\r\n                    <IconButton aria-label=\"Add\" color=\"secondary\">\r\n                      <BsPlus /> Add\r\n                    </IconButton>\r\n                  </span>\r\n                  {/* if the company is already registered, Skip button will active  */}\r\n                </button>\r\n                <button\r\n                  className=\"text-purple-600 inline w-[150px] rounded-md font-medium \"\r\n                  onClick={handleSkip}\r\n                >\r\n                  <span>\r\n                    <IconButton aria-label=\"Skip\" color=\"secondary\">\r\n                      <BiSkipNext /> Skip\r\n                    </IconButton>\r\n                  </span>\r\n                </button>\r\n              </div>\r\n              <CompanyModal\r\n                isOpen={isCompanyPLCAndShareModalOpen}\r\n                onClose={handleCompanyPLCAndShareCloseModal}\r\n                title=\"Add company PLCAndShare information\"\r\n              >\r\n                <div>\r\n                  <div className=\"submit-form\">\r\n                    {submitted ? (\r\n                      <div>\r\n                        <h4>You submitted successfully!</h4>\r\n                        <button\r\n                          className=\"btn btn-success\"\r\n                          onClick={newPLCAndShare}\r\n                        >\r\n                          Add\r\n                        </button>\r\n                      </div>\r\n                    ) : (\r\n                      <div className=\"relative center justify-center flex-1 w-full max-w-full grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\">\r\n                        <TextField\r\n                          id=\"MoUDate\"\r\n                          label=\"MoUDate\"\r\n                          variant=\"standard\"\r\n                          color=\"secondary\"\r\n                          size=\"\"\r\n                          required\r\n                          value={PLCAndShare.MoUDate}\r\n                          onChange={handleInputChangePLCAndShare}\r\n                          name=\"MoUDate\"\r\n                        />\r\n\r\n                        <TextField\r\n                          id=\"MoUReferenceNumber\"\r\n                          label=\"MoUReferenceNumber\"\r\n                          variant=\"standard\"\r\n                          color=\"secondary\"\r\n                          size=\"\"\r\n                          required\r\n                          value={PLCAndShare.MoUReferenceNumber}\r\n                          onChange={handleInputChangePLCAndShare}\r\n                          name=\"MoUReferenceNumber\"\r\n                        />\r\n                        <TextField\r\n                          id=\"MoUAuthDate\"\r\n                          label=\"MoUAuthDate\"\r\n                          variant=\"standard\"\r\n                          color=\"secondary\"\r\n                          size=\"\"\r\n                          required\r\n                          value={PLCAndShare.MoUAuthDate}\r\n                          onChange={handleInputChangePLCAndShare}\r\n                          name=\"MoUAuthDate\"\r\n                        />\r\n                        <TextField\r\n                          id=\"MoUAuthRefNumber\"\r\n                          label=\"MoUAuthRefNumber\"\r\n                          variant=\"standard\"\r\n                          color=\"secondary\"\r\n                          size=\"\"\r\n                          required\r\n                          value={PLCAndShare.MoUAuthRefNumber}\r\n                          onChange={handleInputChangePLCAndShare}\r\n                          name=\"MoUAuthRefNumber\"\r\n                        />\r\n                        <div>\r\n                          {currentFile && (\r\n                            <div className=\"progress\">\r\n                              <div\r\n                                className=\"progress-bar progress-bar-info progress-bar-striped\"\r\n                                role=\"progressbar\"\r\n                                aria-valuenow={progress}\r\n                                aria-valuemin=\"0\"\r\n                                aria-valuemax=\"100\"\r\n                                style={{ width: progress + \"%\" }}\r\n                              >\r\n                                {progress}%\r\n                              </div>\r\n                            </div>\r\n                          )}\r\n                          <label className=\"btn btn-default\">\r\n                            <input type=\"file\" onChange={selectFile4} />\r\n                          </label>\r\n\r\n                          <button\r\n                            className=\"btn btn-success\"\r\n                            disabled={!selectedFiles}\r\n                            onClick={upload4}\r\n                          >\r\n                            Upload\r\n                          </button>\r\n                          <div className=\"alert alert-light\" role=\"alert\">\r\n                            {message}\r\n                          </div>\r\n                        </div>\r\n                        <TextField\r\n                          id=\"MoUIssuer\"\r\n                          label=\"MoUIssuer\"\r\n                          variant=\"standard\"\r\n                          color=\"secondary\"\r\n                          size=\"\"\r\n                          required\r\n                          value={PLCAndShare.MoUIssuer}\r\n                          onChange={handleInputChangePLCAndShare}\r\n                          name=\"MoUIssuer\"\r\n                        />\r\n                        <TextField\r\n                          id=\"AoADate\"\r\n                          label=\"AoADate\"\r\n                          variant=\"standard\"\r\n                          color=\"secondary\"\r\n                          size=\"\"\r\n                          required\r\n                          value={PLCAndShare.AoADate}\r\n                          onChange={handleInputChangePLCAndShare}\r\n                          name=\"AoADate\"\r\n                        />\r\n                        <TextField\r\n                          id=\"AoAReferenceNumber\"\r\n                          label=\"AoAReferenceNumber\"\r\n                          variant=\"standard\"\r\n                          color=\"secondary\"\r\n                          size=\"\"\r\n                          required\r\n                          value={PLCAndShare.AoAReferenceNumber}\r\n                          onChange={handleInputChangePLCAndShare}\r\n                          name=\"AoAReferenceNumber\"\r\n                        />\r\n                        <TextField\r\n                          id=\"AoAAuthDate\"\r\n                          label=\"AoAAuthDate\"\r\n                          variant=\"standard\"\r\n                          color=\"secondary\"\r\n                          size=\"\"\r\n                          required\r\n                          value={PLCAndShare.AoAAuthDate}\r\n                          onChange={handleInputChangePLCAndShare}\r\n                          name=\"AoAAuthDate\"\r\n                        />\r\n                        <TextField\r\n                          id=\"AoAAuthRefNumber\"\r\n                          label=\"AoAAuthRefNumber\"\r\n                          variant=\"standard\"\r\n                          color=\"secondary\"\r\n                          size=\"\"\r\n                          required\r\n                          value={PLCAndShare.AoAAuthRefNumber}\r\n                          onChange={handleInputChangePLCAndShare}\r\n                          name=\"AoAAuthRefNumber\"\r\n                        />\r\n                        <div>\r\n                          {currentFile && (\r\n                            <div className=\"progress\">\r\n                              <div\r\n                                className=\"progress-bar progress-bar-info progress-bar-striped\"\r\n                                role=\"progressbar\"\r\n                                aria-valuenow={progress}\r\n                                aria-valuemin=\"0\"\r\n                                aria-valuemax=\"100\"\r\n                                style={{ width: progress + \"%\" }}\r\n                              >\r\n                                {progress}%\r\n                              </div>\r\n                            </div>\r\n                          )}\r\n\r\n                          <label className=\"btn btn-default\">\r\n                            <input type=\"file\" onChange={selectFile5} />\r\n                          </label>\r\n\r\n                          <button\r\n                            className=\"btn btn-success\"\r\n                            disabled={!selectedFiles}\r\n                            onClick={upload5}\r\n                          >\r\n                            Upload\r\n                          </button>\r\n                          <div className=\"alert alert-light\" role=\"alert\">\r\n                            {message}\r\n                          </div>\r\n                        </div>\r\n                        <TextField\r\n                          id=\"MinuteDate\"\r\n                          label=\"MinuteDate\"\r\n                          variant=\"standard\"\r\n                          color=\"secondary\"\r\n                          size=\"\"\r\n                          required\r\n                          value={PLCAndShare.MinuteDate}\r\n                          onChange={handleInputChangePLCAndShare}\r\n                          name=\"MinuteDate\"\r\n                        />\r\n                        <TextField\r\n                          id=\"MinuteReferenceNumber\"\r\n                          label=\"MinuteReferenceNumber\"\r\n                          variant=\"standard\"\r\n                          color=\"secondary\"\r\n                          size=\"\"\r\n                          required\r\n                          value={PLCAndShare.MinuteReferenceNumber}\r\n                          onChange={handleInputChangePLCAndShare}\r\n                          name=\"MinuteReferenceNumber\"\r\n                        />\r\n                        <TextField\r\n                          id=\"MinuteAuthDate\"\r\n                          label=\"MinuteAuthDate\"\r\n                          variant=\"standard\"\r\n                          color=\"secondary\"\r\n                          size=\"\"\r\n                          required\r\n                          value={PLCAndShare.MinuteAuthDate}\r\n                          onChange={handleInputChangePLCAndShare}\r\n                          name=\"MinuteAuthDate\"\r\n                        />\r\n                        <TextField\r\n                          id=\"MinuteAuthRefNumber\"\r\n                          label=\"MinuteAuthRefNumber\"\r\n                          variant=\"standard\"\r\n                          color=\"secondary\"\r\n                          size=\"\"\r\n                          required\r\n                          value={PLCAndShare.MinuteAuthRefNumber}\r\n                          onChange={handleInputChangePLCAndShare}\r\n                          name=\"MinuteAuthRefNumber\"\r\n                        />\r\n                        <div>\r\n                          {currentFile && (\r\n                            <div className=\"progress\">\r\n                              <div\r\n                                className=\"progress-bar progress-bar-info progress-bar-striped\"\r\n                                role=\"progressbar\"\r\n                                aria-valuenow={progress}\r\n                                aria-valuemin=\"0\"\r\n                                aria-valuemax=\"100\"\r\n                                style={{ width: progress + \"%\" }}\r\n                              >\r\n                                {progress}%\r\n                              </div>\r\n                            </div>\r\n                          )}\r\n\r\n                          <label className=\"btn btn-default\">\r\n                            <input type=\"file\" onChange={selectFile6} />\r\n                          </label>\r\n\r\n                          <button\r\n                            className=\"btn btn-success\"\r\n                            disabled={!selectedFiles}\r\n                            onClick={upload6}\r\n                          >\r\n                            Upload\r\n                          </button>\r\n                          <div className=\"alert alert-light\" role=\"alert\">\r\n                            {message}\r\n                          </div>\r\n                        </div>\r\n                        <TextField\r\n                          id=\"MinuteIssuer\"\r\n                          label=\"MinuteIssuer\"\r\n                          variant=\"standard\"\r\n                          color=\"secondary\"\r\n                          size=\"\"\r\n                          required\r\n                          value={PLCAndShare.MinuteIssuer}\r\n                          onChange={handleInputChangePLCAndShare}\r\n                          name=\"MinuteIssuer\"\r\n                        />\r\n                        <TextField\r\n                          id=\"MinuteAgenda\"\r\n                          label=\"MinuteAgenda\"\r\n                          variant=\"standard\"\r\n                          color=\"secondary\"\r\n                          size=\"\"\r\n                          required\r\n                          value={PLCAndShare.MinuteAgenda}\r\n                          onChange={handleInputChangePLCAndShare}\r\n                          name=\"MinuteAgenda\"\r\n                        />\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n                  <div className=\"flex justify-between\">\r\n                    <button\r\n                      className=\"bg-gray-300 hover:bg-gray-400 text-gray-800 font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\"\r\n                      onClick={handleBack}\r\n                    >\r\n                      Back\r\n                    </button>\r\n\r\n                    <button\r\n                      className=\"bg-[purple] hover:bg-purple-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\"\r\n                      onClick={savePLCAndShare}\r\n                    >\r\n                      Submit\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n              </CompanyModal>\r\n              <div>\r\n                <table\r\n                  className=\"table table-bordered table-striped\"\r\n                  border=\"1\"\r\n                >\r\n                  <thead>\r\n                    <th> PLC ID </th>\r\n                    {/* <th> MoUDate </th> */}\r\n                    <th> MoU Reference Number </th>\r\n                    {/* <th> MoU Auth Date </th> */}\r\n                    <th> MoU Auth Ref Number </th>\r\n                    {/* <th> MoU Document </th> */}\r\n                    <th> MoU Issuer </th>\r\n                    {/* <th> AoA Date </th> */}\r\n                    <th> AoA Reference Number </th>\r\n                    {/* <th> AoA Auth Date </th> */}\r\n                    <th> AoA Auth Ref Number </th>\r\n                    {/* <th> AoA Document </th> */}\r\n                    {/* <th> Minute Date </th> */}\r\n                    {/* <th> Minute Reference Number </th> */}\r\n                    {/* <th> Minute Auth Date </th> */}\r\n                    <th> Minute AuthRef Number </th>\r\n                    {/* <th> Minute Document </th> */}\r\n                    <th> Minute Issuer </th>\r\n                    <th> Minute Agenda </th>\r\n                    <th> Action </th>\r\n                  </thead>\r\n                  <tbody>\r\n                    {getPLCAndShareInformation &&\r\n                      getPLCAndShareInformation.map(\r\n                        (PLCAndShareInformation, index) => (\r\n                          <tr key={index}>\r\n                            <td>{PLCAndShareInformation.Id}</td>\r\n                            {/* <td>{PLCAndShareInformation.MoUDate}</td> */}\r\n                            <td>{PLCAndShareInformation.MoUReferenceNumber}</td>\r\n                            {/* <td>{PLCAndShareInformation.MoUAuthDate}</td> */}\r\n                            <td>{PLCAndShareInformation.MoUAuthRefNumber}</td>\r\n                            {/* <td>{PLCAndShareInformation.MoUDocument}</td> */}\r\n                            <td>{PLCAndShareInformation.MoUIssuer}</td>\r\n                            {/* <td>{PLCAndShareInformation.AoADate}</td> */}\r\n                            {/* <td>{PLCAndShareInformation.AoAReferenceNumber}</td> */}\r\n                            {/* <td>{PLCAndShareInformation.AoAAuthDate}</td> */}\r\n                            <td>{PLCAndShareInformation.AoAAuthRefNumber}</td>\r\n                            {/* <td>{PLCAndShareInformation.AoADocument}</td> */}\r\n                            {/* <td>{PLCAndShareInformation.MinuteDate}</td> */}\r\n                            <td>\r\n                              {PLCAndShareInformation.MinuteReferenceNumber}\r\n                            </td>\r\n                            {/* <td>{PLCAndShareInformation.MinuteAuthDate}</td> */}\r\n                            <td>\r\n                              {PLCAndShareInformation.MinuteAuthRefNumber}\r\n                            </td>\r\n                            {/* <td>{PLCAndShareInformation.MinuteDocument}</td> */}\r\n                            <td>{PLCAndShareInformation.MinuteIssuer}</td>\r\n                            <td>{PLCAndShareInformation.MinuteAgenda}</td>\r\n                            <td>\r\n                              <button\r\n                                onClick={() => {\r\n                                  // refresh();\r\n                                  handleCompanyTaxSoleOpenModal();\r\n                                  // setHandleSoleId(PLCAndShareInformation.Id);\r\n                                  fetchSoleTax(\r\n                                    PLCAndShareInformation.TaxClearanceID\r\n                                  );\r\n                                }}\r\n                                className=\"text-purple-600 rounded-md font-semibold \"\r\n                              >\r\n                                Tax detail\r\n                              </button>\r\n                            </td>\r\n\r\n                            <td>\r\n                              {\" \"}\r\n                              <button\r\n                                onClick={() => {\r\n                                  handleCompanyPLCAndShareInformationEditOpenModal();\r\n                                  getPLCAndShareInformationBy(\r\n                                    PLCAndShareInformation.Id\r\n                                  );\r\n                                }}\r\n                                className=\"text-purple-600 rounded-md font-semibold \"\r\n                              >\r\n                                <span>\r\n                                  <IconButton\r\n                                    aria-label=\"Add\"\r\n                                    color=\"secondary\"\r\n                                  >\r\n                                    <BsPlus /> Edit\r\n                                  </IconButton>\r\n                                </span>\r\n                              </button>\r\n                            </td>\r\n                          </tr>\r\n                        )\r\n                      )}\r\n                  </tbody>\r\n                </table>\r\n              </div>\r\n              <CompanyModal\r\n                isOpen={isCompanyPLCAndShareInformationEditModalOpen}\r\n                onClose={handleCompanyPLCAndShareInformationEditCloseModal}\r\n                title=\"Add company PLC And Share Edit information\"\r\n              >\r\n                <div>\r\n                  <form onSubmit={updateCompanyPLCAndShareInformationById}>\r\n                    <div className=\"grid grid-cols-1 gap-4 submit-form\">\r\n                      <div className=\"submit-form \">\r\n                        <div className=\"relative center justify-center flex-1 w-full max-w-full grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\">\r\n                          <TextField\r\n                            id=\"MoUDate\"\r\n                            label=\"MoUDate\"\r\n                            variant=\"standard\"\r\n                            color=\"secondary\"\r\n                            size=\"\"\r\n                            required\r\n                            value={editPLCAndShareInfo.MoUDate}\r\n                            onChange={(e) =>\r\n                              setEditPLCAndShareInfo({\r\n                                ...editPLCAndShareInfo,\r\n                                MoUDate: e.target.value,\r\n                              })\r\n                            }\r\n                            name=\"AoADate\"\r\n                          />\r\n                          <TextField\r\n                            id=\"MoUReferenceNumber\"\r\n                            label=\"MoUReferenceNumber\"\r\n                            variant=\"standard\"\r\n                            color=\"secondary\"\r\n                            size=\"\"\r\n                            required\r\n                            value={editPLCAndShareInfo.MoUReferenceNumber}\r\n                            onChange={(e) =>\r\n                              setEditPLCAndShareInfo({\r\n                                ...editPLCAndShareInfo,\r\n                                MoUReferenceNumber: e.target.value,\r\n                              })\r\n                            }\r\n                            name=\"MoUReferenceNumber\"\r\n                          />\r\n                          <TextField\r\n                            id=\"MoUAuthDate\"\r\n                            label=\"MoUAuthDate\"\r\n                            variant=\"standard\"\r\n                            color=\"secondary\"\r\n                            size=\"\"\r\n                            required\r\n                            value={editPLCAndShareInfo.MoUAuthDate}\r\n                            onChange={(e) =>\r\n                              setEditPLCAndShareInfo({\r\n                                ...editPLCAndShareInfo,\r\n                                MoUAuthDate: e.target.value,\r\n                              })\r\n                            }\r\n                            name=\"MoUAuthDate\"\r\n                          />\r\n                          <TextField\r\n                            id=\"MoUAuthRefNumber\"\r\n                            label=\"MoUAuthRefNumber\"\r\n                            variant=\"standard\"\r\n                            color=\"secondary\"\r\n                            size=\"\"\r\n                            required\r\n                            value={editPLCAndShareInfo.MoUAuthRefNumber}\r\n                            onChange={(e) =>\r\n                              setEditPLCAndShareInfo({\r\n                                ...editPLCAndShareInfo,\r\n                                MoUAuthRefNumber: e.target.value,\r\n                              })\r\n                            }\r\n                            name=\"MoUAuthRefNumber\"\r\n                          />\r\n                          <div>\r\n                            {currentFile && (\r\n                              <div className=\"progress\">\r\n                                <div\r\n                                  className=\"progress-bar progress-bar-info progress-bar-striped\"\r\n                                  role=\"progressbar\"\r\n                                  aria-valuenow={progress}\r\n                                  aria-valuemin=\"0\"\r\n                                  aria-valuemax=\"100\"\r\n                                  style={{ width: progress + \"%\" }}\r\n                                >\r\n                                  {progress}%\r\n                                </div>\r\n                              </div>\r\n                            )}\r\n                            <label className=\"btn btn-default\">\r\n                              <input type=\"file\" onChange={selectFile4Edit} />\r\n                            </label>\r\n\r\n                            <button\r\n                              className=\"btn btn-success\"\r\n                              disabled={!selectedFiles}\r\n                              onClick={upload4Edit}\r\n                            >\r\n                              Upload\r\n                            </button>\r\n                            <div className=\"alert alert-light\" role=\"alert\">\r\n                              {message}\r\n                            </div>\r\n                          </div>\r\n                          <TextField\r\n                            id=\"MoUIssuer\"\r\n                            label=\"MoUIssuer\"\r\n                            variant=\"standard\"\r\n                            color=\"secondary\"\r\n                            size=\"\"\r\n                            required\r\n                            value={editPLCAndShareInfo.MoUIssuer}\r\n                            onChange={(e) =>\r\n                              setEditPLCAndShareInfo({\r\n                                ...editPLCAndShareInfo,\r\n                                MoUIssuer: e.target.value,\r\n                              })\r\n                            }\r\n                            name=\"MoUIssuer\"\r\n                          />\r\n                          <TextField\r\n                            id=\"AoADate\"\r\n                            label=\"AoADate\"\r\n                            variant=\"standard\"\r\n                            color=\"secondary\"\r\n                            size=\"\"\r\n                            required\r\n                            value={editPLCAndShareInfo.AoADate}\r\n                            onChange={(e) =>\r\n                              setEditPLCAndShareInfo({\r\n                                ...editPLCAndShareInfo,\r\n                                AoADate: e.target.value,\r\n                              })\r\n                            }\r\n                            name=\"AoADate\"\r\n                          />\r\n                          <TextField\r\n                            id=\"AoAReferenceNumber\"\r\n                            label=\"AoAReferenceNumber\"\r\n                            variant=\"standard\"\r\n                            color=\"secondary\"\r\n                            size=\"\"\r\n                            required\r\n                            value={editPLCAndShareInfo.AoAReferenceNumber}\r\n                            onChange={(e) =>\r\n                              setEditPLCAndShareInfo({\r\n                                ...editPLCAndShareInfo,\r\n                                AoAReferenceNumber: e.target.value,\r\n                              })\r\n                            }\r\n                            name=\"AoAReferenceNumber\"\r\n                          />\r\n                          <TextField\r\n                            id=\"AoAAuthDate\"\r\n                            label=\"AoAAuthDate\"\r\n                            variant=\"standard\"\r\n                            color=\"secondary\"\r\n                            size=\"\"\r\n                            required\r\n                            value={editPLCAndShareInfo.AoAAuthDate}\r\n                            onChange={(e) =>\r\n                              setEditPLCAndShareInfo({\r\n                                ...editPLCAndShareInfo,\r\n                                AoAAuthDate: e.target.value,\r\n                              })\r\n                            }\r\n                            name=\"AoAAuthDate\"\r\n                          />\r\n                          <TextField\r\n                            id=\"AoAAuthRefNumber\"\r\n                            label=\"AoAAuthRefNumber\"\r\n                            variant=\"standard\"\r\n                            color=\"secondary\"\r\n                            size=\"\"\r\n                            required\r\n                            value={editPLCAndShareInfo.AoAAuthRefNumber}\r\n                            onChange={(e) =>\r\n                              setEditPLCAndShareInfo({\r\n                                ...editPLCAndShareInfo,\r\n                                AoAAuthRefNumber: e.target.value,\r\n                              })\r\n                            }\r\n                            name=\"AoAAuthRefNumber\"\r\n                          />\r\n                          <div>\r\n                            {currentFile && (\r\n                              <div className=\"progress\">\r\n                                <div\r\n                                  className=\"progress-bar progress-bar-info progress-bar-striped\"\r\n                                  role=\"progressbar\"\r\n                                  aria-valuenow={progress}\r\n                                  aria-valuemin=\"0\"\r\n                                  aria-valuemax=\"100\"\r\n                                  style={{ width: progress + \"%\" }}\r\n                                >\r\n                                  {progress}%\r\n                                </div>\r\n                              </div>\r\n                            )}\r\n                            <label className=\"btn btn-default\">\r\n                              <input type=\"file\" onChange={selectFile5Edit} />\r\n                            </label>\r\n\r\n                            <button\r\n                              className=\"btn btn-success\"\r\n                              disabled={!selectedFiles}\r\n                              onClick={upload5Edit}\r\n                            >\r\n                              Upload\r\n                            </button>\r\n                            <div className=\"alert alert-light\" role=\"alert\">\r\n                              {message}\r\n                            </div>\r\n                          </div>\r\n                          <TextField\r\n                            id=\"MinuteDate\"\r\n                            label=\"MinuteDate\"\r\n                            variant=\"standard\"\r\n                            color=\"secondary\"\r\n                            size=\"\"\r\n                            required\r\n                            value={editPLCAndShareInfo.MinuteDate}\r\n                            onChange={(e) =>\r\n                              setEditPLCAndShareInfo({\r\n                                ...editPLCAndShareInfo,\r\n                                MinuteDate: e.target.value,\r\n                              })\r\n                            }\r\n                            name=\"MinuteDate\"\r\n                          />\r\n                          <TextField\r\n                            id=\"MinuteReferenceNumber\"\r\n                            label=\"MinuteReferenceNumber\"\r\n                            variant=\"standard\"\r\n                            color=\"secondary\"\r\n                            size=\"\"\r\n                            required\r\n                            value={editPLCAndShareInfo.MinuteReferenceNumber}\r\n                            onChange={(e) =>\r\n                              setEditPLCAndShareInfo({\r\n                                ...editPLCAndShareInfo,\r\n                                MinuteReferenceNumber: e.target.value,\r\n                              })\r\n                            }\r\n                            name=\"MinuteReferenceNumber\"\r\n                          />\r\n                          <TextField\r\n                            id=\"MinuteAuthDate\"\r\n                            label=\"MinuteAuthDate\"\r\n                            variant=\"standard\"\r\n                            color=\"secondary\"\r\n                            size=\"\"\r\n                            required\r\n                            value={editPLCAndShareInfo.MinuteAuthDate}\r\n                            onChange={(e) =>\r\n                              setEditPLCAndShareInfo({\r\n                                ...editPLCAndShareInfo,\r\n                                MinuteAuthDate: e.target.value,\r\n                              })\r\n                            }\r\n                            name=\"MinuteAuthDate\"\r\n                          />\r\n                          <TextField\r\n                            id=\"MinuteAuthRefNumber\"\r\n                            label=\"MinuteAuthRefNumber\"\r\n                            variant=\"standard\"\r\n                            color=\"secondary\"\r\n                            size=\"\"\r\n                            required\r\n                            value={editPLCAndShareInfo.MinuteAuthRefNumber}\r\n                            onChange={(e) =>\r\n                              setEditPLCAndShareInfo({\r\n                                ...editPLCAndShareInfo,\r\n                                MinuteAuthRefNumber: e.target.value,\r\n                              })\r\n                            }\r\n                            name=\"MinuteAuthRefNumber\"\r\n                          />\r\n                          <div>\r\n                            {currentFile && (\r\n                              <div className=\"progress\">\r\n                                <div\r\n                                  className=\"progress-bar progress-bar-info progress-bar-striped\"\r\n                                  role=\"progressbar\"\r\n                                  aria-valuenow={progress}\r\n                                  aria-valuemin=\"0\"\r\n                                  aria-valuemax=\"100\"\r\n                                  style={{ width: progress + \"%\" }}\r\n                                >\r\n                                  {progress}%\r\n                                </div>\r\n                              </div>\r\n                            )}\r\n                            <label className=\"btn btn-default\">\r\n                              <input type=\"file\" onChange={selectFile6Edit} />\r\n                            </label>\r\n\r\n                            <button\r\n                              className=\"btn btn-success\"\r\n                              disabled={!selectedFiles}\r\n                              onClick={upload6Edit}\r\n                            >\r\n                              Upload\r\n                            </button>\r\n                            <div className=\"alert alert-light\" role=\"alert\">\r\n                              {message}\r\n                            </div>\r\n                          </div>\r\n                          <TextField\r\n                            id=\"MinuteIssuer\"\r\n                            label=\"MinuteIssuer\"\r\n                            variant=\"standard\"\r\n                            color=\"secondary\"\r\n                            size=\"\"\r\n                            required\r\n                            value={editPLCAndShareInfo.MinuteIssuer}\r\n                            onChange={(e) =>\r\n                              setEditPLCAndShareInfo({\r\n                                ...editPLCAndShareInfo,\r\n                                MinuteIssuer: e.target.value,\r\n                              })\r\n                            }\r\n                            name=\"MinuteIssuer\"\r\n                          />\r\n                          <TextField\r\n                            id=\"MinuteAgenda\"\r\n                            label=\"MinuteAgenda\"\r\n                            variant=\"standard\"\r\n                            color=\"secondary\"\r\n                            size=\"\"\r\n                            required\r\n                            value={editPLCAndShareInfo.MinuteAgenda}\r\n                            onChange={(e) =>\r\n                              setEditPLCAndShareInfo({\r\n                                ...editPLCAndShareInfo,\r\n                                MinuteAgenda: e.target.value,\r\n                              })\r\n                            }\r\n                            name=\"MinuteAgenda\"\r\n                          />\r\n                        </div>\r\n                        <button type=\"submit\" className=\"btn btn-info\">\r\n                          Update\r\n                        </button>\r\n                      </div>\r\n                    </div>\r\n                  </form>\r\n                </div>\r\n              </CompanyModal>\r\n              <div>\r\n                <CompanyModal\r\n                  isOpen={isCompanyTaxSoleModalOpen}\r\n                  onClose={handleCompanyTaxSoleCloseModal}\r\n                  title=\"Add company PLC tax information\"\r\n                >\r\n                  <div className=\"rounded-lg overflow-hidden\">\r\n                    {getSoleTax && (\r\n                      <table className=\"table table-bordered table-striped bg-purple-100\">\r\n                        <thead>\r\n                          <th className=\"px-2 py-4\"> Name </th>\r\n                          <th className=\"px-2 py-4\"> TinNo </th>\r\n                          <th className=\"px-2 py-4\"> Issue Date </th>\r\n                          <th className=\"px-2 py-4\"> Expired date </th>\r\n                          <th className=\"px-2 py-4\"> Tax Debi </th>\r\n                          <th className=\"px-2 py-4\">\r\n                            Tax Clearance Certificate\r\n                          </th>\r\n                          <th className=\"px-2 py-4\"> Action </th>\r\n                        </thead>\r\n                        <tbody>\r\n                          {/* {getSoleTax.map((soleTax, index) => ( */}\r\n                          <tr\r\n                          // key={index}\r\n                          >\r\n                            {/* <td>{getSoleTax.Id}</td> */}\r\n                            <td>{getSoleTax.Name}</td>\r\n                            <td>{getSoleTax.TinNo}</td>\r\n                            <td>{getSoleTax.IssueDate}</td>\r\n                            <td>{getSoleTax.Expireddate}</td>\r\n                            <td>{getSoleTax.TaxDebi}</td>\r\n                            <td>{getSoleTax.TaxClearanceCertificate}</td>\r\n                            <button\r\n                              onClick={() => {\r\n                                handleCompanyTaxInformationEditOpenModal();\r\n                                updateTaxById(getSoleTax.Id);\r\n                                // saveTaxSoleInfo(sole.Id);\r\n                              }}\r\n                              className=\"text-purple-600 rounded-md font-semibold \"\r\n                            >\r\n                              <span>\r\n                                <IconButton aria-label=\"Add\" color=\"secondary\">\r\n                                  <BsPlus /> Edit\r\n                                </IconButton>\r\n                              </span>\r\n                            </button>\r\n                          </tr>\r\n                          {/* ))}  */}\r\n                        </tbody>\r\n                      </table>\r\n                    )}\r\n                  </div>\r\n                  <button\r\n                    onClick={() => setToggleTaxInfo(!toggleTaxSoleInfo)}\r\n                    className=\"text-purple-600 rounded-md font-medium \"\r\n                  >\r\n                    Add Tax\r\n                  </button>\r\n                  {toggleTaxSoleInfo && (\r\n                    <div className=\"submit-form\">\r\n                      {submitted ? (\r\n                        <div>\r\n                          <h4>You submitted successfully!</h4>\r\n                          <button\r\n                            className=\"btn btn-success\"\r\n                            onClick={newTaxSoleInfo}\r\n                          >\r\n                            Add\r\n                          </button>\r\n                        </div>\r\n                      ) : (\r\n                        <div className=\"relative center justify-center flex-1 w-full max-w-full grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\">\r\n                          <TextField\r\n                            id=\"Name\"\r\n                            label=\"Name\"\r\n                            variant=\"standard\"\r\n                            color=\"secondary\"\r\n                            size=\"\"\r\n                            required\r\n                            value={taxSoleInfo.Name}\r\n                            onChange={handleInputChangeTaxSoleInfo}\r\n                            name=\"Name\"\r\n                          />\r\n                          <TextField\r\n                            id=\"TinNo\"\r\n                            label=\"TinNo\"\r\n                            variant=\"standard\"\r\n                            color=\"secondary\"\r\n                            size=\"\"\r\n                            required\r\n                            value={taxSoleInfo.TinNo}\r\n                            onChange={handleInputChangeTaxSoleInfo}\r\n                            name=\"TinNo\"\r\n                          />\r\n                          <TextField\r\n                            id=\"IssueDate\"\r\n                            label=\"IssueDate\"\r\n                            variant=\"standard\"\r\n                            color=\"secondary\"\r\n                            size=\"\"\r\n                            required\r\n                            value={taxSoleInfo.IssueDate}\r\n                            onChange={handleInputChangeTaxSoleInfo}\r\n                            name=\"IssueDate\"\r\n                          />\r\n                          <TextField\r\n                            id=\"ExpiredDate\"\r\n                            label=\"ExpiredDate\"\r\n                            variant=\"standard\"\r\n                            color=\"secondary\"\r\n                            size=\"\"\r\n                            required\r\n                            value={taxSoleInfo.ExpiredDate}\r\n                            onChange={handleInputChangeTaxSoleInfo}\r\n                            name=\"ExpiredDate\"\r\n                          />\r\n                          <TextField\r\n                            id=\"TaxDebi\"\r\n                            label=\"TaxDebi\"\r\n                            variant=\"standard\"\r\n                            color=\"secondary\"\r\n                            size=\"\"\r\n                            required\r\n                            value={taxSoleInfo.TaxDebi}\r\n                            onChange={handleInputChangeTaxSoleInfo}\r\n                            name=\"TaxDebi\"\r\n                          />\r\n                          <TextField\r\n                            id=\"TaxClearanceCertificate\"\r\n                            label=\"TaxClearanceCertificate\"\r\n                            variant=\"standard\"\r\n                            color=\"secondary\"\r\n                            size=\"\"\r\n                            required\r\n                            value={taxSoleInfo.TaxClearanceCertificate}\r\n                            onChange={handleInputChangeTaxSoleInfo}\r\n                            name=\"TaxClearanceCertificate\"\r\n                          />\r\n                        </div>\r\n                      )}\r\n                      <button\r\n                        className=\"bg-[purple] hover:bg-purple-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\"\r\n                        onClick={() => {\r\n                          saveTaxSoleInfo();\r\n                          setToggleTaxInfo(!toggleTaxSoleInfo);\r\n                        }}\r\n                      >\r\n                        save Tax\r\n                      </button>\r\n                    </div>\r\n                  )}\r\n                </CompanyModal>\r\n              </div>\r\n            </>\r\n          )}\r\n          {activeStep === 9 && (\r\n            <div>\r\n              <h2 className=\"text-2xl font-bold mb-4\">\r\n                Thank you for submitting the form!\r\n              </h2>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default LeftNav;\r\n","C:\\Users\\CBE\\Desktop\\LoanNew\\cbe-loan-frontend\\src\\Components\\Login\\Service.js",[],[],"C:\\Users\\CBE\\Desktop\\LoanNew\\cbe-loan-frontend\\src\\Components\\Company\\Service.js",["967","968","969","970"],[],"C:\\Users\\CBE\\Desktop\\LoanNew\\cbe-loan-frontend\\src\\Components\\Product\\HorizontalTabs.jsx",[],[],"C:\\Users\\CBE\\Desktop\\LoanNew\\cbe-loan-frontend\\src\\Components\\Company\\Basic.jsx",[],[],"C:\\Users\\CBE\\Desktop\\LoanNew\\cbe-loan-frontend\\src\\Components\\EligibilityCriteria\\SpecificEligibilityCriteria.jsx",[],[],"C:\\Users\\CBE\\Desktop\\LoanNew\\cbe-loan-frontend\\src\\Components\\Modal\\LoanModal.jsx",["971","972"],[],"import { useState } from 'react'\r\nimport { FaTimes } from 'react-icons/fa'\r\nimport { Link, useNavigate } from 'react-router-dom'\r\nconst LoanModal = ({ isOpen, onClose, title, children }) => {\r\n    const navigate = useNavigate();\r\n    const [isClosing, setIsClosing] = useState(false)\r\n\r\n    function handleClose() {\r\n        setIsClosing(true)\r\n        setTimeout(() => {\r\n            onClose()\r\n            setIsClosing(false)\r\n        }, 200) // Change this value to adjust the closing animation duration\r\n    }\r\n    const doYouHaveAccount = () => {\r\n        const confirmed = window.confirm('Do you have account on CBE Loan?');\r\n        if (confirmed) {\r\n            // Navigate to login\r\n            navigate('/login');\r\n        }\r\n        else {\r\n            // Navigate to signup page\r\n            return navigate('/registrationPage');\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div\r\n            className={`fixed z-50 inset-0 overflow-y-auto ${isOpen ? '' : 'opacity-0 pointer-events-none'\r\n                } transition-opacity ease-out duration-300`}\r\n        >\r\n            <div className=\"flex items-center justify-center min-h-screen\">\r\n                <div\r\n                    className={`fixed inset-0 transition-opacity ${isClosing ? 'opacity-0' : 'opacity-100'\r\n                        }`}\r\n                    aria-hidden=\"true\"\r\n                >\r\n                    <div className=\"absolute inset-0 bg-gray-500 opacity-75\"></div>\r\n                </div>\r\n\r\n                <div\r\n                    className={`bg-white rounded-lg overflow-hidden shadow-xl transform transition-all ${isOpen ? 'opacity-100 scale-100' : 'opacity-0 scale-95'\r\n                        }`}\r\n                    role=\"dialog\"\r\n                    aria-modal=\"true\"\r\n                    aria-labelledby=\"modal-title\"\r\n                >\r\n                    <div className=\"px-6 py-4\">\r\n                        <div className=\"flex items-center justify-between mb-2\">\r\n                            <h3 className=\"text-lg font-medium\" id=\"modal-title\">\r\n                                {title}\r\n                            </h3>\r\n                            <button\r\n                                className=\"text-gray-500 hover:text-gray-600 focus:outline-none\"\r\n                                onClick={handleClose}\r\n                            >\r\n                                <span className=\"sr-only\">Close</span>\r\n                                <FaTimes className=\"h-6 w-6\" />\r\n                            </button>\r\n                        </div>\r\n                        {children}\r\n                    </div>\r\n                    <div className=\"px-6 py-4 bg-gray-100 border-t border-gray-200 flex justify-end\">\r\n                        {/* <button className=\"block bg-[purple] w-[150px] rounded-md font-medium my-6 text-white mx-auto py-2 text-center\" onClick={doYouHaveAccount}>Apply</button> */}\r\n                        {/* <button\r\n                            className=\"bg-purple-500 hover:bg-purple-700 text-white font-bold py-2 px-4 rounded\"\r\n                            onClick={handleClose}\r\n                        >\r\n                            Close\r\n                        </button>                         \r\n                        */}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LoanModal;","C:\\Users\\CBE\\Desktop\\LoanNew\\cbe-loan-frontend\\src\\Components\\Tooltip\\Tooltips.jsx",["973"],[],"import { useState } from 'react';\r\n\r\nfunction Tooltips({ text, children }) {\r\n    const [isHovering, setIsHovering] = useState(false);\r\n\r\n    const handleMouseEnter = () => {\r\n        setIsHovering(true);\r\n    };\r\n\r\n    const handleMouseLeave = () => {\r\n        setIsHovering(false);\r\n    };\r\n\r\n    return (\r\n        <div onMouseEnter={handleMouseEnter} onMouseLeave={handleMouseLeave} className=\"relative\">\r\n            {children}\r\n            {isHovering && (\r\n                <div className=\"absolute z-5 bg-purple-800 text-[white] px-2 py-1 rounded-r-lg rounded-b-lg\" style={{ left: '100%', top: '70%', transform: 'translateY(-50%)', transform: 'translateX(30%)' }}>\r\n                    {text}\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Tooltips;","C:\\Users\\CBE\\Desktop\\LoanNew\\cbe-loan-frontend\\src\\Components\\API\\Api.js",[],[],"C:\\Users\\CBE\\Desktop\\LoanNew\\cbe-loan-frontend\\src\\Components\\Account\\Account.jsx",["974","975"],[],"import { useForm } from \"react-hook-form\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\nimport { registerSchema } from \"./AccountValidation.js\";\r\nimport {\r\n  TextField,\r\n  InputLabel,\r\n  MenuItem,\r\n  Select,\r\n  FormControl,\r\n  Checkbox,\r\n  Switch,Button\r\n} from \"@mui/material\";\r\n// import Button from \"@mui/material/Button\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { makeStyles } from \"@mui/styles\";\r\nimport CheckCircleIcon from \"@mui/icons-material/CheckCircle\";\r\nimport { InputAdornment } from \"@mui/material\";\r\n// import AccountService from \"./AccountService.js\";\r\n// I will clean the code if any by tommorrow\r\nconst useStyles = makeStyles((theme) => ({\r\n  form: {\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n    maxWidth: 400,\r\n    margin: \"0 auto\",\r\n  },\r\n  // field: {\r\n  //     marginBottom: theme.spacing(2),\r\n  // },\r\n  error: {\r\n    color: \"red\",\r\n  },\r\n}));\r\n\r\nconst textInputClassName =\r\n  \"bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500\";\r\nconst Account = () => {\r\n  //   const [users, setUsers] = useState([]);\r\n\r\n  //   useEffect(() => {\r\n  //     fetchUsers();\r\n  //   }, []);\r\n\r\n  // const fetchUsers = () => {\r\n  //     AccountService.getUsers()\r\n  //         .then(response => {\r\n  //             setUsers(response.data);\r\n  //             console.log(response.data);\r\n  //         })\r\n  //         .catch(e => {\r\n  //             console.log(e);\r\n  //         });\r\n  // }\r\n\r\n  const classes = useStyles();\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    formState: { errors },\r\n  } = useForm({\r\n    resolver: yupResolver(registerSchema),\r\n    mode: \"onChange\", // enable on-typing validation\r\n  });\r\n\r\n  const onSubmit = (data) => {\r\n    console.log(data);\r\n  };\r\n  const [isFieldValid, setIsFieldValid] = useState(false);\r\n  const [isPasswordValid, setIsPasswordValid] = useState(false);\r\n  const [isConfirmPasswordValid, setIsConfirmPasswordValid] = useState(false);\r\n  const [isAccountTypeValid, setIsAccountTypeValid] = useState(false);\r\n\r\n  const validateAccountTypeField = (value) => {\r\n    return registerSchema.fields.accountType.isValidSync(value);\r\n  };\r\n\r\n  const handleAccountTypeChange = (event) => {\r\n    const isValid = validateAccountTypeField(event.target.value);\r\n    setIsAccountTypeValid(isValid);\r\n  };\r\n\r\n  const validateField = (value) => {\r\n    return registerSchema.fields.email.isValidSync(value);\r\n  };\r\n\r\n  const validatePasswordField = (value) => {\r\n    return registerSchema.fields.password.isValidSync(value);\r\n  };\r\n\r\n  const validateConfirmPasswordField = (value) => {\r\n    return registerSchema.fields.confirmPassword.isValidSync(value);\r\n  };\r\n\r\n  const handleChange = (event) => {\r\n    const isValid = validateField(event.target.value);\r\n    setIsFieldValid(isValid);\r\n  };\r\n  const handlePasswordChange = (event) => {\r\n    const isValid = validatePasswordField(event.target.value);\r\n    setIsPasswordValid(isValid);\r\n  };\r\n  const handleConfirmPasswordChange = (event) => {\r\n    const isValid = validateConfirmPasswordField(event.target.value);\r\n    setIsConfirmPasswordValid(isValid);\r\n  };\r\n  return (\r\n    <div\r\n      className={`${classes.form}md:w-full shadow-sm shadow-white bg-white w-[1200px] mx-auto py-4 rounded-xl`}\r\n    >\r\n      <form onSubmit={handleSubmit(onSubmit)} className=\"md:w-[350px]\">\r\n        <div className=\"mb-6\">\r\n          <TextField\r\n            {...register(\"email\")}\r\n            sx={{\r\n              \"& > :not(style)\": { mb: 1 },\r\n            }}\r\n            label=\"Email\"\r\n            variant=\"standard\"\r\n            onChange={handleChange}\r\n            color=\"secondary\"\r\n            className={textInputClassName}\r\n            InputProps={{\r\n              endAdornment: isFieldValid && (\r\n                <InputAdornment position=\"end\">\r\n                  <CheckCircleIcon color=\"success\" />\r\n                </InputAdornment>\r\n              ),\r\n            }}\r\n            inputProps={register(\"email\")}\r\n            error={Boolean(errors.email)}\r\n            helperText={errors.email && errors.email.message}\r\n          />\r\n        </div>\r\n        <div className=\"mb-6\">\r\n          <TextField\r\n            {...register(\"password\")}\r\n            sx={{\r\n              \"& > :not(style)\": { mb: 1 },\r\n            }}\r\n            label=\"Password\"\r\n            type=\"password\"\r\n            variant=\"standard\"\r\n            name=\"password\"\r\n            onChange={handlePasswordChange}\r\n            autoComplete=\"current-password\"\r\n            color=\"secondary\"\r\n            className={`mb-6${textInputClassName}`}\r\n            InputProps={{\r\n              endAdornment: isPasswordValid && (\r\n                <InputAdornment position=\"end\">\r\n                  <CheckCircleIcon color=\"success\" />\r\n                </InputAdornment>\r\n              ),\r\n            }}\r\n            inputProps={register(\"password\")}\r\n            error={Boolean(errors.password)}\r\n            helperText={errors.password && errors.password.message}\r\n          />\r\n        </div>\r\n        <div className=\"mb-6\">\r\n          <TextField\r\n            {...register(\"confirmPassword\")}\r\n            label=\"Confirm Password\"\r\n            type=\"password\"\r\n            variant=\"standard\"\r\n            name=\"confirmPassword\"\r\n            onChange={handleConfirmPasswordChange}\r\n            autoComplete=\"current-password\"\r\n            color=\"secondary\"\r\n            sx={{\r\n              \"& > :not(style)\": { mb: 1 },\r\n            }}\r\n            className={`mb-6${textInputClassName}`}\r\n            InputProps={{\r\n              endAdornment: isConfirmPasswordValid && (\r\n                <InputAdornment position=\"end\">\r\n                  <CheckCircleIcon color=\"success\" />\r\n                </InputAdornment>\r\n              ),\r\n            }}\r\n            inputProps={register(\"confirmPassword\")}\r\n            error={Boolean(errors.confirmPassword)}\r\n            helperText={\r\n              errors.confirmPassword && errors.confirmPassword.message\r\n            }\r\n          />\r\n        </div>\r\n        <div className=\"mb-6\">\r\n          <FormControl\r\n            variant=\"standard\"\r\n            color=\"secondary\"\r\n            className={`mb-6${textInputClassName}`}\r\n            sx={{\r\n              \"& > :not(style)\": { mb: 1 },\r\n            }}\r\n          >\r\n            <InputLabel id=\"accountType\">Account Type</InputLabel>\r\n            <Select\r\n              {...register(\"accountType\")}\r\n              labelId=\"accountType\"\r\n              id=\"accountType\"\r\n              onChange={handleAccountTypeChange}\r\n              name=\"accountType\"\r\n              label=\"Account Type\"\r\n              inputProps={register(\"accountType\")}\r\n              error={Boolean(errors.accountType)}\r\n              helperText={errors.accountType && errors.accountType.message}\r\n            >\r\n              <MenuItem value=\"\">\r\n                <em>None</em>\r\n              </MenuItem>\r\n              <MenuItem value=\"personal\">Personal</MenuItem>\r\n              <MenuItem value=\"commercial\">Commercial</MenuItem>\r\n            </Select>\r\n            {errors.accountType ? (\r\n              <span className=\"text-red-600\">{errors.accountType.message}</span>\r\n            ) : (\r\n              <></>\r\n            )}\r\n          </FormControl>\r\n        </div>\r\n        <div className=\"flex justify-between mb-6\">\r\n          <div>\r\n            <div className=\"flex\">\r\n              <div className=\"flex items-center h-5\">\r\n                <Checkbox\r\n                  name=\"remember\"\r\n                  {...register(\"remember\")}\r\n                  color=\"secondary\"\r\n                />\r\n              </div>\r\n              <label\r\n                htmlFor=\"remember\"\r\n                className=\"ml-2 text-sm font-medium text-gray-900 dark:text-gray-300\"\r\n              >\r\n                Remember me\r\n              </label>\r\n            </div>\r\n            {errors.remember ? (\r\n              <span className=\"text-red-600\">{errors.remember.message}</span>\r\n            ) : (\r\n              <></>\r\n            )}\r\n          </div>\r\n          <div className=\"flex\">\r\n            <div className=\"flex items-center h-5\">\r\n              <Switch\r\n                color=\"secondary\"\r\n                {...register(\"toggle\")}\r\n                name=\"toggle\"\r\n                id=\"toggle\"\r\n              />\r\n              <label\r\n                htmlFor=\"default-toggle\"\r\n                className=\"inline-flex relative items-center cursor-pointer\"\r\n              >\r\n                <span className=\"ml-3 text-sm font-medium text-gray-900 dark:text-gray-300\">\r\n                  Toggle me\r\n                </span>\r\n              </label>\r\n            </div>\r\n          </div>\r\n          {errors.toggle ? (\r\n            <span className=\"text-red-600\">{errors.toggle.message}</span>\r\n          ) : (\r\n            <></>\r\n          )}\r\n        </div>\r\n        {errors.toggle ||\r\n        errors.accountType ||\r\n        errors.confirmPassword ||\r\n        errors.email ||\r\n        errors.password ||\r\n        errors.remember ? (\r\n          <Button\r\n            type=\"submit\"\r\n            sx={{ \"&:hover\": { backgroundColor: \"purple\" } }}\r\n            variant=\"outlined\"\r\n            color=\"secondary\"\r\n            className=\"hover:text-white hover: bg-purple-700\"\r\n            disabled\r\n          >\r\n            Create\r\n          </Button>\r\n        ) : (\r\n          <Button\r\n            type=\"submit\"\r\n            sx={{ \"&:hover\": { backgroundColor: \"purple\" } }}\r\n            variant=\"outlined\"\r\n            color=\"secondary\"\r\n            className=\"hover:text-white hover: bg-purple-700\"\r\n          >\r\n            Create\r\n          </Button>\r\n        )}\r\n      </form>\r\n      <div className=\"w-auto\">\r\n        {/* <table>\r\n          <tr>\r\n            <th>Name</th>\r\n            <th>Username</th>\r\n            <th>Email</th>\r\n            <th>Street</th>\r\n            <th>Suite</th>\r\n            <th>Zipcode</th>\r\n            <th>Geo/Latitude</th>\r\n            <th>Geo/Longitude</th>\r\n          </tr>\r\n          {users.map((user) => (\r\n            <tr key={user.id}>\r\n              <td>{user.name}</td>\r\n              <td>{user.username}</td>\r\n              <td>{user.email}</td>\r\n              <td>{user.address.street}</td>\r\n              <td>{user.address.suite}</td>\r\n              <td>{user.address.zipcode}</td>\r\n              <td>{user.address.geo.lat}</td>\r\n              <td>{user.address.geo.lng}</td>\r\n            </tr>\r\n          ))}\r\n        </table> */}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Account;\r\n","C:\\Users\\CBE\\Desktop\\LoanNew\\cbe-loan-frontend\\src\\Components\\Navigation\\Customer\\UpdateCompany.js",["976","977","978"],[],"import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  InputLabel,\r\n  MenuItem,\r\n  TextField,\r\n  FormControl,\r\n  Select,\r\n} from \"@mui/material\";\r\nimport loanDataService from \"../../Company/Service\";\r\nimport { useNavigate, useParams } from \"react-router-dom\";\r\nfunction UpdateCompany() {\r\n  const [companyTypes, setCompanyTypes] = useState([]);\r\n  const [entityTypes, setEntityTypes] = useState([]);\r\n  const [toggle, setToggle] = useState(false);\r\n  const [toggleContactInfo, setToggleContactInfo] = useState(false);\r\n  const [toggleAddressInfo, setToggleAddressInfo] = useState(false);\r\n  const [region, setRegion] = useState([]);\r\n  const [country, setContry] = useState([]);\r\n  const { Id } = useParams();\r\n  const [company, setCompany] = useState({\r\n    Id: Id,\r\n    Name: \"\",\r\n    NoOfBranch: \"\",\r\n    EstablishmentYear: \"\",\r\n    TINNumber: \"\",\r\n    TINCertificate: \"\",\r\n    CompanyTypeID: \"\",\r\n    VATNumber: \"\",\r\n    VATCertificate: \"\",\r\n    EntityTypeID: \"\",\r\n    Address: {\r\n      Id: Id,\r\n      Country: \"\",\r\n      Region: \"\",\r\n      ZoneSubCity: \"\",\r\n      Woreda: \"\",\r\n      City: \"\",\r\n      Kebele: \"\",\r\n      HouseNo: \"\",\r\n      BuildingNo: \"\",\r\n      StreetAddress: \"\",\r\n    },\r\n    ContactInformation: {\r\n      Id: \"\",\r\n      DesignatedPersonFName: \"\",\r\n      DesignatedPersonMName: \"\",\r\n      DesignatedPersonLName: \"\",\r\n      Position: \"\",\r\n      MobileNo: \"\",\r\n      Telephone: \"\",\r\n      Email: \"\",\r\n    },\r\n    AccountInfo: {\r\n      Id: \"\",\r\n      AccountNo: \"\",\r\n      CustomerId: \"\",\r\n      Branch: \"\",\r\n      District: \"\",\r\n      Other: \"\",\r\n    },\r\n  });\r\n  const updateCompanyById = () => {\r\n    loanDataService\r\n      .getCompanyById(Id)\r\n      .then((res) => {\r\n        setCompany({\r\n          ...company,\r\n          Name: res.data.Result.Name,\r\n          NoOfBranch: res.data.Result.NoOfBranch,\r\n          EstablishmentYear: res.data.Result.EstablishmentYear,\r\n          TINNumber: res.data.Result.TINNumber,\r\n          TINCertificate: res.data.Result.TINCertificate,\r\n          CompanyTypeID: res.data.Result.CompanyTypeID,\r\n          VATNumber: res.data.Result.VATNumber,\r\n          VATCertificate: res.data.Result.VATCertificate,\r\n          EntityTypeID: res.data.Result.EntityTypeID,\r\n          Address: {\r\n            Country: res.data.Result.Address.Country,\r\n            Region: res.data.Result.Address.Region,\r\n            ZoneSubCity: res.data.Result.Address.ZoneSubCity,\r\n            Woreda: res.data.Result.Address.Woreda,\r\n            City: res.data.Result.Address.City,\r\n            Kebele: res.data.Result.Address.Kebele,\r\n            HouseNo: res.data.Result.Address.HouseNo,\r\n            BuildingNo: res.data.Result.Address.BuildingNo,\r\n            StreetAddress: res.data.Result.Address.StreetAddress,\r\n          },\r\n          ContactInformation: {\r\n            Id: Id,\r\n            DesignatedPersonFName:\r\n              res.data.Result.ContactInformation.DesignatedPersonFName,\r\n            DesignatedPersonMName:\r\n              res.data.Result.ContactInformation.DesignatedPersonMName,\r\n            DesignatedPersonLName:\r\n              res.data.Result.ContactInformation.DesignatedPersonLName,\r\n            Position: res.data.Result.ContactInformation.Position,\r\n            MobileNo: res.data.Result.ContactInformation.MobileNo,\r\n            Telephone: res.data.Result.ContactInformation.Telephone,\r\n            Email: res.data.Result.ContactInformation.Email,\r\n          },\r\n          AccountInfo: {\r\n            Id: Id,\r\n            AccountNo: res.data.Result.AccountInfo.AccountNo,\r\n            CustomerId: res.data.Result.AccountInfo.CustomerId,\r\n            Branch: res.data.Result.AccountInfo.Branch,\r\n            District: res.data.Result.AccountInfo.District,\r\n            Other: res.data.Result.AccountInfo.Other,\r\n          },\r\n        });\r\n      })\r\n      .catch((err) => console.log(err));\r\n  };\r\n  useEffect(() => {\r\n    updateCompanyById();\r\n  }, []);\r\n  const fetchCompanies = () => {\r\n    loanDataService\r\n      .getCompanyType()\r\n      .then((response) => {\r\n        console.log(response.data.Result);\r\n        setCompanyTypes(response.data.Result);\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n  useEffect(() => {\r\n    fetchCompanies();\r\n  }, []);\r\n  const fetchCompanyEntity = () => {\r\n    loanDataService\r\n      .getEntitype()\r\n      .then((response) => {\r\n        console.log(response.data.Result);\r\n        setEntityTypes(response.data.Result);\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n  useEffect(() => {\r\n    fetchCompanyEntity();\r\n  }, []);\r\n  const navigation = useNavigate();\r\n  const updateCompanyInfo = () => {\r\n    loanDataService\r\n      .updateCompany(Id, company)\r\n      .then((response) => {\r\n        navigation(\"/company/1\");\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n  useEffect(() => {\r\n    updateCompanyInfo();\r\n  }, []);\r\n  const updateCompanyAddress = () => {\r\n    loanDataService\r\n      .updateCompany(Id, company)\r\n      .then((response) => {\r\n        navigation(\"/company/1\");\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n  useEffect(() => {\r\n    updateCompanyAddress();\r\n  }, []);\r\n  const fetchRegion = () => {\r\n    loanDataService\r\n      .getRegion()\r\n      .then((response) => {\r\n        console.log(response.data.Result);\r\n        setRegion(response.data.Result);\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n  useEffect(() => {\r\n    fetchRegion();\r\n  }, []);\r\n  const fetchContry = () => {\r\n    loanDataService\r\n      .getCountry()\r\n      .then((response) => {\r\n        console.log(response.data.Result);\r\n        setContry(response.data.Result);\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n  useEffect(() => {\r\n    fetchContry();\r\n  }, []);\r\n  return (\r\n    <>\r\n      <button\r\n        onClick={() => setToggle(!toggle)}\r\n        className=\"text-purple-600 rounded-md font-medium \"\r\n      >\r\n        Basic Information\r\n      </button>\r\n      {toggle && (\r\n        <div>\r\n          <form onSubmit={updateCompanyInfo}>\r\n            <div className=\"grid grid-cols-1 gap-4 submit-form\">\r\n              <div className=\"submit-form \">\r\n                <div className=\"relative center justify-center flex-1 w-full max-w-full grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\">\r\n                  <TextField\r\n                    id=\"Name\"\r\n                    label=\"Name\"\r\n                    variant=\"standard\"\r\n                    color=\"secondary\"\r\n                    size=\"\"\r\n                    required\r\n                    sx={{ width: \"45ch\" }}\r\n                    value={company.Name}\r\n                    onChange={(e) =>\r\n                      setCompany({ ...company, Name: e.target.value })\r\n                    }\r\n                    // onChange={handleInputChange}\r\n                    name=\"Name\"\r\n                    className=\"w-full max-w-full\"\r\n                  />\r\n\r\n                  <TextField\r\n                    id=\"NoOfBranch\"\r\n                    label=\"Number Of Branch\"\r\n                    variant=\"standard\"\r\n                    color=\"secondary\"\r\n                    size=\"\"\r\n                    required\r\n                    value={company.NoOfBranch}\r\n                    onChange={(e) =>\r\n                      setCompany({ ...company, NoOfBranch: e.target.value })\r\n                    }\r\n                    // onChange={handleInputChange}\r\n                    name=\"NoOfBranch\"\r\n                  />\r\n                  <TextField\r\n                    id=\"EstablishmentYear\"\r\n                    label=\"Establishment Year\"\r\n                    variant=\"standard\"\r\n                    color=\"secondary\"\r\n                    size=\"\"\r\n                    required\r\n                    value={company.EstablishmentYear}\r\n                    onChange={(e) =>\r\n                      setCompany({\r\n                        ...company,\r\n                        EstablishmentYear: e.target.value,\r\n                      })\r\n                    }\r\n                    // onChange={handleInputChange}\r\n                    name=\"EstablishmentYear\"\r\n                  />\r\n                  <TextField\r\n                    id=\"TINNumber\"\r\n                    label=\"TIN Number\"\r\n                    variant=\"standard\"\r\n                    color=\"secondary\"\r\n                    size=\"\"\r\n                    required\r\n                    value={company.TINNumber}\r\n                    onChange={(e) =>\r\n                      setCompany({ ...company, TINNumber: e.target.value })\r\n                    }\r\n                    //onChange={handleInputChange}\r\n                    name=\"TINNumber\"\r\n                  />\r\n                  <TextField\r\n                    id=\"TINCertificate\"\r\n                    label=\"TIN Certificate\"\r\n                    variant=\"standard\"\r\n                    color=\"secondary\"\r\n                    size=\"\"\r\n                    required\r\n                    value={company.TINCertificate}\r\n                    onChange={(e) =>\r\n                      setCompany({ ...company, TINCertificate: e.target.value })\r\n                    }\r\n                    //onChange={handleInputChange}\r\n                    name=\"TINCertificate\"\r\n                  />\r\n                  <FormControl variant=\"standard\" sx={{ minWidth: 120 }}>\r\n                    <InputLabel id=\"CompanyType\" color=\"secondary\">\r\n                      {\" \"}\r\n                      Company Type\r\n                    </InputLabel>\r\n                    <Select\r\n                      color=\"secondary\"\r\n                      onChange={(event) =>\r\n                        (company.CompanyTypeID = event.target.value)\r\n                      }\r\n                      labelId=\"CompanyType\"\r\n                      id=\"CompanyTypeSelect\"\r\n                      // value={age}\r\n                      label=\"Company Type\"\r\n                    >\r\n                      <MenuItem value=\"\">\r\n                        <em>None</em>\r\n                      </MenuItem>\r\n                      {companyTypes.map((company) => (\r\n                        <MenuItem key={company.Id} value={company.Id}>\r\n                          {company.Name}\r\n                        </MenuItem>\r\n                      ))}\r\n                    </Select>\r\n                  </FormControl>\r\n\r\n                  <TextField\r\n                    id=\"VATNumber\"\r\n                    label=\"VAT Number\"\r\n                    variant=\"standard\"\r\n                    color=\"secondary\"\r\n                    size=\"\"\r\n                    required\r\n                    value={company.VATNumber}\r\n                    onChange={(e) =>\r\n                      setCompany({ ...company, VATNumber: e.target.value })\r\n                    }\r\n                    // onChange={handleInputChange}\r\n                    name=\"VATNumber\"\r\n                  />\r\n                  <TextField\r\n                    id=\"VATCertificate\"\r\n                    label=\"VAT Certificate\"\r\n                    variant=\"standard\"\r\n                    color=\"secondary\"\r\n                    size=\"\"\r\n                    required\r\n                    value={company.VATCertificate}\r\n                    onChange={(e) =>\r\n                      setCompany({ ...company, VATCertificate: e.target.value })\r\n                    }\r\n                    //onChange={handleInputChange}\r\n                    name=\"VATCertificate\"\r\n                  />\r\n                  <FormControl variant=\"standard\" sx={{ minWidth: 120 }}>\r\n                    <InputLabel id=\"EntityTypelbl\" color=\"secondary\">\r\n                      {\" \"}\r\n                      Entity Type\r\n                    </InputLabel>\r\n                    <Select\r\n                      color=\"secondary\"\r\n                      onChange={(event) =>\r\n                        (company.EntityTypeID = event.target.value)\r\n                      }\r\n                      labelId=\"EntityTypelbl\"\r\n                      id=\"EntityTypeSelect\"\r\n                      label=\"Entity Type\"\r\n                    >\r\n                      <MenuItem value=\"\">\r\n                        <em>None</em>\r\n                      </MenuItem>\r\n                      {entityTypes.map((entity) => (\r\n                        <MenuItem\r\n                          key={entity.Id}\r\n                          EntityTypeListID={entity.Id}\r\n                          value={entity.Id}\r\n                        >\r\n                          {entity.Name}\r\n                        </MenuItem>\r\n                      ))}\r\n                    </Select>\r\n                  </FormControl>\r\n                </div>\r\n                <button className=\"btn btn-info\">Update</button>\r\n              </div>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      )}\r\n      <br />\r\n\r\n      <button\r\n        onClick={() => setToggleAddressInfo(!toggleAddressInfo)}\r\n        className=\"text-purple-600 rounded-md font-medium \"\r\n      >\r\n        Address Information\r\n      </button>\r\n      {toggleAddressInfo && (\r\n        <div>\r\n          <form onSubmit={updateCompanyAddress}>\r\n            <div className=\"grid grid-cols-1 gap-4 submit-form\">\r\n              <div className=\"submit-form \">\r\n                <div className=\"relative center justify-center flex-1 w-full max-w-full grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\">\r\n                  <FormControl variant=\"standard\" sx={{ width: \"45ch\" }}>\r\n                    <InputLabel id=\"countrylbl\" color=\"secondary\">\r\n                      {\" \"}\r\n                      Country{\" \"}\r\n                    </InputLabel>\r\n                    <Select\r\n                      color=\"secondary\"\r\n                      onChange={(event) =>\r\n                        (company.Address.Country = event.target.value)\r\n                      }\r\n                      labelId=\"countrylbl\"\r\n                      id=\"countrySelect\"\r\n                      label=\"Country\"\r\n                    >\r\n                      <MenuItem value=\"\">\r\n                        <em>None</em>\r\n                      </MenuItem>\r\n                      {country.map((newContry) => (\r\n                        <MenuItem\r\n                          key={newContry.Id}\r\n                          CountryID={newContry.Id}\r\n                          value={newContry.Id}\r\n                        >\r\n                          {newContry.Name}\r\n                        </MenuItem>\r\n                      ))}\r\n                    </Select>\r\n                  </FormControl>\r\n                  <FormControl variant=\"standard\">\r\n                    <InputLabel id=\"regionlbl\" color=\"secondary\">\r\n                      {\" \"}\r\n                      Region{\" \"}\r\n                    </InputLabel>\r\n                    <Select\r\n                      color=\"secondary\"\r\n                      onChange={(event) =>\r\n                        (company.Address.Region = event.target.value)\r\n                      }\r\n                      labelId=\"regionlbl\"\r\n                      id=\"regionSelect\"\r\n                      label=\"Region\"\r\n                    >\r\n                      <MenuItem value=\"\">\r\n                        <em>None</em>\r\n                      </MenuItem>\r\n                      {region.map((newRegion) => (\r\n                        <MenuItem\r\n                          key={newRegion.Id}\r\n                          RegionID={newRegion.Id}\r\n                          value={newRegion.Id}\r\n                        >\r\n                          {newRegion.Name}\r\n                        </MenuItem>\r\n                      ))}\r\n                    </Select>\r\n                  </FormControl>\r\n                  <TextField\r\n                    id=\"ZoneSubCity\"\r\n                    label=\"Zone Sub City\"\r\n                    variant=\"standard\"\r\n                    color=\"secondary\"\r\n                    size=\"\"\r\n                    required\r\n                    value={company.Address.ZoneSubCity}\r\n                    // onChange={handleInputChangeAdress}\r\n                    name=\"ZoneSubCity\"\r\n                  />\r\n                  <TextField\r\n                    id=\"Woreda\"\r\n                    label=\"Woreda\"\r\n                    variant=\"standard\"\r\n                    color=\"secondary\"\r\n                    size=\"\"\r\n                    required\r\n                    value={company.Address.Woreda}\r\n                    // onChange={handleInputChangeAdress}\r\n                    name=\"Woreda\"\r\n                  />\r\n                  <TextField\r\n                    id=\"City\"\r\n                    label=\"City\"\r\n                    variant=\"standard\"\r\n                    color=\"secondary\"\r\n                    size=\"\"\r\n                    required\r\n                    value={company.Address.City}\r\n                    // onChange={handleInputChangeAdress}\r\n                    name=\"City\"\r\n                  />\r\n                  <TextField\r\n                    id=\"Kebele\"\r\n                    label=\"Kebele\"\r\n                    variant=\"standard\"\r\n                    color=\"secondary\"\r\n                    size=\"\"\r\n                    required\r\n                    value={company.Address.Kebele}\r\n                    // onChange={handleInputChangeAdress}\r\n                    name=\"Kebele\"\r\n                  />\r\n                  <TextField\r\n                    id=\"HouseNo\"\r\n                    label=\"HouseNo\"\r\n                    variant=\"standard\"\r\n                    color=\"secondary\"\r\n                    size=\"\"\r\n                    required\r\n                    value={company.Address.HouseNo}\r\n                    // onChange={handleInputChangeAdress}\r\n                    name=\"HouseNo\"\r\n                  />\r\n                  <TextField\r\n                    id=\"BuildingNo\"\r\n                    label=\"BuildingNo\"\r\n                    variant=\"standard\"\r\n                    color=\"secondary\"\r\n                    size=\"\"\r\n                    required\r\n                    value={company.Address.BuildingNo}\r\n                    // onChange={handleInputChangeAdress}\r\n                    name=\"BuildingNo\"\r\n                  />\r\n                  <TextField\r\n                    id=\"StreetAddress\"\r\n                    label=\"StreetAddress\"\r\n                    variant=\"standard\"\r\n                    color=\"secondary\"\r\n                    size=\"\"\r\n                    required\r\n                    value={company.Address.StreetAddress}\r\n                    // onChange={handleInputChangeAdress}\r\n                    name=\"StreetAddress\"\r\n                  />\r\n                </div>\r\n                <button className=\"btn btn-info\">Update</button>\r\n              </div>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      )}\r\n      <br />\r\n      <button\r\n        onClick={() => setToggleContactInfo(!toggleContactInfo)}\r\n        className=\"text-purple-600 rounded-md font-medium \"\r\n      >\r\n        update Contact Information\r\n      </button>\r\n      {toggleContactInfo && <div>here</div>}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default UpdateCompany;\r\n","C:\\Users\\CBE\\Desktop\\LoanNew\\cbe-loan-frontend\\src\\Components\\Navigation\\Customer\\CompanyModal.jsx",["979","980"],[],"import { useState } from \"react\";\r\nimport { FaTimes } from \"react-icons/fa\";\r\nimport { Link, useNavigate } from \"react-router-dom\";\r\nconst CompanyModal = ({ isOpen, onClose, title, children }) => {\r\n  const navigate = useNavigate();\r\n  const [isClosing, setIsClosing] = useState(false);\r\n\r\n  function handleClose() {\r\n    setIsClosing(true);\r\n    setTimeout(() => {\r\n      onClose();\r\n      setIsClosing(false);\r\n    }, 200); // Change this value to adjust the closing animation duration\r\n  }\r\n  const doYouHaveAccount = () => {\r\n    const confirmed = window.confirm(\"Do you have account on CBE Loan?\");\r\n    if (confirmed) {\r\n      // Navigate to login\r\n      navigate(\"/login\");\r\n    } else {\r\n      // Navigate to signup page\r\n      return navigate(\"/registrationPage\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className={`fixed z-50 inset-0 overflow-y-auto ${\r\n        isOpen ? \"\" : \"opacity-0 pointer-events-none\"\r\n      } transition-opacity ease-out duration-300`}\r\n    >\r\n      <div className=\"flex items-center justify-center min-h-screen\">\r\n        <div\r\n          className={`fixed inset-0 transition-opacity ${\r\n            isClosing ? \"opacity-0\" : \"opacity-100\"\r\n          }`}\r\n          aria-hidden=\"true\"\r\n        >\r\n          <div className=\"absolute inset-0 bg-gray-500 opacity-75\"></div>\r\n        </div>\r\n\r\n        <div\r\n          className={`bg-white rounded-lg overflow-hidden shadow-xl transform transition-all ${\r\n            isOpen ? \"opacity-100 scale-100\" : \"opacity-0 scale-95\"\r\n          }`}\r\n          role=\"dialog\"\r\n          aria-modal=\"true\"\r\n          aria-labelledby=\"modal-title\"\r\n        >\r\n          <div className=\"px-6 py-4\">\r\n            <div className=\"flex items-center justify-between mb-2\">\r\n              <h3 className=\"text-lg font-medium\" id=\"modal-title\">\r\n                {title}\r\n              </h3>\r\n              <button\r\n                className=\"text-gray-500 hover:text-gray-600 focus:outline-none\"\r\n                onClick={handleClose}\r\n              >\r\n                <span className=\"sr-only\">Close</span>\r\n                <FaTimes className=\"h-6 w-6\" />\r\n              </button>\r\n            </div>\r\n            {children}\r\n          </div>\r\n          <div className=\"px-6 py-4 bg-gray-100 border-t border-gray-200 flex justify-end\">\r\n            {/* <button className=\"block bg-[purple] w-[150px] rounded-md font-medium my-6 text-white mx-auto py-2 text-center\" onClick={doYouHaveAccount}>Apply</button> */}\r\n            {/* <button\r\n                            className=\"bg-purple-500 hover:bg-purple-700 text-white font-bold py-2 px-4 rounded\"\r\n                            onClick={handleClose}\r\n                        >\r\n                            Close\r\n                        </button>                         \r\n                        */}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CompanyModal;\r\n","C:\\Users\\CBE\\Desktop\\LoanNew\\cbe-loan-frontend\\src\\Components\\Account\\AccountValidation.js",[],[],"C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\index.js",[],[],["981"],"C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\App.js",[],[],"C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Navbar\\Navbar.jsx",["982"],[],"import { AiOutlineClose, AiOutlineMenu } from \"react-icons/ai\";\r\nimport { IoMdArrowDropdown } from \"react-icons/io\";\r\nimport React, { useState } from \"react\";\r\nimport cbeLogo from \"../Images/favicon.ico\";\r\nimport { Link, NavLink } from \"react-router-dom\";\r\n\r\nconst Navbar = () => {\r\n  const [nav, setNav] = useState(false);\r\n  const [submenuOpen, setSubmenuOpen] = useState(false);\r\n  const Menus = [\r\n    {\r\n      id: 1,\r\n      title: \"Product\",\r\n      to: \"/\",\r\n    },\r\n\r\n    {\r\n      id: 2,\r\n      title: \"Login\",\r\n      to: \"/login\",\r\n    },\r\n    {\r\n      id: 3,\r\n      title: \"Signup\",\r\n      to: \"/signup\",\r\n    },\r\n    {\r\n      id: 4,\r\n      title: \"Signout\",\r\n      to: \"/login\",\r\n    },\r\n  ];\r\n  const handleSubMenu = () => {\r\n    setSubmenuOpen(!submenuOpen);\r\n    Menus.map((sub) => (sub.title === \"Signout\" ? localStorage.clear() : \"\"));\r\n  };\r\n  const handleNav = () => {\r\n    setNav(!nav);\r\n  };\r\n  return (\r\n    <div className=\"flex justify-between items-center h-15 bg-[purple] text-[#FAFAFA]\">\r\n      <img\r\n        src={cbeLogo}\r\n        alt=\"unable to display cbe logo\"\r\n        className=\"w-[40px] h-[40px]\"\r\n      />\r\n      <h1 className=\"w-full text-2xl font-bold\">CBE Loan</h1>\r\n      <ul className=\"hidden md:flex\">\r\n        {Menus.map((menu) => (\r\n          <React.Fragment key={menu.id}>\r\n            <li\r\n              key={menu.id}\r\n              className=\"text-white text-sm flex items-center gap-x-4 cursor-pointer hover:bg-light-white rounded-md p-4\"\r\n            >\r\n              <NavLink\r\n                to={menu.to}\r\n                onClick={() => {\r\n                  handleSubMenu();\r\n                }}\r\n              >\r\n                {localStorage.getItem(\"token\") === null\r\n                  ? menu.title.match(/Signup/g) ||\r\n                    menu.title.match(/Login/g) ||\r\n                    menu.title.match(/Product/g)\r\n                  : menu.title.match(/Signout/g)}\r\n              </NavLink>\r\n              {menu.submenu && (\r\n                <IoMdArrowDropdown\r\n                  onClick={() => {\r\n                    handleSubMenu();\r\n                  }}\r\n                />\r\n              )}\r\n              {menu.submenu && submenuOpen && (\r\n                <div className=\"absolute top-16\">\r\n                  <ul>\r\n                    {menu.submenuItems.map((sub, index) => (\r\n                      <li\r\n                        key={index}\r\n                        className=\"bg-purple-900 font-semibold p-2 text-white text-sm flex items-center cursor-pointer hover:bg-light-white top-12\"\r\n                      >\r\n                        {sub.title}\r\n                      </li>\r\n                    ))}\r\n                  </ul>\r\n                </div>\r\n              )}\r\n            </li>\r\n          </React.Fragment>\r\n        ))}\r\n      </ul>\r\n\r\n      <div className=\"md:max-lg:flex\"></div>\r\n      <div onClick={handleNav} className=\"block md:hidden\">\r\n        {nav ? <AiOutlineClose size={20} /> : <AiOutlineMenu size={20} />}\r\n        <div className=\"md:max-lg:flex\">\r\n          <nav>\r\n            <ul\r\n              className={\r\n                nav\r\n                  ? \"fixed left-0 top-0 w-[60%] h-full border-r border-r-purple-900 bg-purple-950 ease-in-out duration-500 text-white\"\r\n                  : \"fixed left-[-100%] \"\r\n              }\r\n            >\r\n              <h1 className=\"w-full text-3xl font-bol m-4 \">CBE Loan</h1>\r\n              <li className=\"p-4 border-b border-white-100 \">\r\n                <Link to=\"/\"> Home </Link>\r\n              </li>\r\n              <li className=\"p-4 border-b border-white-300 \">Company</li>\r\n              <li className=\"p-4 border-b border-white-300 \">Resource</li>\r\n              <li className=\"p-4 border-b border-white-300 \">About</li>\r\n              <li className=\"p-4\">Contact</li>\r\n            </ul>\r\n          </nav>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default Navbar;\r\n","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Registration\\SignUp.jsx",[],[],"C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Login\\Login.jsx",["983","984","985","986","987","988"],[],"import { useState } from \"react\";\r\nimport { Link, useNavigate } from \"react-router-dom\";\r\nimport { FaSpinner } from \"react-icons/fa\";\r\nimport loanDataService from \"../Enterprise/Service\";\r\nimport cbeLogo from \"../Images/favicon.ico\";\r\nconst Login = () => {\r\n  const navigate = useNavigate();\r\n  const [PhoneNumber, setPhoneNumber] = useState(\"\");\r\n  const [Password, setPassword] = useState(\"\");\r\n  const [showForgotPasswordPopup, setShowForgotPasswordPopup] = useState(false);\r\n  const [phoneEntered, setPhoneEntered] = useState(false);\r\n  const [otp, setOtp] = useState(\"\");\r\n  // const [Id, setId] = useState(\"\");\r\n  const [loginError, setLoginError] = useState(null);\r\n  const [loginSuccessStatus, setLoginSuccessStatus] = useState(false);\r\n  // const [isLoginLoading, setIsLoginLoading] = useState(false);\r\n\r\n  const handleApiAuthentication = (phoneNumber, password) => {\r\n    setLoginSuccessStatus(true);\r\n    if (!navigator.onLine) {\r\n      setLoginSuccessStatus(false);\r\n      setLoginError(\"Error: No internet connection\");\r\n      return;\r\n    }\r\n    setTimeout(() => {\r\n      loanDataService.AuthenticationService.authenticateUser(\r\n        phoneNumber,\r\n        password\r\n      )\r\n        .then((token) => {\r\n          localStorage.setItem(\"token\", token.token);\r\n          localStorage.setItem(\"UserId\", token.userId);\r\n          navigate(\"/enterprise\");\r\n        })\r\n        .catch((error) => {\r\n          if (error.response) {\r\n            if (error.response.status === 400) {\r\n              setLoginSuccessStatus(false);\r\n              setLoginError(error.response.data.Message);\r\n            } else {\r\n              setLoginSuccessStatus(false);\r\n              setLoginError(error.response.data.Message);\r\n            }\r\n          } else if (error.request) {\r\n            setLoginSuccessStatus(false);\r\n            setLoginError(\r\n              \"Error: No response received from the server \" + error.request\r\n            );\r\n          } else {\r\n            setLoginSuccessStatus(false);\r\n            setLoginError(\"Error: \" + error.message);\r\n          }\r\n        });\r\n    }, 1000);\r\n  };\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    handleApiAuthentication(PhoneNumber, Password);\r\n    if (loginSuccessStatus) {\r\n      navigate(\"/enterprise\");\r\n    } else {\r\n      navigate(\"/login\");\r\n    }\r\n  };\r\n\r\n  const handleForgotPasswordClick = () => {\r\n    setShowForgotPasswordPopup(true);\r\n  };\r\n\r\n  const handlePopupClose = () => {\r\n    setShowForgotPasswordPopup(false);\r\n    setPhoneEntered(false);\r\n    setOtp(\"\");\r\n  };\r\n\r\n  const handleSendOtpClick = () => {\r\n    // Send OTP to phone number\r\n    // After OTP is sent, you can set another state to indicate that the OTP has been sent\r\n  };\r\n\r\n  const handleVerifyClick = () => {\r\n    //  Verify OTP\r\n    // If OTP is verified successfully, you can redirect the user to a password reset page\r\n  };\r\n\r\n  const handlePhoneChange = (event) => {\r\n    // Validate phone number input\r\n    setPhoneEntered(true);\r\n  };\r\n\r\n  const handleOtpChange = (event) => {\r\n    // TODO: Validate OTP input\r\n    setOtp(event.target.value);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"flex items-center justify-center\">\r\n        <div className=\"bg-white shadow rounded-xl p-5\">\r\n          <div className=\"sm:mx-auto sm:w-full sm:max-w-sm\">\r\n            <h2 className=\"text-center text-2xl font-bold leading-9 tracking-tight text-gray-1000\">\r\n              Sign in to your account\r\n            </h2>\r\n          </div>\r\n          <div className=\"mt-2 sm:mx-auto sm:w-full sm:max-w-sm\">\r\n            <div className=\"flex justify-center\">\r\n              <img\r\n                src={cbeLogo}\r\n                className=\"h-20 w-20 mb-4\"\r\n                alt=\"unable to display properly\"\r\n              />\r\n            </div>\r\n            <form className=\"space-y-6\" onSubmit={handleSubmit}>\r\n              {!loginSuccessStatus && loginError ? (\r\n                <div className=\"bg-red-100 p-3 rounded-md text-red-600\">\r\n                  {loginError}\r\n                </div>\r\n              ) : (\r\n                <div>{loginError}</div>\r\n              )}\r\n              <div>\r\n                <label\r\n                  htmlFor=\"phoneNumber\"\r\n                  className=\"block text-sm font-medium leading-6 text-gray-900\"\r\n                >\r\n                  Phone number\r\n                </label>\r\n                <div className=\"mt-2\">\r\n                  <input\r\n                    id=\"PhoneNumber\"\r\n                    name=\"PhoneNumber\"\r\n                    type=\"tel\"\r\n                    autoComplete=\"tel\"\r\n                    required\r\n                    className=\"block w-full rounded-md border-0 py-1.5 text-gray-900 pl-2 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6\"\r\n                    value={PhoneNumber}\r\n                    onChange={(event) => setPhoneNumber(event.target.value)}\r\n                  />\r\n                </div>\r\n              </div>\r\n\r\n              <div>\r\n                <div className=\"flex items-center justify-between\">\r\n                  <label\r\n                    htmlFor=\"password\"\r\n                    className=\"block text-sm font-medium leading-6 text-gray-900\"\r\n                  >\r\n                    Password\r\n                  </label>\r\n                  <div className=\"text-sm\">\r\n                    <button\r\n                      type=\"button\"\r\n                      onClick={handleForgotPasswordClick}\r\n                      className=\"font-semibold text-fuchsia-700 hover:text-fuchsia-900\"\r\n                    >\r\n                      Forgot password?\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n                <div className=\"mt-2\">\r\n                  <input\r\n                    id=\"Password\"\r\n                    name=\"Password\"\r\n                    type=\"Password\"\r\n                    autoComplete=\"current-password\"\r\n                    required\r\n                    className=\"block w-full rounded-md border-0 py-1.5 text-gray-900 pl-2 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6\"\r\n                    value={Password}\r\n                    onChange={(event) => setPassword(event.target.value)}\r\n                  />\r\n                </div>\r\n              </div>\r\n              <div>\r\n                <button\r\n                  type=\"submit\"\r\n                  className={`flex w-full justify-center rounded-md bg-fuchsia-700 px-3 py-1.5 text-sm font-semibold leading-6 text-white shadow-sm hover:bg-fuchsia-900 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600 ${\r\n                    loginSuccessStatus ? \"opacity-50 cursor-not-allowed\" : \"\"\r\n                  }`}\r\n                  disabled={loginSuccessStatus}\r\n                >\r\n                  {loginSuccessStatus ? (\r\n                    <span>\r\n                      <FaSpinner\r\n                        className=\"animate-spin rounded-full h-6 w-6\"\r\n                        fontSize=\"small\"\r\n                        data-toggle=\"tooltip\"\r\n                        title=\"Click it to sign in\"\r\n                      />\r\n                    </span>\r\n                  ) : (\r\n                    <span className=\"spinner-border spinner-border-sm\">\r\n                      Sign in\r\n                    </span>\r\n                  )}\r\n                </button>\r\n              </div>\r\n            </form>\r\n\r\n            <p className=\"mt-10 text-center text-sm text-gray-500\">\r\n              Not a member?{\" \"}\r\n              <Link\r\n                to=\"/registrationPage\"\r\n                className=\"font-semibold leading-6 text-fuchsia-700 hover:text-yellow-500\"\r\n              >\r\n                Sign Up\r\n              </Link>\r\n            </p>\r\n\r\n            {showForgotPasswordPopup && (\r\n              <div className=\"fixed z-50 inset-1 overflow-y flex items-center justify-center\">\r\n                <div className=\"flex items-end justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0\">\r\n                  <div className=\"fixed inset-0 transition-opacity\">\r\n                    <div className=\"absolute inset-0 bg-gray-500 opacity-75\"></div>\r\n                  </div>\r\n                  <span className=\"hidden sm:inline-block sm:align-middle sm:h-screen\"></span>\r\n                  &#8203;\r\n                  <div\r\n                    className=\"inline-block align-bottom bg-white rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full\"\r\n                    role=\"dialog\"\r\n                    aria-modal=\"true\"\r\n                    aria-labelledby=\"modal-headline\"\r\n                  >\r\n                    <div className=\"bg-white px-4 pt-5 pb-4 sm:p-6 sm:pb-4\">\r\n                      {!phoneEntered && (\r\n                        <>\r\n                          <div className=\"sm:flex sm:items-start\">\r\n                            <div className=\"mt-3 text-center sm:mt-0 sm:ml-4 sm:text-left\">\r\n                              <h3\r\n                                className=\"text-lg leading-6 font-medium text-gray-900\"\r\n                                id=\"modal-headline\"\r\n                              >\r\n                                Forgot your password?\r\n                              </h3>\r\n                              <div className=\"mt-2\">\r\n                                <p className=\"text-sm leading-5 text-gray-500\">\r\n                                  Enter the phone number associated with your\r\n                                  account and we'll send you a verification code\r\n                                  to reset your password.\r\n                                </p>\r\n                              </div>\r\n                            </div>\r\n                          </div>\r\n\r\n                          <div className=\"mt-5\">\r\n                            <input\r\n                              type=\"tel\"\r\n                              name=\"phone\"\r\n                              id=\"phone\"\r\n                              autoComplete=\"tel\"\r\n                              required\r\n                              className=\"block w-full rounded-md border-gray-300 shadow-sm py-2 px-3 focus:outline-none focus:ring-fuchsia-500 focus:border-fuchsia-500 sm:text-sm sm:leading-5\"\r\n                              placeholder=\"Phone number\"\r\n                              onChange={handlePhoneChange}\r\n                            />\r\n                          </div>\r\n\r\n                          <div className=\"mt-5 sm:mt-6\">\r\n                            <span className=\"flex w-full rounded-md shadow-sm\">\r\n                              <button\r\n                                type=\"button\"\r\n                                className=\"inline-flex justify-center w-full rounded-md border border-transparent px-4 py-2 bg-fuchsia-600 text-base leading-6 font-medium text-white shadow-sm hover:bg-fuchsia-500 focus:outline-none focus:border-fuchsia-700 focus:shadow-outline-indigo transition ease-in-out duration-150 sm:text-sm sm:leading-5\"\r\n                                onClick={handleSendOtpClick}\r\n                              >\r\n                                Send verification code\r\n                              </button>\r\n                            </span>\r\n                          </div>\r\n                        </>\r\n                      )}\r\n\r\n                      {phoneEntered && (\r\n                        <>\r\n                          <div className=\"sm:flex sm:items-start\">\r\n                            <div className=\"mt-3 text-center sm:mt-0 sm:ml-4 sm:text-left\">\r\n                              <h3\r\n                                className=\"text-lg leading-6 font-medium text-gray-900\"\r\n                                id=\"modal-headline\"\r\n                              >\r\n                                Enter verification code\r\n                              </h3>\r\n                              <div className=\"mt-4\">\r\n                                <p className=\"text-sm leading-5 text-gray-500\">\r\n                                  We've sent a verification code to your phone\r\n                                  number. Please enter it below to reset your\r\n                                  password.\r\n                                </p>{\" \"}\r\n                              </div>{\" \"}\r\n                            </div>\r\n                            <div className=\"mt-5\">\r\n                              <input\r\n                                type=\"text\"\r\n                                name=\"otp\"\r\n                                id=\"otp\"\r\n                                autoComplete=\"one-time-code\"\r\n                                required\r\n                                className=\"block w-full rounded-md border-gray-300 shadow-sm py-2 px-3 focus:outline-none focus:ring-fuchsia-500 focus:border-fuchsia-500 sm:text-sm sm:leading-5\"\r\n                                placeholder=\"Verification code\"\r\n                                value={otp}\r\n                                onChange={handleOtpChange}\r\n                              />\r\n                            </div>\r\n\r\n                            <div className=\"mt-5 sm:mt-6\">\r\n                              <span className=\"flex w-full rounded-md shadow-sm\">\r\n                                <button\r\n                                  type=\"button\"\r\n                                  className=\"inline-flex justify-center w-full rounded-md border border-transparent px-4 py-2 bg-fuchsia-600 text-base leading-6 font-medium text-white shadow-sm hover:bg-fuchsia-500 focus:outline-none focus:border-fuchsia-700 focus:shadow-outline-indigo transition ease-in-out duration-150 sm:text-sm sm:leading-5\"\r\n                                  onClick={handleVerifyClick}\r\n                                >\r\n                                  Verify\r\n                                </button>\r\n                              </span>\r\n                            </div>\r\n                          </div>\r\n                        </>\r\n                      )}\r\n                    </div>\r\n\r\n                    <div className=\"bg-gray-50 px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse\">\r\n                      <span className=\"flex w-full rounded-md shadow-sm sm:ml-3 sm:w-auto\">\r\n                        <button\r\n                          type=\"button\"\r\n                          className=\"inline-flex justify-center w-full rounded-md border border-transparent px-4 py-2 bg-fuchsia-600 text-base leading-6 font-medium text-white shadow-sm hover:bg-fuchsia-500 focus:outline-none focus:border-fuchsia-700 focus:shadow-outline-indigo transition ease-in-out duration-150 sm:text-sm sm:leading-5\"\r\n                          onClick={handlePopupClose}\r\n                        >\r\n                          Close\r\n                        </button>\r\n                      </span>\r\n\r\n                      <span className=\"mt-3 flex w-full rounded-md shadow-sm sm:mt-0 sm:w-auto\">\r\n                        <button\r\n                          type=\"button\"\r\n                          className=\"inline-flex justify-center w-full rounded-md border border-transparent px-4 py-2 bg-fuchsia-600 text-base leading-6 font-medium text-white shadow-sm hover:bg-fuchsia-500 focus:outline-none focus:border-fuchsia-700 focus:shadow-outline-indigo transition ease-in-out duration-150 sm:text-sm sm:leading-5\"\r\n                          onClick={handleSendOtpClick}\r\n                        >\r\n                          Send again\r\n                        </button>\r\n                      </span>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Product\\LoanProductLine.jsx",[],[],"C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Product\\ProductDetail.jsx",["989","990","991","992","993","994"],[],"C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Product\\Product.jsx",["995","996","997","998","999","1000","1001","1002"],[],"import { useParams, useNavigate, Link } from \"react-router-dom\";\r\nimport SpecificEligibilityLoanData from \"../Data/SpecificEligibilityLoanData.json\";\r\nimport { useState } from \"react\";\r\nimport { LiaGreaterThanSolid } from \"react-icons/lia\";\r\nimport LoanModal from \"../Modal/LoanModal\";\r\nimport EligibilityCriteria from \"../EligibilityCriteria/SpecificEligibilityCriteria\";\r\nimport HorizontalTabs from \"./HorizontalTabs\";\r\n\r\nconst Product = () => {\r\n  const navigate = useNavigate();\r\n\r\n  const { baseLine, groupId } = useParams();\r\n\r\n  const productBaseLine = SpecificEligibilityLoanData.product_line.filter(\r\n    (productLine) => productLine.id == baseLine\r\n  );\r\n  // loan modal1 start\r\n  const [isModalOpen, setIsModalOpen] = useState(false);\r\n  const [specificEligibilityCriteria, setSpecificEligibilityCriteria] =\r\n    useState(\"\");\r\n  const [generalEligibilityCriteria, setGeneralEligibilityCriteria] =\r\n    useState(\"\");\r\n  const [specificElements, setSpecificElements] = useState();\r\n\r\n  const [isGeneralModalOpen, setIsGeneralModalOpen] = useState(false);\r\n\r\n  //for general eligibility\r\n\r\n  function handleGeneralOpenModal() {\r\n    setIsGeneralModalOpen(true);\r\n  }\r\n\r\n  function handleGeneralCloseModal() {\r\n    setIsGeneralModalOpen(false);\r\n  }\r\n  //for specific eligibility\r\n  function handleOpenModal() {\r\n    setIsModalOpen(true);\r\n  }\r\n  function handleCloseModal() {\r\n    setIsModalOpen(false);\r\n  }\r\n  const handleGoProductGroup = () => {\r\n    navigate(\"/\");\r\n  };\r\n  const handleGoSelfProductGroup = () => {\r\n    navigate(1);\r\n  };\r\n  return (\r\n    <div>\r\n      <header className=\"px-4 bg-gray-50 border border-gray-200 p-2 space-x-2\">\r\n        <button\r\n          className=\"text-purple-600 underline hover:font-semibold inline capitalize\"\r\n          data-toggle=\"tooltip\"\r\n          title=\"Click it go back\"\r\n          onClick={handleGoProductGroup}\r\n        >\r\n          {productBaseLine.map((productLine) => productLine.name)}\r\n        </button>\r\n        <div className=\"inline\">\r\n          <LiaGreaterThanSolid className=\"text-purple-600 inline\" />\r\n        </div>\r\n        <div className=\"inline\">\r\n          <Link\r\n            className=\"text-purple-600 capitalize underline hover:font-semibold visited:text-purple-650\"\r\n            data-toggle=\"tooltip\"\r\n            title=\"Click it go back\"\r\n            onClick={handleGoSelfProductGroup}\r\n          >\r\n            {productBaseLine.map((pr) =>\r\n              pr.group\r\n                .filter((gr) => gr.id == groupId)\r\n                .map((selectedGroup) => selectedGroup.name)\r\n            )}\r\n          </Link>\r\n        </div>\r\n      </header>\r\n      <section>\r\n        <header>{/* <h2>Search result</h2> */}</header>\r\n        {/* specific eligibility criteria modal */}\r\n        {specificEligibilityCriteria && (\r\n          <>\r\n            <div className=\"border rounded-md p-1\">\r\n              {/* \"`${item.}Specific Eligibility}`\" */}\r\n              <LoanModal\r\n                className=\"border rounded-md p-1\"\r\n                isOpen={isModalOpen}\r\n                onClose={handleCloseModal}\r\n                title={`${specificElements.name} specific eligibility criteria`}\r\n              >\r\n                <EligibilityCriteria criteria={specificEligibilityCriteria} />\r\n              </LoanModal>\r\n            </div>\r\n          </>\r\n        )}\r\n        {/* general eligibility criteria modal  */}\r\n        {generalEligibilityCriteria && (\r\n          <LoanModal\r\n            isOpen={isGeneralModalOpen}\r\n            onClose={handleGeneralCloseModal}\r\n            title=\"General eligibility criteria\"\r\n          >\r\n            <HorizontalTabs criteria={generalEligibilityCriteria} />\r\n            {/* {generalEligibilityCriteria} */}\r\n          </LoanModal>\r\n        )}\r\n        <article>\r\n          {/* product cards */}\r\n          <div className=\"mx-w-[1240px] mx-auto grid gap-1 ease-in-out px-4\">\r\n            {productBaseLine.map((pr) =>\r\n              pr.group\r\n                .filter((gr) => gr.id == groupId)\r\n                .map((selectedGroup) => (\r\n                  <div className=\"w-full border-2 shadow-xl flex flex-col my-4 rounded-lg\">\r\n                    <header className=\"text-2xl bg-[purple] text-white ease-in-out border text-center uppercase\">\r\n                      {selectedGroup.name}\r\n                    </header>\r\n                    <div className=\"px-8 text-xl items-center justify-center\">\r\n                      {selectedGroup.product.map((item, index) => (\r\n                        <>\r\n                          <Link\r\n                            to={`/product/${baseLine}/${groupId}/${item.id}`}\r\n                          >\r\n                            <p className=\"space-x-2 p-3 hover:cursor-pointer hover:font-bold hover:text-[purple] hover:underline first:capitalize hover:uppercase hover:scale-105 hover:gap-1 ease-in-out duration-300 \">\r\n                              <strong>{index + 1}</strong>.\r\n                              <span>{item.name}</span>\r\n                            </p>\r\n                          </Link>\r\n                        </>\r\n                      ))}\r\n                    </div>\r\n                  </div>\r\n                ))\r\n            )}\r\n          </div>\r\n        </article>\r\n      </section>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Product;\r\n","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\NotFound\\NotFound.jsx",[],[],"C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\Basic\\ViewCompanyBasicInformation.jsx",["1003","1004","1005","1006","1007","1008"],[],"import { useState, useEffect } from \"react\";\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport { FaSpinner } from \"react-icons/fa\";\r\nimport { MdModeEdit } from \"react-icons/md\";\r\nimport { BiSkipNext } from \"react-icons/bi\";\r\nimport { IoTrashOutline } from \"react-icons/io5\";\r\nimport CompanyNavigation from \"../../Common/CompanyNavigation\";\r\nimport loanDataService from \"../Service\";\r\nimport LoanIconButton from \"../../Common/LoanIconButton\";\r\nimport AddCompanyBasicInformation from \"./AddCompanyBasicInformation\";\r\nimport EditCompanyInformation from \"./EditCompanyInformation\";\r\n\r\nconst ViewCompanyBasicInformation = () => {\r\n  const [companies, setCompanies] = useState(null);\r\n  const [companyId, setCompanyId] = useState();\r\n  const [error, setError] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [deleteLoading, setDeleteLoading] = useState(false);\r\n  const [submitted, setSubmitted] = useState(true);\r\n  const [isCompanyEditModalOpen, setIsCompanyEditModalOpen] = useState(false);\r\n  const [companyTypes, setCompanyTypes] = useState([]);\r\n  const [entityTypes, setEntityTypes] = useState([]);\r\n  const [holdUserId, setHoldUserId] = useState([]);\r\n  const [holdId, setHoldId] = useState([]);\r\n  const [companyTypeId, setCompanyTypeId] = useState();\r\n  const [deleteCompanyError, setCompanyDeleteError] = useState(null);\r\n\r\n  const initialCompanyState = {\r\n    Id: null,\r\n    Name: \"\",\r\n    NoOfBranch: \"\",\r\n    EstablishmentYear: \"\",\r\n    TINNumber: \"\",\r\n    TINCertificate: \"\",\r\n    CompanyTypeID: \"\",\r\n    EntityTypeID: \"\",\r\n    VATNumber: \"\",\r\n    VATCertificate: \"\",\r\n  };\r\n\r\n  const [editCompany, setEditCompany] = useState({\r\n    Id: companyId,\r\n    Name: \"\",\r\n    NoOfBranch: \"\",\r\n    EstablishmentYear: \"\",\r\n    TINNumber: \"\",\r\n    TINCertificate: \"\",\r\n    CompanyTypeID: \"\",\r\n    VATNumber: \"\",\r\n    VATCertificate: \"\",\r\n    EntityTypeID: \"\",\r\n    UserId: localStorage.getItem(\"UserId\"),\r\n  });\r\n  const handleSkip = (company) => {\r\n    return (\r\n      <li className=\"p-2\" key={company.id}>\r\n        <Link to={`/enterprise/${company.Id}`}> Click </Link>\r\n      </li>\r\n    );\r\n  };\r\n\r\n  function handleCompanyEditOpenModal() {\r\n    setIsCompanyEditModalOpen(true);\r\n  }\r\n  function handleCompanyEditCloseModal() {\r\n    setIsCompanyEditModalOpen(false);\r\n  }\r\n  const [company, setCompany] = useState(initialCompanyState);\r\n\r\n  const handleInputChange = (event) => {\r\n    const { name, value } = event.target;\r\n    setCompany({ ...company, [name]: value });\r\n  };\r\n  const newCompany = () => {\r\n    setCompany(initialCompanyState);\r\n    setSubmitted(false);\r\n  };\r\n  const saveCompany = () => {\r\n    var data = {\r\n      Name: company.Name,\r\n      NoOfBranch: company.NoOfBranch,\r\n      EstablishmentYear: company.EstablishmentYear,\r\n      TINNumber: company.TINNumber,\r\n      TINCertificate: company.TINCertificate,\r\n      CompanyTypeID: company.CompanyTypeID,\r\n      EntityTypeID: company.EntityTypeID,\r\n      VATNumber: company.VATNumber,\r\n      VATCertificate: company.VATCertificate,\r\n    };\r\n    loanDataService\r\n      .addCompany(data, holdUserId)\r\n      .then((response) => {\r\n        setCompany({\r\n          Id: response.data.Id,\r\n          Name: response.data.Name,\r\n          NoOfBranch: response.data.NoOfBranch,\r\n          EstablishmentYear: response.data.EstablishmentYear,\r\n          TINNumber: response.data.TINNumber,\r\n          TINCertificate: response.data.TINCertificate,\r\n          CompanyTypeID: response.data.CompanyTypeID,\r\n          EntityTypeID: response.data.EntityTypeID,\r\n          VATNumber: response.data.VATNumber,\r\n          VATCertificate: response.data.VATCertificate,\r\n        });\r\n        if (response.data.Code === 200) {\r\n          setCompany(initialCompanyState);\r\n          console.log(response.data);\r\n          setHoldId(response.data.Result.Id);\r\n          getCompanies();\r\n          toast.success(\"Added successfully\", {\r\n            position: toast.POSITION.TOP_RIGHT,\r\n            toastId: \"addCompany\",\r\n          });\r\n        }\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n  const getCompanies = () => {\r\n    setTimeout(() => {\r\n      setLoading(true);\r\n      loanDataService\r\n        .companies()\r\n        .then((response) => {\r\n          debugger;\r\n          if (\r\n            response.data.Code === 200 ||\r\n            response.data.Message === \"Success\"\r\n          ) {\r\n            setCompanies(response.data.Result);\r\n          } else {\r\n            throw new Error(\"Data not found\");\r\n          }\r\n        })\r\n        .catch((error) => setError(error.message));\r\n    }, 1000);\r\n  };\r\n  useEffect(() => {\r\n    getCompanies();\r\n  }, []);\r\n  const handleReload = () => {\r\n    getCompanies();\r\n  };\r\n  const fetchCompanies = () => {\r\n    loanDataService\r\n      .getCompanyType()\r\n      .then((response) => {\r\n        setCompanyTypes(response.data.Result);\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n  useEffect(() => {\r\n    fetchCompanies();\r\n  }, []);\r\n  const fetchCompanyEntity = () => {\r\n    loanDataService\r\n      .getEntitype()\r\n      .then((response) => {\r\n        setEntityTypes(response.data.Result);\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n  useEffect(() => {\r\n    fetchCompanyEntity();\r\n  }, []);\r\n\r\n  const handleDelete = (company) => {\r\n    setDeleteLoading(true);\r\n    const confirm = window.confirm(\r\n      `Are you sure you want to delete ${company.Name}?`\r\n    );\r\n    if (confirm) {\r\n      toast.success(\"Deleting\", {\r\n        position: toast.POSITION.TOP_RIGHT,\r\n        toastId: \"deleteCompany\",\r\n      });\r\n      loanDataService\r\n        .deleteCompanyById(company.Id)\r\n        .then(() => {\r\n          setCompanies((previousData) =>\r\n            previousData.filter((comp) => comp.Id !== company.Id)\r\n          );\r\n        })\r\n        .catch((e) => {\r\n          setCompanyDeleteError(e);\r\n          setDeleteLoading(false);\r\n        });\r\n    }\r\n  };\r\n\r\n  const updateCompanyById = (companyId) => {\r\n    loanDataService\r\n      .getCompanyById(companyId)\r\n      .then((res) => {\r\n        setEditCompany({\r\n          ...editCompany,\r\n          Id: companyId,\r\n          Name: res.data.Result.Name,\r\n          NoOfBranch: res.data.Result.NoOfBranch,\r\n          EstablishmentYear: res.data.Result.EstablishmentYear,\r\n          TINNumber: res.data.Result.TINNumber,\r\n          TINCertificate: res.data.Result.TINCertificate,\r\n          CompanyType: res.data.Result.CompanyType,\r\n          VATNumber: res.data.Result.VATNumber,\r\n          VATCertificate: res.data.Result.VATCertificate,\r\n          EntityType: res.data.Result.EntityType,\r\n          UserId: localStorage.getItem(\"UserId\"),\r\n        });\r\n      })\r\n      .catch((err) => console.log(err));\r\n  };\r\n  const updateCompanyInfo = (e) => {\r\n    e.preventDefault();\r\n    loanDataService\r\n      .updateCompany(companyId, editCompany)\r\n      .then((response) => {\r\n        if (response.data.Code === 200) {\r\n          getCompanies();\r\n          toast.success(\"Updated successfully\", {\r\n            position: toast.POSITION.TOP_RIGHT,\r\n            toastId: \"updateCompany\",\r\n          });\r\n        }\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n  return (\r\n    <div className=\"flex\">\r\n      <CompanyNavigation />\r\n      <div className=\"px-4 py-3\">\r\n        <div className=\"flex flex-wrap\">\r\n          <div className=\"w-full\">\r\n            <div>\r\n              <h4 className=\"text-lg font-semibold eading-tight p-2\">\r\n                Basic Company Information\r\n              </h4>\r\n              <AddCompanyBasicInformation\r\n                submitted={submitted}\r\n                newCompany={newCompany}\r\n                company={company}\r\n                handleInputChange={handleInputChange}\r\n                companyTypes={companyTypes}\r\n                entityTypes={entityTypes}\r\n                companyId ={companyId}\r\n                handleSkip={() => {\r\n                  handleSkip();\r\n                }}\r\n                saveCompany={saveCompany}\r\n                value={companyTypeId}\r\n                onClick={handleReload}\r\n              />\r\n              <ToastContainer />\r\n              {error && <p className=\"text-red-500\">{error}</p>}\r\n              {!companies ? (\r\n                <span>\r\n                  <FaSpinner\r\n                    className=\"animate-spin rounded-full h-6 w-6 text-purple-600\"\r\n                    fontSize=\"small\"\r\n                    data-toggle=\"tooltip\"\r\n                    title=\"Click it to sign in\"\r\n                  />\r\n                  Loading...\r\n                </span>\r\n              ) : (\r\n                <table className=\"border-purple-300 bg-white hover:bg-purple-300\">\r\n                  <thead className=\"bg-purple-100\">\r\n                    <tr className=\"border border-purple-300\">\r\n                      <th className=\"px-2 py-4 \"> No </th>\r\n                      <th className=\"px-2 py-4 \"> Name </th>\r\n                      <th className=\"px-2 py-4\"> No Branch </th>\r\n                      <th className=\"px-2 py-4\"> Establishment Year </th>\r\n                      <th className=\"px-2 py-4\"> TIN Number </th>\r\n                      <th className=\"px-2 py-4\"> TIN Certificate </th>\r\n                      <th className=\"px-2 py-4\"> VAT Number </th>\r\n                      <th className=\"px-2 py-4\"> VAT Certificate </th>\r\n                      <th className=\"px-2 py-4\"> Action </th>\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                    {companies.length === 0 ? (\r\n                      <p className=\"text-red-600\">Data not found</p>\r\n                    ) : (\r\n                      companies.map((company, index) => (\r\n                        <tr\r\n                          className=\"bg-white\r\n                        border-b border-purple-200\"\r\n                          key={company.Id}\r\n                        >\r\n                          <td className=\"p-2\">{(index += 1)}</td>\r\n                          <td className=\"p-2\">{company.Name}</td>\r\n                          <td className=\"p-2\">{company.NoOfBranch}</td>\r\n                          <td className=\"p-2\">{company.EstablishmentYear}</td>\r\n                          <td className=\"p-2\">{company.TINNumber}</td>\r\n                          <td className=\"p-2\">{company.TINCertificate}</td>\r\n                          <td className=\"p-2\">{company.VATNumber}</td>\r\n                          <td className=\"p-2\">{company.VATCertificate}</td>\r\n                          <td>\r\n                            <LoanIconButton\r\n                              style={{ color: \"green\" }}\r\n                              icon={<MdModeEdit />}\r\n                              text=\"Edit\"\r\n                              onClick={(e) => {\r\n                                handleCompanyEditOpenModal();\r\n                                updateCompanyById(company.Id);\r\n                                setCompanyId(company.Id);\r\n                              }}\r\n                            />\r\n                            <>\r\n                              <LoanIconButton\r\n                                style={{ color: \"red\" }}\r\n                                icon={<IoTrashOutline />}\r\n                                text=\"Delete\"\r\n                                onClick={() => {\r\n                                  handleDelete(company);\r\n                                }}\r\n                              >\r\n                                <ToastContainer />\r\n                              </LoanIconButton>\r\n                            </>\r\n                            {/* <LoanIconButton\r\n                              style={{ color: \"purple\" }}\r\n                              icon={<BiSkipNext />}\r\n                              text=\"Next\"\r\n                              onClick={() => {\r\n                                <Link to={`/enterprise/${company.Id}`}>\r\n                                  Click\r\n                                </Link>;\r\n                              }}\r\n                            /> */}\r\n                            <Link to={`/enterprise/${company.Id}`}>\r\n                              <LoanIconButton\r\n                                style={{ color: \"purple\" }}\r\n                                icon={<BiSkipNext />}\r\n                                text=\"Address\"\r\n                              />\r\n                            </Link>\r\n                          </td>\r\n                        </tr>\r\n                      ))\r\n                    )}\r\n                  </tbody>\r\n                </table>\r\n              )}\r\n              <EditCompanyInformation\r\n                isCompanyEditModalOpen={isCompanyEditModalOpen}\r\n                updateCompanyInfo={updateCompanyInfo}\r\n                editCompany={editCompany}\r\n                companyTypes={companyTypes}\r\n                entityTypes={entityTypes}\r\n                setEditCompany={setEditCompany}\r\n                handleCompanyEditCloseModal={handleCompanyEditCloseModal}\r\n              />\r\n              {/* <p>Selected Company ID {companyId}</p>\r\n              <p>Holded Id {holdUserId}</p> */}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ViewCompanyBasicInformation;\r\n","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\Service.js",[],[],"C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Product\\HorizontalTabs.jsx",[],[],"C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\EligibilityCriteria\\SpecificEligibilityCriteria.jsx",[],[],"C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Modal\\LoanModal.jsx",["1009","1010"],[],"C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Common\\LoanIconButton.js",[],[],"C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Common\\CompanyNavigation.jsx",["1011","1012","1013","1014","1015","1016"],[],"import { useState } from \"react\";\r\nimport { BrowserRouter as Router, Route, Routes } from \"react-router-dom\";\r\nimport { BsArrowLeftShort, BsSearch, BsChevronDown } from \"react-icons/bs\";\r\nimport { AiFillEnvironment } from \"react-icons/ai\";\r\nimport { menu } from \"@material-tailwind/react\";\r\nimport { RiDashboardFill } from \"react-icons/ri\";\r\nimport { GrProjects } from \"react-icons/gr\";\r\nimport { GiProgression } from \"react-icons/gi\";\r\nimport { FcOrganization } from \"react-icons/fc\";\r\nimport Box from \"@mui/material/Box\";\r\nimport Tooltips from \"../Tooltip/Tooltips\";\r\nimport Api from \"../API/Api\";\r\n// import Stepper from \"../Stepper/Stepper\";\r\n// import \"./style.css\";\r\n\r\nconst CompanyNavigation = () => {\r\n  const [open, setOpen] = useState(true);\r\n  const [subMenuOpen, setSubMenuOpen] = useState(false);\r\n  const Menus = [\r\n    { title: \"Company\", icon: <RiDashboardFill /> },\r\n    { title: \"Stepper \", icon: <FcOrganization /> },\r\n    {\r\n      title: \"Loan Status\",\r\n      icon: <GiProgression />,\r\n      spacing: true,\r\n    },\r\n    {\r\n      title: \"projects\",\r\n      icon: <GrProjects />,\r\n      submenu: true,\r\n      submenuItems: [\r\n        { title: \"submenu 1\" },\r\n        { title: \"submenu 2\" },\r\n        { title: \"submenu 3\" },\r\n      ],\r\n    },\r\n  ];\r\n  return (\r\n    <div className=\"flex \">\r\n      <div\r\n        className={`bg-purple-500 h-screen p-5 pt-8 ${\r\n          open ? \"w-72\" : \"w-20\"\r\n        } duration-300 relative   `}\r\n      >\r\n        <BsArrowLeftShort\r\n          className={`bg-white text-dark-purple text-3xl rounded-full\r\n          absolute -right-3 top-9 border border-dark-purpule cursor-pointer ${\r\n            !open && \"rotate-180 \"\r\n          }`}\r\n          onClick={() => setOpen(!open)}\r\n        />\r\n        <div className=\"inline-flex\">\r\n          <AiFillEnvironment\r\n            className={`bg-amber-300 text-4xl rounded cursor-pointer block float-left mr-2 duration-500 ${\r\n              open && \"rotate-[360deg]  \"\r\n            }`}\r\n          />\r\n          <h1\r\n            className={`text-white origin-left font-medium text-2xl duration-300 ${\r\n              !open && \"scale-0 \"\r\n            }`}\r\n          >\r\n            Customer page\r\n          </h1>\r\n        </div>\r\n        <div\r\n          className={`flex items-center rounded-md bg-gray-500  mt-6 ${\r\n            !open ? \"px-2.5\" : \"px-4 \"\r\n          }  py-2 `}\r\n        >\r\n          <BsSearch\r\n            className={` text-white text-lg blco float-left cursor-pointer ${\r\n              open && \" mr-2\"\r\n            } `}\r\n          />\r\n          <input\r\n            type={\"search\"}\r\n            placeholder=\"search\"\r\n            className={`text-base bg-transparent w-full text-white focus:outline-none ${\r\n              !open && \"hidden\"\r\n            }`}\r\n          />\r\n        </div>\r\n        <ui className=\" \">\r\n          {Menus.map((menu, index) => (\r\n            <>\r\n              <li\r\n                key={index}\r\n                className={`text-gray-300 text-sm flex items-center gap-4 cursor-pointer p-2 hover:bg-white\r\n                   tooltip  dark:bg-gray-700 rounded-md  ${\r\n                     menu.spacing ? \"mt-9\" : \"mt-2\"\r\n                   }`}\r\n              >\r\n                {open && (\r\n                  <span className=\"text-2xl block float-left\">{menu.icon}</span>\r\n                )}\r\n\r\n                {!open && (\r\n                  <span\r\n                    className=\"text-2xl block float-left mb-4\"\r\n                    data-toggle=\"tooltip\"\r\n                    title={`${menu.title}`}\r\n                  >\r\n                    <Tooltips text={`${menu.title}`}>{menu.icon}</Tooltips>\r\n                  </span>\r\n                )}\r\n                <span\r\n                  className={`text-base font-medium flex-1 duration-200  ${\r\n                    !open && \"hidden\"\r\n                  }`}\r\n                >\r\n                  {menu.title}\r\n                  {/* <button>add company</button> */}\r\n                </span>\r\n                {menu.submenu && open && (\r\n                  <BsChevronDown\r\n                    className={`${subMenuOpen && \"rotate-180\"}`}\r\n                    onClick={() => setSubMenuOpen(!subMenuOpen)}\r\n                  />\r\n                )}\r\n              </li>\r\n              {menu.submenu && open && subMenuOpen && (\r\n                <ul>\r\n                  {menu.submenuItems.map((submenuItem, index) => (\r\n                    <li\r\n                      key={index}\r\n                      className=\"text-gray-300 text-sm flex items-center gap-4 cursor-pointer p-2 px-5 hover:bg-white rounded-md\"\r\n                    >\r\n                      {submenuItem.title}\r\n                    </li>\r\n                  ))}\r\n                </ul>\r\n              )}\r\n            </>\r\n          ))}\r\n        </ui>\r\n      </div>\r\n      {/* <div className=\"p-7\">\r\n        <h1>Customer 2</h1>\r\n      </div> */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CompanyNavigation;\r\n","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\Basic\\AddCompanyBasicInformation.jsx",["1017","1018","1019","1020","1021","1022","1023","1024","1025"],[],"import {\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  IconButton,\r\n} from \"@mui/material\";\r\nimport { BsPlus } from \"react-icons/bs\";\r\nimport CompanyModal from \"../Common/CompanyModal\";\r\nimport { useState } from \"react\";\r\nimport LoanTextField from \"../../Common/LoanTextField\";\r\nimport LoanIconButton from \"../../Common/LoanIconButton\";\r\nimport { IoRefresh } from \"react-icons/io5\";\r\nimport CommonServices from \"../Common/CommonServices\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { BiSkipNext, BiSkipPrevious } from \"react-icons/bi\";\r\n\r\nconst AddCompanyBasicInformation = ({\r\n  submitted,\r\n  newCompany,\r\n  company,\r\n  handleInputChange,\r\n  companyTypes,\r\n  entityTypes,\r\n  handleSkip,\r\n  saveCompany,\r\n  handleCompanyTypeChange,\r\n  companyTypeId,\r\n  onClick,\r\n  handlePrevios,\r\n}) => {\r\n  const [isCompanyModalOpen, setIsCompanyModalOpen] = useState(false);\r\n  const { companyId } = useParams();\r\n\r\n  function handleGeneralCloseModal() {\r\n    setIsCompanyModalOpen(false);\r\n  }\r\n  function handleGeneralOpenModal() {\r\n    setIsCompanyModalOpen(true);\r\n  }\r\n\r\n  const [selectedCompanyType, setSelectedCompanyType] = useState();\r\n\r\n  const onChangeSelectedCompanyType = (e) => {\r\n    setSelectedCompanyType(e.target.value);\r\n  };\r\n  //upload\r\n  const [selectedTIN, setSelectedTIN] = useState(null);\r\n  const [selectedVAT, setSelectedVAT] = useState(null);\r\n  const [selectedFiles, setSelectedFiles] = useState(undefined);\r\n  const [currentFile, setCurrentFile] = useState(undefined);\r\n  const [fileInfos, setFileInfos] = useState([]);\r\n  const [progress, setProgress] = useState(0);\r\n  const [message, setMessage] = useState(\"\");\r\n  const selectFile = (event) => {\r\n    setSelectedFiles(event.target.files);\r\n  };\r\n  //upload 1\r\n  const uploadTINCertificate = () => {\r\n    let currentFile = selectedFiles[0];\r\n    setProgress(0);\r\n    setCurrentFile(currentFile);\r\n    CommonServices.upload(currentFile, (event) => {\r\n      setProgress(Math.round((100 * event.loaded) / event.total));\r\n    })\r\n      .then((response) => {\r\n        setMessage(response.data.message);\r\n        setSelectedTIN(response.data.Result);\r\n      })\r\n      .then((files) => {\r\n        setFileInfos(files.data);\r\n      })\r\n      .catch(() => {\r\n        setProgress(0);\r\n        setCurrentFile(undefined);\r\n      });\r\n    setSelectedFiles(undefined);\r\n  };\r\n  //end upload\r\n  //upload 2\r\n  const uploadVatCertificate = () => {\r\n    let currentFile = selectedFiles[0];\r\n    setProgress(0);\r\n    setCurrentFile(currentFile);\r\n    CommonServices.upload(currentFile, (event) => {\r\n      setProgress(Math.round((100 * event.loaded) / event.total));\r\n    })\r\n      .then((response) => {\r\n        setMessage(response.data.message);\r\n        setSelectedVAT(response.data.Result);\r\n      })\r\n      .then((files) => {\r\n        setFileInfos(files.data);\r\n      })\r\n      .catch(() => {\r\n        setProgress(0);\r\n        setCurrentFile(undefined);\r\n      });\r\n    setSelectedFiles(undefined);\r\n  };\r\n  //endupload2\r\n  return (\r\n    <>\r\n      <div className=\"flex\">\r\n        <LoanIconButton\r\n          style={{ color: \"purple\" }}\r\n          icon={<BsPlus />}\r\n          text=\"Add\"\r\n          onClick={handleGeneralOpenModal}\r\n        />\r\n      </div>\r\n      <CompanyModal\r\n        isOpen={isCompanyModalOpen}\r\n        onClose={handleGeneralCloseModal}\r\n        title=\"Add company basic information\"\r\n      >\r\n        <div className=\"grid grid-cols-1 gap-4 submit-form\">\r\n          <div className=\"submit-form \">\r\n            <div\r\n              className=\"relative center justify-center\r\nflex-1 w-full max-w-full grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\"\r\n            >\r\n              <LoanTextField\r\n                id=\"Name\"\r\n                label=\"Name\"\r\n                value={company.Name}\r\n                onChange={handleInputChange}\r\n                name=\"Name\"\r\n              />\r\n              <LoanTextField\r\n                id=\"NoOfBranch\"\r\n                label=\"Number Of Branch\"\r\n                value={company.NoOfBranch}\r\n                onChange={handleInputChange}\r\n                name=\"NoOfBranch\"\r\n              />\r\n              <LoanTextField\r\n                id=\"EstablishmentYear\"\r\n                label=\"Establishment Year\"\r\n                value={company.EstablishmentYear}\r\n                onChange={handleInputChange}\r\n                name=\"EstablishmentYear\"\r\n              />\r\n              <LoanTextField\r\n                id=\"TINNumber\"\r\n                label=\"TIN Number\"\r\n                value={company.TINNumber}\r\n                onChange={handleInputChange}\r\n                name=\"TINNumber\"\r\n              />\r\n              <div>\r\n                {currentFile && (\r\n                  <div className=\"progress\">\r\n                    <div\r\n                      className=\"progress-bar progress-bar-info progress-bar-striped\"\r\n                      role=\"progressbar\"\r\n                      aria-valuenow={progress}\r\n                      aria-valuemin=\"0\"\r\n                      aria-valuemax=\"100\"\r\n                      style={{ width: progress + \"%\" }}\r\n                    >\r\n                      {progress}%\r\n                    </div>\r\n                  </div>\r\n                )}\r\n                <label className=\"btn btn-default\">\r\n                  <input type=\"file\" onChange={selectFile} />\r\n                </label>\r\n                <button\r\n                  className=\"bg-gray-300 hover:bg-gray-400 text-gray-800 font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\"\r\n                  disabled={!selectedFiles}\r\n                  onChange={(company.TINCertificate = selectedTIN)}\r\n                  onClick={uploadTINCertificate}\r\n                >\r\n                  Upload TIN Certificate\r\n                </button>\r\n                <div className=\"alert alert-light\" role=\"alert\">\r\n                  {message}\r\n                </div>\r\n              </div>\r\n\r\n              {/* <LoanTextField\r\n                id=\"TINCertificate\"\r\n                label=\"TIN Certificate\"\r\n                value={company.TINCertificate}\r\n                onChange={handleInputChange}\r\n                name=\"TINCertificate\"\r\n              /> */}\r\n              <FormControl variant=\"standard\" sx={{ minWidth: 120 }}>\r\n                <InputLabel id=\"CompanyType\" color=\"secondary\">\r\n                  Company Type\r\n                </InputLabel>\r\n                <Select\r\n                  color=\"secondary\"\r\n                  onChange={(event) =>\r\n                    (company.CompanyTypeID = event.target.value)\r\n                  }\r\n                  labelId=\"CompanyType\"\r\n                  id=\"CompanyTypeSelect\"\r\n                  label=\"Company Type\"\r\n                >\r\n                  <MenuItem value=\"\">\r\n                    <em>None</em>\r\n                  </MenuItem>\r\n                  {companyTypes.map((company) => (\r\n                    <MenuItem key={company.Id} value={company.Id}>\r\n                      {company.Name}\r\n                    </MenuItem>\r\n                  ))}\r\n                </Select>\r\n              </FormControl>\r\n\r\n              <LoanTextField\r\n                id=\"VATNumber\"\r\n                label=\"VAT Number\"\r\n                value={company.VATNumber}\r\n                onChange={handleInputChange}\r\n                name=\"VATNumber\"\r\n              />\r\n              <div>\r\n                {currentFile && (\r\n                  <div className=\"progress\">\r\n                    <div\r\n                      className=\"progress-bar progress-bar-info progress-bar-striped\"\r\n                      role=\"progressbar\"\r\n                      aria-valuenow={progress}\r\n                      aria-valuemin=\"0\"\r\n                      aria-valuemax=\"100\"\r\n                      style={{ width: progress + \"%\" }}\r\n                    >\r\n                      {progress}%\r\n                    </div>\r\n                  </div>\r\n                )}\r\n                <label className=\"btn btn-default\">\r\n                  <input type=\"file\" onChange={selectFile} />\r\n                </label>\r\n                <button\r\n                  className=\"bg-gray-300 hover:bg-gray-400 text-gray-800 font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\"\r\n                  disabled={!selectedFiles}\r\n                  onChange={(company.VATCertificate = selectedVAT)}\r\n                  onClick={uploadVatCertificate}\r\n                >\r\n                  Upload VAT Certificate\r\n                </button>\r\n                <div className=\"alert alert-light\" role=\"alert\">\r\n                  {message}\r\n                </div>\r\n              </div>\r\n              {/* <LoanTextField\r\n                id=\"VATCertificate\"\r\n                label=\"VAT Certificate\"\r\n                value={company.VATCertificate}\r\n                onChange={handleInputChange}\r\n                name=\"VATCertificate\"\r\n              /> */}\r\n              <FormControl variant=\"standard\" sx={{ minWidth: 120 }}>\r\n                <InputLabel id=\"EntityTypelbl\" color=\"secondary\">\r\n                  {\" \"}\r\n                  Entity Type\r\n                </InputLabel>\r\n\r\n                <Select\r\n                  color=\"secondary\"\r\n                  onChange={(event) =>\r\n                    (company.EntityTypeID = event.target.value)\r\n                  }\r\n                  labelId=\"EntityTypelbl\"\r\n                  id=\"EntityTypeSelect\"\r\n                  label=\"Entity Type\"\r\n                >\r\n                  <MenuItem value=\"\">\r\n                    <em>None</em>\r\n                  </MenuItem>\r\n\r\n                  {entityTypes.map((entity) => (\r\n                    <MenuItem\r\n                      key={entity.Id}\r\n                      EntityTypeListID={entity.Id}\r\n                      value={entity.Id}\r\n                    >\r\n                      {entity.Name}\r\n                    </MenuItem>\r\n                  ))}\r\n                </Select>\r\n              </FormControl>\r\n            </div>\r\n          </div>\r\n          <div className=\"flex justify-between\">\r\n            <button\r\n              className=\"bg-gray-300 hover:bg-gray-400 text-gray-800 font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\"\r\n              onClick={handleSkip}\r\n            >\r\n              Skip\r\n            </button>\r\n\r\n            <button\r\n              className=\"bg-[purple] hover:bg-purple-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\"\r\n              onClick={() => {\r\n                saveCompany();\r\n              }}\r\n            >\r\n              Save\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </CompanyModal>\r\n    </>\r\n  );\r\n};\r\nexport default AddCompanyBasicInformation;\r\n","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\API\\Api.js",[],[],"C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Common\\LoanTextField.jsx",[],[],"C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Tooltip\\Tooltips.jsx",["1026"],[],"C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\Common\\CompanyModal.jsx",["1027","1028"],[],"C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\Employee\\ViewCompanyEmployees.jsx",["1029","1030","1031","1032","1033","1034","1035","1036"],[],"import AddCompanyEmployee from \"./AddCompanyEmployee\";\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\nimport { useNavigate, useParams } from \"react-router-dom\";\r\nimport CompanyNavigation from \"../../Common/CompanyNavigation\";\r\nimport { BiSkipNext } from \"react-icons/bi\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { MdModeEdit } from \"react-icons/md\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { FaSpinner } from \"react-icons/fa\";\r\nimport LoanIconButton from \"../../Common/LoanIconButton\";\r\nimport LoanTextField from \"../../Common/LoanTextField\";\r\nimport { IoTrashOutline } from \"react-icons/io5\";\r\nimport CompanyEmployeesService from \"./CompanyEmployeesService\";\r\nimport EditCompanyEmployee from \"./EditCompanyEmployee\";\r\nconst ViewCompanyEmployees = () => {\r\n  const { companyId } = useParams();\r\n  const navigate = useNavigate();\r\n  const [error, setError] = useState(null);\r\n  const [employees, setEmployees] = useState([]);\r\n  const [employeeErrorLoading, setEmployeeErrorLoading] = useState(false);\r\n  const [companyAddressId, setCompanyEmployeeId] = useState();\r\n  const [getEmployeeInformation, setGetEmployeeInformation] = useState([]);\r\n  const [employeeId, setEmployeeId] = useState();\r\n  const [\r\n    isCompanyEmployeeInformationEditModalOpen,\r\n    setIsCompanyEmployeeInformationEditModalOpen,\r\n  ] = useState(false);\r\n  const initialEmployeeState = {\r\n    Id: null,\r\n    BudgetYear: \"\",\r\n    PermanentEmployeeCount: \"\",\r\n    TemporaryEmployeeCount: \"\",\r\n    ContractEmployeeCount: \"\",\r\n  };\r\n  const [employee, setEmployee] = useState(initialEmployeeState);\r\n  const newEmployee = () => {\r\n    setEmployee(initialEmployeeState);\r\n  };\r\n  function handleCompanyEmployeeInformationEditOpenModal() {\r\n    setIsCompanyEmployeeInformationEditModalOpen(true);\r\n  }\r\n  function handleCompanyEmployeeInformationEditCloseModal() {\r\n    setIsCompanyEmployeeInformationEditModalOpen(false);\r\n  }\r\n  const handleInputChangeEmployee = (event) => {\r\n    const { name, value } = event.target;\r\n    setEmployee({ ...employee, [name]: value });\r\n  };\r\n  const handleDelete = (employeeId) => {\r\n    const confirm = window.confirm(`Are you sure you want to delete it?`);\r\n    if (confirm) {\r\n      CompanyEmployeesService.deleteEmployeeById(employeeId)\r\n        .then(() => {\r\n          setEmployees((previousData) =>\r\n            previousData.filter((emp) => emp.Id !== employeeId)\r\n          );\r\n          debugger;\r\n          getCompanyEmployees();\r\n          toast.success(\"Deleting\", {\r\n            position: toast.POSITION.TOP_RIGHT,\r\n            toastId: \"deleteEmployee\",\r\n          });\r\n        })\r\n        .catch((error) => {\r\n          // if(error.data.Code === 401)\r\n          //   setCompanyDeleteError(e);\r\n          //   setDeleteLoading(false);\r\n        });\r\n    }\r\n  };\r\n  const saveEmployee = (e) => {\r\n    e.preventDefault();\r\n    var data = {\r\n      BudgetYear: employee.BudgetYear,\r\n      PermanentEmployeeCount: employee.PermanentEmployeeCount,\r\n      TemporaryEmployeeCount: employee.TemporaryEmployeeCount,\r\n      ContractEmployeeCount: employee.ContractEmployeeCount,\r\n    };\r\n    CompanyEmployeesService.addEmployee(data, companyId)\r\n      .then((response) => {\r\n        setEmployee({\r\n          Id: response.data.Id,\r\n          BudgetYear: response.data.BudgetYear,\r\n          PermanentEmployeeCount: response.data.PermanentEmployeeCount,\r\n          TemporaryEmployeeCount: response.data.TemporaryEmployeeCount,\r\n          ContractEmployeeCount: response.data.ContractEmployeeCount,\r\n        });\r\n        if (response.data.Code === 200) {\r\n          getCompanyEmployees();\r\n          toast.success(\"Added successfully\", {\r\n            position: toast.POSITION.TOP_RIGHT,\r\n            toastId: \"addCompanyEmployee\",\r\n          });\r\n          newEmployee();\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        if (error.response.data.StatusCode === 404) {\r\n          setError(\"Employee not found\");\r\n          setEmployeeErrorLoading(false);\r\n        } else if (error.response.data.StatusCode === 400) {\r\n          setError(\"Something went wrong\");\r\n          setEmployeeErrorLoading(false);\r\n        } else if (error.response.data.StatusCode === 401) {\r\n          navigate(\"/login\");\r\n        } else if (error.response.data.StatusCode === 403) {\r\n          navigate(\"/login\");\r\n        }\r\n      });\r\n  };\r\n  const getCompanyEmployees = () => {\r\n    setEmployeeErrorLoading(true);\r\n    setTimeout(() => {\r\n      CompanyEmployeesService.getCompanyEmployeeInformation(companyId)\r\n        .then((response) => {\r\n          debugger;\r\n          if (\r\n            response.data.Code === 200 ||\r\n            response.data.Message === \"Success\"\r\n          ) {\r\n            setEmployees(response.data.Result);\r\n            setEmployeeErrorLoading(false);\r\n          } else {\r\n            setEmployeeErrorLoading(false);\r\n            setError(\"Something went wrong\");\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          if (error.response.data.StatusCode === 404) {\r\n            setError(\"Employee not found\");\r\n            setEmployeeErrorLoading(false);\r\n          } else if (error.response.data.StatusCode === 400) {\r\n            setError(\"Something went wrong\");\r\n            setEmployeeErrorLoading(false);\r\n          } else if (error.response.data.StatusCode === 401) {\r\n            navigate(\"/login\");\r\n          } else if (error.response.data.StatusCode === 403) {\r\n            navigate(\"/login\");\r\n          }\r\n        });\r\n    }, 1000);\r\n  };\r\n  useEffect(() => {\r\n    getCompanyEmployees();\r\n  }, []);\r\n  const [editEmployeeInfo, setEditEmployeeInfo] = useState({\r\n    Id: employeeId,\r\n    BudgetYear: \"\",\r\n    PermanentEmployeeCount: \"\",\r\n    TemporaryEmployeeCount: \"\",\r\n    ContractEmployeeCount: \"\",\r\n  });\r\n  const getEmployeeInformationBy = (employeeId) => {\r\n    CompanyEmployeesService.getEmployeeInformationById(employeeId)\r\n      .then((res) => {\r\n        setEditEmployeeInfo({\r\n          ...editEmployeeInfo,\r\n          Id: employeeId,\r\n          BudgetYear: res.data.Result.BudgetYear,\r\n          PermanentEmployeeCount: res.data.Result.PermanentEmployeeCount,\r\n          TemporaryEmployeeCount: res.data.Result.TemporaryEmployeeCount,\r\n          ContractEmployeeCount: res.data.Result.ContractEmployeeCount,\r\n        });\r\n      })\r\n      .catch((err) => console.log(err));\r\n  };\r\n  const updateCompanyEmployeeInformationById = (e) => {\r\n    e.preventDefault();\r\n    CompanyEmployeesService.updateCompanyEmployeeInformation(\r\n      employeeId,\r\n      editEmployeeInfo\r\n    )\r\n      .then((response) => {\r\n        if (response.data.Code === 200) {\r\n          getCompanyEmployees();\r\n          toast.success(\"Added successfully\", {\r\n            position: toast.POSITION.TOP_RIGHT,\r\n            toastId: \"updateCompanyEmployeeSuccess\",\r\n          });\r\n        }\r\n      })\r\n      .catch(() => {\r\n        toast.error(\"Something went wrong\", {\r\n          position: toast.POSITION.TOP_RIGHT,\r\n          toastId: \"updateCompanyEmployeeError\",\r\n        });\r\n      });\r\n  };\r\n  return (\r\n    <div className=\"flex\">\r\n      <CompanyNavigation />\r\n      <div className=\"px-4 py-3\">\r\n        <div className=\"flex flex-wrap\">\r\n          <div className=\"w-full\">\r\n            <div>\r\n              <h4 className=\"text-lg font-semibold eading-tight p-2\">\r\n                Company Employees\r\n              </h4>\r\n              <AddCompanyEmployee\r\n                employee={employee}\r\n                handleInputChangeEmployee={handleInputChangeEmployee}\r\n                //   handleBack,\r\n                saveEmployee={saveEmployee}\r\n                //   handleSkip,\r\n              />\r\n              <ToastContainer />\r\n              <EditCompanyEmployee\r\n                isCompanyEmployeeInformationEditModalOpen={\r\n                  isCompanyEmployeeInformationEditModalOpen\r\n                }\r\n                handleCompanyEmployeeInformationEditCloseModal={\r\n                  handleCompanyEmployeeInformationEditCloseModal\r\n                }\r\n                updateCompanyEmployeeInformationById={\r\n                  updateCompanyEmployeeInformationById\r\n                }\r\n                setEditEmployeeInfo={setEditEmployeeInfo}\r\n                editEmployeeInfo={editEmployeeInfo}\r\n              />\r\n              {error && <p className=\"text-red-500\">{error}</p>}\r\n              {!error && employeeErrorLoading ? (\r\n                <span>\r\n                  <FaSpinner\r\n                    className=\"animate-spin rounded-full h-6 w-6 text-purple-600\"\r\n                    fontSize=\"small\"\r\n                    data-toggle=\"tooltip\"\r\n                    title=\"Click it to sign in\"\r\n                  />\r\n                  Loading...\r\n                </span>\r\n              ) : (\r\n                !error &&\r\n                !employeeErrorLoading && (\r\n                  <table className=\"table table-bordered table-striped bg-purple-100\">\r\n                    <thead>\r\n                      <tr className=\"bg-purple-200 \">\r\n                        <th className=\"px-2 py-4\"> Id </th>\r\n                        <th className=\"px-2 py-4\"> Budget Year </th>\r\n                        <th className=\"px-2 py-4\">Permanent Employee</th>\r\n                        <th className=\"px-2 py-4\"> Temporary Employee </th>\r\n                        <th className=\"px-2 py-4\"> Contract Employee </th>\r\n                        <th className=\"px-2 py-4\"> Action </th>\r\n                      </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                      {employees.length === 0 ? (\r\n                        <p className=\"text-red-600 p-4\">Data not found</p>\r\n                      ) : (\r\n                        employees.map((emp, index) => (\r\n                          <>\r\n                            <tr\r\n                              className=\"bg-white\r\n                    border-b border-purple-200\"\r\n                              key={emp.Id}\r\n                            >\r\n                              <td className=\"p-2\">{index + 1}</td>\r\n                              <td className=\"p-2\">{emp.BudgetYear}</td>\r\n                              <td className=\"p-2\">\r\n                                {emp.PermanentEmployeeCount}\r\n                              </td>\r\n                              <td className=\"p-2\">\r\n                                {emp.TemporaryEmployeeCount}\r\n                              </td>\r\n                              <td className=\"p-2\">\r\n                                {emp.ContractEmployeeCount}\r\n                              </td>\r\n                              <td className=\"p-2\">\r\n                                <LoanIconButton\r\n                                  style={{ color: \"green\" }}\r\n                                  icon={<MdModeEdit />}\r\n                                  text=\"Edit\"\r\n                                  onClick={() => {\r\n                                    handleCompanyEmployeeInformationEditOpenModal();\r\n                                    setEmployeeId(emp.Id);\r\n                                    getEmployeeInformationBy(emp.Id);\r\n                                  }}\r\n                                />\r\n                                <>\r\n                                  <LoanIconButton\r\n                                    style={{ color: \"red\" }}\r\n                                    icon={<IoTrashOutline />}\r\n                                    text=\"Delete\"\r\n                                    onClick={() => {\r\n                                      handleDelete(emp.Id);\r\n                                    }}\r\n                                  >\r\n                                    <ToastContainer />\r\n                                  </LoanIconButton>\r\n                                </>\r\n                              </td>\r\n                            </tr>\r\n                          </>\r\n                        ))\r\n                      )}\r\n                    </tbody>\r\n                  </table>\r\n                )\r\n              )}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ViewCompanyEmployees;\r\n","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\SoleAndPartnership\\ViewSoleAndPartnership.jsx",["1037","1038","1039","1040","1041","1042","1043","1044","1045","1046"],[],"import CompanyNavigation from \"../../Common/CompanyNavigation\";\r\nimport SoleAndPartnershipService from \"./SoleAndPartnershipService\";\r\nimport { useParams, useNavigate } from \"react-router-dom\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { FaSpinner } from \"react-icons/fa\";\r\nimport AddSoleAndPartnership from \"./AddSoleAndPartnership\";\r\nimport CommonServices from \"../Common/CommonServices\";\r\nimport ViewMaritalStatus from \"./MaritalStatus/ViewMaritalStatus\";\r\nimport ViewUnMarriedStatus from \"./MaritalStatus/ViewUnMarriedStatus\";\r\nimport ViewWidowedStatus from \"./MaritalStatus/ViewWidowedStatus\";\r\nimport ViewDivorcedStatus from \"./MaritalStatus/ViewDivorcedStatus\";\r\nimport ViewSoleTax from \"./SoleTax/ViewSoleTax\";\r\nimport EditSole from \"./EditSole\";\r\nimport ViewSoleDependent from \"./dependent/ViewSoleDependent\";\r\nimport ViewSoleGuarantor from \"./guarantor/ViewSoleGuarantor\";\r\nimport ViewSoleOtherBank from \"./OtherBank/OtherBank\";\r\nimport { BiSkipNext } from \"react-icons/bi\";\r\nimport { MdModeEdit } from \"react-icons/md\";\r\nimport LoanIconButton from \"../../Common/LoanIconButton\";\r\nconst ViewSoleAndPartnership = () => {\r\n  const { companyId } = useParams();\r\n  const navigate = useNavigate();\r\n  const [error, setError] = useState(null);\r\n  const [country, setContry] = useState([]);\r\n  const [editSoleId, setEditSoleId] = useState([]);\r\n  const [taxId, setTaxId] = useState([]);\r\n  const [maritalStatus, setMaritalStatus] = useState([]);\r\n  const [proofOfIdentityType, setProofOfIdentityType] = useState([]);\r\n  const [martailStatus, setMartailStatus] = useState();\r\n  const [martailStatusHold, setMartailStatusHold] = useState();\r\n  const [soleAndPartnershipErrorLoading, setSoleAndPartnershipErrorLoading] =\r\n    useState(false);\r\n  const [martialStatusIdInformationId, setMartialStatusIdInformationId] =\r\n    useState();\r\n  const [\r\n    getSoleAndPartinershipInformation,\r\n    setGetSoleAndPartinershipInformation,\r\n  ] = useState([]);\r\n  const getCompanySoleAndPartinershipInformationById = () => {\r\n    setSoleAndPartnershipErrorLoading(true);\r\n    setTimeout(() => {\r\n      SoleAndPartnershipService.getCompanySoleAndPartinershipInformation(\r\n        companyId\r\n      )\r\n        .then((response) => {\r\n          if (\r\n            response.data.Code === 200 ||\r\n            response.data.Message === \"Success\"\r\n          ) {\r\n            setGetSoleAndPartinershipInformation(response.data.Result);\r\n            setSoleAndPartnershipErrorLoading(false);\r\n          } else {\r\n            setSoleAndPartnershipErrorLoading(false);\r\n            setError(\"Something went wrong\");\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          if (error.response.data.StatusCode === 404) {\r\n            setError(\"Sole and Partnership not found\");\r\n            setSoleAndPartnershipErrorLoading(false);\r\n          } else if (error.response.data.StatusCode === 400) {\r\n            setError(\"Something went wrong\");\r\n            setSoleAndPartnershipErrorLoading(false);\r\n          } else if (error.response.data.StatusCode === 401) {\r\n            navigate(\"/login\");\r\n          } else if (error.response.data.StatusCode === 403) {\r\n            navigate(\"/login\");\r\n          }\r\n        });\r\n    }, 1000);\r\n  };\r\n  useEffect(() => {\r\n    getCompanySoleAndPartinershipInformationById();\r\n  }, []);\r\n  const [selectedPathIdentity, setSelectedPathIdentity] = useState(null);\r\n  const initialSoleAndPartnershipState = {\r\n    Id: null,\r\n    CompanyID: companyId,\r\n    GuarantorId: \"\",\r\n    TaxClearanceID: \"\",\r\n    FirstName: \"\",\r\n    MiddleName: \"\",\r\n    LastName: \"\",\r\n    NationalityID: \"\",\r\n    CountryOfOriginID: \"\",\r\n    CountryOfResidenceID: \"\",\r\n    ProofOfIdentityTypeID: \"\",\r\n    UploadProofOfIdentity: \"\",\r\n    ProofOfIdentityIssuedDate: \"\",\r\n    ProofOfIdentityExpiredDate: \"\",\r\n    ProofOfIdentityTypeId: \"\",\r\n    // UploadTradeLicense: \"\",\r\n  };\r\n  const [soleAndPartnership, setSoleAndPartnership] = useState(\r\n    initialSoleAndPartnershipState\r\n  );\r\n  const handleInputChangeSoleAndPartnership = (event) => {\r\n    const { name, value } = event.target;\r\n    setSoleAndPartnership({ ...soleAndPartnership, [name]: value });\r\n  };\r\n  const saveSoleAndPartnership = (e) => {\r\n    e.preventDefault();\r\n    var data = {\r\n      TaxClearanceID: null,\r\n      CompanyID: soleAndPartnership.CompanyID,\r\n      GuarantorId: null,\r\n      FirstName: soleAndPartnership.FirstName,\r\n      MiddleName: soleAndPartnership.MiddleName,\r\n      LastName: soleAndPartnership.LastName,\r\n      NationalityID: soleAndPartnership.NationalityID,\r\n      CountryOfOriginID: soleAndPartnership.CountryOfOriginID,\r\n      CountryOfResidenceID: soleAndPartnership.CountryOfResidenceID,\r\n      ProofOfIdentityTypeID: soleAndPartnership.ProofOfIdentityTypeID,\r\n      UploadProofOfIdentity: selectedPathIdentity,\r\n      ProofOfIdentityIssuedDate: soleAndPartnership.ProofOfIdentityIssuedDate,\r\n      ProofOfIdentityExpiredDate: soleAndPartnership.ProofOfIdentityExpiredDate,\r\n      MartailStatusTypeId: soleAndPartnership.MartailStatusTypeId,\r\n    };\r\n    SoleAndPartnershipService.addSoleAndPartnership(data, companyId)\r\n      .then((response) => {\r\n        setSoleAndPartnership({\r\n          Id: response.data.Id,\r\n          TaxClearanceID: response.data.TaxClearanceID,\r\n          CompanyID: companyId,\r\n          GuarantorId: response.data.GuarantorId,\r\n          FirstName: response.data.FirstName,\r\n          MiddleName: response.data.MiddleName,\r\n          LastName: response.data.LastName,\r\n          NationalityID: response.data.NationalityID,\r\n          CountryOfOriginID: response.data.CountryOfOriginID,\r\n          CountryOfResidenceID: response.data.CountryOfResidenceID,\r\n          ProofOfIdentityTypeID: response.data.ProofOfIdentityTypeID,\r\n          UploadProofOfIdentity: response.data.UploadProofOfIdentity,\r\n          ProofOfIdentityIssuedDate: response.data.ProofOfIdentityIssuedDate,\r\n          ProofOfIdentityExpiredDate: response.data.ProofOfIdentityExpiredDate,\r\n          MartailStatusTypeId: response.data.MartailStatusTypeId,\r\n        });\r\n        setMartailStatus(response.data.Message);\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n  const fetchContry = () => {\r\n    CommonServices.getCountry()\r\n      .then((response) => {\r\n        setContry(response.data.Result);\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n  useEffect(() => {\r\n    fetchContry();\r\n  }, []);\r\n  const fetchProofOfIdentityType = () => {\r\n    CommonServices.getProofOfIdentityTypes()\r\n      .then((response) => {\r\n        setProofOfIdentityType(response.data.Result);\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n  useEffect(() => {\r\n    fetchProofOfIdentityType();\r\n  }, []);\r\n  const fetchMaritalStatus = () => {\r\n    CommonServices.getMaritalStatus()\r\n      .then((response) => {\r\n        setMaritalStatus(response.data.Result);\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n  useEffect(() => {\r\n    fetchMaritalStatus();\r\n  }, []);\r\n  const [isCompanyMartailStatusModalOpen, setIsCompanyMartailStatusModalOpen] =\r\n    useState(false);\r\n  const [\r\n    isCompanyMartailStatusUnmarriedModalOpen,\r\n    setIsCompanyMartailStatusUnmarriedModalOpen,\r\n  ] = useState(false);\r\n  const [\r\n    isCompanyMartailStatusWidowedModalOpen,\r\n    setIsCompanyMartailStatusWidowedModalOpen,\r\n  ] = useState(false);\r\n  const [\r\n    isCompanyMartailStatusDivorcedModalOpen,\r\n    setIsCompanyMartailStatusDivorcedModalOpen,\r\n  ] = useState(false);\r\n  function handleCompanyMartailStatusOpenModal() {\r\n    setIsCompanyMartailStatusModalOpen(true);\r\n  }\r\n  function handleCompanyMartailStatusUnmarriedOpenModal() {\r\n    setIsCompanyMartailStatusUnmarriedModalOpen(true);\r\n  }\r\n  function handleCompanyMartailStatusUnmarriedCloseModal() {\r\n    setIsCompanyMartailStatusUnmarriedModalOpen(false);\r\n  }\r\n  function handleCompanyMartailStatusWidowedOpenModal() {\r\n    setIsCompanyMartailStatusWidowedModalOpen(true);\r\n  }\r\n  function handleCompanyMartailStatusWidowedCloseModal() {\r\n    setIsCompanyMartailStatusWidowedModalOpen(false);\r\n  }\r\n  function handleCompanyMartailStatusDivorcedOpenModal() {\r\n    setIsCompanyMartailStatusDivorcedModalOpen(true);\r\n  }\r\n  function handleCompanyMartailStatusDivorcedCloseModal() {\r\n    setIsCompanyMartailStatusDivorcedModalOpen(false);\r\n  }\r\n  function handleGeneralCloseModal() {\r\n    isCompanyMartailStatusModalOpen(false);\r\n  }\r\n  function handleCompanyMartailStatusCloseModal() {\r\n    setIsCompanyMartailStatusModalOpen(false);\r\n  }\r\n  //tax\r\n  const [isCompanyTaxModalOpen, setIsCompanyTaxModalOpen] = useState(false);\r\n  function handleCompanyTaxOpenModal() {\r\n    setIsCompanyTaxModalOpen(true);\r\n  }\r\n  function handleCompanyTaxCloseModal() {\r\n    setIsCompanyTaxModalOpen(false);\r\n  }\r\n  //end tax\r\n  //edit sole\r\n  const [isCompanySoleEditModalOpen, setIsCompanySoleEditModalOpen] =\r\n    useState(false);\r\n  function handleCompanySoleEditOpenModal() {\r\n    setIsCompanySoleEditModalOpen(true);\r\n  }\r\n  function handleCompanySoleEditCloseModal() {\r\n    setIsCompanySoleEditModalOpen(false);\r\n  }\r\n  //end sole\r\n  //dependent\r\n  const [isCompanySoleDependentModalOpen, setIsCompanySoleDependentModalOpen] =\r\n    useState(false);\r\n  function handleCompanySoleDependentOpenModal() {\r\n    setIsCompanySoleDependentModalOpen(true);\r\n  }\r\n  function handleCompanySoleDependentCloseModal() {\r\n    setIsCompanySoleDependentModalOpen(false);\r\n  }\r\n  const [holdSoleDependent, setHoldSoleDependent] = useState([]);\r\n  //end dependent\r\n  //gaurantor\r\n  const [isCompanySoleGuarantorModalOpen, setIsCompanySoleGuarantorModalOpen] =\r\n    useState(false);\r\n  function handleCompanySoleGuarantorOpenModal() {\r\n    setIsCompanySoleGuarantorModalOpen(true);\r\n  }\r\n  function handleCompanySoleGuarantorCloseModal() {\r\n    setIsCompanySoleGuarantorModalOpen(false);\r\n  }\r\n  const [holdSoleGuarantor, setHoldSoleGuarantor] = useState([]);\r\n  debugger;\r\n  //end guarntor\r\n  //other bank\r\n  const [isCompanySoleOtherBankModalOpen, setIsCompanySoleOtherBankModalOpen] =\r\n    useState(false);\r\n  function handleCompanySoleOtherBankOpenModal() {\r\n    setIsCompanySoleOtherBankModalOpen(true);\r\n  }\r\n  function handleCompanySoleOtherBankCloseModal() {\r\n    setIsCompanySoleOtherBankModalOpen(false);\r\n  }\r\n  const [holdSoleOtherBankCredit, setHoldSoleOtherBankCredit] = useState([]);\r\n  //end other bank\r\n  const [holdMarried, setMarried] = useState([]);\r\n  const [holdUnMarried, setUnMarried] = useState([]);\r\n  const [holdWidowed, setWidowed] = useState([]);\r\n  const [holdDivorced, setDivorced] = useState([]);\r\n  const [holdSoleTax, setHoldSoleTax] = useState([]);\r\n  const getsoleMarriedMatialStatus = (soleAndPartnershipId) => {\r\n    CommonServices.getMartialStatusBySoleMarriedId(soleAndPartnershipId)\r\n      .then((response) => {\r\n        setMarried(response.data.Result);\r\n        console.log(response.data.Result);\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n  const getsoleUnMarriedMatialStatus = (soleAndPartnershipId) => {\r\n    CommonServices.getUnMartialStatusBySoleMarriedId(soleAndPartnershipId)\r\n      .then((response) => {\r\n        setUnMarried(response.data.Result);\r\n        console.log(response.data.Result);\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n  const getsoleWidowedMatialStatus = (soleAndPartnershipId) => {\r\n    CommonServices.getWidowedStatusBySoleMarriedId(soleAndPartnershipId)\r\n      .then((response) => {\r\n        setWidowed(response.data.Result);\r\n        console.log(response.data.Result);\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n  const getsoleDivorcedMatialStatus = (soleAndPartnershipId) => {\r\n    CommonServices.getDivorcedStatusBySoleMarriedId(soleAndPartnershipId)\r\n      .then((response) => {\r\n        debugger;\r\n        setDivorced(response.data.Result);\r\n        console.log(response.data.Result);\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n  const fetchMartialStatus = (martailStatus) => {\r\n    if (martailStatus == \"Married\") {\r\n      handleCompanyMartailStatusOpenModal();\r\n    } else if (martailStatus == \"unMarried\") {\r\n      handleCompanyMartailStatusUnmarriedOpenModal();\r\n    } else if (martailStatus == \"widowed\") {\r\n      handleCompanyMartailStatusWidowedOpenModal();\r\n    } else if (martailStatus == \"divorced\") {\r\n      handleCompanyMartailStatusDivorcedOpenModal();\r\n    } else {\r\n      console.log(\"please select martial status\");\r\n    }\r\n  };\r\n  const getsoleTax = (soleAndPartnershipId) => {\r\n    CommonServices.getSoleTax(soleAndPartnershipId)\r\n      .then((response) => {\r\n        debugger;\r\n        setHoldSoleTax(response.data.Result);\r\n        console.log(response.data.Result);\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n  const getsoleDependent = (soleAndPartnershipId) => {\r\n    CommonServices.getSoleDependent(soleAndPartnershipId)\r\n      .then((response) => {\r\n        setHoldSoleDependent(response.data.Result);\r\n        console.log(response.data.Result);\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n  const getOtherBankCredit = (soleAndPartnershipId) => {\r\n    CommonServices.getOtherBankCreditExposure(soleAndPartnershipId)\r\n      .then((response) => {\r\n        setHoldSoleOtherBankCredit(response.data.Result);\r\n        console.log(response.data.Result);\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n  const getSoleGuarantor = (soleAndPartnershipId) => {\r\n    CommonServices.getSoleGuarantorBySoleId(soleAndPartnershipId)\r\n      .then((response) => {\r\n        setHoldSoleGuarantor(response.data.Result);\r\n        console.log(response.data.Result.Name);\r\n        console.log(response.data.Result.TaxClerance.Name);\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n  useEffect(() => {\r\n    getSoleGuarantor();\r\n  }, []);\r\n  //sole edit\r\n  const [editSole, setEditSole] = useState({\r\n    Id: editSoleId,\r\n    FirstName: \"\",\r\n    MiddleName: \"\",\r\n    LastName: \"\",\r\n    NationalityId: \"\",\r\n    CountryOfOriginId: \"\",\r\n    CountryOfResidenceId: \"\",\r\n    ProofOfIdentityTypeId: \"\",\r\n    UploadProofOfIdentity: \"\",\r\n    ProofOfIdentityIssuedDate: \"\",\r\n    ProofOfIdentityExpiredDate: \"\",\r\n    MartailStatusTypeId: \"\",\r\n  });\r\n  const getSoleById = (editSoleId) => {\r\n    SoleAndPartnershipService.getSole(editSoleId)\r\n      .then((res) => {\r\n        setEditSole({\r\n          ...editSole,\r\n          Id: editSoleId,\r\n          FirstName: res.data.Result.FirstName,\r\n          MiddleName: res.data.Result.MiddleName,\r\n          LastName: res.data.Result.LastName,\r\n          NationalityId: res.data.Result.NationalityId,\r\n          CountryOfOriginId: res.data.Result.CountryOfOriginId,\r\n          CountryOfResidenceId: res.data.Result.CountryOfResidenceId,\r\n          ProofOfIdentityTypeId: res.data.Result.ProofOfIdentityTypeId,\r\n          UploadProofOfIdentity: res.data.Result.UploadProofOfIdentity,\r\n          ProofOfIdentityIssuedDate: res.data.Result.ProofOfIdentityIssuedDate,\r\n          ProofOfIdentityExpiredDate:\r\n            res.data.Result.ProofOfIdentityExpiredDate,\r\n          MartailStatusTypeId: res.data.Result.MartailStatusTypeId,\r\n        });\r\n      })\r\n      .catch((err) => console.log(err));\r\n  };\r\n  useEffect(() => {\r\n    getSoleById();\r\n  }, []);\r\n  //end sole edit\r\n  return (\r\n    <div className=\"flex\">\r\n      <CompanyNavigation />\r\n      <div className=\"px-4 py-3\">\r\n        <div className=\"flex flex-wrap\">\r\n          <div className=\"w-full\">\r\n            <div>\r\n              <h4 className=\"text-lg font-semibold eading-tight p-2\">\r\n                Sole Or partnership\r\n              </h4>\r\n              <AddSoleAndPartnership\r\n                saveSoleAndPartnership={saveSoleAndPartnership}\r\n                soleAndPartnership={soleAndPartnership}\r\n                handleInputChangeSoleAndPartnership={\r\n                  handleInputChangeSoleAndPartnership\r\n                }\r\n                setSelectedPathIdentity={setSelectedPathIdentity}\r\n                country={country}\r\n                proofOfIdentityType={proofOfIdentityType}\r\n                setMartailStatusHold={setMartailStatusHold}\r\n                maritalStatus={maritalStatus}\r\n              />\r\n              <ViewMaritalStatus\r\n                holdMarried={holdMarried}\r\n                isCompanyMartailStatusModalOpen={\r\n                  isCompanyMartailStatusModalOpen\r\n                }\r\n                handleCompanyMartailStatusCloseModal={\r\n                  handleCompanyMartailStatusCloseModal\r\n                }\r\n                handleMaritalStatusModalOpen={\r\n                  handleCompanyMartailStatusOpenModal\r\n                }\r\n                SoleId={martialStatusIdInformationId}\r\n              />\r\n              <ViewUnMarriedStatus\r\n                holdUnMarried={holdUnMarried}\r\n                isCompanyMartailStatusUnmarriedModalOpen={\r\n                  isCompanyMartailStatusUnmarriedModalOpen\r\n                }\r\n                handleCompanyMartailStatusUnmarriedCloseModal={\r\n                  handleCompanyMartailStatusUnmarriedCloseModal\r\n                }\r\n                handleCompanyMartailStatusUnmarriedOpenModal={\r\n                  handleCompanyMartailStatusUnmarriedOpenModal\r\n                }\r\n                SoleId={martialStatusIdInformationId}\r\n              />\r\n              <ViewWidowedStatus\r\n                holdWidowed={holdWidowed}\r\n                isCompanyMartailStatusWidowedModalOpen={\r\n                  isCompanyMartailStatusWidowedModalOpen\r\n                }\r\n                handleCompanyMartailStatusWidowedCloseModal={\r\n                  handleCompanyMartailStatusWidowedCloseModal\r\n                }\r\n                handleCompanyMartailStatusWidowedOpenModal={\r\n                  handleCompanyMartailStatusWidowedOpenModal\r\n                }\r\n                SoleId={martialStatusIdInformationId}\r\n              />\r\n              <ViewDivorcedStatus\r\n                holdDivorced={holdDivorced}\r\n                isCompanyMartailStatusDivorcedModalOpen={\r\n                  isCompanyMartailStatusDivorcedModalOpen\r\n                }\r\n                handleCompanyMartailStatusDivorcedCloseModal={\r\n                  handleCompanyMartailStatusDivorcedCloseModal\r\n                }\r\n                handleCompanyMartailStatusDivorcedOpenModal={\r\n                  handleCompanyMartailStatusDivorcedOpenModal\r\n                }\r\n                SoleId={martialStatusIdInformationId}\r\n              />\r\n              <ViewSoleTax\r\n                holdSoleTax={holdSoleTax}\r\n                isCompanyTaxModalOpen={isCompanyTaxModalOpen}\r\n                handleCompanyTaxCloseModal={handleCompanyTaxCloseModal}\r\n                handleCompanyTaxOpenModal={handleCompanyTaxOpenModal}\r\n                taxId={taxId}\r\n              />\r\n              <EditSole\r\n                // setSelectedPathIdentity={setSelectedPathIdentity}\r\n                editSole={editSole}\r\n                editSoleId={editSole.Id}\r\n                setEditSole={setEditSole}\r\n                isCompanySoleEditModalOpen={isCompanySoleEditModalOpen}\r\n                handleCompanySoleEditCloseModal={\r\n                  handleCompanySoleEditCloseModal\r\n                }\r\n                handleCompanySoleEditOpenModal={handleCompanySoleEditOpenModal}\r\n              />\r\n              <ViewSoleDependent\r\n                holdSoleDependent={holdSoleDependent}\r\n                soleID={taxId}\r\n                isCompanySoleDependentModalOpen={\r\n                  isCompanySoleDependentModalOpen\r\n                }\r\n                handleCompanySoleDependentCloseModal={\r\n                  handleCompanySoleDependentCloseModal\r\n                }\r\n                handleCompanySoleDependentOpenModal={\r\n                  handleCompanySoleDependentOpenModal\r\n                }\r\n              />\r\n              <ViewSoleGuarantor\r\n                holdSoleGuarantor={holdSoleGuarantor}\r\n                soleID={taxId}\r\n                isCompanySoleGuarantorModalOpen={\r\n                  isCompanySoleGuarantorModalOpen\r\n                }\r\n                handleCompanySoleGuarantorCloseModal={\r\n                  handleCompanySoleGuarantorCloseModal\r\n                }\r\n                handleCompanySoleGuarantorOpenModal={\r\n                  handleCompanySoleGuarantorOpenModal\r\n                }\r\n              />\r\n              <ViewSoleOtherBank\r\n                isCompanySoleOtherBankModalOpen={\r\n                  isCompanySoleOtherBankModalOpen\r\n                }\r\n                handleCompanySoleOtherBankCloseModal={\r\n                  handleCompanySoleOtherBankCloseModal\r\n                }\r\n                handleCompanySoleOtherBankOpenModal={\r\n                  handleCompanySoleOtherBankOpenModal\r\n                }\r\n                getOtherBankCredit={holdSoleOtherBankCredit}\r\n                soleID={taxId}\r\n                companyId={companyId}\r\n              />\r\n              <div>\r\n                {error && <p className=\"text-red-500\">{error}</p>}\r\n                {!error && soleAndPartnershipErrorLoading ? (\r\n                  <span>\r\n                    <FaSpinner\r\n                      className=\"animate-spin rounded-full h-6 w-6 text-purple-600\"\r\n                      fontSize=\"small\"\r\n                      data-toggle=\"tooltip\"\r\n                      title=\"Click it to sign in\"\r\n                    />\r\n                    Loading...\r\n                  </span>\r\n                ) : (\r\n                  !error &&\r\n                  !soleAndPartnershipErrorLoading && (\r\n                    <div className=\"overflow-x-auto\">\r\n                      <table className=\"min-w-full table table-bordered table-striped bg-purple-100\">\r\n                        <thead>\r\n                          <tr className=\"bg-purple-200\">\r\n                            <th className=\"px-2 py-4\"> First Name </th>\r\n                            <th className=\"px-2 py-4\"> Middle Name </th>\r\n                            <th className=\"px-2 py-4\"> Last Name </th>\r\n                            <th className=\"px-2 py-4\"> Nationality </th>\r\n                            <th className=\"px-2 py-4\"> Origin Country</th>\r\n                            <th className=\"px-2 py-4\"> Residence Country </th>\r\n                            <th className=\"px-2 py-4\"> Identity Type</th>\r\n                            <th className=\"px-2 py-4\">Identity Issued Date</th>\r\n                            <th className=\"px-2 py-4\">Identity Expired Date</th>\r\n                            <th className=\"px-2 py-4\"> Marital Detail</th>\r\n                            <th className=\"px-2 py-4\"> Tax Clearance</th>\r\n                            <th className=\"px-2 py-4\"> Dependent</th>\r\n                            <th className=\"px-2 py-4\"> Grauntor</th>\r\n                            <th className=\"px-2 py-4\"> Other Bank</th>\r\n                            <th className=\"px-2 py-4\"> Action</th>\r\n                          </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                          {getSoleAndPartinershipInformation.length === 0 ? (\r\n                            <p className=\"text-red-600 p-4\">Data not found</p>\r\n                          ) : (\r\n                            getSoleAndPartinershipInformation.map(\r\n                              (sole, index) => (\r\n                                <tr\r\n                                  key={index}\r\n                                  className=\"bg-white\r\n                    border-b border-purple-200\"\r\n                                >\r\n                                  {/* <td>{sole.Id}</td> */}\r\n                                  <td>{sole.FirstName}</td>\r\n                                  <td>{sole.MiddleName}</td>\r\n                                  <td>{sole.LastName}</td>\r\n                                  <td>{sole.Nationality}</td>\r\n                                  <td>{sole.CountryOfOrigin}</td>\r\n                                  <td>{sole.CountryOfResidence}</td>\r\n                                  <td>{sole.ProofOfIdentityType}</td>\r\n                                  <td>{sole.ProofOfIdentityIssuedDate}</td>\r\n                                  <td>{sole.ProofOfIdentityExpiredDate}</td>\r\n                                  {/* <td>{sole.UploadProofOfIdentity}</td> */}\r\n                                  <td>\r\n                                    <LoanIconButton\r\n                                      style={{ color: \"green\" }}\r\n                                      // icon={<MdModeEdit />}\r\n                                      text=\" Marital Status Detail\"\r\n                                      onClick={() => {\r\n                                        getsoleMarriedMatialStatus(sole.Id);\r\n                                        getsoleUnMarriedMatialStatus(sole.Id);\r\n                                        getsoleWidowedMatialStatus(sole.Id);\r\n                                        getsoleDivorcedMatialStatus(sole.Id);\r\n                                        fetchMartialStatus(\r\n                                          sole.MartailStatusType\r\n                                        );\r\n                                        setMartialStatusIdInformationId(\r\n                                          sole.Id\r\n                                        );\r\n                                      }}\r\n                                    />\r\n                                  </td>\r\n                                  <td>\r\n                                    <LoanIconButton\r\n                                      style={{ color: \"green\" }}\r\n                                      // icon={<MdModeEdit />}\r\n                                      text=\" Tax Detail\"\r\n                                      onClick={() => {\r\n                                        handleCompanyTaxOpenModal();\r\n                                        getsoleTax(sole.Id);\r\n                                        setTaxId(sole.Id);\r\n                                      }}\r\n                                    />\r\n                                  </td>\r\n                                  <td>\r\n                                    <LoanIconButton\r\n                                      style={{ color: \"green\" }}\r\n                                      // icon={<MdModeEdit />}\r\n                                      text=\" Dependent Detail\"\r\n                                      onClick={() => {\r\n                                        handleCompanySoleDependentOpenModal();\r\n                                        getsoleDependent(sole.Id);\r\n                                        setTaxId(sole.Id);\r\n                                      }}\r\n                                    />\r\n                                  </td>\r\n                                  <td>\r\n                                    <LoanIconButton\r\n                                      style={{ color: \"green\" }}\r\n                                      // icon={<MdModeEdit />}\r\n                                      text=\" Guarantor Detail\"\r\n                                      onClick={() => {\r\n                                        handleCompanySoleGuarantorOpenModal();\r\n                                        getSoleGuarantor(sole.Id);\r\n                                        setTaxId(sole.Id);\r\n                                      }}\r\n                                    />\r\n                                  </td>\r\n                                  <td>\r\n                                    <LoanIconButton\r\n                                      style={{ color: \"green\" }}\r\n                                      // icon={<MdModeEdit />}\r\n                                      text=\" Other Bank Detail\"\r\n                                      onClick={() => {\r\n                                        handleCompanySoleOtherBankOpenModal();\r\n                                        getOtherBankCredit(sole.Id);\r\n                                        setTaxId(sole.Id);\r\n                                      }}\r\n                                    />\r\n                                  </td>\r\n                                  <td>\r\n                                    <LoanIconButton\r\n                                      style={{ color: \"green\" }}\r\n                                      icon={<MdModeEdit />}\r\n                                      text=\"Edit\"\r\n                                      onClick={() => {\r\n                                        handleCompanySoleEditOpenModal();\r\n                                        setEditSoleId(sole.Id);\r\n                                        getSoleById(sole.Id);\r\n                                      }}\r\n                                    />\r\n                                  </td>\r\n                                </tr>\r\n                              )\r\n                            )\r\n                          )}\r\n                        </tbody>\r\n                      </table>\r\n                    </div>\r\n                  )\r\n                )}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default ViewSoleAndPartnership;\r\n","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\SeniorManagementStaff\\ViewSeniorManagementStaff.jsx",["1047","1048"],[],"import { useState, useEffect } from \"react\";\r\nimport { useParams, useNavigate, Link } from \"react-router-dom\";\r\nimport { FaSpinner } from \"react-icons/fa\";\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\nimport LoanIconButton from \"../../Common/LoanIconButton\";\r\nimport { BiSkipNext } from \"react-icons/bi\";\r\nimport { MdModeEdit } from \"react-icons/md\";\r\nimport CompanySeniorManagementStaffService from \"./CompanySeniorManagementStaffService\";\r\nimport CompanyNavigation from \"../../Common/CompanyNavigation\";\r\nimport { IoTrashOutline } from \"react-icons/io5\";\r\nimport AddSeniorManagementStaff from \"./AddSeniorManagementStaff\";\r\nimport EditSeniorManagementStaff from \"./EditSeniorManagementStaff\";\r\nimport CommonServices from \"../Common/CommonServices\";\r\nconst ViewSeniorManagementStaff = () => {\r\n  const [selectedCVDocument, setSelectedCVDocument] = useState(null);\r\n  const [selectedWorkExperienceDocument, setSelectedWorkExperienceDocument] =\r\n    useState(null);\r\n  const { companyId } = useParams();\r\n  const navigate = useNavigate();\r\n  const [error, setError] = useState(null);\r\n  const [seniorManagementStaff, setSeniorManagementStaff] = useState([]);\r\n  const [\r\n    seniorManagementStaffErrorLoading,\r\n    setSeniorManagementStaffErrorLoading,\r\n  ] = useState(false);\r\n  const initialSeniorManagementStaffState = {\r\n    Id: null,\r\n    FullName: \"\",\r\n    TotalWorkExperience: \"\",\r\n    RelatedWorkExperience: \"\",\r\n    Position: \"\",\r\n    CVDocument: \"\",\r\n    WorkExperienceDocument: \"\",\r\n  };\r\n  const [seniorManagementStaffs, setSeniorManagementStaffs] = useState(\r\n    initialSeniorManagementStaffState\r\n  );\r\n  const [seniorManagementStaffId, setSeniorManagementStaffId] = useState();\r\n  const handleInputChange = (event) => {\r\n    const { name, value } = event.target;\r\n    setSeniorManagementStaffs({ ...seniorManagementStaffs, [name]: value });\r\n  };\r\n  const getSeniorManagementStaffs = () => {\r\n    setSeniorManagementStaffErrorLoading(true);\r\n    setTimeout(() => {\r\n      CompanySeniorManagementStaffService.getCompanySeniorManagementStaffInformation(\r\n        companyId\r\n      )\r\n        .then((response) => {\r\n          debugger;\r\n          if (\r\n            response.data.Code === 200 ||\r\n            response.data.Message === \"Success\"\r\n          ) {\r\n            setSeniorManagementStaff(response.data.Result);\r\n            setSeniorManagementStaffErrorLoading(false);\r\n          } else {\r\n            setSeniorManagementStaffErrorLoading(false);\r\n            setError(\"Something went wrong\");\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          if (error.response.data.StatusCode === 404) {\r\n            setError(\"Employee not found\");\r\n            setSeniorManagementStaffErrorLoading(false);\r\n          } else if (error.response.data.StatusCode === 400) {\r\n            setError(\"Something went wrong\");\r\n            setSeniorManagementStaffErrorLoading(false);\r\n          } else if (error.response.data.StatusCode === 401) {\r\n            navigate(\"/login\");\r\n          } else if (error.response.data.StatusCode === 403) {\r\n            navigate(\"/login\");\r\n          }\r\n        });\r\n    }, 1000);\r\n  };\r\n  useEffect(() => {\r\n    getSeniorManagementStaffs();\r\n  }, []);\r\n  const saveSeniorStaff = (e) => {\r\n    e.preventDefault();\r\n    var data = {\r\n      FullName: seniorManagementStaffs.FullName,\r\n      TotalWorkExperience: seniorManagementStaffs.TotalWorkExperience,\r\n      RelatedWorkExperience: seniorManagementStaffs.RelatedWorkExperience,\r\n      Position: seniorManagementStaffs.Position,\r\n      CVDocument: selectedCVDocument,\r\n      WorkExperienceDocument: selectedWorkExperienceDocument,\r\n    };\r\n    CompanySeniorManagementStaffService.addSeniorManagementStaff(\r\n      data,\r\n      companyId\r\n    )\r\n      .then((response) => {\r\n        setSeniorManagementStaff({\r\n          Id: response.data.Id,\r\n          FullName: response.data.FullName,\r\n          TotalWorkExperience: response.data.TotalWorkExperience,\r\n          RelatedWorkExperience: response.data.RelatedWorkExperience,\r\n          Position: response.data.Position,\r\n          CVDocument: response.data.CVDocument,\r\n          WorkExperienceDocument: response.data.WorkExperienceDocument,\r\n        });\r\n        if (response.data.Code === 200) {\r\n          setSeniorManagementStaff(initialSeniorManagementStaffState);\r\n          getSeniorManagementStaffs();\r\n          toast.success(\"Added successfully\", {\r\n            position: toast.POSITION.TOP_RIGHT,\r\n            toastId: \"addSeniorStaff\",\r\n          });\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n  };\r\n  const handleDelete = (staff) => {\r\n    const confirm = window.confirm(\r\n      `Are you sure you want to delete ${staff.FullName}?`\r\n    );\r\n    if (confirm) {\r\n      CompanySeniorManagementStaffService.deleteSeniorManagementStaff(staff.Id)\r\n        .then(() => {\r\n          setSeniorManagementStaff((previousData) =>\r\n            previousData.filter((comp) => comp.Id !== staff.Id)\r\n          );\r\n          toast.success(\"Deleting\", {\r\n            position: toast.POSITION.TOP_RIGHT,\r\n            toastId: \"deleteStaff\",\r\n          });\r\n        })\r\n        .catch((e) => {\r\n          //   setCompanyDeleteError(e);\r\n        });\r\n    }\r\n  };\r\n  const [\r\n    isSeniorManagementStaffEditModalOpen,\r\n    setIsSeniorManagementStaffEditModalOpen,\r\n  ] = useState(false);\r\n  function handleSeniorManagementStaffEditCloseModal() {\r\n    setIsSeniorManagementStaffEditModalOpen(false);\r\n  }\r\n  function handleSeniorManagementStaffEditOpenModal() {\r\n    setIsSeniorManagementStaffEditModalOpen(true);\r\n  }\r\n  const [editSeniorStaff, setEditSeniorStaff] = useState({\r\n    Id: seniorManagementStaffId,\r\n    FullName: \"\",\r\n    TotalWorkExperience: \"\",\r\n    RelatedWorkExperience: \"\",\r\n    Position: \"\",\r\n    CVDocument: \"\",\r\n    WorkExperienceDocument: \"\",\r\n  });\r\n  const getSelectedSeniorStaffInformation = (seniorManagementStaffId) => {\r\n    CompanySeniorManagementStaffService.getCompanySeniorManagementStaffInformationById(\r\n      seniorManagementStaffId\r\n    )\r\n      .then((res) => {\r\n        setEditSeniorStaff({\r\n          ...editSeniorStaff,\r\n          Id: seniorManagementStaffId,\r\n          FullName: res.data.Result.FullName,\r\n          TotalWorkExperience: res.data.Result.TotalWorkExperience,\r\n          RelatedWorkExperience: res.data.Result.RelatedWorkExperience,\r\n          Position: res.data.Result.Position,\r\n          CVDocument: res.data.Result.CVDocument,\r\n          WorkExperienceDocument: res.data.Result.WorkExperienceDocument,\r\n        });\r\n      })\r\n      .catch((err) => {\r\n        if (err.response.data.StatusCode === 404) {\r\n          console.log(err.response.data.Message);\r\n        }\r\n      });\r\n  };\r\n  const updateSeniorManagementStaffById = (e) => {\r\n    e.preventDefault();\r\n    CompanySeniorManagementStaffService.updateCompanySeniorManagementStaffInformationById(\r\n      seniorManagementStaffId,\r\n      editSeniorStaff\r\n    )\r\n      .then((response) => {\r\n        if (response.data.Code === 200) {\r\n          toast.success(\"Modified successfully\", {\r\n            position: toast.POSITION.TOP_RIGHT,\r\n            toastId: \"updateSeniorManagementStaffSuccess\",\r\n          });\r\n          getSeniorManagementStaffs();\r\n        }\r\n      })\r\n      .catch((e) => {\r\n        toast.error(\"Something went wrong\", {\r\n          position: toast.POSITION.TOP_RIGHT,\r\n          toastId: \"updateSeniorManagementStaffError\",\r\n        });\r\n      });\r\n  };\r\n  //tiztaw\r\n  const [companyType, setCompanyType] = useState(null);\r\n  const fetchCompany = () => {\r\n    CommonServices.getCompanyTypeFromAll(companyId)\r\n      .then((response) => {\r\n        setCompanyType(response.data.Result);\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n  useEffect(() => {\r\n    fetchCompany();\r\n  }, []);\r\n\r\n  const renderButton = () => {\r\n    let button;\r\n    if (companyType.EntityType === \"SOEs\") {\r\n      button = (\r\n        <Link to={`/enterprise/soe-and-governmental/${companyId}`}>\r\n          <LoanIconButton\r\n            style={{ color: \"purple\" }}\r\n            icon={<BiSkipNext />}\r\n            text=\"SOE or governmental\"\r\n          />\r\n        </Link>\r\n      );\r\n    } else if (\r\n      companyType.EntityType === \"Sole Proprietor\" ||\r\n      companyType.EntityType === \"Partnership\"\r\n    ) {\r\n      button = (\r\n        <Link to={`/enterprise/Sole-and-Partnership/${companyId}`}>\r\n          <LoanIconButton\r\n            style={{ color: \"purple\" }}\r\n            icon={<BiSkipNext />}\r\n            text=\"Sole Or Partnership\"\r\n          />\r\n        </Link>\r\n      );\r\n    } else if (\r\n      companyType.EntityType === \"Association\" ||\r\n      companyType.EntityType === \"Union\"\r\n    ) {\r\n      button = (\r\n        <Link to={`/enterprise/Union-and-Association/${companyId}`}>\r\n          <LoanIconButton\r\n            style={{ color: \"purple\" }}\r\n            icon={<BiSkipNext />}\r\n            text=\"Association or Union\"\r\n          />\r\n        </Link>\r\n      );\r\n    } else {\r\n      button = (\r\n        <Link to={`/enterprise/plc-and-share/${companyId}`}>\r\n          <LoanIconButton\r\n            style={{ color: \"purple\" }}\r\n            icon={<BiSkipNext />}\r\n            text=\"PLC\"\r\n          />\r\n        </Link>\r\n      );\r\n    }\r\n    return button;\r\n  };\r\n  //tiztaw\r\n  return (\r\n    <div className=\"flex\">\r\n      <CompanyNavigation />\r\n      <div className=\"px-4 py-3\">\r\n        <div className=\"flex flex-wrap\">\r\n          <div className=\"w-full\">\r\n            <div>\r\n              <h4 className=\"text-lg font-semibold eading-tight p-2\">\r\n                Senior management staff\r\n              </h4>\r\n              <AddSeniorManagementStaff\r\n                seniorManagementStaff={seniorManagementStaff}\r\n                handleInputChange={handleInputChange}\r\n                saveSeniorStaff={saveSeniorStaff}\r\n                setSelectedCVDocument={setSelectedCVDocument}\r\n                setSelectedWorkExperienceDocument={\r\n                  setSelectedWorkExperienceDocument\r\n                }\r\n              />\r\n              <ToastContainer />\r\n              <EditSeniorManagementStaff\r\n                isSeniorManagementStaffEditModalOpen={\r\n                  isSeniorManagementStaffEditModalOpen\r\n                }\r\n                handleSeniorManagementStaffEditCloseModal={\r\n                  handleSeniorManagementStaffEditCloseModal\r\n                }\r\n                editSeniorStaff={editSeniorStaff}\r\n                setEditSeniorStaff={setEditSeniorStaff}\r\n                updateSeniorManagementStaffById={\r\n                  updateSeniorManagementStaffById\r\n                }\r\n              />\r\n              {error && <p className=\"text-red-500\">{error}</p>}\r\n              {!error && seniorManagementStaffErrorLoading ? (\r\n                <span>\r\n                  <FaSpinner\r\n                    className=\"animate-spin rounded-full h-6 w-6 text-purple-600\"\r\n                    fontSize=\"small\"\r\n                    data-toggle=\"tooltip\"\r\n                    title=\"Click it to sign in\"\r\n                  />\r\n                  Loading...\r\n                </span>\r\n              ) : (\r\n                !error &&\r\n                !seniorManagementStaffErrorLoading && (\r\n                  <table className=\"border-purple-300 bg-white hover:bg-purple-300\">\r\n                    <thead className=\"bg-purple-100\">\r\n                      <tr className=\"border border-purple-300\">\r\n                        <th className=\"px-2 py-4\"> Full Name </th>\r\n                        <th className=\"px-2 py-4\">Total Work Experience</th>\r\n                        <th className=\"px-2 py-4\"> Related Work Experience </th>\r\n                        <th className=\"px-2 py-4\"> Position </th>\r\n                        <th className=\"px-2 py-4\"> CV Document </th>\r\n                        <th className=\"px-2 py-4\">Work Experience Document</th>\r\n                        <th className=\"px-2 py-4\"> Action </th>\r\n                      </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                      {seniorManagementStaff.length === 0 ? (\r\n                        <p className=\"text-red-600 p-4\">Data not found</p>\r\n                      ) : (\r\n                        seniorManagementStaff.map((staff, index) => (\r\n                          <>\r\n                            <tr\r\n                              className=\"bg-white\r\n                    border-b border-purple-200\"\r\n                              key={staff.Id}\r\n                            >\r\n                              <td className=\"p-2\">{staff.FullName}</td>\r\n                              <td className=\"p-2\">\r\n                                {staff.TotalWorkExperience}\r\n                              </td>\r\n                              <td className=\"p-2\">\r\n                                {staff.RelatedWorkExperience}\r\n                              </td>\r\n                              <td className=\"p-2\">{staff.Position}</td>\r\n                              <td className=\"p-2\">{staff.CVDocument}</td>\r\n                              <td className=\"p-2\">\r\n                                {staff.WorkExperienceDocument}\r\n                              </td>\r\n                              <td>\r\n                                <LoanIconButton\r\n                                  style={{ color: \"green\" }}\r\n                                  icon={<MdModeEdit />}\r\n                                  text=\"Edit\"\r\n                                  onClick={() => {\r\n                                    handleSeniorManagementStaffEditOpenModal();\r\n                                    getSelectedSeniorStaffInformation(staff.Id);\r\n                                    setSeniorManagementStaffId(staff.Id);\r\n                                  }}\r\n                                />\r\n                                <>\r\n                                  <LoanIconButton\r\n                                    style={{ color: \"red\" }}\r\n                                    icon={<IoTrashOutline />}\r\n                                    text=\"Delete\"\r\n                                    onClick={() => {\r\n                                      handleDelete(staff);\r\n                                    }}\r\n                                  >\r\n                                    <ToastContainer />\r\n                                  </LoanIconButton>\r\n                                </>\r\n                              </td>\r\n                              <td>{renderButton()}</td>\r\n                            </tr>\r\n                          </>\r\n                        ))\r\n                      )}\r\n                    </tbody>\r\n                  </table>\r\n                )\r\n              )}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default ViewSeniorManagementStaff;\r\n","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\Address\\ViewCompanyAddress.jsx",["1049","1050","1051","1052","1053","1054","1055"],[],"import { useState, useEffect } from \"react\";\r\nimport { FaSpinner } from \"react-icons/fa\";\r\nimport { BiSkipNext } from \"react-icons/bi\";\r\nimport { MdModeEdit } from \"react-icons/md\";\r\nimport { IoTrashOutline } from \"react-icons/io5\";\r\nimport { useParams, useNavigate } from \"react-router-dom\";\r\nimport CompanyNavigation from \"../../Common/CompanyNavigation\";\r\nimport LoanIconButton from \"../../Common/LoanIconButton\";\r\nimport AddCompanyAddress from \"./AddCompanyAddress\";\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\nimport { Link } from \"react-router-dom\";\r\nimport CompanyAddressService from \"./CompanyAddressService\";\r\nimport CommonServices from \"../Common/CommonServices\";\r\nimport EditCompanyAddress from \"./EditCompanyAddress\";\r\nimport loanDataService from \"../Service\";\r\nconst ViewCompanyAddress = () => {\r\n  const navigate = useNavigate();\r\n  const { companyId } = useParams();\r\n  const [addresses, setAddresses] = useState([]);\r\n  const [error, setError] = useState(null);\r\n  const [addressErrorLoading, setAddressErrorLoading] = useState(false);\r\n\r\n  const [isCompanyAddressEditModalOpen, setIsCompanyAddressEditModalOpen] =\r\n    useState(false);\r\n\r\n  function handleCompanyAddressEditOpenModal() {\r\n    setIsCompanyAddressEditModalOpen(true);\r\n  }\r\n  function handleCompanyAddressEditCloseModal() {\r\n    setIsCompanyAddressEditModalOpen(false);\r\n  }\r\n\r\n  const [isCompanyModalOpen, setIsCompanyModalOpen] = useState(false);\r\n\r\n  function handleGeneralCloseModal() {\r\n    setIsCompanyModalOpen(false);\r\n  }\r\n  function handleGeneralOpenModal() {\r\n    setIsCompanyModalOpen(true);\r\n  }\r\n  const handleDelete = () => {};\r\n  const getCompanyAddresses = () => {\r\n    setAddressErrorLoading(true);\r\n    setTimeout(() => {\r\n      CompanyAddressService.getCompanyAddress(companyId)\r\n        .then((response) => {\r\n          if (\r\n            response.data.Code === 200 ||\r\n            response.data.Message === \"Success\"\r\n          ) {\r\n            setAddresses(response.data.Result);\r\n            setAddressErrorLoading(false);\r\n          } else {\r\n            setAddressErrorLoading(false);\r\n            setError(\"Something went wrong\");\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          if (error.response.data.StatusCode === 404) {\r\n            setError(\"Address not found\");\r\n            setAddressErrorLoading(false);\r\n          } else if (error.response.data.StatusCode === 400) {\r\n            setError(\"Something went wrong\");\r\n            setAddressErrorLoading(false);\r\n          } else if (error.response.data.StatusCode === 401) {\r\n            navigate(\"/login\");\r\n          } else if (error.response.data.StatusCode === 403) {\r\n            navigate(\"/login\");\r\n          }\r\n        });\r\n    }, 1000);\r\n  };\r\n  useEffect(() => {\r\n    getCompanyAddresses();\r\n  }, []);\r\n  const [country, setCountries] = useState([]);\r\n  const [region, setRegion] = useState([]);\r\n  const fetchContry = () => {\r\n    CommonServices.getCountry()\r\n      .then((response) => {\r\n        setCountries(response.data.Result);\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n  useEffect(() => {\r\n    fetchContry();\r\n  }, []);\r\n  const fetchRegion = () => {\r\n    CommonServices.getRegion()\r\n      .then((response) => {\r\n        setRegion(response.data.Result);\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n  useEffect(() => {\r\n    fetchRegion();\r\n  }, []);\r\n  const handleInputChangeAdress = (event) => {\r\n    const { name, value } = event.target;\r\n    setAddress({ ...address, [name]: value });\r\n  };\r\n\r\n  const initialAdressState = {\r\n    Id: null,\r\n    CountryID: \"\",\r\n    RegionID: \"\",\r\n    ZoneSubCity: \"\",\r\n    Woreda: \"\",\r\n    City: \"\",\r\n    Kebele: \"\",\r\n    HouseNo: \"\",\r\n    BuildingNo: \"\",\r\n    StreetAddress: \"\",\r\n  };\r\n  const [address, setAddress] = useState(initialAdressState);\r\n  const newAddress = () => {\r\n    setAddress(initialAdressState);\r\n    // setSubmitted(false);\r\n  };\r\n  const saveAddress = () => {\r\n    var data = {\r\n      CountryID: address.CountryID,\r\n      RegionID: address.RegionID,\r\n      ZoneSubCity: address.ZoneSubCity,\r\n      Woreda: address.Woreda,\r\n      City: address.City,\r\n      Kebele: address.Kebele,\r\n      HouseNo: address.HouseNo,\r\n      BuildingNo: address.BuildingNo,\r\n      StreetAddress: address.StreetAddress,\r\n    };\r\n    CompanyAddressService.addAdress(data, companyId)\r\n      .then((response) => {\r\n        setAddress({\r\n          Id: response.data.Id,\r\n          CountryID: response.data.CountryID,\r\n          RegionID: response.data.RegionID,\r\n          ZoneSubCity: response.data.ZoneSubCity,\r\n          Woreda: response.data.Woreda,\r\n          City: response.data.City,\r\n          Kebele: response.data.Kebele,\r\n          HouseNo: response.data.HouseNo,\r\n          BuildingNo: response.data.BuildingNo,\r\n          StreetAddress: response.data.StreetAddress,\r\n        });\r\n        // setSubmitted(true);\r\n        console.log(response.data);\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n  const [companyAddressId, setCompanyAddressId] = useState();\r\n\r\n  const [editAddress, setEditAddress] = useState({\r\n    Id: companyAddressId,\r\n    CountryId: \"\",\r\n    RegionId: \"\",\r\n    ZoneSubCity: \"\",\r\n    Woreda: \"\",\r\n    City: \"\",\r\n    Kebele: \"\",\r\n    HouseNo: \"\",\r\n    BuildingNo: \"\",\r\n    StreetAddress: \"\",\r\n  });\r\n  const getAddressByCompanyId = (addressId) => {\r\n    CompanyAddressService.getAddressById(addressId)\r\n      .then((res) => {\r\n        setEditAddress({\r\n          ...editAddress,\r\n          Id: addressId,\r\n          CountryId: res.data.Result.CountryId,\r\n          RegionId: res.data.Result.RegionId,\r\n          ZoneSubCity: res.data.Result.ZoneSubCity,\r\n          Woreda: res.data.Result.Woreda,\r\n          City: res.data.Result.City,\r\n          Kebele: res.data.Result.Kebele,\r\n          HouseNo: res.data.Result.HouseNo,\r\n          BuildingNo: res.data.Result.BuildingNo,\r\n          StreetAddress: res.data.Result.StreetAddress,\r\n        });\r\n        debugger;\r\n      })\r\n      .catch((err) => {\r\n        if (err.response.data.StatusCode === 404) {\r\n          console.log(err.response.data.Message);\r\n        }\r\n      });\r\n  };\r\n  const updateCompanyAddressById = (e) => {\r\n    e.preventDefault();\r\n    CompanyAddressService.updateCompanyAddressById(\r\n      companyAddressId,\r\n      editAddress\r\n    )\r\n      .then((response) => {\r\n        if (response.data.Code === 200) {\r\n          getCompanyAddresses();\r\n          toast.success(\"Added successfully\", {\r\n            position: toast.POSITION.TOP_RIGHT,\r\n            toastId: \"updateCompanyAddressSuccess\",\r\n          });\r\n        }\r\n      })\r\n      .catch((e) => {\r\n        toast.error(\"Something went wrong\", {\r\n          position: toast.POSITION.TOP_RIGHT,\r\n          toastId: \"updateCompanyAddressError\",\r\n        });\r\n      });\r\n  };\r\n  //   useEffect(() => {\r\n  //     updateCompanyAddressById();\r\n  //   }, []);\r\n  const handleBack = () => {\r\n    alert(\"Handle Back\");\r\n  };\r\n  const handleSkip = () => {\r\n    alert(\"Handle Back\");\r\n  };\r\n  const handleNext = () => {\r\n    alert(\"Handle Next\");\r\n  };\r\n  return (\r\n    <div className=\"flex\">\r\n      <CompanyNavigation />\r\n      <div className=\"px-4 py-3\">\r\n        <div className=\"flex flex-wrap\">\r\n          <div className=\"w-full\">\r\n            <div>\r\n              <h4 className=\"text-lg font-semibold eading-tight p-2\">\r\n                Company Address\r\n              </h4>\r\n              <AddCompanyAddress\r\n                // submitted={submitted}\r\n                newAddress={newAddress}\r\n                address={address}\r\n                country={country}\r\n                region={region}\r\n                handleInputChangeAdress={handleInputChangeAdress}\r\n                handleBack={handleBack}\r\n                handleSkip={handleSkip}\r\n                handleNext={handleNext}\r\n                saveAddress={saveAddress}\r\n              />\r\n              {/* bosena */}\r\n              <EditCompanyAddress\r\n                isCompanyAddressEditModalOpen={isCompanyAddressEditModalOpen}\r\n                handleCompanyAddressEditCloseModal={\r\n                  handleCompanyAddressEditCloseModal\r\n                }\r\n                updateCompanyAddressById={updateCompanyAddressById}\r\n                editAddress={editAddress}\r\n                country={country}\r\n                region={region}\r\n                setEditAddress={setEditAddress}\r\n                // setEditCompany={setEditCompany}\r\n              />\r\n              <ToastContainer />\r\n              {error && <p className=\"text-red-500\">{error}</p>}\r\n              {!error && addressErrorLoading ? (\r\n                <span>\r\n                  <FaSpinner\r\n                    className=\"animate-spin rounded-full h-6 w-6 text-purple-600\"\r\n                    fontSize=\"small\"\r\n                    data-toggle=\"tooltip\"\r\n                    title=\"Click it to sign in\"\r\n                  />\r\n                  Loading...\r\n                </span>\r\n              ) : (\r\n                !error &&\r\n                !addressErrorLoading && (\r\n                  <table className=\"table table-bordered table-striped bg-purple-100\">\r\n                    <thead>\r\n                      <tr className=\"bg-purple-200 \">\r\n                        <th className=\"px-2 py-4\"> Country </th>\r\n                        <th className=\"px-2 py-4\"> RegionID </th>\r\n                        <th className=\"px-2 py-4\"> ZoneSubCity </th>\r\n                        <th className=\"px-2 py-4\"> Woreda </th>\r\n                        <th className=\"px-2 py-4\"> City </th>\r\n                        <th className=\"px-2 py-4\"> Kebele </th>\r\n                        <th className=\"px-2 py-4\"> HouseNo </th>\r\n                        <th className=\"px-2 py-4\">BuildingNo</th>\r\n                        <th className=\"px-2 py-4\">StreetAddress</th>\r\n                        <th className=\"px-2 py-4\"> Action </th>\r\n                      </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                      {addresses && (\r\n                        <>\r\n                          <tr\r\n                            className=\"bg-white\r\n                    border-b border-purple-200\"\r\n                            key={addresses.Id}\r\n                          >\r\n                            <td className=\"p-2\">{addresses.Country}</td>\r\n                            <td className=\"p-2\">{addresses.Region}</td>\r\n                            <td className=\"p-2\">{addresses.ZoneSubCity}</td>\r\n                            <td className=\"p-2\">{addresses.Woreda}</td>\r\n                            <td className=\"p-2\">{addresses.City}</td>\r\n                            <td className=\"p-2\">{addresses.Kebele}</td>\r\n                            <td className=\"p-2\">{addresses.HouseNo}</td>\r\n                            <td className=\"p-2\">{addresses.BuildingNo}</td>\r\n                            <td className=\"p-2\">{addresses.StreetAddress}</td>\r\n                            <td className=\"p-2\">\r\n                              <LoanIconButton\r\n                                style={{ color: \"green\" }}\r\n                                icon={<MdModeEdit />}\r\n                                text=\"Edit\"\r\n                                onClick={() => {\r\n                                  handleCompanyAddressEditOpenModal();\r\n                                  setCompanyAddressId(addresses.Id);\r\n                                  //   updateCompanyById(addresses.Id);\r\n                                  getAddressByCompanyId(addresses.Id);\r\n                                }}\r\n                              />\r\n                              <>\r\n                                <LoanIconButton\r\n                                  style={{ color: \"red\" }}\r\n                                  icon={<IoTrashOutline />}\r\n                                  text=\"Delete\"\r\n                                  onClick={() => {\r\n                                    handleDelete(addresses);\r\n                                  }}\r\n                                >\r\n                                  <ToastContainer />\r\n                                </LoanIconButton>\r\n                              </>                             \r\n                            </td>\r\n                          </tr>\r\n                        </>\r\n                      )}\r\n                    </tbody>\r\n                  </table>\r\n                )\r\n              )}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ViewCompanyAddress;\r\n","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\PLCAndShare\\ViewPLCAndShareInfo.jsx",["1056","1057","1058","1059","1060","1061","1062","1063","1064","1065","1066","1067","1068","1069","1070","1071","1072","1073"],[],"import CompanyNavigation from \"../../Common/CompanyNavigation\";\r\nimport { useParams, useNavigate } from \"react-router-dom\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { FaSpinner } from \"react-icons/fa\";\r\nimport LoanIconButton from \"../../Common/LoanIconButton\";\r\nimport { MdModeEdit } from \"react-icons/md\";\r\nimport { IoTrashOutline } from \"react-icons/io5\";\r\nimport PLCAndShareService from \"./PLCAndShareService\";\r\nimport AddPLCAndShareInfo from \"./AddPLCAndShareInfo\";\r\nimport EditPLCAndShare from \"./EditPLCAndShare\";\r\nimport ViewPLCAndShareTaxDetail from \"./ViewPLCAndShareTaxDetail\";\r\nimport Guarantor from \"./guarantor/Guarantor\";\r\nimport ViewShareHolder from \"./ViewShareHolder\";\r\nimport ViewOtherBankCreditExposure from \"./ViewOtherBankCreditExposure\";\r\nconst ViewPLCAndShareInfo = () => {\r\n  const { companyId } = useParams();\r\n  const navigate = useNavigate();\r\n  const [PLCAndShareErrorLoading, setPLCAndShareErrorLoading] = useState(false);\r\n  const [getPLCAndShareInformation, setGetPLCAndShareInformation] = useState(\r\n    []\r\n  );\r\n  const getCompanyPLCAndShareInformationById = () => {\r\n    setPLCAndShareErrorLoading(true);\r\n    setTimeout(() => {\r\n      PLCAndShareService.getCompanyPLCAndShareInfo(companyId)\r\n        .then((response) => {\r\n          if (\r\n            response.data.Code === 200 ||\r\n            response.data.Message === \"Success\"\r\n          ) {\r\n            setGetPLCAndShareInformation(response.data.Result);\r\n            setPLCAndShareErrorLoading(false);\r\n          } else {\r\n            setPLCAndShareErrorLoading(false);\r\n            setError(\"Something went wrong\");\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          if (error.response.data.StatusCode === 404) {\r\n            setError(\"PLC and Share not found\");\r\n            setPLCAndShareErrorLoading(false);\r\n          } else if (error.response.data.StatusCode === 400) {\r\n            setError(\"Something went wrong\");\r\n            setPLCAndShareErrorLoading(false);\r\n          } else if (error.response.data.StatusCode === 401) {\r\n            navigate(\"/login\");\r\n          } else if (error.response.data.StatusCode === 403) {\r\n            navigate(\"/login\");\r\n          }\r\n        });\r\n    }, 1000);\r\n  };\r\n  useEffect(() => {\r\n    getCompanyPLCAndShareInformationById();\r\n  }, []);\r\n  //PLC TAX\r\n  const [PLCAndShareTaxErrorLoading, setPLCAndShareTaxErrorLoading] =\r\n    useState(false);\r\n  const [getPLCAndShareTaxInformation, setGetPLCAndShareTaxInformation] =\r\n    useState([]);\r\n  const getCompanyPLCAndShareTaxInformationById = (Id) => {\r\n    setPLCAndShareTaxErrorLoading(true);\r\n    setTimeout(() => {\r\n      PLCAndShareService.getCompanyPLCAndShareTaxInfo1(Id)\r\n        .then((response) => {\r\n          if (\r\n            response.data.Code === 200 ||\r\n            response.data.Message === \"Success\"\r\n          ) {\r\n            setGetPLCAndShareTaxInformation(response.data.Result);\r\n            setPLCAndShareTaxErrorLoading(false);\r\n          } else {\r\n            setPLCAndShareTaxErrorLoading(false);\r\n            setError(\"Something went wrong\");\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          if (error.response.data.StatusCode === 404) {\r\n            setError(\"PLC and Share Tax not found\");\r\n            setPLCAndShareTaxErrorLoading(false);\r\n          } else if (error.response.data.StatusCode === 400) {\r\n            setError(\"Something went wrong\");\r\n            setPLCAndShareTaxErrorLoading(false);\r\n          } else if (error.response.data.StatusCode === 401) {\r\n            navigate(\"/login\");\r\n          } else if (error.response.data.StatusCode === 403) {\r\n            navigate(\"/login\");\r\n          }\r\n        });\r\n    }, 1000);\r\n  };\r\n  useEffect(() => {\r\n    getCompanyPLCAndShareTaxInformationById();\r\n  }, []);\r\n\r\n  //End PLC TAX\r\n  //Other Bank Credit exposure\r\n  const [\r\n    OtherBankCreditExposureErrorLoading,\r\n    setOtherBankCreditExposureErrorLoading,\r\n  ] = useState(false);\r\n  const [\r\n    getOtherBankCreditExposureInformation,\r\n    setGetOtherBankCreditExposureInformation,\r\n  ] = useState([]);\r\n  const getCompanyOtherBankCreditExposureInformationById = (Id) => {\r\n    setOtherBankCreditExposureErrorLoading(true);\r\n    setTimeout(() => {\r\n      PLCAndShareService.getCompanyOtherBnankCreditExposureInfo(Id)\r\n        .then((response) => {\r\n          if (\r\n            response.data.Code === 200 ||\r\n            response.data.Message === \"Success\"\r\n          ) {\r\n            setGetOtherBankCreditExposureInformation(response.data.Result);\r\n            setOtherBankCreditExposureErrorLoading(false);\r\n          } else {\r\n            setOtherBankCreditExposureErrorLoading(false);\r\n            setError(\"Something went wrong\");\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          if (error.response.data.StatusCode === 404) {\r\n            setError(\" Other Bank Credit Exposure not found\");\r\n            setOtherBankCreditExposureErrorLoading(false);\r\n          } else if (error.response.data.StatusCode === 400) {\r\n            setError(\"Something went wrong\");\r\n            setOtherBankCreditExposureErrorLoading(false);\r\n          } else if (error.response.data.StatusCode === 401) {\r\n            navigate(\"/login\");\r\n          } else if (error.response.data.StatusCode === 403) {\r\n            navigate(\"/login\");\r\n          }\r\n        });\r\n    }, 1000);\r\n  };\r\n  useEffect(() => {\r\n    getCompanyOtherBankCreditExposureInformationById();\r\n  }, []);\r\n\r\n  //End Other Bank Credit exposure\r\n  const [isPLCAndShareEditModalOpen, setIsPLCAndShareEditModalOpen] =\r\n    useState(false);\r\n  const [isPLCAndShareTaxModalOpen, setIsPLCAndShareTaxModalOpen] =\r\n    useState(false);\r\n  const [isPLCAndShareTaxDetailModalOpen, setIsPLCAndShareTaxDetailModalOpen] =\r\n    useState(false);\r\n  const [\r\n    isOtherBankCreditExposureModalOpen,\r\n    setIsOtherBankCreditExposureModalOpen,\r\n  ] = useState(false);\r\n  function handleGeneralPLCAndShareTaxCloseModal() {\r\n    setIsPLCAndShareTaxModalOpen(false);\r\n  }\r\n  function handleGeneralPLCAndShareTaxOpenModal() {\r\n    setIsPLCAndShareTaxModalOpen(true);\r\n  }\r\n  function handleGeneralPLCAndShareTaxDetailCloseModal() {\r\n    setIsPLCAndShareTaxDetailModalOpen(false);\r\n  }\r\n  function handleGeneralPLCAndShareTaxDetailOpenModal() {\r\n    setIsPLCAndShareTaxDetailModalOpen(true);\r\n  }\r\n\r\n  function handleGeneralOtherBankCreditExposureCloseModal() {\r\n    setIsOtherBankCreditExposureModalOpen(false);\r\n  }\r\n  function handleGeneralOtherBankCreditExposureOpenModal() {\r\n    setIsOtherBankCreditExposureModalOpen(true);\r\n  }\r\n  function handleCompanyPLCAndShareInformationEditOpenModal() {\r\n    setIsPLCAndShareEditModalOpen(true);\r\n  }\r\n  function handleCompanyPLCAndShareInformationEditCloseModal() {\r\n    setIsPLCAndShareEditModalOpen(false);\r\n  }\r\n  function handleCompanyPLCAndShareOpenModal() {\r\n    setIsCompanyPLCAndShareModalOpen(true);\r\n  }\r\n  function handleCompanyPLCAndShareCloseModal() {\r\n    setIsCompanyPLCAndShareModalOpen(false);\r\n  }\r\n  const [isCompanyPLCAndShareModalOpen, setIsCompanyPLCAndShareModalOpen] =\r\n    useState(false);\r\n  function handleGeneralCloseModal() {\r\n    isCompanyPLCAndShareModalOpen(false);\r\n  }\r\n  const initialPLCAndShareState = {\r\n    Id: null,\r\n    //CompanyID: companyId,\r\n    // GuarantorId: null,\r\n    // TaxClearanceID: null,\r\n    MoUDate: \"\",\r\n    MoUReferenceNumber: \"\",\r\n    MoUAuthDate: \"\",\r\n    MoUAuthRefNumber: \"\",\r\n    MoUDocument: \"\",\r\n    MoUIssuer: \"\",\r\n    AoADate: \"\",\r\n    AoAReferenceNumber: \"\",\r\n    AoAAuthDate: \"\",\r\n    AoAAuthRefNumber: \"\",\r\n    AoADocument: \"\",\r\n    MinuteDate: \"\",\r\n    MinuteReferenceNumber: \"\",\r\n    MinuteAuthDate: \"\",\r\n    MinuteAuthRefNumber: \"\",\r\n    MinuteDocument: \"\",\r\n    MinuteIssuer: \"\",\r\n    MinuteAgenda: \"\",\r\n  };\r\n  const [selectedPathAoADEdit, setSelectedPathAoADEdit] = useState(null);\r\n  const [selectedPathMoUDEdit, setSelectedPathMoUDEdit] = useState(null);\r\n  const [selectedPathMDEdit, setSelectedPathMDEdit] = useState(null);\r\n  const [PLCAndShareInformationId, setPLCAndShareInformationId] = useState();\r\n  const [error, setError] = useState(null);\r\n  const [deleteLoading, setDeleteLoading] = useState(false);\r\n  const [PLCAndShareInfoIdForLocal, setPLCAndShareInfoIdForLocal] = useState(\r\n    []\r\n  );\r\n  const [submitted, setSubmitted] = useState(true);\r\n  const [holdId, setHoldId] = useState([]);\r\n  const [deleteCompanyError, setCompanyDeleteError] = useState(null);\r\n  const [PLCAndShare, setPLCAndShare] = useState(initialPLCAndShareState);\r\n  const [editPLCAndShareInfo, setEditPLCAndShareInfo] = useState({\r\n    Id: PLCAndShareInformationId,\r\n    // TaxClearanceID: \"\",\r\n    // CompanyID: \"\",\r\n    MoUDate: \"\",\r\n    MoUReferenceNumber: \"\",\r\n    MoUAuthDate: \"\",\r\n    MoUAuthRefNumber: \"\",\r\n    MoUDocument: \"\",\r\n    MoUIssuer: \"\",\r\n    AoADate: \"\",\r\n    AoAReferenceNumber: \"\",\r\n    AoAAuthDate: \"\",\r\n    AoAAuthRefNumber: \"\",\r\n    AoADocument: \"\",\r\n    MinuteDate: \"\",\r\n    MinuteReferenceNumber: \"\",\r\n    MinuteAuthDate: \"\",\r\n    MinuteAuthRefNumber: \"\",\r\n    MinuteDocument: \"\",\r\n    MinuteIssuer: \"\",\r\n    MinuteAgenda: \"\",\r\n  });\r\n  const getPLCAndShareInformationBy = (PLCAndShareInformationId) => {\r\n    PLCAndShareService.getPLCAndShareInformationById(PLCAndShareInformationId)\r\n      .then((res) => {\r\n        debugger;\r\n        setEditPLCAndShareInfo({\r\n          ...editPLCAndShareInfo,\r\n          Id: PLCAndShareInformationId,\r\n          MoUDate: res.data.Result.MoUDate,\r\n          // GuarantorId: res.data.Result.GuarantorId,\r\n          // TaxClearanceID: res.data.Result.TaxClearanceID,\r\n          CompanyID: res.data.Result.CompanyID,\r\n          MoUReferenceNumber: res.data.Result.MoUReferenceNumber,\r\n          MoUAuthDate: res.data.Result.MoUAuthDate,\r\n          MoUAuthRefNumber: res.data.Result.MoUAuthRefNumber,\r\n          MoUDocument: res.data.Result.MoUDocument,\r\n          MoUIssuer: res.data.Result.MoUIssuer,\r\n          AoADate: res.data.Result.AoADate,\r\n          AoAReferenceNumber: res.data.Result.AoAReferenceNumber,\r\n          AoAAuthDate: res.data.Result.AoAAuthDate,\r\n          AoAAuthRefNumber: res.data.Result.AoAAuthRefNumber,\r\n          AoADocument: res.data.Result.AoADocument,\r\n          MinuteDate: res.data.Result.MinuteDate,\r\n          MinuteReferenceNumber: res.data.Result.MinuteReferenceNumber,\r\n          MinuteAuthDate: res.data.Result.MinuteAuthDate,\r\n          MinuteAuthRefNumber: res.data.Result.MinuteAuthRefNumber,\r\n          MinuteDocument: res.data.Result.MinuteDocument,\r\n          MinuteIssuer: res.data.Result.MinuteIssuer,\r\n          MinuteAgenda: res.data.Result.MinuteAgenda,\r\n        });\r\n        setPLCAndShareInfoIdForLocal(PLCAndShareInformationId);\r\n      })\r\n      .catch((err) => console.log(err));\r\n  };\r\n  const updateCompanyPLCAndShareInformationById = () => {\r\n    PLCAndShareService.updateCompanyPLCAndShareInformation(\r\n      PLCAndShareInfoIdForLocal,\r\n      editPLCAndShareInfo\r\n    )\r\n      .then((response) => {\r\n        console.log(response);\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n  useEffect(() => {\r\n    updateCompanyPLCAndShareInformationById();\r\n  }, []);\r\n\r\n  const handleInputChangePLCAndShare = (event) => {\r\n    const { name, value } = event.target;\r\n    setPLCAndShare({ ...PLCAndShare, [name]: value });\r\n  };\r\n  const newPLCAndShare = () => {\r\n    setPLCAndShare(initialPLCAndShareState);\r\n    setSubmitted(true);\r\n  };\r\n  const handleDelete = (PLCAndShare) => {\r\n    setDeleteLoading(true);\r\n    const confirm = window.confirm(\r\n      `Are you sure you want to delete ${PLCAndShare.Name} `\r\n    );\r\n    if (confirm) {\r\n      PLCAndShareService.deletePLCAndShareById(PLCAndShare.Id)\r\n        .then(() => {\r\n          setPLCAndShare((previousData) =>\r\n            previousData.filter((PLC) => PLC.Id !== PLCAndShare.Id)\r\n          );\r\n        })\r\n        .catch((e) => {\r\n          setCompanyDeleteError(e);\r\n          setDeleteLoading(false);\r\n        });\r\n    }\r\n  };\r\n  //Other bank credit exposure\r\n  const initialOtherBankCreditExposureState = {\r\n    Id: null,\r\n    FullName: \"\",\r\n    TinNumber: \"\",\r\n    BankName: \"\",\r\n    BranchName: \"\",\r\n    AccountNumber: \"\",\r\n    LoanTypeId: \"\",\r\n    ReportingDate: \"\",\r\n    CurrencyId: \"\",\r\n    ApprovedAmount: \"\",\r\n    StartDate: \"\",\r\n    MaturityDate: \"\",\r\n    RepaymentFrequencyId: \"\",\r\n    NumberOfInstallment: \"\",\r\n    InstallmentAmount: \"\",\r\n    OutstandingLoanBalance: \"\",\r\n    LoanStatusId: \"\",\r\n    NoOfDaysInArrears: \"\",\r\n    BalanceOverdue: \"\",\r\n    NoOfRestructuring: \"\",\r\n    RestructuredCreditReferenceNumber: \"\",\r\n    SectorTypeId: \"\",\r\n    IndustryTypeId: \"\",\r\n    CreditInformationDocument: \"\",\r\n  };\r\n  const [OtherBankCreditExposure, setOtherBankCreditExposure] = useState(\r\n    initialOtherBankCreditExposureState\r\n  );\r\n  const handleInputChangeOtherBankCreditExposure = (event) => {\r\n    const { name, value } = event.target;\r\n    setOtherBankCreditExposure({ ...OtherBankCreditExposure, [name]: value });\r\n  };\r\n  const newOtherBankCreditExposure = () => {\r\n    setOtherBankCreditExposure(initialOtherBankCreditExposureState);\r\n    setSubmitted(true);\r\n  };\r\n  const [isCompanyGuarantorModalOpen, setIsCompanyGuarantorModalOpen] =\r\n    useState(false);\r\n  function handleCompanyGuarantorOpenModal() {\r\n    setIsCompanyGuarantorModalOpen(true);\r\n  }\r\n  function handleCompanyGuarantorCloseModal() {\r\n    setIsCompanyGuarantorModalOpen(false);\r\n  }\r\n  const [holdGuarantor, setHoldGuarantor] = useState([]);\r\n  const getGuarantor = (Id) => {\r\n    PLCAndShareService.getCompanyPLCAndShareGuarantorInfo(Id)\r\n      .then((response) => {\r\n        setHoldGuarantor(response.data.Result);\r\n        console.log(response.data.Result);\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n  // end guarntor\r\n  // share holder\r\n  const [isCompanyShareHolderModalOpen, setIsCompanyShareHolderModalOpen] =\r\n    useState(false);\r\n  function handleCompanyShareHolderOpenModal() {\r\n    setIsCompanyShareHolderModalOpen(true);\r\n  }\r\n  function handleCompanyShareHolderCloseModal() {\r\n    setIsCompanyShareHolderModalOpen(false);\r\n  }\r\n  const [holdShareHolder, setHoldShareHolder] = useState([]);\r\n  const getShareHolder = (Id) => {\r\n    PLCAndShareService.getCompanyShareHolderInfo(Id)\r\n      .then((response) => {\r\n        setHoldShareHolder(response.data.Result);\r\n        console.log(response.data.Result);\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n  // End share holder\r\n  return (\r\n    <div className=\"flex\">\r\n      <CompanyNavigation />\r\n      <div className=\"px-4 py-3\">\r\n        <div className=\"flex flex-wrap\">\r\n          <div className=\"w-full\">\r\n            <div>\r\n              <h4 className=\"text-lg font-semibold eading-tight p-2\">\r\n                PLC And Share Information\r\n              </h4>\r\n              <EditPLCAndShare\r\n                isPLCAndShareEditModalOpen={isPLCAndShareEditModalOpen}\r\n                updateCompanyPLCAndShareInformationById={\r\n                  updateCompanyPLCAndShareInformationById\r\n                }\r\n                editPLCAndShareInfo={editPLCAndShareInfo}\r\n                setEditPLCAndShareInfo={setEditPLCAndShareInfo}\r\n                handleCompanyPLCAndShareInformationEditCloseModal={\r\n                  handleCompanyPLCAndShareInformationEditCloseModal\r\n                }\r\n                setSelectedPathMoUDEdit={setSelectedPathMoUDEdit}\r\n                setSelectedPathMDEdit={setSelectedPathMDEdit}\r\n                setSelectedPathAoADEdit={setSelectedPathAoADEdit}\r\n              />\r\n              <ViewOtherBankCreditExposure\r\n                isOtherBankCreditExposureModalOpen={\r\n                  isOtherBankCreditExposureModalOpen\r\n                }\r\n                OtherBankCreditExposureErrorLoading={\r\n                  OtherBankCreditExposureErrorLoading\r\n                }\r\n                getOtherBankCreditExposureInformation={\r\n                  getOtherBankCreditExposureInformation\r\n                }\r\n                handleGeneralOtherBankCreditExposureCloseModal={\r\n                  handleGeneralOtherBankCreditExposureCloseModal\r\n                }\r\n                PLCAndShareInformationId={PLCAndShareInformationId}\r\n                OtherBankCreditExposure={OtherBankCreditExposure}\r\n                handleInputChangeOtherBankCreditExposure={\r\n                  handleInputChangeOtherBankCreditExposure\r\n                }\r\n                //saveOtherBankCreditExposure={saveOtherBankCreditExposure}\r\n                getCompanyOtherBankCreditExposureInformationById={\r\n                  getCompanyOtherBankCreditExposureInformationById\r\n                }\r\n                newOtherBankCreditExposure={newOtherBankCreditExposure}\r\n                getCompanyPLCAndShareTaxInformationById={\r\n                  getCompanyPLCAndShareTaxInformationById\r\n                }\r\n                setOtherBankCreditExposure={setOtherBankCreditExposure}\r\n              />\r\n              <ViewPLCAndShareTaxDetail\r\n                isPLCAndShareTaxDetailModalOpen={\r\n                  isPLCAndShareTaxDetailModalOpen\r\n                }\r\n                PLCAndShareTaxErrorLoading={PLCAndShareTaxErrorLoading}\r\n                getPLCAndShareTaxInformation={getPLCAndShareTaxInformation}\r\n                handleGeneralPLCAndShareTaxDetailCloseModal={\r\n                  handleGeneralPLCAndShareTaxDetailCloseModal\r\n                }\r\n                PLCAndShareInformationId={PLCAndShareInformationId}\r\n                setPLCAndShareInformationId={setPLCAndShareInformationId}\r\n                handleGeneralPLCAndShareTaxCloseModal={\r\n                  handleGeneralPLCAndShareTaxCloseModal\r\n                }\r\n                isPLCAndShareTaxModalOpen={isPLCAndShareTaxModalOpen}\r\n                getCompanyPLCAndShareTaxInformationById={\r\n                  getCompanyPLCAndShareTaxInformationById\r\n                }\r\n              />\r\n              <Guarantor\r\n                holdGuarantor={holdGuarantor}\r\n                PLCAndShareInformationId={PLCAndShareInformationId}\r\n                isCompanyGuarantorModalOpen={isCompanyGuarantorModalOpen}\r\n                handleCompanyGuarantorCloseModal={\r\n                  handleCompanyGuarantorCloseModal\r\n                }\r\n                handleCompanyGuarantorOpenModal={\r\n                  handleCompanyGuarantorOpenModal\r\n                }\r\n              />\r\n              <ViewShareHolder\r\n                holdShareHolder={holdShareHolder}\r\n                PLCAndShareInformationId={PLCAndShareInformationId}\r\n                isCompanyShareHolderModalOpen={isCompanyShareHolderModalOpen}\r\n                handleCompanyShareHolderCloseModal={\r\n                  handleCompanyShareHolderCloseModal\r\n                }\r\n                handleCompanyShareHolderOpenModal={\r\n                  handleCompanyShareHolderOpenModal\r\n                }\r\n              />\r\n\r\n              <AddPLCAndShareInfo\r\n                submitted={submitted}\r\n                newPLCAndShare={newPLCAndShare}\r\n                PLCAndShare={PLCAndShare}\r\n                handleInputChangePLCAndShare={handleInputChangePLCAndShare}\r\n                setPLCAndShare={setPLCAndShare}\r\n                companyId={companyId}\r\n              />\r\n              <div>\r\n                {getPLCAndShareInformation ? (\r\n                  <table className=\"border-purple-300 bg-white hover:bg-purple-300\">\r\n                    <thead className=\"bg-purple-100\">\r\n                      <tr className=\"border border-purple-300\">\r\n                        {/* <th className=\"px-2 py-4 \"> No </th> */}\r\n                        {/* <th className=\"px-2 py-4\"> MoUReferenceNumber </th> */}\r\n                        <th className=\"px-2 py-4\"> MoUAuth Date </th>\r\n                        {/* <th className=\"px-2 py-4\"> MoUAuthRefNumber </th>*/}\r\n                        <th className=\"px-2 py-4\"> MoUDocument </th>\r\n                        <th className=\"px-2 py-4\"> MoUIssuer </th>\r\n                        <th className=\"px-2 py-4\"> AoADate </th>\r\n                        {/* <th className=\"px-2 py-4\"> AoAReferenceNumber </th>\r\n                      <th className=\"px-2 py-4\"> AoAAuthDate </th>\r\n                      <th className=\"px-2 py-4\"> AoAAuthRefNumber </th>\r\n                      <th className=\"px-2 py-4\"> AoADocument </th>\r\n                      <th className=\"px-2 py-4\"> MinuteDate </th> */}\r\n                        <th className=\"px-2 py-4\"> Minute Reference Number </th>\r\n                        <th className=\"px-2 py-4\"> Minute AuthDate </th>\r\n                        {/* <th className=\"px-2 py-4\"> MinuteAuthRefNumber </th>\r\n                      <th className=\"px-2 py-4\"> MinuteDocument </th> */}\r\n                        <th className=\"px-2 py-4\"> Minute Issuer </th>\r\n                        <th className=\"px-2 py-4\"> Minute Agenda </th>\r\n                        <th className=\"px-2 py-4\"> Tax Clearance </th>\r\n                        <th className=\"px-2 py-4\"> guarantor </th>\r\n                        <th className=\"px-2 py-4\">\r\n                          {\" \"}\r\n                          Other Bank Credit Exposure{\" \"}\r\n                        </th>\r\n                        <th className=\"px-2 py-4\"> Share Holder </th>\r\n                        <th className=\"px-2 py-4\"> Action </th>\r\n                      </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                      <tr\r\n                        className=\"bg-white\r\n                        border-b border-purple-200\"\r\n                        key={PLCAndShare.Id}\r\n                      >\r\n                        <td className=\"p-2\">{getPLCAndShareInformation.Id}</td>\r\n                        <td className=\"p-2\">\r\n                          {getPLCAndShareInformation.MoUAuthDate}\r\n                        </td>\r\n                        {/*<td className=\"p-2\">{getPLCAndShareInformation.MoUAuthRefNumber}</td> */}\r\n                        <td className=\"p-2\">\r\n                          {getPLCAndShareInformation.MoUDocument}\r\n                        </td>\r\n                        <td className=\"p-2\">\r\n                          {getPLCAndShareInformation.MoUIssuer}\r\n                        </td>\r\n                        <td className=\"p-2\">\r\n                          {getPLCAndShareInformation.AoADate}\r\n                        </td>\r\n                        {/* <td className=\"p-2\">{getPLCAndShareInformation.AoAReferenceNumber}</td>\r\n                           <td className=\"p-2\">{getPLCAndShareInformation.AoAAuthDate}</td>\r\n                          <td className=\"p-2\">{getPLCAndShareInformation.AoAAuthRefNumber}</td>\r\n                          <td className=\"p-2\">{getPLCAndShareInformation.AoADocument}</td>\r\n                          <td className=\"p-2\">{getPLCAndShareInformation.MinuteDate}</td> */}\r\n                        <td className=\"p-2\">\r\n                          {getPLCAndShareInformation.MinuteReferenceNumber}\r\n                        </td>\r\n                        <td className=\"p-2\">\r\n                          {getPLCAndShareInformation.MinuteAuthDate}\r\n                        </td>\r\n                        {/* <td className=\"p-2\">{getPLCAndShareInformation.MinuteAuthRefNumber}</td>\r\n                          <td className=\"p-2\">{getPLCAndShareInformation.MinuteDocument}</td> */}\r\n                        <td className=\"p-2\">\r\n                          {getPLCAndShareInformation.MinuteIssuer}\r\n                        </td>\r\n                        <td className=\"p-2\">\r\n                          {getPLCAndShareInformation.MinuteAgenda}\r\n                        </td>\r\n                        <td>\r\n                          <button\r\n                            type=\"submit\"\r\n                            onClick={() => {\r\n                              handleGeneralPLCAndShareTaxDetailOpenModal();\r\n                              getCompanyPLCAndShareTaxInformationById(\r\n                                getPLCAndShareInformation.Id\r\n                              );\r\n                            }}\r\n                            className=\"text-purple-600 rounded-md font-semibold \"\r\n                          >\r\n                            Tax Detail\r\n                          </button>\r\n                        </td>\r\n                        <td>\r\n                          <button\r\n                            type=\"submit\"\r\n                            onClick={() => {\r\n                              handleCompanyGuarantorOpenModal();\r\n                              getGuarantor(getPLCAndShareInformation.Id);\r\n                              setPLCAndShareInformationId(\r\n                                getPLCAndShareInformation.Id\r\n                              );\r\n                            }}\r\n                            className=\"text-purple-600 rounded-md font-semibold \"\r\n                          >\r\n                            Guarantor detail\r\n                          </button>\r\n                        </td>\r\n                        <td>\r\n                          <button\r\n                            type=\"submit\"\r\n                            onClick={() => {\r\n                              handleGeneralOtherBankCreditExposureOpenModal();\r\n                              getCompanyOtherBankCreditExposureInformationById(\r\n                                getPLCAndShareInformation.Id\r\n                              );\r\n                              setPLCAndShareInformationId(\r\n                                getPLCAndShareInformation.Id\r\n                              );\r\n                            }}\r\n                            className=\"text-purple-600 rounded-md font-semibold \"\r\n                          >\r\n                            Credit Exposure\r\n                          </button>\r\n                        </td>\r\n                        <td>\r\n                          <button\r\n                            type=\"submit\"\r\n                            onClick={() => {\r\n                              handleCompanyShareHolderOpenModal();\r\n                              getShareHolder(getPLCAndShareInformation.Id);\r\n                              setPLCAndShareInformationId(\r\n                                getPLCAndShareInformation.Id\r\n                              );\r\n                            }}\r\n                            className=\"text-purple-600 rounded-md font-semibold \"\r\n                          >\r\n                            Share Holder\r\n                          </button>\r\n                        </td>\r\n                        <td>\r\n                          <LoanIconButton\r\n                            style={{ color: \"green\" }}\r\n                            icon={<MdModeEdit />}\r\n                            text=\"Edit\"\r\n                            onClick={() => {\r\n                              handleCompanyPLCAndShareInformationEditOpenModal();\r\n                              getPLCAndShareInformationBy(\r\n                                getPLCAndShareInformation.Id\r\n                              );\r\n                            }}\r\n                          />\r\n                          <LoanIconButton\r\n                            style={{ color: \"red\" }}\r\n                            icon={<IoTrashOutline />}\r\n                            text=\"Delete\"\r\n                            onClick={() => handleDelete(PLCAndShare)}\r\n                          />\r\n                        </td>\r\n                      </tr>\r\n                    </tbody>\r\n                  </table>\r\n                ) : (\r\n                  \"\"\r\n                )}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default ViewPLCAndShareInfo;\r\n",["1074"],"C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\SOEAndGovernmental\\ViewSOEAndGovernmental.jsx",["1075","1076","1077","1078","1079","1080","1081","1082","1083","1084","1085","1086","1087","1088","1089","1090"],[],"import { useParams, useNavigate, Link } from \"react-router-dom\";\r\nimport CompanyNavigation from \"../../Common/CompanyNavigation\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { FaSpinner, FaFileDownload } from \"react-icons/fa\";\r\nimport CommonServices from \"../Common/CommonServices\";\r\nimport LoanTextField from \"../../Common/LoanTextField\";\r\nimport LoanIconButton from \"../../Common/LoanIconButton\";\r\nimport { BsPlus } from \"react-icons/bs\";\r\nimport { BiSkipNext, BiSkipPrevious, BiPlus, BiPencil } from \"react-icons/bi\";\r\nimport { MdNoteAdd } from \"react-icons/md\";\r\nimport CompanySOEAndGovernmentalService from \"./CompanySOEAndGovernmentalService\";\r\nimport { MdModeEdit } from \"react-icons/md\";\r\nimport AddSOEAndGovernmentalTax from \"./Tax/AddSOEAndGovernmentalTax\";\r\nimport UploadSOEAndGovernmental from \"./UploadSOEAndGovernmental\";\r\nimport EditSOEAndGovernmentalComponent from \"./EditSOEAndGovernmentalComponent\";\r\nimport { TextField } from \"@mui/material\";\r\nimport { LocalizationProvider } from \"@mui/x-date-pickers/LocalizationProvider\";\r\nimport { AdapterDayjs } from \"@mui/x-date-pickers/AdapterDayjs\";\r\nimport { DesktopDatePicker } from \"@mui/x-date-pickers/DesktopDatePicker\";\r\nimport SOEAndGovernmentalTaxService from \"./Tax/SOEAndGovernmentalTaxService\";\r\nconst ViewSOEAndGovernmental = () => {\r\n  const { companyId } = useParams();\r\n  const [error, setError] = useState(null);\r\n  const [seoAndGovernmental, setSeoAndGovernmental] = useState(null);\r\n  const [loading, setLoading] = useState(false);\r\n  const [soeAndGovernmentErrorLoading, setSoeAndGovernmentErrorLoading] =\r\n    useState(false);\r\n  const [progress, setProgress] = useState(0);\r\n  const [currentFile, setCurrentFile] = useState(undefined);\r\n  const [selectedFiles, setSelectedFiles] = useState(undefined);\r\n  const [message, setMessage] = useState(\"\");\r\n  const [formController, setFormController] = useState(false);\r\n  const [uploadFormController, setUploadFormController] = useState(false);\r\n  const [addTaxFormController, setAddTaxFormController] = useState(false);\r\n  const [addGarantorFormController, setAddGarantorFormController] =\r\n    useState(false);\r\n  const [selectedPathSOEAndGovernmental, setSelectedPathSOEAndGovernmental] =\r\n    useState();\r\n  const [fileInfos, setFileInfos] = useState([]);\r\n  const [isSOEAndGovernmentalOpenModal, setIsSOEAndGovernmentalOpenModal] =\r\n    useState(false);\r\n  const initialSOEAndGovernmental = {\r\n    Id: null,\r\n    PublicationOrProclamationDocument: \"\",\r\n  };\r\n  const navigate = useNavigate();\r\n  const handleIsSOEAndGovernmental = () => {\r\n    setIsSOEAndGovernmentalOpenModal(true);\r\n  };\r\n  function handleIsSOEAndGovernmentalModalClose() {\r\n    setIsSOEAndGovernmentalOpenModal(false);\r\n  }\r\n  const getSOEAndGovernmental = () => {\r\n    setSoeAndGovernmentErrorLoading(true);\r\n    setTimeout(() => {\r\n      CompanySOEAndGovernmentalService.getSOEAndGovernmental(companyId)\r\n        .then((response) => {\r\n          debugger;\r\n          if (\r\n            response.data.Code === 200 ||\r\n            response.data.Message === \"Success\"\r\n          ) {\r\n            setSeoAndGovernmental(response.data.Result);\r\n            setSoeAndGovernmentErrorLoading(false);\r\n          } else {\r\n            setSoeAndGovernmentErrorLoading(false);\r\n            setError(\"Something went wrong\");\r\n            throw new Error(\"Data not found\");\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          if (error.response.data.StatusCode === 404) {\r\n            setError(\"SOE not found\");\r\n            setSoeAndGovernmentErrorLoading(false);\r\n          } else if (error.response.data.StatusCode === 400) {\r\n            setError(\"Something went wrong\");\r\n            setSoeAndGovernmentErrorLoading(false);\r\n          } else if (error.response.data.StatusCode === 401) {\r\n            navigate(\"/login\");\r\n          } else if (error.response.data.StatusCode === 403) {\r\n            navigate(\"/login\");\r\n          }\r\n        });\r\n    }, 1000);\r\n  };\r\n  useEffect(() => {\r\n    getSOEAndGovernmental();\r\n  }, []);\r\n  const [SOEAndGovernmental, setSOEAndGovernmental] = useState(\r\n    initialSOEAndGovernmental\r\n  );\r\n  const selectFile2 = (event) => {\r\n    setSelectedFiles(event.target.files);\r\n    const { name, value } = event.target;\r\n    setSOEAndGovernmental({ ...SOEAndGovernmental, [name]: value });\r\n  };\r\n  // const saveSOEAndGovernmental = () => {\r\n  //   CompanySOEAndGovernmentalService.addSOEAndGovernmental(\r\n  //     {\r\n  //       CompanyID: companyId,\r\n  //       PublicationOrProclamationDocument: selectedPathSOEAndGovernmental,\r\n  //     },\r\n  //     companyId\r\n  //   )\r\n  //     .then((response) => {\r\n  //       console.log(\"response.data\");\r\n  //       console.log(response.data);\r\n  //       console.log(response.data);\r\n  //     })\r\n  //     .catch((e) => {\r\n  //       console.log(e);\r\n  //     });\r\n  // };\r\n  const uploadSEOAndGovernmentalDocument = () => {\r\n    let currentFile = selectedFiles[0];\r\n    setProgress(0);\r\n    setCurrentFile(currentFile);\r\n    CommonServices.uploadSEOAndGovernmentalFile(currentFile, (event) => {\r\n      setProgress(Math.round((100 * event.loaded) / event.total));\r\n    })\r\n      .then((response) => {\r\n        setMessage(response.data.message);\r\n        CompanySOEAndGovernmentalService.addSOEAndGovernmental(\r\n          {\r\n            CompanyID: companyId,\r\n            PublicationOrProclamationDocument: response.data.Result,\r\n          },\r\n          companyId\r\n        ).then((response) => {\r\n          getSOEAndGovernmental();\r\n          setUploadFormController(false);\r\n        });\r\n        // saveSOEAndGovernmental();\r\n      })\r\n      .then((files) => {\r\n        setFileInfos(files.data);\r\n      })\r\n      .catch(() => {\r\n        setProgress(0);\r\n        setCurrentFile(undefined);\r\n      });\r\n    setSelectedFiles(undefined);\r\n  };\r\n  const handleBack = () => {\r\n    navigate(`/enterprise/senior-and-management-staff/${companyId}`);\r\n  };\r\n  const handleSkip = () => {\r\n    navigate(`/enterprise/senior-and-management-staff/${companyId}`);\r\n  };\r\n  const handleSOEAndGovernmentalUpload = () => {\r\n    setUploadFormController(!uploadFormController);\r\n  };\r\n  const handleSoeAndGovernmentalModify = () => {\r\n    alert(\"Handle Modify\");\r\n  };\r\n  const handleEditSOEAndGovernmentalOpenModal = () => {\r\n    alert(\"Handle Editting\");\r\n  };\r\n  const handleAddTax = () => {\r\n    setAddTaxFormController(!addTaxFormController);\r\n    setAddGarantorFormController(false);\r\n    setUploadFormController(false);\r\n  };\r\n  const handleAddGaranter = () => {\r\n    setAddGarantorFormController(!addGarantorFormController);\r\n    setAddTaxFormController(false);\r\n    setUploadFormController(false);\r\n  };\r\n  const soeAndGovernmentalTax = () => {\r\n    alert(\"Handle first field\");\r\n  };\r\n  const [selectedSOEAndGovernmentalId, setSelectedSOEAndGovernmentalId] =\r\n    useState();\r\n  const initialSoeTaxInitailState = {\r\n    sOEAndGovernmentalId: null,\r\n    Name: \"\",\r\n    TinNo: \"\",\r\n    Certificate: \"\",\r\n    IssueDate: \"\",\r\n    Expireddate: \"\",\r\n    TaxDebit: \"\",\r\n  };\r\n  const [soeTax, setSoeTax] = useState(initialSoeTaxInitailState);\r\n  const handleInputChangeSoeAndGovernmentalTax = (event) => {\r\n    const { name, value } = event.target;\r\n    setSoeTax({ ...soeTax, [name]: value });\r\n  };\r\n  const SaveSOEAndGovernmentalTax = (e) => {\r\n    e.preventDefault();\r\n    var data = {\r\n      Name: soeTax.Name,\r\n      TinNo: soeTax.TinNo,\r\n      Certificate: soeTax.Certificate,\r\n      IssueDate: soeTax.IssueDate,\r\n      Expireddate: soeTax.Expireddate,\r\n      TaxDebit: soeTax.TaxDebit,\r\n    };\r\n    SOEAndGovernmentalTaxService.addSOEAndGovernmentalTax(\r\n      data,\r\n      selectedSOEAndGovernmentalId\r\n    )\r\n      .then((response) => {\r\n        setSoeTax({\r\n          sOEAndGovernmentalId: response.data.sOEAndGovernmentalId,\r\n          Name: response.data.Name,\r\n          TinNo: response.data.TinNo,\r\n          Certificate: response.data.Certificate,\r\n          IssueDate: response.data.IssueDate,\r\n          Expireddate: response.data.Expireddate,\r\n          TaxDebit: response.data.TaxDebit,\r\n        });\r\n        // setSubmitted(true);\r\n        debugger;\r\n        console.log(response.data);\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n  return (\r\n    <div className=\"flex\">\r\n      <CompanyNavigation />\r\n      <div className=\"px-4 py-3\">\r\n        <div className=\"flex flex-wrap\">\r\n          <div className=\"w-full\">\r\n            <div>\r\n              <h4 className=\"text-lg font-semibold eading-tight p-2\">\r\n                SOE and Governmental\r\n              </h4>\r\n              <div className=\"flex\">\r\n                <LoanIconButton\r\n                  style={{ color: \"purple\" }}\r\n                  icon={<BiSkipPrevious />}\r\n                  text=\"Back\"\r\n                  onClick={handleBack}\r\n                />\r\n                {seoAndGovernmental ? (\r\n                  <LoanIconButton\r\n                    style={{ color: \"purple\" }}\r\n                    icon={<BiPencil />}\r\n                    text=\"Modify\"\r\n                    onClick={handleSoeAndGovernmentalModify}\r\n                  />\r\n                ) : (\r\n                  <LoanIconButton\r\n                    style={{ color: \"purple\" }}\r\n                    icon={<BiPlus />}\r\n                    text=\"Add\"\r\n                    onClick={handleSOEAndGovernmentalUpload}\r\n                  />\r\n                )}\r\n                <LoanIconButton\r\n                  style={{ color: \"purple\" }}\r\n                  icon={<BiSkipNext />}\r\n                  text=\"Skip\"\r\n                  onClick={handleSkip}\r\n                />\r\n              </div>\r\n              <EditSOEAndGovernmentalComponent\r\n                isSOEAndGovernmentalOpenModal={isSOEAndGovernmentalOpenModal}\r\n                handleIsSOEAndGovernmentalModalClose={\r\n                  handleIsSOEAndGovernmentalModalClose\r\n                }\r\n              />\r\n              {error && <p className=\"text-red-500\">{error}</p>}\r\n              {!error && soeAndGovernmentErrorLoading ? (\r\n                <span>\r\n                  <FaSpinner\r\n                    className=\"animate-spin rounded-full h-6 w-6 text-purple-600\"\r\n                    fontSize=\"small\"\r\n                    data-toggle=\"tooltip\"\r\n                    title=\"Click it to sign in\"\r\n                  />\r\n                  Loading...\r\n                </span>\r\n              ) : (\r\n                !error &&\r\n                !soeAndGovernmentErrorLoading && (\r\n                  <table className=\"table table-bordered table-striped bg-purple-100\">\r\n                    <thead>\r\n                      <tr className=\"bg-purple-200 \">\r\n                        <th className=\"px-2 py-4\"> File </th>\r\n                        <th className=\"px-2 py-4\"> Action </th>\r\n                      </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                      {seoAndGovernmental ? (\r\n                        <tr\r\n                          className=\"bg-white\r\n                    border-b border-purple-200\"\r\n                          key={seoAndGovernmental.Id}\r\n                        >\r\n                          <td>\r\n                            <a\r\n                              href={\r\n                                seoAndGovernmental.PublicationOrProclamationDocument\r\n                              }\r\n                            >\r\n                              {\r\n                                seoAndGovernmental.PublicationOrProclamationDocument\r\n                              }\r\n                              <LoanIconButton\r\n                                style={{ color: \"green\" }}\r\n                                icon={<FaFileDownload />}\r\n                                text=\"Download doc\"\r\n                              />\r\n                            </a>\r\n                          </td>\r\n                          <td>\r\n                            {seoAndGovernmental.TaxClearance ? (\r\n                              <LoanIconButton\r\n                                style={{ color: \"green\" }}\r\n                                icon={<MdModeEdit />}\r\n                                text=\"Modify Tax\"\r\n                                EditSOEAndGovernmental\r\n                                onClick={() => {\r\n                                  handleIsSOEAndGovernmental();\r\n                                }}\r\n                              />\r\n                            ) : (\r\n                              <LoanIconButton\r\n                                style={{ color: \"green\" }}\r\n                                icon={<MdNoteAdd />}\r\n                                text=\"Add Tax\"\r\n                                EditSOEAndGovernmental\r\n                                onClick={() => {\r\n                                  handleAddTax();\r\n                                  setSelectedSOEAndGovernmentalId(\r\n                                    seoAndGovernmental.Id\r\n                                  );\r\n                                }}\r\n                              />\r\n                            )}\r\n                            {seoAndGovernmental.Guarantor ? (\r\n                              <LoanIconButton\r\n                                style={{ color: \"green\" }}\r\n                                icon={<MdModeEdit />}\r\n                                text=\"Modify Guarantor\"\r\n                                EditSOEAndGovernmental\r\n                                onClick={() => {\r\n                                  handleIsSOEAndGovernmental();\r\n                                }}\r\n                              />\r\n                            ) : (\r\n                              <LoanIconButton\r\n                                style={{ color: \"green\" }}\r\n                                icon={<MdNoteAdd />}\r\n                                text=\"Add Guarantor\"\r\n                                EditSOEAndGovernmental\r\n                                onClick={() => {\r\n                                  handleAddGaranter();\r\n                                }}\r\n                              />\r\n                            )}\r\n\r\n                            <LoanIconButton\r\n                              style={{ color: \"green\" }}\r\n                              icon={<MdModeEdit />}\r\n                              text=\"Edit\"\r\n                              EditSOEAndGovernmental\r\n                              onClick={() => {\r\n                                handleIsSOEAndGovernmental();\r\n                                // setEmployeeId(emp.Id);\r\n                                // getEmployeeInformationBy(emp.Id);\r\n                              }}\r\n                            />\r\n                            <Link\r\n                              to={`/enterprise/soe-and-governmental/${companyId}`}\r\n                            >\r\n                              <LoanIconButton\r\n                                style={{ color: \"purple\" }}\r\n                                icon={<BiSkipNext />}\r\n                                text=\"Next\"\r\n                              />\r\n                            </Link>\r\n                          </td>\r\n                        </tr>\r\n                      ) : (\r\n                        \"\"\r\n                      )}\r\n                    </tbody>\r\n                  </table>\r\n                )\r\n              )}\r\n              {uploadFormController ? (\r\n                <UploadSOEAndGovernmental\r\n                  currentFile={currentFile}\r\n                  progress={progress}\r\n                  selectFile2={selectFile2}\r\n                  selectedFiles={selectedFiles}\r\n                  uploadSEOAndGovernmentalDocument={\r\n                    uploadSEOAndGovernmentalDocument\r\n                  }\r\n                  message={message}\r\n                />\r\n              ) : (\r\n                \"\"\r\n              )}\r\n              {addTaxFormController ? (\r\n                // <AddSOEAndGovernmentalTax\r\n                //   SaveSOEAndGovernmentalTax={SaveSOEAndGovernmentalTax}\r\n                //   soeAndGovernmentalTax={soeAndGovernmentalTax}\r\n                //   handleInputChangeSoeAndGovernmentalTax={\r\n                //     handleInputChangeSoeAndGovernmentalTax\r\n                //   }\r\n                // />\r\n                <div className=\"border border-solid border-purple-100 mt-4\">\r\n                  <form onSubmit={SaveSOEAndGovernmentalTax}>\r\n                    <div className=\"justify-center flex-1 w-full max-w-full grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4 p-4\">\r\n                      <LoanTextField\r\n                        id=\"Name\"\r\n                        label=\"Name\"\r\n                        color=\"secondary\"\r\n                        variant=\"standard\"\r\n                        placeholder=\"Name\"\r\n                        name=\"Name\"\r\n                        onChange={handleInputChangeSoeAndGovernmentalTax}\r\n                        value={soeTax.Name}\r\n                      />\r\n                      <LoanTextField\r\n                        id=\"TinNo\"\r\n                        label=\"TinNo\"\r\n                        color=\"secondary\"\r\n                        variant=\"standard\"\r\n                        placeholder=\"TinNo\"\r\n                        name=\"TinNo\"\r\n                        onChange={handleInputChangeSoeAndGovernmentalTax}\r\n                        value={soeTax.TinNo}\r\n                      />\r\n                      <LoanTextField\r\n                        id=\"Certificate\"\r\n                        label=\"Certificate\"\r\n                        color=\"secondary\"\r\n                        variant=\"standard\"\r\n                        placeholder=\"Certificate\"\r\n                        name=\"Certificate\"\r\n                        onChange={handleInputChangeSoeAndGovernmentalTax}\r\n                        value={soeTax.Certificate}\r\n                      />\r\n                      <LoanTextField\r\n                        id=\"IssueDate\"\r\n                        label=\"Certificate\"\r\n                        color=\"secondary\"\r\n                        variant=\"standard\"\r\n                        placeholder=\"Certificate\"\r\n                        name=\"IssueDate\"\r\n                        onChange={handleInputChangeSoeAndGovernmentalTax}\r\n                        value={soeTax.IssueDate}\r\n                      />\r\n                      {/* <LocalizationProvider dateAdapter={AdapterDayjs}>\r\n                        <DesktopDatePicker\r\n                          id=\"IssueDate\"\r\n                          color=\"secondary\"\r\n                          label=\"Issue Date\"\r\n                          inputFormat=\"MM/DD/YYYY\"\r\n                          className=\"w-full max-w-full\"\r\n                          slotProps={{\r\n                            textField: {\r\n                              variant: \"standard\",\r\n                              color: \"secondary\",\r\n                            },\r\n                          }}\r\n                          renderInput={() => (\r\n                            <TextField\r\n                              onChange={handleInputChangeSoeAndGovernmentalTax}\r\n                              value={soeTax.IssueDate}\r\n                            />\r\n                          )}\r\n                        />\r\n                      </LocalizationProvider> */}\r\n\r\n                      <LoanTextField\r\n                        id=\"Expireddate\"\r\n                        label=\"Certificate\"\r\n                        color=\"secondary\"\r\n                        variant=\"standard\"\r\n                        placeholder=\"Certificate\"\r\n                        name=\"Expireddate\"\r\n                        onChange={handleInputChangeSoeAndGovernmentalTax}\r\n                        value={soeTax.Expireddate}\r\n                      />\r\n\r\n                      {/* <LocalizationProvider dateAdapter={AdapterDayjs}>\r\n                        <DesktopDatePicker\r\n                          id=\"Expireddate\"\r\n                          color=\"secondary\"\r\n                          label=\"Expired Date\"\r\n                          inputFormat=\"MM/DD/YYYY\"\r\n                          className=\"w-full max-w-full\"\r\n                          slotProps={{\r\n                            textField: {\r\n                              variant: \"standard\",\r\n                              color: \"secondary\",\r\n                            },\r\n                          }}\r\n                          renderInput={() => (\r\n                            <TextField\r\n                              onChange={handleInputChangeSoeAndGovernmentalTax}\r\n                              value={soeTax.Expireddate}\r\n                            />\r\n                          )}\r\n                        />\r\n                      </LocalizationProvider> */}\r\n                      <LoanTextField\r\n                        id=\"TaxDebit\"\r\n                        label=\"TaxDebit\"\r\n                        name=\"TaxDebit\"\r\n                        color=\"secondary\"\r\n                        variant=\"standard\"\r\n                        placeholder=\"TaxDebit\"\r\n                        onChange={handleInputChangeSoeAndGovernmentalTax}\r\n                        value={soeTax.TaxDebit}\r\n                      />\r\n                    </div>\r\n                    <div className=\"flex justify-center p-4\">\r\n                      <button\r\n                        type=\"submit\"\r\n                        className=\"bg-[purple] hover:bg-purple-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\"\r\n                      >\r\n                        Save\r\n                      </button>\r\n                    </div>\r\n                  </form>\r\n                </div>\r\n              ) : (\r\n                \"\"\r\n              )}\r\n              {addGarantorFormController ? <p>Add Garantor</p> : \"\"}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default ViewSOEAndGovernmental;\r\n","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\Employee\\CompanyEmployeesService.js",[],[],"C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\Address\\CompanyAddressService.js",[],[],"C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\Employee\\AddCompanyEmployee.js",["1091","1092","1093"],[],"import { TextField, IconButton } from \"@mui/material\";\r\nimport { BsPlus } from \"react-icons/bs\";\r\nimport { BiSkipNext } from \"react-icons/bi\";\r\nimport { RiSkipBackMiniFill } from \"react-icons/ri\";\r\nimport CompanyModal from \"../Common/CompanyModal\";\r\nimport { useState } from \"react\";\r\nimport { BiSkipPrevious } from \"react-icons/bi\";\r\nimport LoanIconButton from \"../../Common/LoanIconButton\";\r\nimport LoanTextField from \"../../Common/LoanTextField\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useParams } from \"react-router-dom\";\r\nconst AddCompanyEmployee = ({\r\n  employee,\r\n  newEmployee,\r\n  handleInputChangeEmployee,\r\n  handleBack,\r\n  saveEmployee,\r\n  handleSkip,\r\n  handlePrevios,\r\n}) => {\r\n  const { companyId } = useParams();\r\n  const [isCompanyEmployeeSoleModalOpen, setIsCompanyEmployeeSoleModalOpen] =\r\n    useState(false);\r\n\r\n  function handleCompanyEmployeeSoleCloseModal() {\r\n    setIsCompanyEmployeeSoleModalOpen(false);\r\n  }\r\n  function handleCompanyEmployeeSoleOpenModal() {\r\n    setIsCompanyEmployeeSoleModalOpen(true);\r\n  }\r\n  return (\r\n    <>\r\n      <div className=\"flex\">\r\n        <Link to={`/trade/${companyId}`}>\r\n          <LoanIconButton\r\n            style={{ color: \"purple\" }}\r\n            icon={<BiSkipPrevious />}\r\n            text=\"Trade Registartion\"\r\n            onClick={handlePrevios}\r\n          />\r\n        </Link>\r\n        <LoanIconButton\r\n          style={{ color: \"purple\" }}\r\n          icon={<BsPlus />}\r\n          text=\"Add\"\r\n          onClick={handleCompanyEmployeeSoleOpenModal}\r\n        />\r\n        <Link to={`/enterprise/senior-and-management-staff/${companyId}`}>\r\n          <LoanIconButton\r\n            style={{ color: \"purple\" }}\r\n            icon={<BiSkipNext />}\r\n            text=\"Senior Management Staff\"\r\n            onClick={handleSkip}\r\n          />\r\n        </Link>\r\n      </div>\r\n      <CompanyModal\r\n        isOpen={isCompanyEmployeeSoleModalOpen}\r\n        onClose={handleCompanyEmployeeSoleCloseModal}\r\n        title=\"Add company Employee information\"\r\n      >\r\n        <div>\r\n          <form onSubmit={saveEmployee}>\r\n            <div className=\"relative center justify-center flex-1 w-full max-w-full grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\">\r\n              <LoanTextField\r\n                id=\"BudgetYear\"\r\n                label=\"Budget Year\"\r\n                value={employee.BudgetYear}\r\n                onChange={handleInputChangeEmployee}\r\n                name=\"BudgetYear\"\r\n              />\r\n              <LoanTextField\r\n                id=\"PermanentEmployeeCount\"\r\n                label=\"Permanent Employee Count\"\r\n                value={employee.PermanentEmployeeCount}\r\n                onChange={handleInputChangeEmployee}\r\n                name=\"PermanentEmployeeCount\"\r\n              />\r\n              <LoanTextField\r\n                id=\"TemporaryEmployeeCount\"\r\n                label=\"Temporary Employee Count\"\r\n                value={employee.TemporaryEmployeeCount}\r\n                onChange={handleInputChangeEmployee}\r\n                name=\"TemporaryEmployeeCount\"\r\n              />\r\n              <LoanTextField\r\n                id=\"ContractEmployeeCount\"\r\n                label=\"Contract Employee Count\"\r\n                value={employee.ContractEmployeeCount}\r\n                onChange={handleInputChangeEmployee}\r\n                name=\"ContractEmployeeCount\"\r\n              />\r\n            </div>\r\n            <div className=\"flex justify-center pt-4\">\r\n              <button\r\n                type=\"submit\"\r\n                className=\"bg-[purple] hover:bg-purple-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\"\r\n              >\r\n                Save\r\n              </button>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </CompanyModal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AddCompanyEmployee;\r\n","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\SeniorManagementStaff\\CompanySeniorManagementStaffService.js",[],[],"C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\SoleAndPartnership\\SoleAndPartnershipService.js",[],[],"C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\PLCAndShare\\PLCAndShareService.js",[],[],"C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\Basic\\EditCompanyInformation.jsx",[],[],"C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\Common\\CommonServices.js",["1094","1095","1096","1097","1098","1099"],[],"import api from \"../../API/Api\";\r\n\r\nconst uploadSEOAndGovernmentalFile = (file, onUploadProgress) => {\r\n  let formData = new FormData();\r\n  formData.append(\"file\", file);\r\n  // debugger;\r\n  return api.post(\"/FileUpload?foldername=SEOAndGovernmentalFile\", formData, {\r\n    headers: {\r\n      \"Content-Type\": \"multipart/form-data\",\r\n    },\r\n    onUploadProgress,\r\n  });\r\n};\r\n\r\nconst getCompanyTypeFromAll = (id) => {\r\n  debugger;\r\n  return api.get(`Company/${id}`, {\r\n    headers: {\r\n      Authorization: `bearer ${localStorage.getItem(\"token\")}`,\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n  });\r\n};\r\n//tiztaw\r\nconst getCompanyType = () => {\r\n  return api.get(\"/companyType/All\");\r\n};\r\nconst getEntitype = () => {\r\n  return api.get(\"/entityType/All\");\r\n};\r\nconst getCountry = () => {\r\n  return api.get(\"/country/All\");\r\n};\r\nconst getRegion = () => {\r\n  return api.get(\"/Regions/All\");\r\n};\r\nconst getProofOfIdentityTypes = () => {\r\n  return api.get(`/ProofOfIdentityType/All`, {\r\n    headers: {\r\n      Authorization: `bearer ${localStorage.getItem(\"token\")}`,\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n  });\r\n};\r\nconst getMaritalStatus = () => {\r\n  return api.get(\"/MaritalStatusType/All\", {\r\n    headers: {\r\n      Authorization: `bearer ${localStorage.getItem(\"token\")}`,\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n  });\r\n};\r\nconst getMartialStatusBySoleMarriedId = (soleAndPartnershipId) => {\r\n  return api.get(`SoleAndPartnership/${soleAndPartnershipId}/Married`, {\r\n    headers: {\r\n      Authorization: `bearer ${localStorage.getItem(\"token\")}`,\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n  });\r\n};\r\nconst getUnMartialStatusBySoleMarriedId = (soleAndPartnershipId) => {\r\n  return api.get(`SoleAndPartnership/${soleAndPartnershipId}/Unmarried`, {\r\n    headers: {\r\n      Authorization: `bearer ${localStorage.getItem(\"token\")}`,\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n  });\r\n};\r\nconst marriedSole = (data, Id) => {\r\n  return api.post(`SoleAndPartnership/${Id}/Married`, data, {\r\n    headers: {\r\n      Authorization: `bearer ${localStorage.getItem(\"token\")}`,\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n  });\r\n};\r\nconst getMarried = (Id) => {\r\n  return api.get(`SoleAndPartnership/Married/${Id}`, {\r\n    headers: {\r\n      Authorization: `bearer ${localStorage.getItem(\"token\")}`,\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n  });\r\n};\r\nconst updateMarried = (Id, data) => {\r\n  debugger;\r\n  return api.put(`SoleAndPartnership/Married/${Id}`, data, {\r\n    headers: {\r\n      Authorization: `bearer ${localStorage.getItem(\"token\")}`,\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n  });\r\n};\r\nconst getUnmarried = (Id) => {\r\n  return api.get(`SoleAndPartnership/Unmarried/${Id}`, {\r\n    headers: {\r\n      Authorization: `bearer ${localStorage.getItem(\"token\")}`,\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n  });\r\n};\r\nconst updateUnmarried = (Id, data) => {\r\n  debugger;\r\n  return api.put(`/soleAndPartnership/Unmarried/${Id}`, data, {\r\n    headers: {\r\n      Authorization: `bearer ${localStorage.getItem(\"token\")}`,\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n  });\r\n};\r\nconst UnmarriedSole = (data, Id) => {\r\n  return api.post(`SoleAndPartnership/${Id}/Unmarried`, data, {\r\n    headers: {\r\n      Authorization: `bearer ${localStorage.getItem(\"token\")}`,\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n  });\r\n};\r\nconst getWidowedStatusBySoleMarriedId = (soleAndPartnershipId) => {\r\n  return api.get(`SoleAndPartnership/${soleAndPartnershipId}/Widowed`, {\r\n    headers: {\r\n      Authorization: `bearer ${localStorage.getItem(\"token\")}`,\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n  });\r\n};\r\nconst getWidowed = (Id) => {\r\n  return api.get(`/soleAndPartnership/Widowed/${Id}`, {\r\n    headers: {\r\n      Authorization: `bearer ${localStorage.getItem(\"token\")}`,\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n  });\r\n};\r\nconst updateWidowed = (Id, data) => {\r\n  return api.put(`/soleAndPartnership/Widowed/${Id}`, data, {\r\n    headers: {\r\n      Authorization: `bearer ${localStorage.getItem(\"token\")}`,\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n  });\r\n};\r\nconst getDivorcedStatusBySoleMarriedId = (soleAndPartnershipId) => {\r\n  return api.get(`SoleAndPartnership/${soleAndPartnershipId}/Divorced`, {\r\n    headers: {\r\n      Authorization: `bearer ${localStorage.getItem(\"token\")}`,\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n  });\r\n};\r\nconst divorcedSole = (data, Id) => {\r\n  return api.post(`SoleAndPartnership/${Id}/Divorced`, data, {\r\n    headers: {\r\n      Authorization: `bearer ${localStorage.getItem(\"token\")}`,\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n  });\r\n};\r\nconst getDivorced = (Id) => {\r\n  return api.get(`/soleAndPartnership/Divorced/${Id}`, {\r\n    headers: {\r\n      Authorization: `bearer ${localStorage.getItem(\"token\")}`,\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n  });\r\n};\r\nconst updateDivorced = (Id, data) => {\r\n  return api.put(`/SoleAndPartnership/Divorced/${Id}`, data, {\r\n    headers: {\r\n      Authorization: `bearer ${localStorage.getItem(\"token\")}`,\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n  });\r\n};\r\nconst getTaxByMarriedId = (Id) => {\r\n  return api.get(`/SoleAndPartnership/Married/${Id}/TaxClerance`, {\r\n    headers: {\r\n      Authorization: `bearer ${localStorage.getItem(\"token\")}`,\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n  });\r\n};\r\nconst getMarriedTax = (Id) => {\r\n  return api.get(`/TaxClerance/${Id}`, {\r\n    headers: {\r\n      Authorization: `bearer ${localStorage.getItem(\"token\")}`,\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n  });\r\n};\r\nconst updateMarriedTax = (Id, data) => {\r\n  return api.put(`/TaxClerance/${Id}`, data, {\r\n    headers: {\r\n      Authorization: `bearer ${localStorage.getItem(\"token\")}`,\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n  });\r\n};\r\nconst addMarriedTax = (data, Id) => {\r\n  return api.post(`SoleAndPartnership/Married/${Id}/TaxClerance`, data, {\r\n    headers: {\r\n      Authorization: `bearer ${localStorage.getItem(\"token\")}`,\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n  });\r\n};\r\nconst getSoleTax = (Id) => {\r\n  return api.get(`/company/SoleAndPartnership/${Id}/TaxClerance`, {\r\n    headers: {\r\n      Authorization: `bearer ${localStorage.getItem(\"token\")}`,\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n  });\r\n};\r\nconst getTax = (Id) => {\r\n  return api.get(`/TaxClerance/${Id}`, {\r\n    headers: {\r\n      Authorization: `bearer ${localStorage.getItem(\"token\")}`,\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n  });\r\n};\r\nconst updateTax = (Id, data) => {\r\n  debugger;\r\n  return api.put(`/TaxClerance/${Id}`, data, {\r\n    headers: {\r\n      Authorization: `bearer ${localStorage.getItem(\"token\")}`,\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n  });\r\n};\r\n\r\nconst addTax = (data, Id) => {\r\n  debugger;\r\n  return api.post(`/company/SoleAndPartnership/${Id}/TaxClerance`, data, {\r\n    headers: {\r\n      Authorization: `bearer ${localStorage.getItem(\"token\")}`,\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n  });\r\n};\r\nconst getSoleDependent = (Id) => {\r\n  return api.get(`/SoleAndPartnership/${Id}/Dependent`, {\r\n    headers: {\r\n      Authorization: `bearer ${localStorage.getItem(\"token\")}`,\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n  });\r\n};\r\nconst getDependent = () => {\r\n  return api.get(`/DependentRelationshipType/Active`, {\r\n    headers: {\r\n      Authorization: `bearer ${localStorage.getItem(\"token\")}`,\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n  });\r\n};\r\nconst SoleDependent = (data, Id) => {\r\n  return api.post(`/SoleAndPartnership/${Id}/Dependent`, data, {\r\n    headers: {\r\n      Authorization: `bearer ${localStorage.getItem(\"token\")}`,\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n  });\r\n};\r\nconst getDependentById = (Id) => {\r\n  return api.get(`/SoleAndPartnership/Dependent/${Id}`, {\r\n    headers: {\r\n      Authorization: `bearer ${localStorage.getItem(\"token\")}`,\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n  });\r\n};\r\nconst updateDependent = (Id, data) => {\r\n  return api.put(`/SoleAndPartnership/Dependent/${Id}`, data, {\r\n    headers: {\r\n      Authorization: `bearer ${localStorage.getItem(\"token\")}`,\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n  });\r\n};\r\nconst deleteDependent = (Id) => {\r\n  return api.delete(`/SoleAndPartnership/Dependent/${Id}`, {\r\n    headers: {\r\n      Authorization: `bearer ${localStorage.getItem(\"token\")}`,\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n  });\r\n};\r\nconst getSoleGuarantorBySoleId = (Id) => {\r\n  return api.get(`/company/SoleAndPartnership/${Id}/Guarantor`, {\r\n    headers: {\r\n      Authorization: `bearer ${localStorage.getItem(\"token\")}`,\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n  });\r\n};\r\nconst getGuarantorById = (Id) => {\r\n  return api.get(`/Guarantors/${Id}`, {\r\n    headers: {\r\n      Authorization: `bearer ${localStorage.getItem(\"token\")}`,\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n  });\r\n};\r\nconst updateGuarantor = (Id, data) => {\r\n  debugger;\r\n  return api.put(`/Guarantors/${Id}`, data, {\r\n    headers: {\r\n      Authorization: `bearer ${localStorage.getItem(\"token\")}`,\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n  });\r\n};\r\nconst addGuarantor = (Id, data) => {\r\n  return api.post(`/company/SoleAndPartnership/${Id}/Guarantor/`, data, {\r\n    headers: {\r\n      Authorization: `bearer ${localStorage.getItem(\"token\")}`,\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n  });\r\n};\r\nconst getOtherBankCreditExposure = (Id) => {\r\n  return api.get(`/company/SoleAndPartnership/${Id}/OtherBankCreditExposure`, {\r\n    headers: {\r\n      Authorization: `bearer ${localStorage.getItem(\"token\")}`,\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n  });\r\n};\r\nconst getLoanType = () => {\r\n  return api.get(`/LoanType/Active`, {\r\n    headers: {\r\n      Authorization: `bearer ${localStorage.getItem(\"token\")}`,\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n  });\r\n};\r\nconst getCurrency = () => {\r\n  return api.get(`/Currency/Active`, {\r\n    headers: {\r\n      Authorization: `bearer ${localStorage.getItem(\"token\")}`,\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n  });\r\n};\r\nconst payment = () => {\r\n  return api.get(`/RepaymentFrequency/Active`, {\r\n    headers: {\r\n      Authorization: `bearer ${localStorage.getItem(\"token\")}`,\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n  });\r\n};\r\nconst sector = () => {\r\n  return api.get(`/SectorType/Active`, {\r\n    headers: {\r\n      Authorization: `bearer ${localStorage.getItem(\"token\")}`,\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n  });\r\n};\r\nconst holdIndustry = (id) => {\r\n  return api.get(`/IndustryType/${id}/Active`, {\r\n    headers: {\r\n      Authorization: `bearer ${localStorage.getItem(\"token\")}`,\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n  });\r\n};\r\nconst addOtherBank = (Id, data) => {\r\n  debugger;\r\n  return api.post(\r\n    `/company/SoleAndPartnership/${Id}/OtherBankCreditExposure`,\r\n    data,\r\n    {\r\n      headers: {\r\n        Authorization: `bearer ${localStorage.getItem(\"token\")}`,\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    }\r\n  );\r\n};\r\nconst getOtherBankById = (id) => {\r\n  return api.get(`/OtherBankCreditExposure/${id}`, {\r\n    headers: {\r\n      Authorization: `bearer ${localStorage.getItem(\"token\")}`,\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n  });\r\n};\r\nconst getLoanStatus = () => {\r\n  return api.get(`/LoanStatus/Active`, {\r\n    headers: {\r\n      Authorization: `bearer ${localStorage.getItem(\"token\")}`,\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n  });\r\n};\r\nconst deleteOtherBank = (Id) => {\r\n  return api.delete(`/OtherBankCreditExposure/${Id}`, {\r\n    headers: {\r\n      Authorization: `bearer ${localStorage.getItem(\"token\")}`,\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n  });\r\n};\r\nconst getGuarantorSpouse = (Id) => {\r\n  return api.get(`/Guarantors/${Id}/GuarantorSpouse`, {\r\n    headers: {\r\n      Authorization: `bearer ${localStorage.getItem(\"token\")}`,\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n  });\r\n};\r\nconst getGuarantorUnMarried = (Id) => {\r\n  return api.get(`/Guarantors/${Id}/GuarantorUnmarried`, {\r\n    headers: {\r\n      Authorization: `bearer ${localStorage.getItem(\"token\")}`,\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n  });\r\n};\r\nconst getGuarantorEditUnMarried = (Id) => {\r\n  return api.get(`/Guarantors/GuarantorUnmarried/${Id}`, {\r\n    headers: {\r\n      Authorization: `bearer ${localStorage.getItem(\"token\")}`,\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n  });\r\n};\r\nconst getGuarantorMarried = (Id) => {\r\n  return api.get(`/Guarantor/GuarantorSpouse/${Id}`, {\r\n    headers: {\r\n      Authorization: `bearer ${localStorage.getItem(\"token\")}`,\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n  });\r\n};\r\nconst updateGuarantorMarried = (Id, data) => {\r\n  return api.put(`/Guarantor/GuarantorSpouse/${Id}`, data, {\r\n    headers: {\r\n      Authorization: `bearer ${localStorage.getItem(\"token\")}`,\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n  });\r\n};\r\nconst addGuarantorMarried = (Id, data) => {\r\n  debugger;\r\n  return api.post(`/Guarantors/${Id}/GuarantorSpouse`, data, {\r\n    headers: {\r\n      Authorization: `bearer ${localStorage.getItem(\"token\")}`,\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n  });\r\n};\r\nconst updateGuarantorUnMarried = (Id, data) => {\r\n  return api.put(`/Guarantor/GuarantorUnmarried/${Id}`, data, {\r\n    headers: {\r\n      Authorization: `bearer ${localStorage.getItem(\"token\")}`,\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n  });\r\n};\r\nconst addGuarantorUnMarried = (Id, data) => {\r\n  debugger;\r\n  return api.post(`/Guarantors/${Id}/GuarantorUnmarried`, data, {\r\n    headers: {\r\n      Authorization: `bearer ${localStorage.getItem(\"token\")}`,\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n  });\r\n};\r\nconst uploadFile = (Id, data) => {\r\n  debugger;\r\n  return api.post(`/Guarantors/${Id}/GuarantorUnmarried`, data, {\r\n    headers: {\r\n      Authorization: `bearer ${localStorage.getItem(\"token\")}`,\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n  });\r\n};\r\nconst upload = (file, onUploadProgress) => {\r\n  let formData = new FormData();\r\n  formData.append(\"file\", file);\r\n  // debugger;\r\n  return api.post(\"/FileUpload?foldername=SoleFile\", formData, {\r\n    headers: {\r\n      \"Content-Type\": \"multipart/form-data\",\r\n    },\r\n    onUploadProgress,\r\n  });\r\n};\r\nconst updateOtherBank = (Id, data) => {\r\n  debugger;\r\n  return api.put(`/OtherBankCreditExposure/${Id}`, data, {\r\n    headers: {\r\n      Authorization: `bearer ${localStorage.getItem(\"token\")}`,\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n  });\r\n};\r\nconst CommonServices = {\r\n  getCompanyTypeFromAll,\r\n  getCompanyType,\r\n  getEntitype,\r\n  getCountry,\r\n  getRegion,\r\n  getProofOfIdentityTypes,\r\n  getMaritalStatus,\r\n  uploadSEOAndGovernmentalFile,\r\n  updateOtherBank,\r\n  upload,\r\n  updateGuarantorUnMarried,\r\n  getGuarantorEditUnMarried,\r\n  addGuarantorUnMarried,\r\n  addGuarantorMarried,\r\n  getGuarantorMarried,\r\n  updateGuarantorMarried,\r\n  getGuarantorSpouse,\r\n  getGuarantorUnMarried,\r\n  deleteOtherBank,\r\n  getLoanStatus,\r\n  getOtherBankById,\r\n  addOtherBank,\r\n  holdIndustry,\r\n  sector,\r\n  payment,\r\n  getCurrency,\r\n  getLoanType,\r\n  getEntitype,\r\n  getCountry,\r\n  getRegion,\r\n  getProofOfIdentityTypes,\r\n  getMaritalStatus,\r\n  getMartialStatusBySoleMarriedId,\r\n  marriedSole,\r\n  getMarried,\r\n  updateMarried,\r\n  getUnmarried,\r\n  updateUnmarried,\r\n  getUnMartialStatusBySoleMarriedId,\r\n  UnmarriedSole,\r\n  getWidowedStatusBySoleMarriedId,\r\n  updateWidowed,\r\n  getWidowed,\r\n  updateDivorced,\r\n  getDivorced,\r\n  getDivorcedStatusBySoleMarriedId,\r\n  divorcedSole,\r\n  getTaxByMarriedId,\r\n  getMarriedTax,\r\n  updateMarriedTax,\r\n  addMarriedTax,\r\n  getSoleTax,\r\n  getTax,\r\n  updateTax,\r\n  addTax,\r\n  getSoleDependent,\r\n  getDependent,\r\n  SoleDependent,\r\n  getDependentById,\r\n  updateDependent,\r\n  deleteDependent,\r\n  getSoleGuarantorBySoleId,\r\n  getGuarantorById,\r\n  updateGuarantor,\r\n  addGuarantor,\r\n  getOtherBankCreditExposure,\r\n};\r\nexport default CommonServices;\r\n","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\Employee\\EditCompanyEmployee.jsx",["1100","1101","1102","1103"],[],"import {\r\n  TextField,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n} from \"@mui/material\";\r\nimport CompanyModal from \"../Common/CompanyModal\";\r\nconst EditCompanyEmployee = ({\r\n  isCompanyEmployeeInformationEditModalOpen,\r\n  handleCompanyEmployeeInformationEditCloseModal,\r\n  updateCompanyEmployeeInformationById,\r\n  editEmployeeInfo,\r\n  setEditEmployeeInfo,\r\n}) => {\r\n  return (\r\n    <div>\r\n      <CompanyModal\r\n        isOpen={isCompanyEmployeeInformationEditModalOpen}\r\n        onClose={handleCompanyEmployeeInformationEditCloseModal}\r\n        title=\"Edit company employee information\"\r\n      >\r\n        <div>\r\n          <form onSubmit={updateCompanyEmployeeInformationById}>\r\n            <div className=\"grid grid-cols-1 gap-4 submit-form\">\r\n              <div className=\"submit-form \">\r\n                <div className=\"relative center justify-center flex-1 w-full max-w-full grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\">\r\n                  <TextField\r\n                    id=\"BudgetYear\"\r\n                    label=\"BudgetYear\"\r\n                    variant=\"standard\"\r\n                    color=\"secondary\"\r\n                    size=\"\"\r\n                    required\r\n                    value={editEmployeeInfo.BudgetYear}\r\n                    onChange={(e) =>\r\n                      setEditEmployeeInfo({\r\n                        ...editEmployeeInfo,\r\n                        BudgetYear: e.target.value,\r\n                      })\r\n                    }\r\n                    name=\"BudgetYear\"\r\n                  />\r\n                  <TextField\r\n                    id=\"PermanentEmployeeCount\"\r\n                    label=\"Permanent Employee\"\r\n                    variant=\"standard\"\r\n                    color=\"secondary\"\r\n                    size=\"\"\r\n                    required\r\n                    value={editEmployeeInfo.PermanentEmployeeCount}\r\n                    onChange={(e) =>\r\n                      setEditEmployeeInfo({\r\n                        ...editEmployeeInfo,\r\n                        PermanentEmployeeCount: e.target.value,\r\n                      })\r\n                    }\r\n                    name=\"PermanentEmployeeCount\"\r\n                  />\r\n                  <TextField\r\n                    id=\"TemporaryEmployeeCount\"\r\n                    label=\"Temporary Employee\"\r\n                    variant=\"standard\"\r\n                    color=\"secondary\"\r\n                    size=\"\"\r\n                    required\r\n                    value={editEmployeeInfo.TemporaryEmployeeCount}\r\n                    onChange={(e) =>\r\n                      setEditEmployeeInfo({\r\n                        ...editEmployeeInfo,\r\n                        TemporaryEmployeeCount: e.target.value,\r\n                      })\r\n                    }\r\n                    name=\"TemporaryEmployeeCount\"\r\n                  />\r\n                  <TextField\r\n                    id=\"ContractEmployeeCount\"\r\n                    label=\"Contract Employee\"\r\n                    variant=\"standard\"\r\n                    color=\"secondary\"\r\n                    size=\"\"\r\n                    required\r\n                    value={editEmployeeInfo.ContractEmployeeCount}\r\n                    onChange={(e) =>\r\n                      setEditEmployeeInfo({\r\n                        ...editEmployeeInfo,\r\n                        ContractEmployeeCount: e.target.value,\r\n                      })\r\n                    }\r\n                    name=\"ContractEmployeeCount\"\r\n                  />\r\n                  {/* <TextField\r\n                    id=\"SeniorMngtStaffIDTM\"\r\n                    label=\"SeniorMngtStaffIDTM\"\r\n                    variant=\"standard\"\r\n                    color=\"secondary\"\r\n                    size=\"\"\r\n                    required\r\n                    value={editEmployeeInfo.SeniorMngtStaffIDTM}\r\n                    onChange={(e) =>\r\n                      setEditEmployeeInfo({\r\n                        ...editEmployeeInfo,\r\n                        SeniorMngtStaffIDTM: e.target.value,\r\n                      })\r\n                    }\r\n                    name=\"SeniorMngtStaffIDTM\"\r\n                  />\r\n                  <TextField\r\n                    id=\"TotalWorkExperiance\"\r\n                    label=\"TotalWorkExperiance\"\r\n                    variant=\"standard\"\r\n                    color=\"secondary\"\r\n                    size=\"\"\r\n                    required\r\n                    value={editEmployeeInfo.TotalWorkExperiance}\r\n                    onChange={(e) =>\r\n                      setEditEmployeeInfo({\r\n                        ...editEmployeeInfo,\r\n                        TotalWorkExperiance: e.target.value,\r\n                      })\r\n                    }\r\n                    name=\"TotalWorkExperiance\"\r\n                  />\r\n                  <TextField\r\n                    id=\"RelatedWorkExperiance\"\r\n                    label=\"RelatedWorkExperiance\"\r\n                    variant=\"standard\"\r\n                    color=\"secondary\"\r\n                    size=\"\"\r\n                    required\r\n                    value={editEmployeeInfo.RelatedWorkExperiance}\r\n                    onChange={(e) =>\r\n                      setEditEmployeeInfo({\r\n                        ...editEmployeeInfo,\r\n                        RelatedWorkExperiance: e.target.value,\r\n                      })\r\n                    }\r\n                    name=\"RelatedWorkExperiance\"\r\n                  />\r\n                  <TextField\r\n                    id=\"UploadCV\"\r\n                    label=\"UploadCV\"\r\n                    variant=\"standard\"\r\n                    color=\"secondary\"\r\n                    size=\"\"\r\n                    required\r\n                    value={editEmployeeInfo.UploadCV}\r\n                    onChange={(e) =>\r\n                      setEditEmployeeInfo({\r\n                        ...editEmployeeInfo,\r\n                        UploadCV: e.target.value,\r\n                      })\r\n                    }\r\n                    name=\"UploadCV\"\r\n                  />\r\n                  <TextField\r\n                    id=\"AttachWorkExperience\"\r\n                    label=\"AttachWorkExperience\"\r\n                    variant=\"standard\"\r\n                    color=\"secondary\"\r\n                    size=\"\"\r\n                    required\r\n                    value={editEmployeeInfo.AttachWorkExperience}\r\n                    onChange={(e) =>\r\n                      setEditEmployeeInfo({\r\n                        ...editEmployeeInfo,\r\n                        AttachWorkExperience: e.target.value,\r\n                      })\r\n                    }\r\n                    name=\"AttachWorkExperience\"\r\n                  /> */}\r\n                </div>\r\n\r\n                <div className=\"flex justify-center items-center py-4\">\r\n                  <button\r\n                    type=\"submit\"\r\n                    className=\"bg-[purple] hover:bg-purple-700 text-white font-bold  py-2 px-4 rounded focus:outline-none focus:shadow-outline \"\r\n                  >\r\n                    Update\r\n                  </button>\r\n                </div>\r\n\r\n                {/* <button type=\"submit\" className=\"btn btn-info\">\r\n                  Update\r\n                </button> */}\r\n              </div>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </CompanyModal>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EditCompanyEmployee;\r\n","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\SoleAndPartnership\\AddSoleAndPartnership.jsx",["1104","1105"],[],"import { useState, useEffect } from \"react\";\r\nimport LoanIconButton from \"../../Common/LoanIconButton\";\r\nimport { BiSkipPrevious, BiSkipNext } from \"react-icons/bi\";\r\nimport { BsPlus } from \"react-icons/bs\";\r\nimport CompanyModal from \"../Common/CompanyModal\";\r\nimport LoanTextField from \"../../Common/LoanTextField\";\r\nimport { Select, FormControl, MenuItem, InputLabel } from \"@mui/material\";\r\nimport CommonServices from \"../Common/CommonServices\";\r\nconst AddSoleAndPartnership = ({\r\n  handleSkip,\r\n  saveSoleAndPartnership,\r\n  soleAndPartnership,\r\n  handleInputChangeSoleAndPartnership,\r\n  country,\r\n  proofOfIdentityType,\r\n  setMartailStatusHold,\r\n  maritalStatus,\r\n  setSelectedPathIdentity,\r\n}) => {\r\n  const [fromDate, setFromDate] = useState(new Date());\r\n  const [proofOfIdentityExpiredDate, setProofOfIdentityExpiredDate] = useState(\r\n    new Date()\r\n  );\r\n  //upload\r\n  const [selectedFiles, setSelectedFiles] = useState(undefined);\r\n  const [currentFile, setCurrentFile] = useState(undefined);\r\n  const [fileInfos, setFileInfos] = useState([]);\r\n  const [progress, setProgress] = useState(0);\r\n  const [message, setMessage] = useState(\"\");\r\n  const selectFileIdentity = (event) => {\r\n    setSelectedFiles(event.target.files);\r\n  };\r\n  const uploadIdentity = () => {\r\n    let currentFile = selectedFiles[0];\r\n    setProgress(0);\r\n    setCurrentFile(currentFile);\r\n    CommonServices.upload(currentFile, (event) => {\r\n      setProgress(Math.round((100 * event.loaded) / event.total));\r\n    })\r\n      .then((response) => {\r\n        setMessage(response.data.message);\r\n        setSelectedPathIdentity(response.data.Result);\r\n      })\r\n      .then((files) => {\r\n        setFileInfos(files.data);\r\n      })\r\n      .catch(() => {\r\n        setProgress(0);\r\n        setCurrentFile(undefined);\r\n      });\r\n    setSelectedFiles(undefined);\r\n  };\r\n  //end upload\r\n  const [\r\n    isCompanySoleAndPartnershipModalOpen,\r\n    setIsCompanySoleAndPartnershipModalOpen,\r\n  ] = useState(false);\r\n  function handleCompanySoleAndPartnershipModalOpen() {\r\n    setIsCompanySoleAndPartnershipModalOpen(true);\r\n  }\r\n  function handleCompanySoleAndPartnershipCloseModal() {\r\n    setIsCompanySoleAndPartnershipModalOpen(false);\r\n  }\r\n  return (\r\n    <>\r\n      <div className=\"flex\">\r\n        <LoanIconButton\r\n          style={{ color: \"purple\" }}\r\n          icon={<BiSkipPrevious />}\r\n          text=\"Back\"\r\n          onClick={handleSkip}\r\n        />\r\n        <LoanIconButton\r\n          style={{ color: \"purple\" }}\r\n          icon={<BsPlus />}\r\n          text=\"Add\"\r\n          onClick={handleCompanySoleAndPartnershipModalOpen}\r\n        />\r\n        <LoanIconButton\r\n          style={{ color: \"purple\" }}\r\n          icon={<BiSkipNext />}\r\n          text=\"Skip\"\r\n          onClick={handleSkip}\r\n        />\r\n        <CompanyModal\r\n          isOpen={isCompanySoleAndPartnershipModalOpen}\r\n          onClose={handleCompanySoleAndPartnershipCloseModal}\r\n          title=\"Add company sole and partnership information\"\r\n        >\r\n          <div>\r\n            <form onSubmit={saveSoleAndPartnership}>\r\n              <div className=\"relative center justify-center flex-1 w-full max-w-full grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\">\r\n                <LoanTextField\r\n                  id=\"FirstName\"\r\n                  label=\"First Name\"\r\n                  value={soleAndPartnership.FirstName}\r\n                  onChange={handleInputChangeSoleAndPartnership}\r\n                  name=\"FirstName\"\r\n                />\r\n                <LoanTextField\r\n                  id=\"MiddleName\"\r\n                  label=\"Middle Name\"\r\n                  value={soleAndPartnership.MiddleName}\r\n                  onChange={handleInputChangeSoleAndPartnership}\r\n                  name=\"MiddleName\"\r\n                />\r\n                <LoanTextField\r\n                  id=\"LastName\"\r\n                  label=\"Last Name\"\r\n                  value={soleAndPartnership.LastName}\r\n                  onChange={handleInputChangeSoleAndPartnership}\r\n                  name=\"LastName\"\r\n                />\r\n                <FormControl variant=\"standard\" sx={{ minWidth: 120 }}>\r\n                  <InputLabel id=\"countrylbl\" color=\"secondary\">\r\n                    Nationality\r\n                  </InputLabel>\r\n                  <Select\r\n                    color=\"secondary\"\r\n                    onChange={(event) =>\r\n                      (soleAndPartnership.NationalityID = event.target.value)\r\n                    }\r\n                    labelId=\"countrylbl\"\r\n                    id=\"countrySelect\"\r\n                    label=\"Country\"\r\n                  >\r\n                    <MenuItem value=\"\">\r\n                      <em>None</em>\r\n                    </MenuItem>\r\n                    {country.map((yourCounty) => (\r\n                      <MenuItem\r\n                        key={yourCounty.Id}\r\n                        NationalityID={yourCounty.Id}\r\n                        value={yourCounty.Id}\r\n                      >\r\n                        {yourCounty.Name}\r\n                      </MenuItem>\r\n                    ))}\r\n                  </Select>\r\n                </FormControl>\r\n                <FormControl variant=\"standard\" sx={{ minWidth: 120 }}>\r\n                  <InputLabel id=\"countrylbl\" color=\"secondary\">\r\n                    Country Of Origin{\" \"}\r\n                  </InputLabel>\r\n                  <Select\r\n                    color=\"secondary\"\r\n                    onChange={(event) =>\r\n                      (soleAndPartnership.CountryOfOriginID =\r\n                        event.target.value)\r\n                    }\r\n                    labelId=\"countrylbl\"\r\n                    id=\"countrySelect\"\r\n                    label=\"Country\"\r\n                  >\r\n                    <MenuItem value=\"\">\r\n                      <em>None</em>\r\n                    </MenuItem>\r\n                    {country.map((yourCounty) => (\r\n                      <MenuItem\r\n                        key={yourCounty.Id}\r\n                        NationalityID={yourCounty.Id}\r\n                        value={yourCounty.Id}\r\n                      >\r\n                        {yourCounty.Name}\r\n                      </MenuItem>\r\n                    ))}\r\n                  </Select>\r\n                </FormControl>\r\n                <FormControl variant=\"standard\" sx={{ minWidth: 120 }}>\r\n                  <InputLabel id=\"countrylbl\" color=\"secondary\">\r\n                    Country Of Residence\r\n                  </InputLabel>\r\n                  <Select\r\n                    color=\"secondary\"\r\n                    onChange={(event) =>\r\n                      (soleAndPartnership.CountryOfResidenceID =\r\n                        event.target.value)\r\n                    }\r\n                    labelId=\"countrylbl\"\r\n                    id=\"countrySelect\"\r\n                    label=\"Country\"\r\n                  >\r\n                    <MenuItem value=\"\">\r\n                      <em>None</em>\r\n                    </MenuItem>\r\n                    {country.map((yourCounty) => (\r\n                      <MenuItem\r\n                        key={yourCounty.Id}\r\n                        NationalityID={yourCounty.Id}\r\n                        value={yourCounty.Id}\r\n                      >\r\n                        {yourCounty.Name}\r\n                      </MenuItem>\r\n                    ))}\r\n                  </Select>\r\n                </FormControl>\r\n                <FormControl variant=\"standard\" sx={{ minWidth: 120 }}>\r\n                  <InputLabel id=\"countrylbl\" color=\"secondary\">\r\n                    Proof Of Identity Type{\" \"}\r\n                  </InputLabel>\r\n                  <Select\r\n                    color=\"secondary\"\r\n                    onChange={(event) =>\r\n                      (soleAndPartnership.ProofOfIdentityTypeID =\r\n                        event.target.value)\r\n                    }\r\n                    labelId=\"countrylbl\"\r\n                    id=\"countrySelect\"\r\n                    label=\"Country\"\r\n                  >\r\n                    <MenuItem value=\"\">\r\n                      <em>None</em>\r\n                    </MenuItem>\r\n                    {proofOfIdentityType.map((yourProofOfIdentityType) => (\r\n                      <MenuItem\r\n                        key={yourProofOfIdentityType.Id}\r\n                        ProofOfIdentityTypeID={yourProofOfIdentityType.Id}\r\n                        value={yourProofOfIdentityType.Id}\r\n                      >\r\n                        {yourProofOfIdentityType.Name}\r\n                      </MenuItem>\r\n                    ))}\r\n                  </Select>\r\n                </FormControl>\r\n                <div>\r\n                  {currentFile && (\r\n                    <div className=\"progress\">\r\n                      <div\r\n                        className=\"progress-bar progress-bar-info progress-bar-striped\"\r\n                        role=\"progressbar\"\r\n                        aria-valuenow={progress}\r\n                        aria-valuemin=\"0\"\r\n                        aria-valuemax=\"100\"\r\n                        style={{ width: progress + \"%\" }}\r\n                      >\r\n                        {progress}%\r\n                      </div>\r\n                    </div>\r\n                  )}\r\n                  <label className=\"btn btn-default\">\r\n                    <input type=\"file\" onChange={selectFileIdentity} />\r\n                  </label>\r\n                  <button\r\n                    className=\"btn btn-success\"\r\n                    disabled={!selectedFiles}\r\n                    onClick={uploadIdentity}\r\n                  >\r\n                    Upload Identity\r\n                  </button>\r\n                  <div className=\"alert alert-light\" role=\"alert\">\r\n                    {message}\r\n                  </div>\r\n                </div>\r\n                <p>\r\n                  Proof Of Identity Issued Date:\r\n                  <input\r\n                    id=\"ProofOfIdentityIssuedDate\"\r\n                    name=\"ProofOfIdentityIssuedDate\"\r\n                    label=\"ProofOfIdentityIssuedDate\"\r\n                    placeholder=\"ProofOfIdentityIssuedDate\"\r\n                    type=\"date\"\r\n                    value={\r\n                      fromDate.getFullYear().toString() +\r\n                      \"-\" +\r\n                      (fromDate.getMonth() + 1).toString().padStart(2, 0) +\r\n                      \"-\" +\r\n                      fromDate.getDate().toString().padStart(2, 0)\r\n                    }\r\n                    onChange={(e) => {\r\n                      setFromDate(new Date(e.target.value));\r\n                      soleAndPartnership.ProofOfIdentityIssuedDate = fromDate;\r\n                    }}\r\n                  />{\" \"}\r\n                </p>\r\n                <p>\r\n                  Proof Of Identity Expired Date:\r\n                  <input\r\n                    id=\"ProofOfIdentityExpiredDate\"\r\n                    name=\"ProofOfIdentityExpiredDate\"\r\n                    label=\"ProofOfIdentityExpiredDate\"\r\n                    placeholder=\"ProofOfIdentityExpiredDate\"\r\n                    type=\"date\"\r\n                    value={\r\n                      proofOfIdentityExpiredDate.getFullYear().toString() +\r\n                      \"-\" +\r\n                      (proofOfIdentityExpiredDate.getMonth() + 1)\r\n                        .toString()\r\n                        .padStart(2, 0) +\r\n                      \"-\" +\r\n                      proofOfIdentityExpiredDate\r\n                        .getDate()\r\n                        .toString()\r\n                        .padStart(2, 0)\r\n                    }\r\n                    onChange={(e) => {\r\n                      setProofOfIdentityExpiredDate(new Date(e.target.value));\r\n                      soleAndPartnership.ProofOfIdentityExpiredDate =\r\n                        proofOfIdentityExpiredDate;\r\n                    }}\r\n                  />{\" \"}\r\n                </p>\r\n                <FormControl variant=\"standard\" sx={{ minWidth: 120 }}>\r\n                  <InputLabel id=\"countrylbl\" color=\"secondary\">\r\n                    Martail Status\r\n                  </InputLabel>\r\n                  <Select\r\n                    color=\"secondary\"\r\n                    onChange={(event) => {\r\n                      soleAndPartnership.MartailStatusTypeId =\r\n                        event.target.value;\r\n                      setMartailStatusHold(\r\n                        (soleAndPartnership.MartailStatusTypeId =\r\n                          event.target.value)\r\n                      );\r\n                    }}\r\n                    labelId=\"countrylbl\"\r\n                    id=\"countrySelect\"\r\n                    label=\"Country\"\r\n                  >\r\n                    <MenuItem value=\"\">\r\n                      <em>None</em>\r\n                    </MenuItem>\r\n                    {maritalStatus.map((maritalSt) => (\r\n                      <MenuItem\r\n                        key={maritalSt.Id}\r\n                        NationalityID={maritalSt.Id}\r\n                        value={maritalSt.Id}\r\n                      >\r\n                        <button>{maritalSt.Name}</button>\r\n                      </MenuItem>\r\n                    ))}\r\n                  </Select>\r\n                </FormControl>\r\n              </div>\r\n              <div className=\"flex justify-center pt-4\">\r\n                <button\r\n                  type=\"submit\"\r\n                  className=\"bg-[purple] hover:bg-purple-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\"\r\n                >\r\n                  save\r\n                </button>\r\n              </div>\r\n            </form>\r\n          </div>\r\n        </CompanyModal>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AddSoleAndPartnership;\r\n","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\Address\\AddCompanyAddress.jsx",["1106","1107","1108"],[],"import {\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  IconButton,\r\n} from \"@mui/material\";\r\nimport LoanIconButton from \"../../Common/LoanIconButton\";\r\nimport CompanyModal from \"../Common/CompanyModal\";\r\nimport { RiSkipBackMiniFill } from \"react-icons/ri\";\r\nimport { BsPlus } from \"react-icons/bs\";\r\nimport { BiSkipNext, BiSkipPrevious } from \"react-icons/bi\";\r\nimport { useState } from \"react\";\r\nimport { IoRefresh } from \"react-icons/io5\";\r\nimport LoanTextField from \"../../Common/LoanTextField\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useParams } from \"react-router-dom\";\r\n\r\nconst AddCompanyAddress = ({\r\n  submitted,\r\n  newAddress,\r\n  address,\r\n  country,\r\n  region,\r\n  handleInputChangeAdress,\r\n  handleBack,\r\n  handleSkip,\r\n  handleNext,\r\n  saveAddress,\r\n  handlePrevios,\r\n}) => {\r\n  const [isCompanyAddressModalOpen, setIsCompanyAddressModalOpen] =\r\n    useState(false);\r\n  function handleCompanyAddressOpenModal() {\r\n    setIsCompanyAddressModalOpen(true);\r\n  }\r\n  function handleCompanyAddressCloseModal() {\r\n    setIsCompanyAddressModalOpen(false);\r\n  }\r\n  const { companyId } = useParams();\r\n\r\n  return (\r\n    <>\r\n      <div className=\"flex\">\r\n        <Link to={`/enterprise/basic-Information/${companyId}`}>\r\n          <LoanIconButton\r\n            style={{ color: \"purple\" }}\r\n            icon={<BiSkipPrevious />}\r\n            text=\"Company Basic\"\r\n            onClick={handlePrevios}\r\n          />\r\n        </Link>\r\n        <LoanIconButton\r\n          style={{ color: \"purple\" }}\r\n          icon={<BsPlus />}\r\n          text=\"Add\"\r\n          onClick={handleCompanyAddressOpenModal}\r\n        />\r\n        <Link to={`/contact/${companyId}`}>\r\n          <LoanIconButton\r\n            style={{ color: \"purple\" }}\r\n            icon={<BiSkipNext />}\r\n            text=\"Contact Information\"\r\n            onClick={handleSkip}\r\n          />\r\n        </Link>\r\n      </div>\r\n      <CompanyModal\r\n        isOpen={isCompanyAddressModalOpen}\r\n        onClose={handleCompanyAddressCloseModal}\r\n        title=\"Add company address information\"\r\n      >\r\n        <div>\r\n          <div className=\"relative center justify-center flex-1 w-full max-w-full grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\">\r\n            <FormControl variant=\"standard\" sx={{ width: \"45ch\" }}>\r\n              <InputLabel id=\"countrylbl\" color=\"secondary\">\r\n                Country\r\n              </InputLabel>\r\n              <Select\r\n                color=\"secondary\"\r\n                onChange={(event) => (address.CountryID = event.target.value)}\r\n                labelId=\"countrylbl\"\r\n                id=\"countrySelect\"\r\n                label=\"Country\"\r\n              >\r\n                <MenuItem value=\"\">\r\n                  <em>None</em>\r\n                </MenuItem>\r\n                {country.map((newContry) => (\r\n                  <MenuItem\r\n                    key={newContry.Id}\r\n                    CountryID={newContry.Id}\r\n                    value={newContry.Id}\r\n                  >\r\n                    {newContry.Name}\r\n                  </MenuItem>\r\n                ))}\r\n              </Select>\r\n            </FormControl>\r\n            <FormControl variant=\"standard\">\r\n              <InputLabel id=\"regionlbl\" color=\"secondary\">\r\n                Region\r\n              </InputLabel>\r\n              <Select\r\n                color=\"secondary\"\r\n                onChange={(event) => (address.RegionID = event.target.value)}\r\n                labelId=\"regionlbl\"\r\n                id=\"regionSelect\"\r\n                label=\"Region\"\r\n              >\r\n                <MenuItem value=\"\">\r\n                  <em>None</em>\r\n                </MenuItem>\r\n                {region.map((newRegion) => (\r\n                  <MenuItem\r\n                    key={newRegion.Id}\r\n                    RegionID={newRegion.Id}\r\n                    value={newRegion.Id}\r\n                  >\r\n                    {newRegion.Name}\r\n                  </MenuItem>\r\n                ))}\r\n              </Select>\r\n            </FormControl>\r\n\r\n            <LoanTextField\r\n              id=\"ZoneSubCity\"\r\n              label=\"Zone Sub City\"\r\n              value={address.ZoneSubCity}\r\n              onChange={handleInputChangeAdress}\r\n              name=\"ZoneSubCity\"\r\n            />\r\n            <LoanTextField\r\n              id=\"Woreda\"\r\n              label=\"Woreda\"\r\n              value={address.Woreda}\r\n              onChange={handleInputChangeAdress}\r\n              name=\"Woreda\"\r\n            />\r\n            <LoanTextField\r\n              id=\"City\"\r\n              label=\"City\"\r\n              value={address.City}\r\n              onChange={handleInputChangeAdress}\r\n              name=\"City\"\r\n            />\r\n            <LoanTextField\r\n              id=\"Kebele\"\r\n              label=\"Kebele\"\r\n              value={address.Kebele}\r\n              onChange={handleInputChangeAdress}\r\n              name=\"Kebele\"\r\n            />\r\n            <LoanTextField\r\n              id=\"HouseNo\"\r\n              label=\"HouseNo\"\r\n              value={address.HouseNo}\r\n              onChange={handleInputChangeAdress}\r\n              name=\"HouseNo\"\r\n            />\r\n            <LoanTextField\r\n              id=\"BuildingNo\"\r\n              label=\"BuildingNo\"\r\n              value={address.BuildingNo}\r\n              onChange={handleInputChangeAdress}\r\n              name=\"BuildingNo\"\r\n            />\r\n            <LoanTextField\r\n              id=\"StreetAddress\"\r\n              label=\"StreetAddress\"\r\n              value={address.StreetAddress}\r\n              onChange={handleInputChangeAdress}\r\n              name=\"StreetAddress\"\r\n            />\r\n          </div>\r\n          <div className=\"flex justify-center p-2 pt-5\">\r\n            <button\r\n              className=\"bg-[purple] hover:bg-purple-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\"\r\n              onClick={() => {\r\n                saveAddress();\r\n              }}\r\n            >\r\n              Save\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </CompanyModal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AddCompanyAddress;\r\n","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\SoleAndPartnership\\EditSole.jsx",["1109","1110","1111","1112"],[],"import { useState, useEffect } from \"react\";\r\nimport {\r\n  TextField,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n} from \"@mui/material\";\r\nimport CompanyModal from \"../Common/CompanyModal\";\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\nimport SoleAndPartnershipService from \"./SoleAndPartnershipService\";\r\nimport CommonServices from \"../Common/CommonServices\";\r\nimport LoanTextField from \"../../Common/LoanTextField\";\r\nconst EditSole = ({\r\n  isCompanySoleEditModalOpen,\r\n  handleCompanySoleEditCloseModal,\r\n  handleCompanySoleEditOpenModal,\r\n  editSoleId,\r\n  editSole,\r\n  setEditSole,\r\n  // setSelectedPathIdentity,\r\n}) => {\r\n  const [country, setContry] = useState([]);\r\n  const [proofOfIdentityType, setProofOfIdentityType] = useState([]);\r\n  const [maritalStatus, setMaritalStatus] = useState([]);\r\n  const [martailStatusHold, setMartailStatusHold] = useState();\r\n  const handleInputChangeEditSole = (event) => {\r\n    const { name, value } = event.target;\r\n    setEditSole({ ...editSole, [name]: value });\r\n  };\r\n  const [fromDate, setFromDate] = useState(new Date());\r\n  const [proofOfIdentityExpiredDate, setProofOfIdentityExpiredDate] = useState(\r\n    new Date()\r\n  );\r\n  //upload file\r\n  const [selectedPathIdentity, setSelectedPathIdentity] = useState(null);\r\n  const [selectedFiles, setSelectedFiles] = useState(undefined);\r\n  const [currentFile, setCurrentFile] = useState(undefined);\r\n  const [fileInfos, setFileInfos] = useState([]);\r\n  const [progress, setProgress] = useState(0);\r\n  const [message, setMessage] = useState(\"\");\r\n  const selectFileIdentity = (event) => {\r\n    setSelectedFiles(event.target.files);\r\n  };\r\n  const uploadIdentity = () => {\r\n    let currentFile = selectedFiles[0];\r\n    setProgress(0);\r\n    setCurrentFile(currentFile);\r\n    CommonServices.upload(currentFile, (event) => {\r\n      setProgress(Math.round((100 * event.loaded) / event.total));\r\n    })\r\n      .then((response) => {\r\n        setMessage(response.data.message);\r\n        setSelectedPathIdentity(response.data.Result);\r\n      })\r\n      .then((files) => {\r\n        setFileInfos(files.data);\r\n      })\r\n      .catch(() => {\r\n        setProgress(0);\r\n        setCurrentFile(undefined);\r\n      });\r\n    setSelectedFiles(undefined);\r\n  };\r\n  //end upload\r\n  const updateSoleById = (e) => {\r\n    e.preventDefault();\r\n    SoleAndPartnershipService.updateSoleById(editSoleId, editSole)\r\n      .then((response) => {\r\n        if (response.data.Code === 200) {\r\n          toast.success(\"Added successfully\", {\r\n            position: toast.POSITION.TOP_RIGHT,\r\n            toastId: \"updateCompanyAddressSuccess\",\r\n          });\r\n        }\r\n      })\r\n      .catch((e) => {\r\n        toast.error(\"Something went wrong\", {\r\n          position: toast.POSITION.TOP_RIGHT,\r\n          toastId: \"updateCompanyAddressError\",\r\n        });\r\n      });\r\n  };\r\n  const fetchContry = () => {\r\n    CommonServices.getCountry()\r\n      .then((response) => {\r\n        setContry(response.data.Result);\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n  useEffect(() => {\r\n    fetchContry();\r\n  }, []);\r\n  const fetchProofOfIdentityType = () => {\r\n    CommonServices.getProofOfIdentityTypes()\r\n      .then((response) => {\r\n        setProofOfIdentityType(response.data.Result);\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n  useEffect(() => {\r\n    fetchProofOfIdentityType();\r\n  }, []);\r\n  const fetchMaritalStatus = () => {\r\n    CommonServices.getMaritalStatus()\r\n      .then((response) => {\r\n        setMaritalStatus(response.data.Result);\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n  useEffect(() => {\r\n    fetchMaritalStatus();\r\n  }, []);\r\n  return (\r\n    <CompanyModal\r\n      isOpen={isCompanySoleEditModalOpen}\r\n      onClose={handleCompanySoleEditCloseModal}\r\n      title=\"Modify company basic information\"\r\n    >\r\n      <div>\r\n        <form onSubmit={updateSoleById}>\r\n          <div className=\"grid grid-cols-1 gap-4 submit-form\">\r\n            <div className=\"submit-form \">\r\n              <div className=\"relative center justify-center flex-1 w-full max-w-full grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\">\r\n                <LoanTextField\r\n                  id=\"FirstName\"\r\n                  label=\"FirstName\"\r\n                  value={editSole.FirstName}\r\n                  onChange={handleInputChangeEditSole}\r\n                  name=\"FirstName\"\r\n                />\r\n                <LoanTextField\r\n                  id=\"MiddleName\"\r\n                  label=\"MiddleName\"\r\n                  value={editSole.MiddleName}\r\n                  onChange={handleInputChangeEditSole}\r\n                  name=\"MiddleName\"\r\n                />\r\n                <LoanTextField\r\n                  id=\"LastName\"\r\n                  label=\"LastName\"\r\n                  value={editSole.LastName}\r\n                  onChange={handleInputChangeEditSole}\r\n                  name=\"LastName\"\r\n                />\r\n                <FormControl variant=\"standard\" sx={{ minWidth: 120 }}>\r\n                  <InputLabel id=\"countrylbl\" color=\"secondary\">\r\n                    Nationality\r\n                  </InputLabel>\r\n                  <Select\r\n                    color=\"secondary\"\r\n                    onChange={(event) =>\r\n                      (editSole.NationalityId = event.target.value)\r\n                    }\r\n                    labelId=\"countrylbl\"\r\n                    id=\"countrySelect\"\r\n                    label=\"Country\"\r\n                  >\r\n                    <MenuItem value=\"\">\r\n                      <em>None</em>\r\n                    </MenuItem>\r\n                    {country.map((yourCounty) => (\r\n                      <MenuItem\r\n                        key={yourCounty.Id}\r\n                        NationalityID={yourCounty.Id}\r\n                        value={yourCounty.Id}\r\n                      >\r\n                        {yourCounty.Name}\r\n                      </MenuItem>\r\n                    ))}\r\n                  </Select>\r\n                </FormControl>\r\n                <FormControl variant=\"standard\" sx={{ minWidth: 120 }}>\r\n                  <InputLabel id=\"countrylbl\" color=\"secondary\">\r\n                    Country Of Origin{\" \"}\r\n                  </InputLabel>\r\n                  <Select\r\n                    color=\"secondary\"\r\n                    onChange={(event) =>\r\n                      (editSole.CountryOfOriginId = event.target.value)\r\n                    }\r\n                    labelId=\"countrylbl\"\r\n                    id=\"countrySelect\"\r\n                    label=\"Country\"\r\n                  >\r\n                    <MenuItem value=\"\">\r\n                      <em>None</em>\r\n                    </MenuItem>\r\n                    {country.map((yourCounty) => (\r\n                      <MenuItem\r\n                        key={yourCounty.Id}\r\n                        NationalityID={yourCounty.Id}\r\n                        value={yourCounty.Id}\r\n                      >\r\n                        {yourCounty.Name}\r\n                      </MenuItem>\r\n                    ))}\r\n                  </Select>\r\n                </FormControl>\r\n                <FormControl variant=\"standard\" sx={{ minWidth: 120 }}>\r\n                  <InputLabel id=\"countrylbl\" color=\"secondary\">\r\n                    Country Of Residence\r\n                  </InputLabel>\r\n                  <Select\r\n                    color=\"secondary\"\r\n                    onChange={(event) =>\r\n                      (editSole.CountryOfResidenceId = event.target.value)\r\n                    }\r\n                    labelId=\"countrylbl\"\r\n                    id=\"countrySelect\"\r\n                    label=\"Country\"\r\n                  >\r\n                    <MenuItem value=\"\">\r\n                      <em>None</em>\r\n                    </MenuItem>\r\n                    {country.map((yourCounty) => (\r\n                      <MenuItem\r\n                        key={yourCounty.Id}\r\n                        NationalityID={yourCounty.Id}\r\n                        value={yourCounty.Id}\r\n                      >\r\n                        {yourCounty.Name}\r\n                      </MenuItem>\r\n                    ))}\r\n                  </Select>\r\n                </FormControl>\r\n                <FormControl variant=\"standard\" sx={{ minWidth: 120 }}>\r\n                  <InputLabel id=\"countrylbl\" color=\"secondary\">\r\n                    Proof Of Identity Type{\" \"}\r\n                  </InputLabel>\r\n                  <Select\r\n                    color=\"secondary\"\r\n                    onChange={(event) =>\r\n                      (editSole.ProofOfIdentityTypeId = event.target.value)\r\n                    }\r\n                    labelId=\"countrylbl\"\r\n                    id=\"countrySelect\"\r\n                    label=\"Country\"\r\n                  >\r\n                    <MenuItem value=\"\">\r\n                      <em>None</em>\r\n                    </MenuItem>\r\n                    {proofOfIdentityType.map((yourProofOfIdentityType) => (\r\n                      <MenuItem\r\n                        key={yourProofOfIdentityType.Id}\r\n                        ProofOfIdentityTypeID={yourProofOfIdentityType.Id}\r\n                        value={yourProofOfIdentityType.Id}\r\n                      >\r\n                        {yourProofOfIdentityType.Name}\r\n                      </MenuItem>\r\n                    ))}\r\n                  </Select>\r\n                </FormControl>\r\n                {/* <LoanTextField\r\n                  id=\"UploadProofOfIdentity\"\r\n                  label=\"UploadProofOfIdentity\"\r\n                  value={editSole.UploadProofOfIdentity}\r\n                  onChange={handleInputChangeEditSole}\r\n                  name=\"UploadProofOfIdentity\"\r\n                /> */}\r\n                <p>\r\n                  <div>\r\n                    {currentFile && (\r\n                      <div className=\"progress\">\r\n                        <div\r\n                          className=\"progress-bar progress-bar-info progress-bar-striped\"\r\n                          role=\"progressbar\"\r\n                          aria-valuenow={progress}\r\n                          aria-valuemin=\"0\"\r\n                          aria-valuemax=\"100\"\r\n                          style={{ width: progress + \"%\" }}\r\n                        >\r\n                          {progress}%\r\n                        </div>\r\n                      </div>\r\n                    )}\r\n                    <label className=\"btn btn-default\">\r\n                      <input type=\"file\" onChange={selectFileIdentity} />\r\n                    </label>\r\n                    <button\r\n                      className=\"bg-[#be7ebe] hover:bg-purple-300 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline  \"\r\n                      disabled={!selectedFiles}\r\n                      onChange={\r\n                        (editSole.UploadProofOfIdentity = selectedPathIdentity)\r\n                      }\r\n                      onClick={uploadIdentity}\r\n                    >\r\n                      Upload Proof Of Identity\r\n                    </button>\r\n                    <div className=\"alert alert-light\" role=\"alert\">\r\n                      {message}\r\n                    </div>\r\n                  </div>\r\n                </p>\r\n                <p>\r\n                  Proof Of Identity Issued Date:\r\n                  <input\r\n                    id=\"ProofOfIdentityIssuedDate\"\r\n                    name=\"ProofOfIdentityIssuedDate\"\r\n                    label=\"ProofOfIdentityIssuedDate\"\r\n                    placeholder=\"ProofOfIdentityIssuedDate\"\r\n                    type=\"date\"\r\n                    \r\n                    onChange={(e) => {\r\n                      setFromDate(new Date(e.target.value));\r\n                      editSole.ProofOfIdentityIssuedDate = fromDate;\r\n                      alert(fromDate);\r\n                    }}\r\n                    value={\r\n                      fromDate.getFullYear().toString() +\r\n                      \"-\" +\r\n                      (fromDate.getMonth() + 1).toString().padStart(2, 0) +\r\n                      \"-\" +\r\n                      fromDate.getDate().toString().padStart(2, 0)\r\n                    }\r\n                  />{\" \"}\r\n                </p>\r\n                <p>\r\n                  Proof Of Identity Expired Date:\r\n                  <input\r\n                    id=\"ProofOfIdentityExpiredDate\"\r\n                    name=\"ProofOfIdentityExpiredDate\"\r\n                    label=\"ProofOfIdentityExpiredDate\"\r\n                    placeholder=\"ProofOfIdentityExpiredDate\"\r\n                    type=\"date\"\r\n                    value={\r\n                      proofOfIdentityExpiredDate.getFullYear().toString() +\r\n                      \"-\" +\r\n                      (proofOfIdentityExpiredDate.getMonth() + 1)\r\n                        .toString()\r\n                        .padStart(2, 0) +\r\n                      \"-\" +\r\n                      proofOfIdentityExpiredDate\r\n                        .getDate()\r\n                        .toString()\r\n                        .padStart(2, 0)\r\n                    }\r\n                    onChange={(e) => {\r\n                      setProofOfIdentityExpiredDate(new Date(e.target.value));\r\n                      editSole.ProofOfIdentityExpiredDate =\r\n                        proofOfIdentityExpiredDate;\r\n                    }}\r\n                  />{\" \"}\r\n                </p>\r\n                <FormControl variant=\"standard\" sx={{ minWidth: 120 }}>\r\n                  <InputLabel id=\"countrylbl\" color=\"secondary\">\r\n                    Martail Status\r\n                  </InputLabel>\r\n                  <Select\r\n                    color=\"secondary\"\r\n                    onChange={(event) => {\r\n                      editSole.MartailStatusTypeId = event.target.value;\r\n                      setMartailStatusHold(\r\n                        (editSole.MartailStatusTypeId = event.target.value)\r\n                      );\r\n                    }}\r\n                    labelId=\"countrylbl\"\r\n                    id=\"countrySelect\"\r\n                    label=\"Country\"\r\n                  >\r\n                    <MenuItem value=\"\">\r\n                      <em>None</em>\r\n                    </MenuItem>\r\n                    {maritalStatus.map((maritalSt) => (\r\n                      <MenuItem\r\n                        key={maritalSt.Id}\r\n                        NationalityID={maritalSt.Id}\r\n                        value={maritalSt.Id}\r\n                      >\r\n                        <button>{maritalSt.Name}</button>\r\n                      </MenuItem>\r\n                    ))}\r\n                  </Select>\r\n                </FormControl>\r\n              </div>\r\n              <div className=\"flex justify-center items-center\">\r\n                <button\r\n                  type=\"submit\"\r\n                  className=\"bg-[purple] hover:bg-purple-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline \"\r\n                >\r\n                  Update\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </CompanyModal>\r\n  );\r\n};\r\n\r\nexport default EditSole;\r\n","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\SOEAndGovernmental\\CompanySOEAndGovernmentalService.js",[],[],"C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\SeniorManagementStaff\\EditSeniorManagementStaff.jsx",[],[],"C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\Address\\EditCompanyAddress.jsx",[],[],"C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\SeniorManagementStaff\\AddSeniorManagementStaff.jsx",["1113","1114","1115","1116","1117","1118","1119","1120","1121"],[],"import {\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  IconButton,\r\n} from \"@mui/material\";\r\nimport { BsPlus } from \"react-icons/bs\";\r\nimport { BiSkipNext } from \"react-icons/bi\";\r\nimport CompanyModal from \"../Common/CompanyModal\";\r\nimport { useState, useEffect } from \"react\";\r\nimport LoanTextField from \"../../Common/LoanTextField\";\r\nimport LoanIconButton from \"../../Common/LoanIconButton\";\r\nimport { IoRefresh } from \"react-icons/io5\";\r\nimport CommonServices from \"../Common/CommonServices\";\r\nimport { BiSkipPrevious } from \"react-icons/bi\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useParams } from \"react-router-dom\";\r\nconst AddSeniorManagementStaff = ({\r\n  seniorManagementStaff,\r\n  handleInputChange,\r\n  saveSeniorStaff,\r\n  handleSkip,\r\n  onClick,\r\n  setSelectedCVDocument,\r\n  setSelectedWorkExperienceDocument,\r\n  handlePrevios,\r\n}) => {\r\n  const { companyId } = useParams();\r\n  const [\r\n    isSeniorManagementStaffModalOpen,\r\n    setIsSeniorManagementStaffModalOpen,\r\n  ] = useState(false);\r\n\r\n  function handleSeniorManagementStaffCloseModal() {\r\n    setIsSeniorManagementStaffModalOpen(false);\r\n  }\r\n  function handleSeniorManagementStaffOpenModal() {\r\n    setIsSeniorManagementStaffModalOpen(true);\r\n  }\r\n  //upload\r\n  const [selectedFiles, setSelectedFiles] = useState(undefined);\r\n  const [currentFile, setCurrentFile] = useState(undefined);\r\n  const [fileInfos, setFileInfos] = useState([]);\r\n  const [progress, setProgress] = useState(0);\r\n  const [message, setMessage] = useState(\"\");\r\n  const selectFile = (event) => {\r\n    setSelectedFiles(event.target.files);\r\n  };\r\n  //upload 1\r\n  const uploadCVDocument = () => {\r\n    let currentFile = selectedFiles[0];\r\n    setProgress(0);\r\n    setCurrentFile(currentFile);\r\n    CommonServices.upload(currentFile, (event) => {\r\n      setProgress(Math.round((100 * event.loaded) / event.total));\r\n    })\r\n      .then((response) => {\r\n        setMessage(response.data.message);\r\n        setSelectedCVDocument(response.data.Result);\r\n      })\r\n      .then((files) => {\r\n        setFileInfos(files.data);\r\n      })\r\n      .catch(() => {\r\n        setProgress(0);\r\n        setCurrentFile(undefined);\r\n      });\r\n    setSelectedFiles(undefined);\r\n  };\r\n  //end upload\r\n  //upload 2\r\n  const uploadWorkExperienceDocument = () => {\r\n    let currentFile = selectedFiles[0];\r\n    setProgress(0);\r\n    setCurrentFile(currentFile);\r\n    CommonServices.upload(currentFile, (event) => {\r\n      setProgress(Math.round((100 * event.loaded) / event.total));\r\n    })\r\n      .then((response) => {\r\n        setMessage(response.data.message);\r\n        setSelectedWorkExperienceDocument(response.data.Result);\r\n      })\r\n      .then((files) => {\r\n        setFileInfos(files.data);\r\n      })\r\n      .catch(() => {\r\n        setProgress(0);\r\n        setCurrentFile(undefined);\r\n      });\r\n    setSelectedFiles(undefined);\r\n  };\r\n  //endupload2\r\n  //tiztaw\r\n  const [companyType, setCompanyType] = useState(null);\r\n  const fetchCompany = () => {\r\n    CommonServices.getCompanyTypeFromAll(companyId)\r\n      .then((response) => {\r\n        setCompanyType(response.data.Result);\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n  useEffect(() => {\r\n    fetchCompany();\r\n  }, []);\r\n\r\n  const renderButton = () => {\r\n    let button;\r\n    if (companyType.EntityType === \"SOEs\") {\r\n      button = (\r\n        <Link to={`/enterprise/soe-and-governmental/${companyId}`}>\r\n          <LoanIconButton\r\n            style={{ color: \"purple\" }}\r\n            icon={<BiSkipNext />}\r\n            text=\"SOE or governmental\"\r\n          />\r\n        </Link>\r\n      );\r\n    } else if (\r\n      companyType.EntityType === \"Sole Proprietor\" ||\r\n      companyType.EntityType === \"Partnership\"\r\n    ) {\r\n      button = (\r\n        <Link to={`/enterprise/Sole-and-Partnership/${companyId}`}>\r\n          <LoanIconButton\r\n            style={{ color: \"purple\" }}\r\n            icon={<BiSkipNext />}\r\n            text=\"Sole Or Partnership\"\r\n          />\r\n        </Link>\r\n      );\r\n    } else if (\r\n      companyType.EntityType === \"Association\" ||\r\n      companyType.EntityType === \"Union\"\r\n    ) {\r\n      button = (\r\n        <Link to={`/enterprise/Union-and-Association/${companyId}`}>\r\n          <LoanIconButton\r\n            style={{ color: \"purple\" }}\r\n            icon={<BiSkipNext />}\r\n            text=\"Association or Union\"\r\n          />\r\n        </Link>\r\n      );\r\n    } else {\r\n      button = (\r\n        <Link to={`/enterprise/plc-and-share/${companyId}`}>\r\n          <LoanIconButton\r\n            style={{ color: \"purple\" }}\r\n            icon={<BiSkipNext />}\r\n            text=\"PLC\"\r\n          />\r\n        </Link>\r\n      );\r\n    }\r\n    return button;\r\n  };\r\n  //tiztaw\r\n  return (\r\n    <>\r\n      <div className=\"flex\">\r\n        <Link to={`/enterprise/employee/${companyId}`}>\r\n          <LoanIconButton\r\n            style={{ color: \"purple\" }}\r\n            icon={<BiSkipPrevious />}\r\n            text=\"Employee Information\"\r\n            onClick={handlePrevios}\r\n          />\r\n        </Link>\r\n        <LoanIconButton\r\n          style={{ color: \"purple\" }}\r\n          icon={<BsPlus />}\r\n          text=\"Add\"\r\n          onClick={handleSeniorManagementStaffOpenModal}\r\n        />\r\n      </div>\r\n      <CompanyModal\r\n        isOpen={isSeniorManagementStaffModalOpen}\r\n        onClose={handleSeniorManagementStaffCloseModal}\r\n        title=\"Add senior management staff\"\r\n      >\r\n        <div className=\"grid grid-cols-1 gap-4 submit-form\">\r\n          <form onSubmit={saveSeniorStaff}>\r\n            <div\r\n              className=\"relative center justify-center\r\nflex-1 w-full max-w-full grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\"\r\n            >\r\n              <LoanTextField\r\n                id=\"FullName\"\r\n                label=\"Full Name\"\r\n                value={seniorManagementStaff.FullName}\r\n                onChange={handleInputChange}\r\n                name=\"FullName\"\r\n              />\r\n              <LoanTextField\r\n                id=\"TotalWorkExperience\"\r\n                label=\"Total Work Experience\"\r\n                type=\"number\"\r\n                value={seniorManagementStaff.TotalWorkExperience}\r\n                onChange={handleInputChange}\r\n                name=\"TotalWorkExperience\"\r\n              />\r\n              <LoanTextField\r\n                id=\"RelatedWorkExperience\"\r\n                label=\"Related Work Experience\"\r\n                value={seniorManagementStaff.RelatedWorkExperience}\r\n                onChange={handleInputChange}\r\n                name=\"RelatedWorkExperience\"\r\n              />\r\n              <LoanTextField\r\n                id=\"Position\"\r\n                label=\"Position\"\r\n                value={seniorManagementStaff.Position}\r\n                onChange={handleInputChange}\r\n                name=\"Position\"\r\n              />\r\n              <div>\r\n                {currentFile && (\r\n                  <div className=\"progress\">\r\n                    <div\r\n                      className=\"progress-bar progress-bar-info progress-bar-striped\"\r\n                      role=\"progressbar\"\r\n                      aria-valuenow={progress}\r\n                      aria-valuemin=\"0\"\r\n                      aria-valuemax=\"100\"\r\n                      style={{ width: progress + \"%\" }}\r\n                    >\r\n                      {progress}%\r\n                    </div>\r\n                  </div>\r\n                )}\r\n                <label className=\"btn btn-default\">\r\n                  <input type=\"file\" onChange={selectFile} />\r\n                </label>\r\n                <button\r\n                  className=\"bg-gray-300 hover:bg-gray-400 text-gray-800 font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\"\r\n                  disabled={!selectedFiles}\r\n                  onClick={uploadCVDocument}\r\n                >\r\n                  upload CV Document\r\n                </button>\r\n                <div className=\"alert alert-light\" role=\"alert\">\r\n                  {message}\r\n                </div>\r\n              </div>\r\n              <div>\r\n                {currentFile && (\r\n                  <div className=\"progress\">\r\n                    <div\r\n                      className=\"progress-bar progress-bar-info progress-bar-striped\"\r\n                      role=\"progressbar\"\r\n                      aria-valuenow={progress}\r\n                      aria-valuemin=\"0\"\r\n                      aria-valuemax=\"100\"\r\n                      style={{ width: progress + \"%\" }}\r\n                    >\r\n                      {progress}%\r\n                    </div>\r\n                  </div>\r\n                )}\r\n                <label className=\"btn btn-default\">\r\n                  <input type=\"file\" onChange={selectFile} />\r\n                </label>\r\n                <button\r\n                  className=\"bg-gray-300 hover:bg-gray-400 text-gray-800 font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\"\r\n                  disabled={!selectedFiles}\r\n                  onClick={uploadWorkExperienceDocument}\r\n                >\r\n                  Work Experience Document\r\n                </button>\r\n                <div className=\"alert alert-light\" role=\"alert\">\r\n                  {message}\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\"flex justify-center pt-4\">\r\n              <button className=\"bg-[purple] hover:bg-purple-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\">\r\n                Save\r\n              </button>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </CompanyModal>\r\n    </>\r\n  );\r\n};\r\nexport default AddSeniorManagementStaff;\r\n","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\PLCAndShare\\EditPLCAndShare.jsx",["1122","1123","1124","1125","1126","1127"],[],"import {\r\n  TextField,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n} from \"@mui/material\";\r\nimport { useState, useEffect } from \"react\";\r\nimport CompanyModal from \"../Common/CompanyModal\";\r\nimport PLCAndShareService from \"./PLCAndShareService\";\r\n\r\nconst EditPLCAndShare = ({\r\n  handleCompanyPLCAndShareInformationEditCloseModal,\r\n  isPLCAndShareEditModalOpen,\r\n  updateCompanyPLCAndShareInformationById,\r\n  editPLCAndShareInfo,\r\n  setEditPLCAndShareInfo,\r\n}) => {\r\n  const [moUDateEdit, setMoUDateEdit] = useState(new Date());\r\n  const [moUAuthDateEdit, setMoUAuthDateEdit] = useState(new Date());\r\n  const [aoADateEdit, setAoADateEdit] = useState(new Date());\r\n  const [aoAAuthDateEdit, setAoAAuthDateEdit] = useState(new Date());\r\n  const [minuteDateEdit, setMinuteDateEdit] = useState(new Date());\r\n  const [minuteAuthDateEdit, setMinuteAuthDateEdit] = useState(new Date());\r\n  const [selectedPathAoADEdit, setSelectedPathAoADEdit] = useState(null);\r\n  const [selectedPathMoUDEdit, setSelectedPathMoUDEdit] = useState(null);\r\n  const [selectedPathMDEdit, setSelectedPathMDEdit] = useState(null);\r\n  const [selectedFiles, setSelectedFiles] = useState(undefined);\r\n  const [currentFile, setCurrentFile] = useState(undefined);\r\n  const [progress, setProgress] = useState(0);\r\n  const [message, setMessage] = useState(\"\");\r\n  const [fileInfos, setFileInfos] = useState([]);\r\n  const selectFile4Edit = (event) => {\r\n    setSelectedFiles(event.target.files);\r\n  };\r\n  const upload4Edit = () => {\r\n    let currentFile = selectedFiles[0];\r\n    setProgress(0);\r\n    setCurrentFile(currentFile);\r\n\r\n    PLCAndShareService.uploadPLC(currentFile, (event) => {\r\n      setProgress(Math.round((100 * event.loaded) / event.total));\r\n    })\r\n      .then((response) => {\r\n        setMessage(response.data.message);\r\n        setSelectedPathMoUDEdit(response.data.Result);\r\n      })\r\n      .then((files) => {\r\n        setFileInfos(files.data);\r\n      })\r\n      .catch(() => {\r\n        setProgress(0);\r\n        // setMessage(\"Could not upload the file!\");\r\n        setCurrentFile(undefined);\r\n      });\r\n    setSelectedFiles(undefined);\r\n  };\r\n  const selectFile5Edit = (event) => {\r\n    setSelectedFiles(event.target.files);\r\n  };\r\n  const upload5Edit = () => {\r\n    let currentFile = selectedFiles[0];\r\n    setProgress(0);\r\n    setCurrentFile(currentFile);\r\n\r\n    PLCAndShareService.uploadPLC(currentFile, (event) => {\r\n      setProgress(Math.round((100 * event.loaded) / event.total));\r\n    })\r\n      .then((response) => {\r\n        setMessage(response.data.message);\r\n        setSelectedPathAoADEdit(response.data.Result);\r\n      })\r\n      .then((files) => {\r\n        setFileInfos(files.data);\r\n      })\r\n      .catch(() => {\r\n        setProgress(0);\r\n        // setMessage(\"Could not upload the file!\");\r\n        setCurrentFile(undefined);\r\n      });\r\n    setSelectedFiles(undefined);\r\n  };\r\n  const selectFile6Edit = (event) => {\r\n    setSelectedFiles(event.target.files);\r\n  };\r\n  const upload6Edit = () => {\r\n    let currentFile = selectedFiles[0];\r\n    setProgress(0);\r\n    setCurrentFile(currentFile);\r\n\r\n    PLCAndShareService.uploadPLC(currentFile, (event) => {\r\n      setProgress(Math.round((100 * event.loaded) / event.total));\r\n    })\r\n      .then((response) => {\r\n        setMessage(response.data.message);\r\n        setSelectedPathMDEdit(response.data.Result);\r\n      })\r\n      .then((files) => {\r\n        setFileInfos(files.data);\r\n      })\r\n      .catch(() => {\r\n        setProgress(0);\r\n        // setMessage(\"Could not upload the file!\");\r\n        setCurrentFile(undefined);\r\n      });\r\n    setSelectedFiles(undefined);\r\n  };\r\n\r\n\r\n  return (\r\n\r\n    <CompanyModal\r\n      isOpen={isPLCAndShareEditModalOpen}\r\n      onClose={handleCompanyPLCAndShareInformationEditCloseModal}\r\n      title=\"Edit company PLC And Share information\"\r\n    >\r\n      <div>\r\n        <form onSubmit={updateCompanyPLCAndShareInformationById}>\r\n          <div className=\"grid grid-cols-1 gap-4 submit-form\">\r\n            <div className=\"submit-form \">\r\n              <div className=\"relative center justify-center flex-1 w-full max-w-full grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\">\r\n                <TextField\r\n                  id=\"MoUReferenceNumber\"\r\n                  label=\"MoUReferenceNumber\"\r\n                  variant=\"standard\"\r\n                  color=\"secondary\"\r\n                  size=\"\"\r\n                  required\r\n                  value={editPLCAndShareInfo.MoUReferenceNumber}\r\n                  onChange={(e) =>\r\n                    setEditPLCAndShareInfo({\r\n                      ...editPLCAndShareInfo,\r\n                      MoUReferenceNumber: e.target.value,\r\n                    })\r\n                  }\r\n                  name=\"MoUReferenceNumber\"\r\n                />\r\n                <p>\r\n\r\n                  MoUDate:\r\n\r\n                  <input\r\n\r\n                    id=\"MoUDate\"\r\n\r\n                    name=\"MoUDate\"\r\n\r\n                    label=\"MoUDate\"\r\n\r\n                    placeholder=\"MoUDate\"\r\n\r\n                    type=\"date\"\r\n\r\n                    value={\r\n\r\n                      moUDateEdit.getFullYear().toString() +\r\n\r\n                      \"-\" +\r\n\r\n                      (moUDateEdit.getMonth() + 1)\r\n\r\n                        .toString()\r\n\r\n                        .padStart(2, 0) +\r\n\r\n                      \"-\" +\r\n\r\n                      moUDateEdit\r\n\r\n                        .getDate()\r\n\r\n                        .toString()\r\n\r\n                        .padStart(2, 0)\r\n\r\n                    }\r\n\r\n                    onChange={(e) => {\r\n\r\n                      setMoUDateEdit(new Date(e.target.value));\r\n\r\n                      EditPLCAndShare.MoUDate = moUDateEdit;\r\n                    }}\r\n\r\n                  />{\" \"}\r\n\r\n                </p>\r\n                <TextField\r\n                  id=\"MoUAuthRefNumber\"\r\n                  label=\"MoUAuthRefNumber\"\r\n                  variant=\"standard\"\r\n                  color=\"secondary\"\r\n                  size=\"\"\r\n                  required\r\n                  value={editPLCAndShareInfo.MoUAuthRefNumber}\r\n                  onChange={(e) =>\r\n                    setEditPLCAndShareInfo({\r\n                      ...editPLCAndShareInfo,\r\n                      MoUAuthRefNumber: e.target.value,\r\n                    })\r\n                  }\r\n                  name=\"MoUAuthRefNumber\"\r\n                />\r\n                <div>\r\n                  {currentFile && (\r\n                    <div className=\"progress\">\r\n                      <div\r\n                        className=\"progress-bar progress-bar-info progress-bar-striped\"\r\n                        role=\"progressbar\"\r\n                        aria-valuenow={progress}\r\n                        aria-valuemin=\"0\"\r\n                        aria-valuemax=\"100\"\r\n                        style={{ width: progress + \"%\" }}\r\n                      >\r\n                        {progress}%\r\n                      </div>\r\n                    </div>\r\n                  )}\r\n                  <label className=\"btn btn-default\">\r\n                    <input type=\"file\" onChange={selectFile4Edit} />\r\n                  </label>\r\n\r\n                  <button\r\n                    className=\"btn btn-success\"\r\n                    disabled={!selectedFiles}\r\n                    onChange={\r\n\r\n                      editPLCAndShareInfo.MoUDocument = selectedPathMoUDEdit\r\n\r\n                    }\r\n                    onClick={upload4Edit}\r\n                  >\r\n                    Upload MoU Document\r\n                  </button>\r\n                  <div className=\"alert alert-light\" role=\"alert\">\r\n                    {message}\r\n                  </div>\r\n                </div>\r\n                <TextField\r\n                  id=\"MoUIssuer\"\r\n                  label=\"MoUIssuer\"\r\n                  variant=\"standard\"\r\n                  color=\"secondary\"\r\n                  size=\"\"\r\n                  required\r\n                  value={editPLCAndShareInfo.MoUIssuer}\r\n                  onChange={(e) =>\r\n                    setEditPLCAndShareInfo({\r\n                      ...editPLCAndShareInfo,\r\n                      MoUIssuer: e.target.value,\r\n                    })\r\n                  }\r\n                  name=\"MoUIssuer\"\r\n                />\r\n                <p>\r\n\r\n                  MoUAuthDate:\r\n\r\n                  <input\r\n\r\n                    id=\"MoUAuthDate\"\r\n\r\n                    name=\"MoUAuthDate\"\r\n\r\n                    label=\"MoUAuthDate\"\r\n\r\n                    placeholder=\"MoUDate\"\r\n\r\n                    type=\"date\"\r\n\r\n                    value={\r\n\r\n                      moUAuthDateEdit.getFullYear().toString() +\r\n\r\n                      \"-\" +\r\n\r\n                      (moUAuthDateEdit.getMonth() + 1)\r\n\r\n                        .toString()\r\n\r\n                        .padStart(2, 0) +\r\n\r\n                      \"-\" +\r\n\r\n                      moUAuthDateEdit\r\n\r\n                        .getDate()\r\n\r\n                        .toString()\r\n\r\n                        .padStart(2, 0)\r\n\r\n                    }\r\n\r\n                    onChange={(e) => {\r\n\r\n                      setMoUAuthDateEdit(new Date(e.target.value));\r\n\r\n                      EditPLCAndShare.MoUAuthDate = moUAuthDateEdit;\r\n                    }}\r\n\r\n                  />{\" \"}\r\n\r\n                </p>\r\n                <TextField\r\n                  id=\"AoAReferenceNumber\"\r\n                  label=\"AoAReferenceNumber\"\r\n                  variant=\"standard\"\r\n                  color=\"secondary\"\r\n                  size=\"\"\r\n                  required\r\n                  value={editPLCAndShareInfo.AoAReferenceNumber}\r\n                  onChange={(e) =>\r\n                    setEditPLCAndShareInfo({\r\n                      ...editPLCAndShareInfo,\r\n                      AoAReferenceNumber: e.target.value,\r\n                    })\r\n                  }\r\n                  name=\"AoAReferenceNumber\"\r\n                />\r\n                <p>\r\n\r\n                  AoADate:\r\n\r\n                  <input\r\n\r\n                    id=\"AoADate\"\r\n\r\n                    name=\"AoADate\"\r\n\r\n                    label=\"AoADate\"\r\n\r\n                    placeholder=\"AoADate\"\r\n\r\n                    type=\"date\"\r\n\r\n                    value={\r\n\r\n                      aoADateEdit.getFullYear().toString() +\r\n\r\n                      \"-\" +\r\n\r\n                      (aoADateEdit.getMonth() + 1)\r\n\r\n                        .toString()\r\n\r\n                        .padStart(2, 0) +\r\n\r\n                      \"-\" +\r\n\r\n                      aoADateEdit\r\n\r\n                        .getDate()\r\n\r\n                        .toString()\r\n\r\n                        .padStart(2, 0)\r\n\r\n                    }\r\n\r\n                    onChange={(e) => {\r\n\r\n                      setAoADateEdit(new Date(e.target.value));\r\n\r\n                      EditPLCAndShare.AoADate = aoADateEdit;\r\n                    }}\r\n\r\n                  />{\" \"}\r\n\r\n                </p>             \r\n                <TextField\r\n                  id=\"AoAAuthRefNumber\"\r\n                  label=\"AoAAuthRefNumber\"\r\n                  variant=\"standard\"\r\n                  color=\"secondary\"\r\n                  size=\"\"\r\n                  required\r\n                  value={editPLCAndShareInfo.AoAAuthRefNumber}\r\n                  onChange={(e) =>\r\n                    setEditPLCAndShareInfo({\r\n                      ...editPLCAndShareInfo,\r\n                      AoAAuthRefNumber: e.target.value,\r\n                    })\r\n                  }\r\n                  name=\"AoAAuthRefNumber\"\r\n                />\r\n                <p>\r\n\r\n                  AoAAuthDate:\r\n\r\n                  <input\r\n\r\n                    id=\"AoAAuthDate\"\r\n\r\n                    name=\"AoAAuthDate\"\r\n\r\n                    label=\"AoAAuthDate\"\r\n\r\n                    placeholder=\"AoAAuthDate\"\r\n\r\n                    type=\"date\"\r\n\r\n                    value={\r\n\r\n                      aoAAuthDateEdit.getFullYear().toString() +\r\n\r\n                      \"-\" +\r\n\r\n                      (aoAAuthDateEdit.getMonth() + 1)\r\n\r\n                        .toString()\r\n\r\n                        .padStart(2, 0) +\r\n\r\n                      \"-\" +\r\n\r\n                      aoAAuthDateEdit\r\n\r\n                        .getDate()\r\n\r\n                        .toString()\r\n\r\n                        .padStart(2, 0)\r\n\r\n                    }\r\n\r\n                    onChange={(e) => {\r\n\r\n                      setAoAAuthDateEdit(new Date(e.target.value));\r\n\r\n                      EditPLCAndShare.AoAAuthDate = aoAAuthDateEdit;\r\n                    }}\r\n\r\n                  />{\" \"}\r\n\r\n                </p>\r\n                <div>\r\n                  {currentFile && (\r\n                    <div className=\"progress\">\r\n                      <div\r\n                        className=\"progress-bar progress-bar-info progress-bar-striped\"\r\n                        role=\"progressbar\"\r\n                        aria-valuenow={progress}\r\n                        aria-valuemin=\"0\"\r\n                        aria-valuemax=\"100\"\r\n                        style={{ width: progress + \"%\" }}\r\n                      >\r\n                        {progress}%\r\n                      </div>\r\n                    </div>\r\n                  )}\r\n                  <label className=\"btn btn-default\">\r\n                    <input type=\"file\" onChange={selectFile5Edit} />\r\n                  </label>\r\n\r\n                  <button\r\n                    className=\"btn btn-success\"\r\n                    disabled={!selectedFiles}\r\n                    onChange={\r\n\r\n                      editPLCAndShareInfo.AoADocument = selectedPathAoADEdit\r\n\r\n                    }\r\n                    onClick={upload5Edit}\r\n                  >\r\n                    Upload AoA Document\r\n                  </button>\r\n                  <div className=\"alert alert-light\" role=\"alert\">\r\n                    {message}\r\n                  </div>\r\n                </div>\r\n                <p>\r\n\r\n                  MinuteDate:\r\n\r\n                  <input\r\n\r\n                    id=\"MinuteDate\"\r\n\r\n                    name=\"MinuteDate\"\r\n\r\n                    label=\"MinuteDate\"\r\n\r\n                    placeholder=\"MinuteDate\"\r\n\r\n                    type=\"date\"\r\n\r\n                    value={\r\n\r\n                      minuteDateEdit.getFullYear().toString() +\r\n\r\n                      \"-\" +\r\n\r\n                      (minuteDateEdit.getMonth() + 1)\r\n\r\n                        .toString()\r\n\r\n                        .padStart(2, 0) +\r\n\r\n                      \"-\" +\r\n\r\n                      minuteDateEdit\r\n\r\n                        .getDate()\r\n\r\n                        .toString()\r\n\r\n                        .padStart(2, 0)\r\n\r\n                    }\r\n\r\n                    onChange={(e) => {\r\n\r\n                      setMinuteDateEdit(new Date(e.target.value));\r\n\r\n                      EditPLCAndShare.MinuteDate = minuteDateEdit;\r\n                    }}\r\n\r\n                  />{\" \"}\r\n\r\n                </p>\r\n\r\n                <TextField\r\n                  id=\"MinuteReferenceNumber\"\r\n                  label=\"MinuteReferenceNumber\"\r\n                  variant=\"standard\"\r\n                  color=\"secondary\"\r\n                  size=\"\"\r\n                  required\r\n                  value={editPLCAndShareInfo.MinuteReferenceNumber}\r\n                  onChange={(e) =>\r\n                    setEditPLCAndShareInfo({\r\n                      ...editPLCAndShareInfo,\r\n                      MinuteReferenceNumber: e.target.value,\r\n                    })\r\n                  }\r\n                  name=\"MinuteReferenceNumber\"\r\n                />\r\n               \r\n                <p>\r\n\r\n                  MinuteAuthDate:\r\n\r\n                  <input\r\n\r\n                    id=\"MinuteAuthDate\"\r\n\r\n                    name=\"MinuteAuthDate\"\r\n\r\n                    label=\"MinuteAuthDate\"\r\n\r\n                    placeholder=\"MinuteAuthDate\"\r\n\r\n                    type=\"date\"\r\n\r\n                    value={\r\n\r\n                      minuteAuthDateEdit.getFullYear().toString() +\r\n\r\n                      \"-\" +\r\n\r\n                      (minuteAuthDateEdit.getMonth() + 1)\r\n\r\n                        .toString()\r\n\r\n                        .padStart(2, 0) +\r\n\r\n                      \"-\" +\r\n\r\n                      minuteAuthDateEdit\r\n\r\n                        .getDate()\r\n\r\n                        .toString()\r\n\r\n                        .padStart(2, 0)\r\n\r\n                    }\r\n\r\n                    onChange={(e) => {\r\n\r\n                      setMinuteAuthDateEdit(new Date(e.target.value));\r\n\r\n                      EditPLCAndShare.MinuteAuthDate = minuteAuthDateEdit;\r\n                    }}\r\n\r\n                  />{\" \"}\r\n\r\n                </p>\r\n                <TextField\r\n                  id=\"MinuteAuthRefNumber\"\r\n                  label=\"MinuteAuthRefNumber\"\r\n                  variant=\"standard\"\r\n                  color=\"secondary\"\r\n                  size=\"\"\r\n                  required\r\n                  value={editPLCAndShareInfo.MinuteAuthRefNumber}\r\n                  onChange={(e) =>\r\n                    setEditPLCAndShareInfo({\r\n                      ...editPLCAndShareInfo,\r\n                      MinuteAuthRefNumber: e.target.value,\r\n                    })\r\n                  }\r\n                  name=\"MinuteAuthRefNumber\"\r\n                />\r\n                <div>\r\n                  {currentFile && (\r\n                    <div className=\"progress\">\r\n                      <div\r\n                        className=\"progress-bar progress-bar-info progress-bar-striped\"\r\n                        role=\"progressbar\"\r\n                        aria-valuenow={progress}\r\n                        aria-valuemin=\"0\"\r\n                        aria-valuemax=\"100\"\r\n                        style={{ width: progress + \"%\" }}\r\n                      >\r\n                        {progress}%\r\n                      </div>\r\n                    </div>\r\n                  )}\r\n                  <label className=\"btn btn-default\">\r\n                    <input type=\"file\" onChange={selectFile6Edit} />\r\n                  </label>\r\n\r\n                  <button\r\n                    className=\"btn btn-success\"\r\n                    disabled={!selectedFiles}\r\n                    onChange={\r\n\r\n                      editPLCAndShareInfo.MinuteDocument = selectedPathMDEdit\r\n\r\n                    }\r\n                    onClick={upload6Edit}\r\n                  >\r\n                    Upload Minute Document\r\n                  </button>\r\n                  <div className=\"alert alert-light\" role=\"alert\">\r\n                    {message}\r\n                  </div>\r\n                </div>\r\n                <TextField\r\n                  id=\"MinuteIssuer\"\r\n                  label=\"MinuteIssuer\"\r\n                  variant=\"standard\"\r\n                  color=\"secondary\"\r\n                  size=\"\"\r\n                  required\r\n                  value={editPLCAndShareInfo.MinuteIssuer}\r\n                  onChange={(e) =>\r\n                    setEditPLCAndShareInfo({\r\n                      ...editPLCAndShareInfo,\r\n                      MinuteIssuer: e.target.value,\r\n                    })\r\n                  }\r\n                  name=\"MinuteIssuer\"\r\n                />\r\n                <TextField\r\n                  id=\"MinuteAgenda\"\r\n                  label=\"MinuteAgenda\"\r\n                  variant=\"standard\"\r\n                  color=\"secondary\"\r\n                  size=\"\"\r\n                  required\r\n                  value={editPLCAndShareInfo.MinuteAgenda}\r\n                  onChange={(e) =>\r\n                    setEditPLCAndShareInfo({\r\n                      ...editPLCAndShareInfo,\r\n                      MinuteAgenda: e.target.value,\r\n                    })\r\n                  }\r\n                  name=\"MinuteAgenda\"\r\n                />\r\n              </div>\r\n              <button type=\"submit\" className=\"btn btn-info\">\r\n                Update\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </CompanyModal>\r\n  );\r\n};\r\nexport default EditPLCAndShare;\r\n","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\PLCAndShare\\AddPLCAndShareInfo.jsx",["1128","1129","1130","1131","1132","1133"],[],"import { useState, useEffect } from \"react\";\r\nimport { useParams, useNavigate } from \"react-router-dom\";\r\nimport LoanIconButton from \"../../Common/LoanIconButton\";\r\nimport { BiSkipPrevious, BiSkipNext } from \"react-icons/bi\";\r\nimport { BsPlus } from \"react-icons/bs\";\r\nimport CompanyModal from \"../Common/CompanyModal\";\r\nimport LoanTextField from \"../../Common/LoanTextField\";\r\nimport { IoRefresh } from \"react-icons/io5\";\r\nimport PLCAndShareService from \"./PLCAndShareService\";\r\nconst AddPLCAndShareInfo = ({\r\n  PLCAndShare,\r\n  handleInputChangePLCAndShare,\r\n  handleSkip,\r\n  handleBack,\r\n  setPLCAndShare,\r\n  onClick,\r\n}) => {\r\n  const [selectedPathMoUD, setSelectedPathMoUD] = useState(null);\r\n  const [selectedPathMD, setSelectedPathMD] = useState(null);\r\n  const [selectedPathAoAD, setSelectedPathAoAD] = useState(null);\r\n  const [moUDate, setMoUDate] = useState(new Date());\r\n  const [moUAuthDate, setMoUAuthDate] = useState(new Date());\r\n  const [aoADate, setAoADate] = useState(new Date());\r\n  const [aoAAuthDate, setAoAAuthDate] = useState(new Date());\r\n  const [minuteDate, setMinuteDate] = useState(new Date());\r\n  const [minuteAuthDate, setMinuteAuthDate] = useState(new Date());\r\n  const [isPLCAndShareModalOpen, setIsPLCAndShareModalOpen] = useState(false);\r\n  const [selectedFiles, setSelectedFiles] = useState(undefined);\r\n  const [currentFile, setCurrentFile] = useState(undefined);\r\n  const [progress, setProgress] = useState(0);\r\n  const [message, setMessage] = useState(\"\");\r\n  const [fileInfos, setFileInfos] = useState([]);\r\n  const [submitted, setSubmitted] = useState(true);\r\n  const [holdId, setHoldId] = useState([]);\r\n  function handleGeneralCloseModal() {\r\n    setIsPLCAndShareModalOpen(false);\r\n  }\r\n  function handleGeneralOpenModal() {\r\n    setIsPLCAndShareModalOpen(true);\r\n  }\r\n  const selectFile4 = (event) => {\r\n    setSelectedFiles(event.target.files);\r\n  };\r\n  const upload4 = () => {\r\n    let currentFile = selectedFiles[0];\r\n    setProgress(0);\r\n    setCurrentFile(currentFile);\r\n\r\n    PLCAndShareService.uploadPLC(currentFile, (event) => {\r\n      setProgress(Math.round((100 * event.loaded) / event.total));\r\n    })\r\n      .then((response) => {\r\n        setMessage(response.data.message);\r\n        setSelectedPathMoUD(response.data.Result);\r\n      })\r\n      .then((files) => {\r\n        setFileInfos(files.data);\r\n      })\r\n      .catch(() => {\r\n        setProgress(0);\r\n        // setMessage(\"Could not upload the file!\");\r\n        setCurrentFile(undefined);\r\n      });\r\n    setSelectedFiles(undefined);\r\n  };\r\n  const selectFile5 = (event) => {\r\n    setSelectedFiles(event.target.files);\r\n  };\r\n  const upload5 = () => {\r\n    let currentFile = selectedFiles[0];\r\n    setProgress(0);\r\n    setCurrentFile(currentFile);\r\n\r\n    PLCAndShareService.uploadPLC(currentFile, (event) => {\r\n      setProgress(Math.round((100 * event.loaded) / event.total));\r\n    })\r\n      .then((response) => {\r\n        setMessage(response.data.message);\r\n        setSelectedPathAoAD(response.data.Result);\r\n      })\r\n      .then((files) => {\r\n        setFileInfos(files.data);\r\n      })\r\n      .catch(() => {\r\n        setProgress(0);\r\n        // setMessage(\"Could not upload the file!\");\r\n        setCurrentFile(undefined);\r\n      });\r\n    setSelectedFiles(undefined);\r\n  };\r\n  const selectFile6 = (event) => {\r\n    setSelectedFiles(event.target.files);\r\n  };\r\n  const upload6 = () => {\r\n    let currentFile = selectedFiles[0];\r\n    setProgress(0);\r\n    setCurrentFile(currentFile);\r\n\r\n    PLCAndShareService.uploadPLC(currentFile, (event) => {\r\n      setProgress(Math.round((100 * event.loaded) / event.total));\r\n    })\r\n      .then((response) => {\r\n        setMessage(response.data.message);\r\n        setSelectedPathMD(response.data.Result);\r\n      })\r\n      .then((files) => {\r\n        setFileInfos(files.data);\r\n      })\r\n      .catch(() => {\r\n        setProgress(0);\r\n        // setMessage(\"Could not upload the file!\");\r\n        setCurrentFile(undefined);\r\n      });\r\n    setSelectedFiles(undefined);\r\n  };\r\n  const { companyId } = useParams();\r\n  const savePLCAndShare = (e) => {\r\n    e.preventDefault();\r\n    var data = {\r\n      // CompanyID: PLCAndShare.CompanyID,\r\n      // GuarantorId: null,\r\n      // TaxClearanceID: null,\r\n      MoUDate: moUDate,\r\n      MoUReferenceNumber: PLCAndShare.MoUReferenceNumber,\r\n      MoUAuthDate: moUAuthDate,\r\n      MoUAuthRefNumber: PLCAndShare.MoUAuthRefNumber,\r\n      MoUDocument: selectedPathMoUD,\r\n      MoUIssuer: PLCAndShare.MoUIssuer,\r\n      AoADate: aoADate,\r\n      AoAReferenceNumber: PLCAndShare.AoAReferenceNumber,\r\n      AoAAuthDate: aoAAuthDate,\r\n      AoAAuthRefNumber: PLCAndShare.AoAAuthRefNumber,\r\n      AoADocument: selectedPathAoAD,\r\n      MinuteDate: minuteDate,\r\n      MinuteReferenceNumber: PLCAndShare.MinuteReferenceNumber,\r\n      MinuteAuthDate: minuteAuthDate,\r\n      MinuteAuthRefNumber: PLCAndShare.MinuteAuthRefNumber,\r\n      MinuteDocument: selectedPathMD,\r\n      MinuteIssuer: PLCAndShare.MinuteIssuer,\r\n      MinuteAgenda: PLCAndShare.MinuteAgenda,\r\n    };\r\n\r\n    PLCAndShareService.addPLCAndShare(data, companyId)\r\n      .then((response) => {\r\n        debugger;\r\n        setPLCAndShare({\r\n          Id: response.data.Id,\r\n          // GuarantorId: response.data.GuarantorId,\r\n          // TaxClearanceID: response.data.TaxClearanceID,\r\n          MoUDate: response.data.MoUDate,\r\n          MoUReferenceNumber: response.data.MoUReferenceNumber,\r\n          MoUAuthDate: response.data.MoUAuthDate,\r\n          MoUAuthRefNumber: response.data.MoUAuthRefNumber,\r\n          MoUDocument: response.data.MoUDocument,\r\n          MoUIssuer: response.data.MoUIssuer,\r\n          AoADate: response.data.AoADate,\r\n          AoAReferenceNumber: response.data.AoAReferenceNumber,\r\n          AoAAuthDate: response.data.AoAAuthDate,\r\n          AoAAuthRefNumber: response.data.AoAAuthRefNumber,\r\n          AoADocument: response.data.AoADocument,\r\n          MinuteDate: response.data.MinuteDate,\r\n          MinuteReferenceNumber: response.data.MinuteReferenceNumber,\r\n          MinuteAuthDate: response.data.MinuteAuthDate,\r\n          MinuteAuthRefNumber: response.data.MinuteAuthRefNumber,\r\n          MinuteDocument: response.data.MinuteDocument,\r\n          MinuteIssuer: response.data.MinuteIssuer,\r\n          MinuteAgenda: response.data.MinuteAgenda,\r\n        });\r\n        setSubmitted(true);\r\n        console.log(response.data);\r\n        setHoldId(response.data.Result.Id);\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"flex\">\r\n        <LoanIconButton\r\n          style={{ color: \"purple\" }}\r\n          icon={<BsPlus />}\r\n          text=\"Add\"\r\n          onClick={handleGeneralOpenModal}\r\n        />\r\n        <LoanIconButton\r\n          style={{ color: \"purple\" }}\r\n          icon={<BiSkipNext />}\r\n          text=\"Skip\"\r\n          onClick={handleSkip}\r\n        />\r\n        <LoanIconButton\r\n          style={{ color: \"purple\" }}\r\n          icon={<IoRefresh />}\r\n          text=\"Reload\"\r\n          onClick={onClick}\r\n        />\r\n      </div>\r\n      <CompanyModal\r\n        isOpen={isPLCAndShareModalOpen}\r\n        onClose={handleGeneralCloseModal}\r\n        title=\"Add PLC And Share information\"           >\r\n        <div className=\"relative center justify-center flex-1 w-full max-w-full grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\">\r\n\r\n          <LoanTextField\r\n            id=\"MoUReferenceNumber\"\r\n            label=\"MoUReferenceNumber\"\r\n            variant=\"standard\"\r\n            color=\"secondary\"\r\n            size=\"\"\r\n            required\r\n            value={PLCAndShare.MoUReferenceNumber}\r\n            onChange={handleInputChangePLCAndShare}\r\n            name=\"MoUReferenceNumber\"\r\n          />\r\n          <LoanTextField\r\n            id=\"MoUAuthRefNumber\"\r\n            label=\"MoUAuthRefNumber\"\r\n            variant=\"standard\"\r\n            color=\"secondary\"\r\n            size=\"\"\r\n            required\r\n            value={PLCAndShare.MoUAuthRefNumber}\r\n            onChange={handleInputChangePLCAndShare}\r\n            name=\"MoUAuthRefNumber\"\r\n          />\r\n          <p>\r\n\r\n          MoUDate:\r\n\r\n            <input\r\n\r\n              id=\"MoUDate\"\r\n\r\n              name=\"MoUDate\"\r\n\r\n              label=\"MoUDate\"\r\n\r\n              placeholder=\"MoUDate\"\r\n\r\n              type=\"date\"\r\n\r\n              value={\r\n\r\n                moUDate.getFullYear().toString() +\r\n\r\n                \"-\" +\r\n\r\n                (moUDate.getMonth() + 1)\r\n\r\n                  .toString()\r\n\r\n                  .padStart(2, 0) +\r\n\r\n                \"-\" +\r\n\r\n                moUDate\r\n\r\n                  .getDate()\r\n\r\n                  .toString()\r\n\r\n                  .padStart(2, 0)\r\n\r\n              }\r\n\r\n              onChange={(e) => {\r\n\r\n                setMoUDate(new Date(e.target.value));\r\n\r\n                PLCAndShare.MoUDate = moUDate;\r\n              }}\r\n\r\n            />{\" \"}\r\n\r\n          </p>\r\n\r\n          <p>\r\n\r\n            MoUAuthDate:\r\n\r\n            <input\r\n\r\n              id=\"MoUAuthDate\"\r\n\r\n              name=\"MoUAuthDate\"\r\n\r\n              label=\"MoUAuthDate\"\r\n\r\n              placeholder=\"MoUAuthDate\"\r\n\r\n              type=\"date\"\r\n\r\n              value={\r\n\r\n                moUAuthDate.getFullYear().toString() +\r\n\r\n                \"-\" +\r\n\r\n                (moUAuthDate.getMonth() + 1)\r\n\r\n                  .toString()\r\n\r\n                  .padStart(2, 0) +\r\n\r\n                \"-\" +\r\n\r\n                moUAuthDate\r\n\r\n                  .getDate()\r\n\r\n                  .toString()\r\n\r\n                  .padStart(2, 0)\r\n\r\n              }\r\n\r\n              onChange={(e) => {\r\n\r\n                setMoUAuthDate(new Date(e.target.value));\r\n\r\n                PLCAndShare.MoUAuthDate = moUAuthDate;\r\n              }}\r\n\r\n            />{\" \"}\r\n\r\n          </p>\r\n\r\n          <div>\r\n            {currentFile && (\r\n              <div className=\"progress\">\r\n                <div\r\n                  className=\"progress-bar progress-bar-info progress-bar-striped\"\r\n                  role=\"progressbar\"\r\n                  aria-valuenow={progress}\r\n                  aria-valuemin=\"0\"\r\n                  aria-valuemax=\"100\"\r\n                  style={{ width: progress + \"%\" }}\r\n                >\r\n                  {progress}%\r\n                </div>\r\n              </div>\r\n            )}\r\n            <label className=\"btn btn-default\">\r\n              <input type=\"file\" onChange={selectFile4} />\r\n            </label>\r\n\r\n            <button\r\n              className=\"btn btn-success\"\r\n              disabled={!selectedFiles}\r\n              onClick={upload4}\r\n            >\r\n              Upload MoU Document\r\n            </button>\r\n            <div className=\"alert alert-light\" role=\"alert\">\r\n              {message}\r\n            </div>\r\n          </div>\r\n          <LoanTextField\r\n            id=\"MoUIssuer\"\r\n            label=\"MoUIssuer\"\r\n            variant=\"standard\"\r\n            color=\"secondary\"\r\n            size=\"\"\r\n            required\r\n            value={PLCAndShare.MoUIssuer}\r\n            onChange={handleInputChangePLCAndShare}\r\n            name=\"MoUIssuer\"\r\n          />\r\n          <p>\r\n            AoADate:\r\n            <input\r\n              id=\"AoADate\"\r\n\r\n              name=\"AoADate\"\r\n\r\n              label=\"AoADate\"\r\n\r\n              placeholder=\"AoADate\"\r\n\r\n              type=\"date\"\r\n\r\n              value={\r\n\r\n                aoADate.getFullYear().toString() +\r\n\r\n                \"-\" +\r\n\r\n                (aoADate.getMonth() + 1)\r\n\r\n                  .toString()\r\n\r\n                  .padStart(2, 0) +\r\n\r\n                \"-\" +\r\n\r\n                aoADate\r\n\r\n                  .getDate()\r\n\r\n                  .toString()\r\n\r\n                  .padStart(2, 0)\r\n\r\n              }\r\n\r\n              onChange={(e) => {\r\n\r\n                setAoADate(new Date(e.target.value));\r\n\r\n                PLCAndShare.AoADate = aoADate;\r\n              }}\r\n\r\n            />{\" \"}\r\n\r\n          </p>\r\n          <LoanTextField\r\n            id=\"AoAReferenceNumber\"\r\n            label=\"AoAReferenceNumber\"\r\n            variant=\"standard\"\r\n            color=\"secondary\"\r\n            size=\"\"\r\n            required\r\n            value={PLCAndShare.AoAReferenceNumber}\r\n            onChange={handleInputChangePLCAndShare}\r\n            name=\"AoAReferenceNumber\"\r\n          />\r\n\r\n          <p>\r\n\r\n            AoAAuthDate:\r\n\r\n            <input\r\n\r\n              id=\"AoAAuthDate\"\r\n\r\n              name=\"AoAAuthDate\"\r\n\r\n              label=\"AoAAuthDate\"\r\n\r\n              placeholder=\"AoAAuthDate\"\r\n\r\n              type=\"date\"\r\n\r\n              value={\r\n\r\n                aoAAuthDate.getFullYear().toString() +\r\n\r\n                \"-\" +\r\n\r\n                (aoAAuthDate.getMonth() + 1)\r\n\r\n                  .toString()\r\n\r\n                  .padStart(2, 0) +\r\n\r\n                \"-\" +\r\n\r\n                aoAAuthDate\r\n\r\n                  .getDate()\r\n\r\n                  .toString()\r\n\r\n                  .padStart(2, 0)\r\n\r\n              }\r\n\r\n              onChange={(e) => {\r\n\r\n                setAoAAuthDate(new Date(e.target.value));\r\n\r\n                PLCAndShare.AoAAuthDate = aoAAuthDate;\r\n              }}\r\n\r\n            />{\" \"}\r\n\r\n          </p>\r\n          <LoanTextField\r\n            id=\"AoAAuthRefNumber\"\r\n            label=\"AoAAuthRefNumber\"\r\n            variant=\"standard\"\r\n            color=\"secondary\"\r\n            size=\"\"\r\n            required\r\n            value={PLCAndShare.AoAAuthRefNumber}\r\n            onChange={handleInputChangePLCAndShare}\r\n            name=\"AoAAuthRefNumber\"\r\n          />\r\n          <div>\r\n            {currentFile && (\r\n              <div className=\"progress\">\r\n                <div\r\n                  className=\"progress-bar progress-bar-info progress-bar-striped\"\r\n                  role=\"progressbar\"\r\n                  aria-valuenow={progress}\r\n                  aria-valuemin=\"0\"\r\n                  aria-valuemax=\"100\"\r\n                  style={{ width: progress + \"%\" }}\r\n                >\r\n                  {progress}%\r\n                </div>\r\n              </div>\r\n            )}\r\n\r\n            <label className=\"btn btn-default\">\r\n              <input type=\"file\" onChange={selectFile5} />\r\n            </label>\r\n\r\n            <button\r\n              className=\"btn btn-success\"\r\n              disabled={!selectedFiles}\r\n              onClick={upload5}\r\n            >\r\n              Upload AoA Document\r\n            </button>\r\n            <div className=\"alert alert-light\" role=\"alert\">\r\n              {message}\r\n            </div>\r\n          </div>\r\n          <p>\r\n\r\n            MinuteDate:\r\n\r\n            <input\r\n\r\n              id=\"MinuteDate\"\r\n\r\n              name=\"MinuteDate\"\r\n\r\n              label=\"MinuteDate\"\r\n\r\n              placeholder=\"MinuteDate\"\r\n\r\n              type=\"date\"\r\n\r\n              value={\r\n\r\n                minuteDate.getFullYear().toString() +\r\n\r\n                \"-\" +\r\n\r\n                (minuteDate.getMonth() + 1)\r\n\r\n                  .toString()\r\n\r\n                  .padStart(2, 0) +\r\n\r\n                \"-\" +\r\n\r\n                minuteDate\r\n\r\n                  .getDate()\r\n\r\n                  .toString()\r\n\r\n                  .padStart(2, 0)\r\n\r\n              }\r\n\r\n              onChange={(e) => {\r\n\r\n                setMinuteDate(new Date(e.target.value));\r\n\r\n                PLCAndShare.MinuteDate = minuteDate;\r\n              }}\r\n\r\n            />{\" \"}\r\n\r\n          </p>\r\n          <LoanTextField\r\n            id=\"MinuteReferenceNumber\"\r\n            label=\"MinuteReferenceNumber\"\r\n            variant=\"standard\"\r\n            color=\"secondary\"\r\n            size=\"\"\r\n            required\r\n            value={PLCAndShare.MinuteReferenceNumber}\r\n            onChange={handleInputChangePLCAndShare}\r\n            name=\"MinuteReferenceNumber\"\r\n          />\r\n          <p>\r\n\r\n            MinuteAuthDate:\r\n\r\n            <input\r\n\r\n              id=\"MinuteAuthDate\"\r\n\r\n              name=\"MinuteAuthDate\"\r\n\r\n              label=\"MinuteAuthDate\"\r\n\r\n              placeholder=\"MinuteAuthDate\"\r\n\r\n              type=\"date\"\r\n\r\n              value={\r\n\r\n                minuteAuthDate.getFullYear().toString() +\r\n\r\n                \"-\" +\r\n\r\n                (minuteAuthDate.getMonth() + 1)\r\n\r\n                  .toString()\r\n\r\n                  .padStart(2, 0) +\r\n\r\n                \"-\" +\r\n\r\n                minuteAuthDate\r\n\r\n                  .getDate()\r\n\r\n                  .toString()\r\n\r\n                  .padStart(2, 0)\r\n\r\n              }\r\n\r\n              onChange={(e) => {\r\n\r\n                setMinuteAuthDate(new Date(e.target.value));\r\n\r\n                PLCAndShare.MinuteAuthDate = minuteAuthDate;\r\n              }}\r\n\r\n            />{\" \"}\r\n\r\n          </p>\r\n          <LoanTextField\r\n            id=\"MinuteAuthRefNumber\"\r\n            label=\"MinuteAuthRefNumber\"\r\n            variant=\"standard\"\r\n            color=\"secondary\"\r\n            size=\"\"\r\n            required\r\n            value={PLCAndShare.MinuteAuthRefNumber}\r\n            onChange={handleInputChangePLCAndShare}\r\n            name=\"MinuteAuthRefNumber\"\r\n          />\r\n          <div>\r\n            {currentFile && (\r\n              <div className=\"progress\">\r\n                <div\r\n                  className=\"progress-bar progress-bar-info progress-bar-striped\"\r\n                  role=\"progressbar\"\r\n                  aria-valuenow={progress}\r\n                  aria-valuemin=\"0\"\r\n                  aria-valuemax=\"100\"\r\n                  style={{ width: progress + \"%\" }}\r\n                >\r\n                  {progress}%\r\n                </div>\r\n              </div>\r\n            )}\r\n\r\n            <label className=\"btn btn-default\">\r\n              <input type=\"file\" onChange={selectFile6} />\r\n            </label>\r\n\r\n            <button\r\n              className=\"btn btn-success\"\r\n              disabled={!selectedFiles}\r\n              onClick={upload6}\r\n            >\r\n              Upload Minute Document\r\n            </button>\r\n            <div className=\"alert alert-light\" role=\"alert\">\r\n              {message}\r\n            </div>\r\n          </div>\r\n          <LoanTextField\r\n            id=\"MinuteIssuer\"\r\n            label=\"MinuteIssuer\"\r\n            variant=\"standard\"\r\n            color=\"secondary\"\r\n            size=\"\"\r\n            required\r\n            value={PLCAndShare.MinuteIssuer}\r\n            onChange={handleInputChangePLCAndShare}\r\n            name=\"MinuteIssuer\"\r\n          />\r\n          <LoanTextField\r\n            id=\"MinuteAgenda\"\r\n            label=\"MinuteAgenda\"\r\n            variant=\"standard\"\r\n            color=\"secondary\"\r\n            size=\"\"\r\n            required\r\n            value={PLCAndShare.MinuteAgenda}\r\n            onChange={handleInputChangePLCAndShare}\r\n            name=\"MinuteAgenda\"\r\n          />\r\n        </div>\r\n\r\n\r\n        <div className=\"flex justify-between\">\r\n          <button\r\n            className=\"bg-gray-300 hover:bg-gray-400 text-gray-800 font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\"\r\n            onClick={handleBack}\r\n          >\r\n            Back\r\n          </button>\r\n\r\n          <button\r\n            className=\"bg-[purple] hover:bg-purple-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\"\r\n            onClick={savePLCAndShare}\r\n          >\r\n            Submit\r\n          </button>\r\n        </div>\r\n\r\n      </CompanyModal>\r\n    </>\r\n  );\r\n\r\n};\r\nexport default AddPLCAndShareInfo;",["1134"],"C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\PLCAndShare\\ViewPLCAndShareTaxDetail.jsx",["1135","1136","1137","1138","1139","1140","1141","1142","1143"],[],"import CompanyNavigation from \"../../Common/CompanyNavigation\";\r\nimport { useParams, useNavigate } from \"react-router-dom\";\r\nimport { useState, useEffect } from \"react\";\r\nimport LoanIconButton from \"../../Common/LoanIconButton\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport 'react-datepicker/dist/react-datepicker-cssmodules.css';\r\nimport { MdModeEdit } from \"react-icons/md\";\r\nimport PLCAndShareService from \"./PLCAndShareService\";\r\nimport LoanTextField from \"../../Common/LoanTextField\";\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\nimport CompanyModal from \"../Common/CompanyModal\";\r\nconst ViewPLCAndShareTaxDetail = ({\r\n  handleGeneralPLCAndShareTaxDetailCloseModal,\r\n  isPLCAndShareTaxDetailModalOpen,\r\n  getPLCAndShareTaxInformation,\r\n  PLCAndShareInformationId,\r\n  getCompanyPLCAndShareInformationById,\r\n}) => {\r\n  const [expiredDateEdit, setExpiredDateEdit] = useState(new Date());\r\n  const [issueDateEdit, setIssueDateEdit] = useState(new Date());\r\n  const [issueDate, setIssueDate] = useState(new Date());\r\n  const [expiredDate, setExpiredDate] = useState(new Date());\r\n  const [selectedPathCert, setSelectedPathCert] = useState(null);\r\n  const [submitted, setSubmitted] = useState(true);\r\n  const [holdId, setHoldId] = useState([]);\r\n  const [selectedPathCertEdit, setSelectedPathCertEdit] = useState(null);\r\n  const [selectedFiles, setSelectedFiles] = useState(undefined);\r\n  const [currentFile, setCurrentFile] = useState(undefined);\r\n  const [fileInfos, setFileInfos] = useState([]);\r\n  const [progress, setProgress] = useState(0);\r\n  const [message, setMessage] = useState(\"\");\r\n  const selectFileCert = (event) => {\r\n    setSelectedFiles(event.target.files);\r\n  };\r\n  const uploadCert = () => {\r\n    let currentFile = selectedFiles[0];\r\n    setProgress(0);\r\n    setCurrentFile(currentFile);\r\n    PLCAndShareService.uploadTax(currentFile, (event) => {\r\n      setProgress(Math.round((100 * event.loaded) / event.total));\r\n    })\r\n      .then((response) => {\r\n        setMessage(response.data.message);\r\n        setSelectedPathCert(response.data.Result);\r\n      })\r\n      .then((files) => {\r\n        setFileInfos(files.data);\r\n      })\r\n      .catch(() => {\r\n        setProgress(0);\r\n        setCurrentFile(undefined);\r\n      });\r\n    setSelectedFiles(undefined);\r\n  };\r\n  //Start Upload Edit\r\n  const selectFileCertEdit = (event) => {\r\n    setSelectedFiles(event.target.files);\r\n  };\r\n  const uploadCertEdit = () => {\r\n    let currentFile = selectedFiles[0];\r\n    setProgress(0);\r\n    setCurrentFile(currentFile);\r\n\r\n    PLCAndShareService.uploadTax(currentFile, (event) => {\r\n      setProgress(Math.round((100 * event.loaded) / event.total));\r\n    })\r\n      .then((response) => {\r\n        setMessage(response.data.message);\r\n        setSelectedPathCertEdit(response.data.Result);\r\n      })\r\n      .then((files) => {\r\n        setFileInfos(files.data);\r\n      })\r\n      .catch(() => {\r\n        setProgress(0);\r\n        setCurrentFile(undefined);\r\n      });\r\n    setSelectedFiles(undefined);\r\n  };\r\n  const initialPLCAndShareTaxState = {\r\n    Id: null,\r\n    Name: \"\",\r\n    TinNo: \"\",\r\n    IssueDate: \"\",\r\n    Expireddate: \"\",\r\n    TaxDebit: \"\",\r\n    Certificate: \"\",\r\n  };\r\n  const [PLCAndShareTax, setPLCAndShareTax] = useState(initialPLCAndShareTaxState);\r\n  const handleInputChangePLCAndShareTax = (event) => {\r\n    const { name, value } = event.target;\r\n    setPLCAndShareTax({ ...PLCAndShareTax, [name]: value });\r\n  };\r\n  const newPLCAndShareTax = () => {\r\n    setPLCAndShareTax(initialPLCAndShareTaxState);\r\n    setSubmitted(true);\r\n  };\r\n  const savePLCAndShareTax = (e) => {\r\n    e.preventDefault();\r\n    var data = {\r\n      Name: PLCAndShareTax.Name,\r\n      TinNo: PLCAndShareTax.TinNo,\r\n      IssueDate: issueDate,\r\n      Expireddate: expiredDate,\r\n      TaxDebit: PLCAndShareTax.TaxDebit,\r\n      Certificate: selectedPathCert,\r\n    };\r\n    PLCAndShareService.addPLCAndShareTax(data, PLCAndShareInformationId)\r\n      .then((response) => {\r\n        setPLCAndShareTax({\r\n          Id: response.data.Id,\r\n          Name: response.data.Name,\r\n          TinNo: response.data.TinNo,\r\n          IssueDate: response.data.IssueDate,\r\n          Expireddate: response.data.Expireddate,\r\n          TaxDebit: response.data.TaxDebit,\r\n          Certificate: response.data.Certificate,\r\n        });\r\n        if (response.data.Code === 200) {\r\n          getCompanyPLCAndShareInformationById();\r\n          toast.success(\"Added successfully\", {\r\n            position: toast.POSITION.TOP_RIGHT,\r\n            toastId: \"add PLC And Share\",\r\n          });\r\n          newPLCAndShareTax();\r\n        }\r\n        setSubmitted(true);\r\n        console.log(response.data);\r\n        setHoldId(response.data.Result.Id);\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n  const [PLCAndShareTaxInfoIdForLocal, setPLCAndShareTaxInfoIdForLocal] = useState(\r\n    []\r\n  );\r\n  const [editPLCAndShareTaxInfo, setEditPLCAndShareTaxInfo] = useState({\r\n    Id: null,\r\n    Name: \"\",\r\n    TinNo: \"\",\r\n    IssueDate: issueDateEdit,\r\n    Expireddate: expiredDateEdit,\r\n    TaxDebit: \"\",\r\n    Certificate: \"\",\r\n  });\r\n\r\n  const getPLCAndShareTaxInformationBy = (PLCAndShareTaxInformationId) => {\r\n    PLCAndShareService.getPLCAndShareTaxInformationById(PLCAndShareTaxInformationId)\r\n      .then((res) => {\r\n        setEditPLCAndShareTaxInfo({\r\n          ...editPLCAndShareTaxInfo,\r\n          Id: PLCAndShareTaxInformationId,\r\n          Name: res.data.Result.Name,\r\n          TinNo: res.data.Result.TinNo,\r\n          Certificate: res.data.Result.Certificate,\r\n          IssueDate: res.data.Result.IssueDate,\r\n          Expireddate: res.data.Result.Expireddate,\r\n          TaxDebit: res.data.Result.TaxDebit,\r\n        });\r\n        setPLCAndShareTaxInfoIdForLocal(PLCAndShareTaxInformationId);\r\n      })\r\n      .catch((err) => console.log(err));\r\n  };\r\n  const updateCompanyPLCAndShareTaxInformationById = () => {\r\n    PLCAndShareService.updateTaxClerance(\r\n      PLCAndShareTaxInfoIdForLocal,\r\n      editPLCAndShareTaxInfo\r\n    )\r\n      .then((response) => {\r\n        console.log(response);\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n  useEffect(() => {\r\n    updateCompanyPLCAndShareTaxInformationById();\r\n  }, []);\r\n  const [isPLCAndShareTaxEditModalOpen, setIsPLCAndShareTaxEditModalOpen] = useState(false);\r\n  function handleCompanyPLCAndShareTaxInformationEditOpenModal() {\r\n    setIsPLCAndShareTaxEditModalOpen(true);\r\n  }\r\n  function handleCompanyPLCAndShareTaxInformationEditCloseModal() {\r\n    setIsPLCAndShareTaxEditModalOpen(false);\r\n  }\r\n  const [toggleTax, setToggleTax] = useState(false);\r\n  return (\r\n    <div>\r\n      <CompanyModal\r\n        isOpen={isPLCAndShareTaxDetailModalOpen}\r\n        onClose={handleGeneralPLCAndShareTaxDetailCloseModal}\r\n        title=\"Company PLC and Share Tax information\"\r\n      >\r\n        <div>\r\n          {getPLCAndShareTaxInformation ? (\r\n            <table>\r\n              <thead>\r\n                <th className=\"px-2 py-4\"> ID </th>\r\n                <th className=\"px-2 py-4\"> Name </th>\r\n                <th className=\"px-2 py-4\"> TinNo </th>\r\n                <th className=\"px-2 py-4\"> Certificate </th>\r\n                <th className=\"px-2 py-4\"> IssueDate </th>\r\n                <th className=\"px-2 py-4\"> Expireddate </th>\r\n                <th className=\"px-2 py-4\">  TaxDebit </th>\r\n                <th className=\"px-2 py-4\"> Action </th>\r\n              </thead>\r\n              <tbody>\r\n                <tr\r\n                  className=\"bg-white\r\n                        border-b border-purple-200\"\r\n                  key={PLCAndShareTax}\r\n                >\r\n                  <td className=\"p-2\">{getPLCAndShareTaxInformation.Id}</td>\r\n                  <td className=\"p-2\">{getPLCAndShareTaxInformation.Name}</td>\r\n                  <td className=\"p-2\">{getPLCAndShareTaxInformation.TinNo}</td>\r\n                  <td className=\"p-2\">{getPLCAndShareTaxInformation.Certificate}</td>\r\n                  <td className=\"p-2\">{getPLCAndShareTaxInformation.IssueDate}</td>\r\n                  <td className=\"p-2\">{getPLCAndShareTaxInformation.Expireddate}</td>\r\n                  <td className=\"p-2\">{getPLCAndShareTaxInformation.TaxDebit}</td>\r\n                  <td>\r\n                    <LoanIconButton\r\n                      style={{ color: \"purple\" }}\r\n                      icon={<MdModeEdit />}\r\n                      text=\"Edit\"\r\n                      onClick={() => {\r\n                        handleCompanyPLCAndShareTaxInformationEditOpenModal();\r\n                        getPLCAndShareTaxInformationBy(getPLCAndShareTaxInformation.Id);\r\n                        // getCompanyPLCAndShareTaxInformationById(getPLCAndShareTaxInformation.Id);\r\n                      }}\r\n                    />\r\n                  </td>\r\n                </tr>\r\n              </tbody>\r\n            </table>\r\n          ) : (\r\n            \"\"\r\n          )}\r\n          <button\r\n            onClick={() => setToggleTax(!toggleTax)}\r\n            className=\"text-purple-600 rounded-md font-medium \"\r\n          >\r\n            Add Tax\r\n          </button>\r\n          {toggleTax &&\r\n            <div className=\"submit-form\">\r\n\r\n              <div className=\"relative center justify-center flex-1 w-full max-w-full grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\">\r\n                <LoanTextField\r\n                  id=\"Name\"\r\n                  label=\"Name\"\r\n                  variant=\"standard\"\r\n                  color=\"secondary\"\r\n                  size=\"\"\r\n                  required\r\n                  value={PLCAndShareTax.Name}\r\n                  onChange={handleInputChangePLCAndShareTax}\r\n                  name=\"Name\"\r\n                />\r\n                <div>\r\n                  {currentFile && (\r\n                    <div className=\"progress\">\r\n                      <div\r\n                        className=\"progress-bar progress-bar-info progress-bar-striped\"\r\n                        role=\"progressbar\"\r\n                        aria-valuenow={progress}\r\n                        aria-valuemin=\"0\"\r\n                        aria-valuemax=\"100\"\r\n                        style={{ width: progress + \"%\" }}\r\n                      >\r\n                        {progress}%\r\n                      </div>\r\n                    </div>\r\n                  )}\r\n                  <label className=\"btn btn-default\">\r\n                    <input type=\"file\" onChange={selectFileCert} />\r\n                  </label>\r\n\r\n                  <button\r\n                    className=\"btn btn-success\"\r\n                    disabled={!selectedFiles}\r\n                    onClick={uploadCert}\r\n                  >\r\n                    Upload Certificate\r\n                  </button>\r\n                  <div className=\"alert alert-light\" role=\"alert\">\r\n                    {message}\r\n                  </div>\r\n                </div>\r\n              \r\n\r\n              <div>\r\n              <p>\r\n                Issue Date:\r\n                <input\r\n\r\n                  id=\"IssueDate\"\r\n                  name=\"IssueDate\"\r\n                  label=\"IssueDate\"\r\n                  placeholder=\"IssueDate\"\r\n                  type=\"date\"\r\n                  value={\r\n                    issueDate.getFullYear().toString() +\r\n                    \"-\" +\r\n                    (issueDate.getMonth() + 1)\r\n\r\n                      .toString()\r\n                      .padStart(2, 0) +\r\n\r\n                    \"-\" +\r\n                    issueDate\r\n                      .getDate()\r\n                      .toString()\r\n                      .padStart(2, 0)\r\n\r\n                  }\r\n\r\n                  onChange={(e) => {\r\n\r\n                    setIssueDate(new Date(e.target.value));\r\n\r\n                    PLCAndShareTax.IssueDate = issueDate;\r\n                  }}\r\n                />{\" \"}\r\n              </p>\r\n              </div>\r\n                <p>\r\n                Expired Date:\r\n                <input\r\n                  id=\"Expireddate\"\r\n                  name=\"Expireddate\"\r\n                  label=\"Expireddate\"\r\n                  placeholder=\"Expireddate\"\r\n                  type=\"date\"\r\n                  value={\r\n                    expiredDate.getFullYear().toString() +\r\n                    \"-\" +\r\n                    (expiredDate.getMonth() + 1)\r\n                      .toString()\r\n                      .padStart(2, 0) +\r\n                    \"-\" +\r\n                    expiredDate\r\n                      .getDate()\r\n                      .toString()\r\n                      .padStart(2, 0)\r\n                  }\r\n                  onChange={(e) => {\r\n                    setExpiredDate(new Date(e.target.value));\r\n                    PLCAndShareTax.Expireddate = expiredDate;\r\n                  }}\r\n                />{\" \"}\r\n              </p>\r\n             \r\n                <LoanTextField\r\n                  id=\"TinNo\"\r\n                  label=\"TinNo\"\r\n                  variant=\"standard\"\r\n                  color=\"secondary\"\r\n                  size=\"\"\r\n                  required\r\n                  value={PLCAndShareTax.TinNo}\r\n                  onChange={handleInputChangePLCAndShareTax}\r\n                  name=\"TinNo\"\r\n                />\r\n                   <LoanTextField\r\n                  id=\"TaxDebit\"\r\n                  label=\"TaxDebit\"\r\n                  variant=\"standard\"\r\n                  color=\"secondary\"\r\n                  size=\"\"\r\n                  required\r\n                  value={PLCAndShareTax.TaxDebit}\r\n                  onChange={handleInputChangePLCAndShareTax}\r\n                  name=\"TaxDebit\"\r\n                />\r\n               \r\n             \r\n              </div>\r\n              <div className=\"flex justify-between\">\r\n                <button\r\n                  className=\"bg-[purple] hover:bg-purple-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\"\r\n                  onClick={savePLCAndShareTax}\r\n                >\r\n                  Submit\r\n                </button>\r\n              </div>\r\n            </div>\r\n          }\r\n        </div>\r\n      </CompanyModal>\r\n      <CompanyModal\r\n        isOpen={isPLCAndShareTaxEditModalOpen}\r\n        onClose={handleCompanyPLCAndShareTaxInformationEditCloseModal}\r\n        title=\" Edit PLC and Share Tax information\"\r\n      >\r\n        <div>\r\n          <form onSubmit={updateCompanyPLCAndShareTaxInformationById}>\r\n            <div className=\"relative center justify-center flex-1 w-full max-w-full grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\">\r\n\r\n              <LoanTextField\r\n                id=\"Name\"\r\n                label=\"Name\"\r\n                variant=\"standard\"\r\n                color=\"secondary\"\r\n                size=\"\"\r\n                required\r\n                value={editPLCAndShareTaxInfo.Name}\r\n                onChange={(e) =>\r\n                  setEditPLCAndShareTaxInfo({\r\n                    ...editPLCAndShareTaxInfo,\r\n                    Name: e.target.value,\r\n                  })\r\n\r\n                }\r\n                name=\"Name\"\r\n              />\r\n\r\n              <LoanTextField\r\n                id=\"TinNo\"\r\n                label=\"TinNo\"\r\n                variant=\"standard\"\r\n                color=\"secondary\"\r\n                size=\"\"\r\n                required\r\n                value={editPLCAndShareTaxInfo.TinNo}\r\n                onChange={(e) =>\r\n                  setEditPLCAndShareTaxInfo({\r\n                    ...editPLCAndShareTaxInfo,\r\n                    TinNo: e.target.value,\r\n                  })\r\n                }\r\n                name=\"TinNo\"\r\n              />\r\n              <div>\r\n                {currentFile && (\r\n                  <div className=\"progress\">\r\n                    <div\r\n                      className=\"progress-bar progress-bar-info progress-bar-striped\"\r\n                      role=\"progressbar\"\r\n                      aria-valuenow={progress}\r\n                      aria-valuemin=\"0\"\r\n                      aria-valuemax=\"100\"\r\n                      style={{ width: progress + \"%\" }}\r\n                    >\r\n                      {progress}%\r\n                    </div>\r\n                  </div>\r\n                )}\r\n                <label className=\"btn btn-default\">\r\n                  <input type=\"file\" onChange={selectFileCertEdit} />\r\n                </label>\r\n\r\n                <button\r\n                  className=\"btn btn-success\"\r\n                  disabled={!selectedFiles}\r\n                  onChange={\r\n\r\n                    editPLCAndShareTaxInfo.Certificate = selectedPathCertEdit\r\n\r\n                  }\r\n                  onClick={uploadCertEdit}\r\n                >\r\n                  Upload Certificate\r\n                </button>\r\n                <div className=\"alert alert-light\" role=\"alert\">\r\n                  {message}\r\n                </div>\r\n              </div>\r\n              <p>\r\n                Issue Date:\r\n                <input\r\n\r\n                  id=\"IssueDate\"\r\n                  name=\"IssueDate\"\r\n                  label=\"IssueDate\"\r\n                  placeholder=\"IssueDate\"\r\n                  type=\"date\"\r\n                  value={\r\n                    issueDateEdit.getFullYear().toString() +\r\n                    \"-\" +\r\n                    (issueDateEdit.getMonth() + 1)\r\n\r\n                      .toString()\r\n                      .padStart(2, 0) +\r\n\r\n                    \"-\" +\r\n                    issueDateEdit\r\n                      .getDate()\r\n                      .toString()\r\n                      .padStart(2, 0)\r\n\r\n                  }\r\n\r\n                  onChange={(e) => {\r\n\r\n                    setIssueDateEdit(new Date(e.target.value));\r\n\r\n                    editPLCAndShareTaxInfo.IssueDate = issueDateEdit;\r\n                  }}\r\n                />{\" \"}\r\n              </p>\r\n              <p>\r\n                Expired Date:\r\n                <input\r\n                  id=\"Expireddate\"\r\n                  name=\"Expireddate\"\r\n                  label=\"Expireddate\"\r\n                  placeholder=\"Expireddate\"\r\n                  type=\"date\"\r\n                  value={\r\n                    expiredDateEdit.getFullYear().toString() +\r\n                    \"-\" +\r\n                    (expiredDateEdit.getMonth() + 1)\r\n                      .toString()\r\n                      .padStart(2, 0) +\r\n                    \"-\" +\r\n                    expiredDateEdit\r\n                      .getDate()\r\n                      .toString()\r\n                      .padStart(2, 0)\r\n                  }\r\n                  onChange={(e) => {\r\n                    setExpiredDateEdit(new Date(e.target.value));\r\n                    editPLCAndShareTaxInfo.Expireddate = expiredDateEdit;\r\n                  }}\r\n                />{\" \"}\r\n              </p>\r\n              <LoanTextField\r\n                id=\"TaxDebit\"\r\n                label=\"TaxDebit\"\r\n                variant=\"standard\"\r\n                color=\"secondary\"\r\n                size=\"\"\r\n                required\r\n                value={editPLCAndShareTaxInfo.TaxDebit}\r\n                onChange={(e) =>\r\n                  setEditPLCAndShareTaxInfo({\r\n                    ...editPLCAndShareTaxInfo,\r\n                    TaxDebit: e.target.value,\r\n                  })\r\n                }\r\n                name=\"TaxDebit\"\r\n              />\r\n            </div>\r\n            <div>\r\n              <button className=\"bg-[purple] hover:bg-purple-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\">\r\n                Update\r\n              </button>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </CompanyModal>\r\n    </div>\r\n  );\r\n};\r\nexport default ViewPLCAndShareTaxDetail;","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\PLCAndShare\\ViewShareHolder.jsx",["1144","1145"],[],"import { useState, useEffect } from \"react\";\r\nimport CompanyModal from \"../Common/CompanyModal\";\r\nimport LoanTextField from \"../../Common/LoanTextField\";\r\nimport { Select, FormControl, MenuItem, InputLabel } from \"@mui/material\";\r\nimport PLCAndShareService from \"./PLCAndShareService\";\r\nconst ShareHolder = ({\r\n    holdShareHolder,\r\n    PLCAndShareInformationId,\r\n    isCompanyShareHolderModalOpen,\r\n    handleCompanyShareHolderCloseModal,\r\n}) => {\r\n    const [currency, setCurrency] = useState([]);\r\n    const [\r\n        isCompanyShareHolderEditedModalOpen,\r\n        setIsCompanyShareHolderEditedModalOpen,\r\n    ] = useState(false);\r\n    function handleCompanyShareHolderEditCloseModal() {\r\n        setIsCompanyShareHolderEditedModalOpen(false);\r\n    }\r\n    function handleCompanyShareHolderEditedModalOpen() {\r\n        setIsCompanyShareHolderEditedModalOpen(true);\r\n    }\r\n    const [ShareHolderInformationId, setShareHolderId] = useState();\r\n    const [editShareHolder, setEditShareHolder] = useState({\r\n        CurrencyId: \"\",\r\n        FirstName: \"\",\r\n        LastName: \"\",\r\n        MiddleName: \"\",\r\n        PerValue: \"\",\r\n        NumberOfShare: \"\",\r\n        ShareAmount: \"\",\r\n        SharePercentage: \"\",\r\n        CumulativeShare: \"\",\r\n\r\n\r\n    });\r\n    const handleInputChangeEditShareHolder = (event) => {\r\n        const { name, value } = event.target;\r\n        setEditShareHolder({ ...editShareHolder, [name]: value });\r\n    };\r\n    const getShareHolderById = (ShareHolderInformationId) => {\r\n        PLCAndShareService.getShareHolderById(ShareHolderInformationId)\r\n            .then((res) => {\r\n                setEditShareHolder({\r\n                    ...editShareHolder,\r\n                    CurrencyId: res.data.Result.CurrencyId,\r\n                    FirstName: res.data.Result.FirstName,\r\n                    LastName: res.data.Result.LastName,\r\n                    MiddleName: res.data.Result.MiddleName,\r\n                    PerValue: res.data.Result.PerValue,\r\n                    NumberOfShare: res.data.Result.NumberOfShare,\r\n                    ShareAmount: res.data.Result.ShareAmount,\r\n                    SharePercentage: res.data.Result.SharePercentage,\r\n                    CumulativeShare: res.data.Result.CumulativeShare,\r\n\r\n                });\r\n            })\r\n            .catch((err) => console.log(err));\r\n    };\r\n    useEffect(() => {\r\n        getShareHolderById();\r\n    }, []);\r\n    const updateShareHolderById = () => {\r\n        PLCAndShareService.updateShareHolder(ShareHolderInformationId, editShareHolder)\r\n            .then((response) => { })\r\n            .catch((e) => {\r\n                console.log(e);\r\n            });\r\n    };\r\n    useEffect(() => {\r\n        updateShareHolderById();\r\n    }, []);\r\n\r\n\r\n\r\n    const [toggleShareHolder, setToggleShareHolder] = useState(false);\r\n    const initialShareHolderState = {\r\n        Id: null,\r\n        CurrencyId: \"\",\r\n        FirstName: \"\",\r\n        LastName: \"\",\r\n        MiddleName: \"\",\r\n        PerValue: \"\",\r\n        NumberOfShare: \"\",\r\n        ShareAmount: \"\",\r\n        SharePercentage: \"\",\r\n        CumulativeShare: \"\",\r\n\r\n    };\r\n    const [ShareHolder, setShareHolder] = useState(initialShareHolderState);\r\n    const handleInputChangeShareHolder = (event) => {\r\n        const { name, value } = event.target;\r\n        setShareHolder({ ...ShareHolder, [name]: value });\r\n    };\r\n    const saveShareHolder = () => {\r\n        var data = {\r\n            CurrencyId: ShareHolder.CurrencyId,\r\n            FirstName: ShareHolder.FirstName,\r\n            LastName: ShareHolder.LastName,\r\n            MiddleName: ShareHolder.MiddleName,\r\n            PerValue: ShareHolder.PerValue,\r\n            NumberOfShare: ShareHolder.NumberOfShare,\r\n            ShareAmount: ShareHolder.ShareAmount,\r\n            SharePercentage: ShareHolder.SharePercentage,\r\n            CumulativeShare: ShareHolder.CumulativeShare,\r\n\r\n        };\r\n        PLCAndShareService.addShareHolder(data, PLCAndShareInformationId)\r\n            .then((response) => {\r\n                setShareHolder({\r\n                    Id: response.data.Id,\r\n                    CurrencyId: response.data.CurrencyId,\r\n                    FirstName: response.data.FirstName,\r\n                    LastName: response.data.LastName,\r\n                    MiddleName: response.data.MiddleName,\r\n                    PerValue: response.data.PerValue,\r\n                    NumberOfShare: response.data.NumberOfShare,\r\n                    ShareAmount: response.data.ShareAmount,\r\n                    SharePercentage: response.data.SharePercentage,\r\n                    CumulativeShare: response.data.CumulativeShare,\r\n\r\n                });\r\n            })\r\n            .catch((e) => {\r\n                console.log(e);\r\n            });\r\n    };\r\n\r\n    \r\n  const getCurrency = () => {\r\n\r\n    PLCAndShareService.getCurrency()\r\n\r\n      .then((response) => {\r\n\r\n        setCurrency(response.data.Result);\r\n\r\n        console.log(response.data.Result);\r\n\r\n      })\r\n\r\n      .catch((e) => {\r\n\r\n        console.log(e);\r\n\r\n      });\r\n\r\n  };\r\n\r\n  useEffect(() => {\r\n\r\n    getCurrency();\r\n\r\n  }, []);\r\n    return (\r\n        <div>\r\n            <CompanyModal\r\n                isOpen={isCompanyShareHolderModalOpen}\r\n                onClose={handleCompanyShareHolderCloseModal}\r\n                title=\"view Share Holder information\"\r\n            >\r\n                <div className=\"rounded-lg overflow-hidden\">\r\n                    {holdShareHolder ? (\r\n                        <table className=\"table table-bordered table-striped bg-purple-100\">\r\n                            <thead>\r\n                                <th className=\"px-2 py-4\"> ID</th>\r\n                                <th className=\"px-2 py-4\"> FirstName</th>\r\n                                <th className=\"px-2 py-4\"> LastName</th>\r\n                                <th className=\"px-2 py-4\"> MiddleName</th>\r\n                                <th className=\"px-2 py-4\"> Currency</th>\r\n                                <th className=\"px-2 py-4\"> PerValue</th>\r\n                                <th className=\"px-2 py-4\"> NumberOfShare</th>\r\n                                <th className=\"px-2 py-4\"> ShareAmount</th>\r\n                                <th className=\"px-2 py-4\"> SharePercentage</th>\r\n                                <th className=\"px-2 py-4\"> CumulativeShare</th>\r\n                                <th className=\"px-2 py-4\"> Action </th>\r\n                            </thead>\r\n                            <tbody>\r\n                                <>\r\n                                    {holdShareHolder.map((holdShareHolder, index) => (\r\n                                        <tr>\r\n                                            <td>{holdShareHolder.Id}</td>\r\n                                            <td>{holdShareHolder.FirstName}</td>\r\n                                            <td>{holdShareHolder.LastName}</td>\r\n                                            <td>{holdShareHolder.MiddleName}</td>\r\n                                            <td>{holdShareHolder.Currency}</td>\r\n                                            <td>{holdShareHolder.PerValue}</td>\r\n                                            <td>{holdShareHolder.NumberOfShare}</td>\r\n                                            <td>{holdShareHolder.ShareAmount}</td>\r\n                                            <td>{holdShareHolder.SharePercentage}</td>\r\n                                            <td>{holdShareHolder.CumulativeShare}</td>\r\n                                            <td>\r\n                                                <button\r\n                                                    onClick={() => {\r\n                                                        handleCompanyShareHolderEditedModalOpen();\r\n                                                        getShareHolderById(holdShareHolder.Id);\r\n                                                        setShareHolderId(holdShareHolder.Id);\r\n                                                    }}\r\n                                                    className=\"text-purple-600 rounded-md font-semibold \"\r\n                                                >\r\n                                                    Edit\r\n                                                </button>\r\n                                            </td>\r\n                                            <td>\r\n                                            </td>\r\n                                        </tr>\r\n                                    ))}\r\n                                </>\r\n\r\n                            </tbody>\r\n                        </table>\r\n                    ) : (\r\n                        \"\"\r\n                    )}\r\n                    <button\r\n                        onClick={() => setToggleShareHolder(!toggleShareHolder)}\r\n                        className=\"text-purple-600 rounded-md font-medium \"\r\n                    >\r\n                        Add Share Holder\r\n                    </button>\r\n                    {toggleShareHolder &&\r\n                        <div className=\"submit-form\">\r\n                            <div className=\"relative center justify-center flex-1 w-full max-w-full grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\">\r\n\r\n                                <LoanTextField\r\n                                    id=\"FirstName\"\r\n                                    label=\"FirstName\"\r\n                                    value={ShareHolder.FirstName}\r\n                                    onChange={handleInputChangeShareHolder}\r\n                                    name=\"FirstName\"\r\n                                />\r\n                                <LoanTextField\r\n                                    id=\"LastName\"\r\n                                    label=\"LastName\"\r\n                                    value={ShareHolder.LastName}\r\n                                    onChange={handleInputChangeShareHolder}\r\n                                    name=\"LastName\"\r\n                                />\r\n                                <LoanTextField\r\n                                    id=\"MiddleName\"\r\n                                    label=\"MiddleName\"\r\n                                    value={ShareHolder.MiddleName}\r\n                                    onChange={handleInputChangeShareHolder}\r\n                                    name=\"MiddleName\"\r\n                                />\r\n                                <LoanTextField\r\n                                    id=\"PerValue\"\r\n                                    label=\"PerValue\"\r\n                                    value={ShareHolder.PerValue}\r\n                                    onChange={handleInputChangeShareHolder}\r\n                                    name=\"PerValue\"\r\n                                />\r\n                                <LoanTextField\r\n                                    id=\"NumberOfShare\"\r\n                                    label=\"NumberOfShare\"\r\n                                    value={ShareHolder.NumberOfShare}\r\n                                    onChange={handleInputChangeShareHolder}\r\n                                    name=\"NumberOfShare\"\r\n                                />\r\n                                <LoanTextField\r\n                                    id=\"ShareAmount\"\r\n                                    label=\"ShareAmount\"\r\n                                    value={ShareHolder.ShareAmount}\r\n                                    onChange={handleInputChangeShareHolder}\r\n                                    name=\"ShareAmount\"\r\n                                />\r\n                                <FormControl variant=\"standard\" sx={{ minWidth: 120 }}>\r\n\r\n                                    <InputLabel id=\"countrylbl\" color=\"secondary\">\r\n\r\n                                        currency\r\n\r\n                                    </InputLabel>\r\n\r\n                                    <Select\r\n\r\n                                        color=\"secondary\"\r\n\r\n                                        onChange={(event) =>\r\n\r\n                                            (ShareHolder.CurrencyId = event.target.value)\r\n\r\n                                        }\r\n\r\n                                        labelId=\"loanType\"\r\n\r\n                                        id=\"loanTypeSelected\"\r\n\r\n                                        label=\"loanType\"\r\n\r\n                                    >\r\n\r\n                                        <MenuItem value=\"\">\r\n\r\n                                            <em>None</em>\r\n\r\n                                        </MenuItem>\r\n\r\n                                        {currency.map((yourCurrency) => (\r\n\r\n                                            <MenuItem\r\n\r\n                                                key={yourCurrency.Id}\r\n\r\n                                                CurrencyId={yourCurrency.Id}\r\n\r\n                                                value={yourCurrency.Id}\r\n\r\n                                            >\r\n\r\n                                                {yourCurrency.Name}\r\n\r\n                                            </MenuItem>\r\n\r\n                                        ))}\r\n\r\n                                    </Select>\r\n\r\n                                </FormControl>\r\n                                <LoanTextField\r\n                                    id=\"SharePercentage\"\r\n                                    label=\"SharePercentage\"\r\n                                    value={ShareHolder.SharePercentage}\r\n                                    onChange={handleInputChangeShareHolder}\r\n                                    name=\"SharePercentage\"\r\n                                />\r\n                                <LoanTextField\r\n                                    id=\"CumulativeShare\"\r\n                                    label=\"CumulativeShare\"\r\n                                    value={ShareHolder.CumulativeShare}\r\n                                    onChange={handleInputChangeShareHolder}\r\n                                    name=\"CumulativeShare\"\r\n                                />\r\n\r\n\r\n                            </div>\r\n\r\n                            <div>\r\n                                <button\r\n                                    className=\"bg-[purple] hover:bg-purple-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\"\r\n                                    onClick={() => {\r\n                                        saveShareHolder();\r\n                                    }}\r\n                                >\r\n                                    save\r\n                                </button>\r\n                            </div>\r\n                        </div>\r\n                    }\r\n                </div>\r\n            </CompanyModal>\r\n            <CompanyModal\r\n                isOpen={isCompanyShareHolderEditedModalOpen}\r\n                onClose={handleCompanyShareHolderEditCloseModal}\r\n                title=\"Edit Share Holder information\"\r\n            >\r\n                <div>\r\n                    <form onSubmit={updateShareHolderById}>\r\n\r\n                        <div className=\"relative center justify-center flex-1 w-full max-w-full grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\">\r\n\r\n\r\n                            <LoanTextField\r\n                                id=\"FirstName\"\r\n                                label=\"FirstName\"\r\n                                value={editShareHolder.FirstName}\r\n                                onChange={handleInputChangeEditShareHolder}\r\n                                name=\"FirstName\"\r\n                            />\r\n                            <LoanTextField\r\n                                id=\"LastName\"\r\n                                label=\"LastName\"\r\n                                value={editShareHolder.LastName}\r\n                                onChange={handleInputChangeEditShareHolder}\r\n                                name=\"LastName\"\r\n                            />\r\n                            <LoanTextField\r\n                                id=\"MiddleName\"\r\n                                label=\"MiddleName\"\r\n                                value={editShareHolder.MiddleName}\r\n                                onChange={handleInputChangeEditShareHolder}\r\n                                name=\"MiddleName\"\r\n                            />\r\n                            <LoanTextField\r\n                                id=\"PerValue\"\r\n                                label=\"PerValue\"\r\n                                value={editShareHolder.PerValue}\r\n                                onChange={handleInputChangeEditShareHolder}\r\n                                name=\"PerValue\"\r\n                            />\r\n                            <LoanTextField\r\n                                id=\"NumberOfShare\"\r\n                                label=\"NumberOfShare\"\r\n                                value={editShareHolder.NumberOfShare}\r\n                                onChange={handleInputChangeEditShareHolder}\r\n                                name=\"NumberOfShare\"\r\n                            />\r\n                            <LoanTextField\r\n                                id=\"ShareAmount\"\r\n                                label=\"ShareAmount\"\r\n                                value={editShareHolder.ShareAmount}\r\n                                onChange={handleInputChangeEditShareHolder}\r\n                                name=\"ShareAmount\"\r\n                            />\r\n                            <FormControl variant=\"standard\" sx={{ minWidth: 120 }}>\r\n\r\n                                <InputLabel id=\"countrylbl\" color=\"secondary\">\r\n\r\n                                    currency\r\n\r\n                                </InputLabel>\r\n\r\n                                <Select\r\n\r\n                                    color=\"secondary\"\r\n\r\n                                    onChange={(event) =>\r\n\r\n                                        (editShareHolder.CurrencyId = event.target.value)\r\n\r\n                                    }\r\n\r\n                                    labelId=\"loanType\"\r\n\r\n                                    id=\"loanTypeSelected\"\r\n\r\n                                    label=\"loanType\"\r\n\r\n                                >\r\n\r\n                                    <MenuItem value=\"\">\r\n\r\n                                        <em>None</em>\r\n\r\n                                    </MenuItem>\r\n\r\n                                    {currency.map((yourCurrency) => (\r\n\r\n                                        <MenuItem\r\n\r\n                                            key={yourCurrency.Id}\r\n\r\n                                            CurrencyId={yourCurrency.Id}\r\n\r\n                                            value={yourCurrency.Id}\r\n\r\n                                        >\r\n\r\n                                            {yourCurrency.Name}\r\n\r\n                                        </MenuItem>\r\n\r\n                                    ))}\r\n\r\n                                </Select>\r\n\r\n                            </FormControl>\r\n                            <LoanTextField\r\n                                id=\"SharePercentage\"\r\n                                label=\"SharePercentage\"\r\n                                value={editShareHolder.SharePercentage}\r\n                                onChange={handleInputChangeEditShareHolder}\r\n                                name=\"SharePercentage\"\r\n                            />\r\n                            <LoanTextField\r\n                                id=\"CumulativeShare\"\r\n                                label=\"CumulativeShare\"\r\n                                value={editShareHolder.CumulativeShare}\r\n                                onChange={handleInputChangeEditShareHolder}\r\n                                name=\"CumulativeShare\"\r\n                            />\r\n\r\n\r\n\r\n                        </div>\r\n                        <div>\r\n                            <button className=\"bg-[purple] hover:bg-purple-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\">\r\n                                Update\r\n                            </button>\r\n                        </div>\r\n                    </form>\r\n\r\n                </div>\r\n\r\n            </CompanyModal>\r\n        </div>\r\n    );\r\n};\r\nexport default ShareHolder;\r\n","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\SoleAndPartnership\\MaritalStatus\\ViewDivorcedStatus.jsx",["1146","1147","1148","1149"],[],"import { useState, useEffect } from \"react\";\r\nimport CompanyModal from \"../../Common/CompanyModal\";\r\nimport LoanTextField from \"../../../Common/LoanTextField\";\r\nimport AddDivorcedStatus from \"./AddDivorcedStatus\";\r\nimport CommonServices from \"../../Common/CommonServices\";\r\nconst ViewDivorcedStatus = ({\r\n  holdDivorced,\r\n  SoleId,\r\n  isCompanyMartailStatusDivorcedModalOpen,\r\n  handleCompanyMartailStatusDivorcedCloseModal,\r\n  handleCompanyMartailStatusDivorcedOpenModal,\r\n}) => {\r\n  const [unMarriedCertficateIssueDate, setUnMarriedCertficateIssueDate] =\r\n    useState(new Date());\r\n  const [unMarriedCertficateExpiredDate, setUnMarriedCertficateExpiredDate] =\r\n    useState(new Date());\r\n  const [divorceDate, setDivorceDate] = useState(new Date());\r\n  //upload\r\n  const [selectedPathIdentity, setSelectedPathIdentity] = useState(null);\r\n  const [selectedPathUnmarriege, setSelectedPathUnmarriege] = useState(null);\r\n  const [selectedFiles, setSelectedFiles] = useState(undefined);\r\n  const [currentFile, setCurrentFile] = useState(undefined);\r\n  const [fileInfos, setFileInfos] = useState([]);\r\n  const [progress, setProgress] = useState(0);\r\n  const [message, setMessage] = useState(\"\");\r\n  const selectFile = (event) => {\r\n    setSelectedFiles(event.target.files);\r\n  };\r\n\r\n  //upload 1\r\n  const uploadMarriegeCertificate = () => {\r\n    let currentFile = selectedFiles[0];\r\n    setProgress(0);\r\n    setCurrentFile(currentFile);\r\n    CommonServices.upload(currentFile, (event) => {\r\n      setProgress(Math.round((100 * event.loaded) / event.total));\r\n    })\r\n      .then((response) => {\r\n        setMessage(response.data.message);\r\n        setSelectedPathIdentity(response.data.Result);\r\n      })\r\n      .then((files) => {\r\n        setFileInfos(files.data);\r\n      })\r\n      .catch(() => {\r\n        setProgress(0);\r\n        setCurrentFile(undefined);\r\n      });\r\n    setSelectedFiles(undefined);\r\n  };\r\n  //end upload\r\n  //upload 2\r\n  const uploadUnMarriegeCertificate = () => {\r\n    let currentFile = selectedFiles[0];\r\n    setProgress(0);\r\n    setCurrentFile(currentFile);\r\n    CommonServices.upload(currentFile, (event) => {\r\n      setProgress(Math.round((100 * event.loaded) / event.total));\r\n    })\r\n      .then((response) => {\r\n        setMessage(response.data.message);\r\n        setSelectedPathUnmarriege(response.data.Result);\r\n      })\r\n      .then((files) => {\r\n        setFileInfos(files.data);\r\n      })\r\n      .catch(() => {\r\n        setProgress(0);\r\n        setCurrentFile(undefined);\r\n      });\r\n    setSelectedFiles(undefined);\r\n  };\r\n  //endupload2\r\n  const [\r\n    isCompanyDivorcedInformationEditModalOpen,\r\n    setIsCompanyDivorcedInformationEditModalOpen,\r\n  ] = useState(false);\r\n  function handleCompanyDivorcedEditCloseModal() {\r\n    setIsCompanyDivorcedInformationEditModalOpen(false);\r\n  }\r\n  function handleCompanyDivorcedInformationEditOpenModal() {\r\n    setIsCompanyDivorcedInformationEditModalOpen(true);\r\n  }\r\n  function handleCompanyDivorcedInformationEditCloseModal() {\r\n    setIsCompanyDivorcedInformationEditModalOpen(false);\r\n  }\r\n  const [taxInformationId, setTaxInformationId] = useState();\r\n  const [editDivorcedInfo, setEditDivorcedInfo] = useState({\r\n    SoleAndPartnershipId: SoleId,\r\n    DivorceDate: \"\",\r\n    MarriageCertificate: \"\",\r\n    MarriageCertificateIssuer: \"\",\r\n    UnMarriedCertficate: \"\",\r\n    UnMarriedCertficateIssueDate: \"\",\r\n    UnMarriedCertficateExpiredDate: \"\",\r\n    UnMarriedCertficateIssuer: \"\",\r\n    CourtDecision: \"\",\r\n  });\r\n  const handleInputChangeEditDivorcedStatus = (event) => {\r\n    const { name, value } = event.target;\r\n    setEditDivorcedInfo({ ...editDivorcedInfo, [name]: value });\r\n  };\r\n  const updateDivorcedById = (taxInformationId1) => {\r\n    CommonServices.getDivorced(taxInformationId1)\r\n      .then((res) => {\r\n        setEditDivorcedInfo({\r\n          ...editDivorcedInfo,\r\n          SoleAndPartnershipId: res.data.Result.SoleAndPartnershipId,\r\n          DivorceDate: res.data.Result.DivorceDate,\r\n          MarriageCertificate: res.data.Result.MarriageCertificate,\r\n          MarriageCertificateIssuer: res.data.Result.MarriageCertificateIssuer,\r\n          UnMarriedCertficate: res.data.Result.UnMarriedCertficate,\r\n          UnMarriedCertficateIssueDate:\r\n            res.data.Result.UnMarriedCertficateIssueDate,\r\n          UnMarriedCertficateExpiredDate:\r\n            res.data.Result.UnMarriedCertficateExpiredDate,\r\n          UnMarriedCertficateIssuer: res.data.Result.UnMarriedCertficateIssuer,\r\n          CourtDecision: res.data.Result.CourtDecision,\r\n        });\r\n      })\r\n      .catch((err) => console.log(err));\r\n  };\r\n  useEffect(() => {\r\n    updateDivorcedById();\r\n  }, []);\r\n  const updateDivorcedInfo = () => {\r\n    CommonServices.updateDivorced(taxInformationId, editDivorcedInfo)\r\n      .then((response) => {})\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n  useEffect(() => {\r\n    updateDivorcedInfo();\r\n  }, []);\r\n  return (\r\n    <div>\r\n      <CompanyModal\r\n        isOpen={isCompanyMartailStatusDivorcedModalOpen}\r\n        onClose={handleCompanyMartailStatusDivorcedCloseModal}\r\n        title=\"View Divorced status information\"\r\n      >\r\n        <div className=\"rounded-lg overflow-hidden\">\r\n          {holdDivorced ? (\r\n            <table className=\"table table-bordered table-striped bg-purple-100\">\r\n              <thead>\r\n                <th className=\"px-2 py-4\"> Divorce Date</th>\r\n                <th className=\"px-2 py-4\"> Marriage Certificate</th>\r\n                <th className=\"px-2 py-4\"> Marriage Certificate Issuer</th>\r\n                <th className=\"px-2 py-4\"> UnMarried Certficate</th>\r\n                <th className=\"px-2 py-4\"> UnMarried Certficate Issue Date</th>\r\n                <th className=\"px-2 py-4\">\r\n                  {\" \"}\r\n                  UnMarried Certficate Expired Date\r\n                </th>\r\n                <th className=\"px-2 py-4\"> UnMarried Certficate Issuer</th>\r\n                <th className=\"px-2 py-4\"> Court Decision</th>\r\n                <th className=\"px-2 py-4\"> Action </th>\r\n              </thead>\r\n              <tbody>\r\n                <tr>\r\n                  {/* <td>{holdDivorced.Id}</td> */}\r\n                  <td>{holdDivorced.DivorceDate}</td>\r\n                  <td>{holdDivorced.MarriageCertificate}</td>\r\n                  <td>{holdDivorced.MarriageCertificateIssuer}</td>\r\n                  <td>{holdDivorced.UnMarriedCertficate}</td>\r\n                  <td>{holdDivorced.UnMarriedCertficateIssueDate}</td>\r\n                  <td>{holdDivorced.UnMarriedCertficateExpiredDate}</td>\r\n                  <td>{holdDivorced.UnMarriedCertficateIssuer}</td>\r\n                  <td>{holdDivorced.CourtDecision}</td>\r\n                  <td>\r\n                    <button\r\n                      onClick={() => {\r\n                        handleCompanyDivorcedInformationEditOpenModal();\r\n                        updateDivorcedById(holdDivorced.Id);\r\n                        setTaxInformationId(holdDivorced.Id);\r\n                      }}\r\n                      className=\"text-purple-600 rounded-md font-semibold \"\r\n                    >\r\n                      Edit\r\n                    </button>\r\n                  </td>\r\n                </tr>\r\n              </tbody>\r\n            </table>\r\n          ) : (\r\n            \"\"\r\n          )}\r\n        </div>\r\n        <div>\r\n          {holdDivorced <= 0 && (\r\n            <AddDivorcedStatus Add marital status information SoleId={SoleId} />\r\n          )}\r\n        </div>\r\n      </CompanyModal>\r\n      <CompanyModal\r\n        isOpen={isCompanyDivorcedInformationEditModalOpen}\r\n        onClose={handleCompanyDivorcedEditCloseModal}\r\n        title=\"widowed edit information\"\r\n      >\r\n        <div>\r\n          <form onSubmit={updateDivorcedInfo}>\r\n            <div className=\"relative center justify-center flex-1 w-full max-w-full grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\">\r\n              <p>\r\n                Divorce Date:\r\n                <input\r\n                  id=\"DivorceDate\"\r\n                  name=\"DivorceDate\"\r\n                  label=\"DivorceDate\"\r\n                  placeholder=\"DivorceDate\"\r\n                  type=\"date\"\r\n                  value={\r\n                    divorceDate.getFullYear().toString() +\r\n                    \"-\" +\r\n                    (divorceDate.getMonth() + 1).toString().padStart(2, 0) +\r\n                    \"-\" +\r\n                    divorceDate.getDate().toString().padStart(2, 0)\r\n                  }\r\n                  onChange={(e) => {\r\n                    setDivorceDate(new Date(e.target.value));\r\n                    editDivorcedInfo.DivorceDate = divorceDate;\r\n                  }}\r\n                />{\" \"}\r\n              </p>\r\n              <div>\r\n                {currentFile && (\r\n                  <div className=\"progress\">\r\n                    <div\r\n                      className=\"progress-bar progress-bar-info progress-bar-striped\"\r\n                      role=\"progressbar\"\r\n                      aria-valuenow={progress}\r\n                      aria-valuemin=\"0\"\r\n                      aria-valuemax=\"100\"\r\n                      style={{ width: progress + \"%\" }}\r\n                    >\r\n                      {progress}%\r\n                    </div>\r\n                  </div>\r\n                )}\r\n                <label className=\"btn btn-default\">\r\n                  <input type=\"file\" onChange={selectFile} />\r\n                </label>\r\n                <button\r\n                  className=\"btn btn-success\"\r\n                  disabled={!selectedFiles}\r\n                  onChange={\r\n                    (editDivorcedInfo.MarriageCertificate =\r\n                      selectedPathIdentity)\r\n                  }\r\n                  onClick={uploadMarriegeCertificate}\r\n                >\r\n                  Upload Marriage Certificate\r\n                </button>\r\n                <div className=\"alert alert-light\" role=\"alert\">\r\n                  {message}\r\n                </div>\r\n              </div>\r\n              <LoanTextField\r\n                id=\"MarriageCertificateIssuer\"\r\n                label=\"MarriageCertificateIssuer\"\r\n                value={editDivorcedInfo.MarriageCertificateIssuer}\r\n                onChange={handleInputChangeEditDivorcedStatus}\r\n                name=\"MarriageCertificateIssuer\"\r\n              />\r\n              <div>\r\n                {currentFile && (\r\n                  <div className=\"progress\">\r\n                    <div\r\n                      className=\"progress-bar progress-bar-info progress-bar-striped\"\r\n                      role=\"progressbar\"\r\n                      aria-valuenow={progress}\r\n                      aria-valuemin=\"0\"\r\n                      aria-valuemax=\"100\"\r\n                      style={{ width: progress + \"%\" }}\r\n                    >\r\n                      {progress}%\r\n                    </div>\r\n                  </div>\r\n                )}\r\n                <label className=\"btn btn-default\">\r\n                  <input type=\"file\" onChange={selectFile} />\r\n                </label>\r\n                <button\r\n                  className=\"btn btn-success\"\r\n                  disabled={!selectedFiles}\r\n                  onChange={\r\n                    (editDivorcedInfo.UnMarriedCertficate =\r\n                      selectedPathUnmarriege)\r\n                  }\r\n                  onClick={uploadUnMarriegeCertificate}\r\n                >\r\n                  Upload UnMarriage Certificate\r\n                </button>\r\n                <div className=\"alert alert-light\" role=\"alert\">\r\n                  {message}\r\n                </div>\r\n              </div>\r\n              <p>\r\n                UnMarried Certficate Issue Date:\r\n                <input\r\n                  id=\"UnMarriedCertficateIssueDate\"\r\n                  name=\"UnMarriedCertficateIssueDate\"\r\n                  label=\"UnMarriedCertficateIssueDate\"\r\n                  placeholder=\"UnMarriedCertficateIssueDate\"\r\n                  type=\"date\"\r\n                  value={\r\n                    unMarriedCertficateIssueDate.getFullYear().toString() +\r\n                    \"-\" +\r\n                    (unMarriedCertficateIssueDate.getMonth() + 1)\r\n                      .toString()\r\n                      .padStart(2, 0) +\r\n                    \"-\" +\r\n                    unMarriedCertficateIssueDate\r\n                      .getDate()\r\n                      .toString()\r\n                      .padStart(2, 0)\r\n                  }\r\n                  onChange={(e) => {\r\n                    setUnMarriedCertficateIssueDate(new Date(e.target.value));\r\n                    editDivorcedInfo.UnMarriedCertficateIssueDate =\r\n                      unMarriedCertficateIssueDate;\r\n                  }}\r\n                />{\" \"}\r\n              </p>\r\n              <p>\r\n                UnMarried Certficate Expired Date:\r\n                <input\r\n                  id=\"UnMarriedCertficateExpiredDate\"\r\n                  name=\"UnMarriedCertficateExpiredDate\"\r\n                  label=\"UnMarriedCertficateExpiredDate\"\r\n                  placeholder=\"UnMarriedCertficateExpiredDate\"\r\n                  type=\"date\"\r\n                  value={\r\n                    unMarriedCertficateExpiredDate.getFullYear().toString() +\r\n                    \"-\" +\r\n                    (unMarriedCertficateExpiredDate.getMonth() + 1)\r\n                      .toString()\r\n                      .padStart(2, 0) +\r\n                    \"-\" +\r\n                    unMarriedCertficateExpiredDate\r\n                      .getDate()\r\n                      .toString()\r\n                      .padStart(2, 0)\r\n                  }\r\n                  onChange={(e) => {\r\n                    setUnMarriedCertficateExpiredDate(new Date(e.target.value));\r\n                    editDivorcedInfo.UnMarriedCertficateExpiredDate =\r\n                      unMarriedCertficateExpiredDate;\r\n                  }}\r\n                />{\" \"}\r\n              </p>\r\n              <LoanTextField\r\n                id=\"UnMarriedCertficateIssuer\"\r\n                label=\"UnMarriedCertficateIssuer\"\r\n                value={editDivorcedInfo.UnMarriedCertficateIssuer}\r\n                onChange={handleInputChangeEditDivorcedStatus}\r\n                name=\"UnMarriedCertficateIssuer\"\r\n              />\r\n              <LoanTextField\r\n                id=\"CourtDecision\"\r\n                label=\"CourtDecision\"\r\n                value={editDivorcedInfo.CourtDecision}\r\n                onChange={handleInputChangeEditDivorcedStatus}\r\n                name=\"CourtDecision\"\r\n              />\r\n            </div>\r\n            <div>\r\n              <button className=\"bg-[purple] hover:bg-purple-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\">\r\n                Update\r\n              </button>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </CompanyModal>\r\n    </div>\r\n  );\r\n};\r\nexport default ViewDivorcedStatus;\r\n","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\SoleAndPartnership\\MaritalStatus\\ViewWidowedStatus.jsx",["1150","1151","1152","1153","1154","1155","1156","1157"],[],"import { useState, useEffect } from \"react\";\r\nimport CompanyModal from \"../../Common/CompanyModal\";\r\nimport LoanTextField from \"../../../Common/LoanTextField\";\r\nimport { Select, FormControl, MenuItem, InputLabel } from \"@mui/material\";\r\nimport AddWidowedStatus from \"./AddWidowedStatus\";\r\nimport CommonServices from \"../../Common/CommonServices\";\r\nconst ViewWidowedStatus = ({\r\n  holdWidowed,\r\n  SoleId,\r\n  isCompanyMartailStatusWidowedModalOpen,\r\n  handleCompanyMartailStatusWidowedCloseModal,\r\n  handleCompanyMartailStatusWidowedOpenModal,\r\n}) => {\r\n  //upload\r\n  const [selectedPathIdentity, setSelectedPathIdentity] = useState(null);\r\n  const [selectedPathUnmarriege, setSelectedPathUnmarriege] = useState(null);\r\n  const [selectedFiles, setSelectedFiles] = useState(undefined);\r\n  const [currentFile, setCurrentFile] = useState(undefined);\r\n  const [fileInfos, setFileInfos] = useState([]);\r\n  const [progress, setProgress] = useState(0);\r\n  const [message, setMessage] = useState(\"\");\r\n  const selectFile = (event) => {\r\n    setSelectedFiles(event.target.files);\r\n  };\r\n  //upload 1\r\n  const uploadMarriegeCertificate = () => {\r\n    let currentFile = selectedFiles[0];\r\n    setProgress(0);\r\n    setCurrentFile(currentFile);\r\n    CommonServices.upload(currentFile, (event) => {\r\n      setProgress(Math.round((100 * event.loaded) / event.total));\r\n    })\r\n      .then((response) => {\r\n        setMessage(response.data.message);\r\n        setSelectedPathIdentity(response.data.Result);\r\n      })\r\n      .then((files) => {\r\n        setFileInfos(files.data);\r\n      })\r\n      .catch(() => {\r\n        setProgress(0);\r\n        setCurrentFile(undefined);\r\n      });\r\n    setSelectedFiles(undefined);\r\n  };\r\n  //end upload\r\n  //upload 2\r\n  const uploadUnMarriegeCertificate = () => {\r\n    let currentFile = selectedFiles[0];\r\n    setProgress(0);\r\n    setCurrentFile(currentFile);\r\n    CommonServices.upload(currentFile, (event) => {\r\n      setProgress(Math.round((100 * event.loaded) / event.total));\r\n    })\r\n      .then((response) => {\r\n        setMessage(response.data.message);\r\n        setSelectedPathUnmarriege(response.data.Result);\r\n      })\r\n      .then((files) => {\r\n        setFileInfos(files.data);\r\n      })\r\n      .catch(() => {\r\n        setProgress(0);\r\n        setCurrentFile(undefined);\r\n      });\r\n    setSelectedFiles(undefined);\r\n  };\r\n  //endupload2\r\n  const [dateOfWidowed, setDateOfWidowed] = useState(new Date());\r\n  const [unMarriedCertficateIssueDate, setUnMarriedCertficateIssueDate] =\r\n    useState(new Date());\r\n  const [unMarriedCertficateExpiredDate, setUnMarriedCertficateExpiredDate] =\r\n    useState(new Date());\r\n  const [\r\n    isCompanyWidowedInformationEditModalOpen,\r\n    setIsCompanyWidowedInformationEditModalOpen,\r\n  ] = useState(false);\r\n  function handleCompanyWidowedEditCloseModal() {\r\n    setIsCompanyWidowedInformationEditModalOpen(false);\r\n  }\r\n  function handleCompanyWidowedInformationEditOpenModal() {\r\n    setIsCompanyWidowedInformationEditModalOpen(true);\r\n  }\r\n  function handleCompanyWidowedInformationEditCloseModal() {\r\n    setIsCompanyWidowedInformationEditModalOpen(false);\r\n  }\r\n  const [taxInformationId, setTaxInformationId] = useState();\r\n  const [editWidowedInfo, setEditWidowedInfo] = useState({\r\n    DateOfWidowed: \"\",\r\n    MarraigeCertificate: \"\",\r\n    MarraigeCertificateIssuer: \"\",\r\n    UnmarriedCertificate: \"\",\r\n    UnmarraiedCertificateIssuer: \"\",\r\n    UnmarriedCertificateIssuDate: \"\",\r\n    UnmarriedCertificateExpiredDate: \"\",\r\n    CourtDecision: \"\",\r\n  });\r\n  const handleInputChangeEditWidowedStatus = (event) => {\r\n    const { name, value } = event.target;\r\n    setEditWidowedInfo({ ...editWidowedInfo, [name]: value });\r\n  };\r\n  const updateWidowedById = (taxInformationId1) => {\r\n    CommonServices.getWidowed(taxInformationId1)\r\n      .then((res) => {\r\n        setEditWidowedInfo({\r\n          ...editWidowedInfo,\r\n          DateOfWidowed: res.data.Result.DateOfWidowed,\r\n          MarraigeCertificate: res.data.Result.MarraigeCertificate,\r\n          MarraigeCertificateIssuer: res.data.Result.MarraigeCertificateIssuer,\r\n          UnmarriedCertificate: res.data.Result.UnmarriedCertificate,\r\n          UnmarraiedCertificateIssuer:\r\n            res.data.Result.UnmarraiedCertificateIssuer,\r\n          UnmarriedCertificateIssuDate:\r\n            res.data.Result.UnmarriedCertificateIssuDate,\r\n          UnmarriedCertificateExpiredDate:\r\n            res.data.Result.UnmarriedCertificateExpiredDate,\r\n          CourtDecision: res.data.Result.CourtDecision,\r\n        });\r\n      })\r\n      .catch((err) => console.log(err));\r\n  };\r\n  useEffect(() => {\r\n    updateWidowedById();\r\n  }, []);\r\n  const updateWidowedInfo = () => {\r\n    CommonServices.updateWidowed(taxInformationId, editWidowedInfo)\r\n      .then((response) => {})\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n  useEffect(() => {\r\n    updateWidowedInfo();\r\n  }, []);\r\n  return (\r\n    <div>\r\n      <CompanyModal\r\n        isOpen={isCompanyMartailStatusWidowedModalOpen}\r\n        onClose={handleCompanyMartailStatusWidowedCloseModal}\r\n        title=\"View Widowed status information\"\r\n      >\r\n        <div className=\"rounded-lg overflow-hidden overflow-x-scroll overflow-y-scroll\">\r\n          {holdWidowed ? (\r\n            <table className=\"table table-bordered table-striped bg-purple-100\">\r\n              <thead>\r\n                <th className=\"px-2 py-4\"> Date Of Widowed</th>\r\n                <th className=\"px-2 py-4\"> Marraige Certificate</th>\r\n                <th className=\"px-2 py-4\"> Marraige Certificate Issuer</th>\r\n                <th className=\"px-2 py-4\"> Unmarried Certificate</th>\r\n                <th className=\"px-2 py-4\"> Unmarraied Certificate Issuer</th>\r\n                <th className=\"px-2 py-4\"> Unmarried Certificate Issu Date</th>\r\n                <th className=\"px-2 py-4\">\r\n                  {\" \"}\r\n                  Unmarried Certificate Expired Date\r\n                </th>\r\n                <th className=\"px-2 py-4\"> Court Decision</th>\r\n                <th className=\"px-2 py-4\"> Action </th>\r\n              </thead>\r\n              <tbody>\r\n                <tr>\r\n                  <td>{holdWidowed.DateOfWidowed}</td>\r\n                  <td>{holdWidowed.MarraigeCertificate}</td>\r\n                  <td>{holdWidowed.MarraigeCertificateIssuer}</td>\r\n                  <td>{holdWidowed.UnmarriedCertificate}</td>\r\n                  <td>{holdWidowed.UnmarraiedCertificateIssuer}</td>\r\n                  <td>{holdWidowed.UnmarriedCertificateIssuDate}</td>\r\n                  <td>{holdWidowed.UnmarriedCertificateExpiredDate}</td>\r\n                  <td>{holdWidowed.CourtDecision}</td>\r\n                  <td>\r\n                    <button\r\n                      onClick={() => {\r\n                        handleCompanyWidowedInformationEditOpenModal();\r\n                        updateWidowedById(holdWidowed.Id);\r\n                        setTaxInformationId(holdWidowed.Id);\r\n                      }}\r\n                      className=\"text-purple-600 rounded-md font-semibold \"\r\n                    >\r\n                      Edit\r\n                    </button>\r\n                  </td>\r\n                </tr>\r\n              </tbody>\r\n            </table>\r\n          ) : (\r\n            \"\"\r\n          )}\r\n        </div>\r\n        <div>\r\n          {holdWidowed <= 0 && (\r\n            <AddWidowedStatus Add marital status information SoleId={SoleId} />\r\n          )}\r\n        </div>\r\n      </CompanyModal>\r\n      <CompanyModal\r\n        isOpen={isCompanyWidowedInformationEditModalOpen}\r\n        onClose={handleCompanyWidowedEditCloseModal}\r\n        title=\"widowed edit information\"\r\n      >\r\n        <div>\r\n          <form onSubmit={updateWidowedInfo}>\r\n            <div className=\"relative center justify-center flex-1 w-full max-w-full grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\">\r\n              <p>\r\n                Date Of Widowed:\r\n                <input\r\n                  id=\"DateOfWidowed\"\r\n                  name=\"DateOfWidowed\"\r\n                  label=\"DateOfWidowed\"\r\n                  placeholder=\"DateOfWidowed\"\r\n                  type=\"date\"\r\n                  value={\r\n                    dateOfWidowed.getFullYear().toString() +\r\n                    \"-\" +\r\n                    (dateOfWidowed.getMonth() + 1).toString().padStart(2, 0) +\r\n                    \"-\" +\r\n                    dateOfWidowed.getDate().toString().padStart(2, 0)\r\n                  }\r\n                  onChange={(e) => {\r\n                    setDateOfWidowed(new Date(e.target.value));\r\n                    editWidowedInfo.DateOfWidowed = dateOfWidowed;\r\n                  }}\r\n                />{\" \"}\r\n              </p>\r\n              <div>\r\n                {currentFile && (\r\n                  <div className=\"progress\">\r\n                    <div\r\n                      className=\"progress-bar progress-bar-info progress-bar-striped\"\r\n                      role=\"progressbar\"\r\n                      aria-valuenow={progress}\r\n                      aria-valuemin=\"0\"\r\n                      aria-valuemax=\"100\"\r\n                      style={{ width: progress + \"%\" }}\r\n                    >\r\n                      {progress}%\r\n                    </div>\r\n                  </div>\r\n                )}\r\n                <label className=\"btn btn-default\">\r\n                  <input type=\"file\" onChange={selectFile} />\r\n                </label>\r\n                <button\r\n                  className=\"btn btn-success\"\r\n                  disabled={!selectedFiles}\r\n                  onChange={\r\n                    (editWidowedInfo.MarraigeCertificate = selectedPathIdentity)\r\n                  }\r\n                  onClick={uploadMarriegeCertificate}\r\n                >\r\n                  Upload Marriage Certificate\r\n                </button>\r\n                <div className=\"alert alert-light\" role=\"alert\">\r\n                  {message}\r\n                </div>\r\n              </div>\r\n              <LoanTextField\r\n                id=\"MarraigeCertificateIssuer\"\r\n                label=\"MarraigeCertificateIssuer\"\r\n                value={editWidowedInfo.MarraigeCertificateIssuer}\r\n                onChange={handleInputChangeEditWidowedStatus}\r\n                name=\"MarraigeCertificateIssuer\"\r\n              />\r\n              <div>\r\n                {currentFile && (\r\n                  <div className=\"progress\">\r\n                    <div\r\n                      className=\"progress-bar progress-bar-info progress-bar-striped\"\r\n                      role=\"progressbar\"\r\n                      aria-valuenow={progress}\r\n                      aria-valuemin=\"0\"\r\n                      aria-valuemax=\"100\"\r\n                      style={{ width: progress + \"%\" }}\r\n                    >\r\n                      {progress}%\r\n                    </div>\r\n                  </div>\r\n                )}\r\n                <label className=\"btn btn-default\">\r\n                  <input type=\"file\" onChange={selectFile} />\r\n                </label>\r\n                <button\r\n                  className=\"btn btn-success\"\r\n                  disabled={!selectedFiles}\r\n                  onChange={\r\n                    (editWidowedInfo.UnmarriedCertificate =\r\n                      selectedPathUnmarriege)\r\n                  }\r\n                  onClick={uploadUnMarriegeCertificate}\r\n                >\r\n                  Upload UnMarriage Certificate\r\n                </button>\r\n                <div className=\"alert alert-light\" role=\"alert\">\r\n                  {message}\r\n                </div>\r\n              </div>\r\n              <LoanTextField\r\n                id=\"UnmarraiedCertificateIssuer\"\r\n                label=\"UnmarraiedCertificateIssuer\"\r\n                value={editWidowedInfo.UnmarraiedCertificateIssuer}\r\n                onChange={handleInputChangeEditWidowedStatus}\r\n                name=\"UnmarraiedCertificateIssuer\"\r\n              />\r\n\r\n              <p>\r\n                UnMarried Certficate Issue Date:\r\n                <input\r\n                  id=\"UnMarriedCertficateIssueDate\"\r\n                  name=\"UnMarriedCertficateIssueDate\"\r\n                  label=\"UnMarriedCertficateIssueDate\"\r\n                  placeholder=\"UnMarriedCertficateIssueDate\"\r\n                  type=\"date\"\r\n                  value={\r\n                    unMarriedCertficateIssueDate.getFullYear().toString() +\r\n                    \"-\" +\r\n                    (unMarriedCertficateIssueDate.getMonth() + 1)\r\n                      .toString()\r\n                      .padStart(2, 0) +\r\n                    \"-\" +\r\n                    unMarriedCertficateIssueDate\r\n                      .getDate()\r\n                      .toString()\r\n                      .padStart(2, 0)\r\n                  }\r\n                  onChange={(e) => {\r\n                    setUnMarriedCertficateIssueDate(new Date(e.target.value));\r\n                    editWidowedInfo.UnmarriedCertificateIssuDate =\r\n                      unMarriedCertficateIssueDate;\r\n                  }}\r\n                />{\" \"}\r\n              </p>\r\n              <p>\r\n                UnMarried Certficate Expired Date:\r\n                <input\r\n                  id=\"UnmarriedCertificateExpiredDate\"\r\n                  name=\"UnmarriedCertificateExpiredDate\"\r\n                  label=\"UnmarriedCertificateExpiredDate\"\r\n                  placeholder=\"UnmarriedCertificateExpiredDate\"\r\n                  type=\"date\"\r\n                  value={\r\n                    unMarriedCertficateExpiredDate.getFullYear().toString() +\r\n                    \"-\" +\r\n                    (unMarriedCertficateExpiredDate.getMonth() + 1)\r\n                      .toString()\r\n                      .padStart(2, 0) +\r\n                    \"-\" +\r\n                    unMarriedCertficateExpiredDate\r\n                      .getDate()\r\n                      .toString()\r\n                      .padStart(2, 0)\r\n                  }\r\n                  onChange={(e) => {\r\n                    setUnMarriedCertficateExpiredDate(new Date(e.target.value));\r\n                    editWidowedInfo.UnmarriedCertificateExpiredDate =\r\n                      unMarriedCertficateExpiredDate;\r\n                  }}\r\n                />{\" \"}\r\n              </p>\r\n              <LoanTextField\r\n                id=\"CourtDecision\"\r\n                label=\"CourtDecision\"\r\n                value={editWidowedInfo.CourtDecision}\r\n                onChange={handleInputChangeEditWidowedStatus}\r\n                name=\"CourtDecision\"\r\n              />\r\n            </div>\r\n            <div>\r\n              <button className=\"bg-[purple] hover:bg-purple-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\">\r\n                Update\r\n              </button>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </CompanyModal>\r\n    </div>\r\n  );\r\n};\r\nexport default ViewWidowedStatus;\r\n","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\SoleAndPartnership\\MaritalStatus\\ViewMaritalStatus.jsx",["1158","1159","1160","1161"],[],"import { useState, useEffect } from \"react\";\r\nimport CompanyModal from \"../../Common/CompanyModal\";\r\nimport LoanTextField from \"../../../Common/LoanTextField\";\r\nimport { Select, FormControl, MenuItem, InputLabel } from \"@mui/material\";\r\nimport CommonServices from \"../../Common/CommonServices\";\r\nimport ViewMarriedTax from \"./ViewMarriedTax\";\r\nimport AddMaritalStatus from \"./AddMaritalStatus\";\r\nconst ViewMaritalStatus = ({\r\n  holdMarried,\r\n  SoleId,\r\n  isCompanyMartailStatusModalOpen,\r\n  handleCompanyMartailStatusCloseModal,\r\n  handleMaritalStatusModalOpen,\r\n}) => {\r\n  //upload start\r\n  const [selectedPathIdentity, setSelectedPathIdentity] = useState(null);\r\n  const [selectedPathMarriege, setSelectedPathMarriege] = useState(null);\r\n  const [selectedFiles, setSelectedFiles] = useState(undefined);\r\n  const [currentFile, setCurrentFile] = useState(undefined);\r\n  const [fileInfos, setFileInfos] = useState([]);\r\n  const [progress, setProgress] = useState(0);\r\n  const [message, setMessage] = useState(\"\");\r\n  const selectFile = (event) => {\r\n    setSelectedFiles(event.target.files);\r\n  };\r\n  //upload 1\r\n  const uploadIdentity = () => {\r\n    let currentFile = selectedFiles[0];\r\n    setProgress(0);\r\n    setCurrentFile(currentFile);\r\n    CommonServices.upload(currentFile, (event) => {\r\n      setProgress(Math.round((100 * event.loaded) / event.total));\r\n    })\r\n      .then((response) => {\r\n        setMessage(response.data.message);\r\n        setSelectedPathIdentity(response.data.Result);\r\n      })\r\n      .then((files) => {\r\n        setFileInfos(files.data);\r\n      })\r\n      .catch(() => {\r\n        setProgress(0);\r\n        setCurrentFile(undefined);\r\n      });\r\n    setSelectedFiles(undefined);\r\n  };\r\n  //end upload\r\n  //upload 2\r\n  const uploadMarriegeCertificate = () => {\r\n    let currentFile = selectedFiles[0];\r\n    setProgress(0);\r\n    setCurrentFile(currentFile);\r\n    CommonServices.upload(currentFile, (event) => {\r\n      setProgress(Math.round((100 * event.loaded) / event.total));\r\n    })\r\n      .then((response) => {\r\n        setMessage(response.data.message);\r\n        setSelectedPathMarriege(response.data.Result);\r\n      })\r\n      .then((files) => {\r\n        setFileInfos(files.data);\r\n      })\r\n      .catch(() => {\r\n        setProgress(0);\r\n        setCurrentFile(undefined);\r\n      });\r\n    setSelectedFiles(undefined);\r\n  };\r\n  //endupload2\r\n  //uppload end\r\n  //date\r\n  const [marriageDate, setMarriageDate] = useState(new Date());\r\n  const [proofOfIdentityIssueDate, setProofOfIdentityIssueDate] = useState(\r\n    new Date()\r\n  );\r\n  const [proofOfIdentityExpirDate, setProofOfIdentityExpirDate] = useState(\r\n    new Date()\r\n  );\r\n  //end date\r\n  const [holdMarriedTax, setMarriedTax] = useState([]);\r\n  const [country, setContry] = useState([]);\r\n  const [proofOfIdentityType, setProofOfIdentityType] = useState([]);\r\n  const [\r\n    isCompanyMarriedInformationEditModalOpen,\r\n    setIsCompanyMarriedInformationEditModalOpen,\r\n  ] = useState(false);\r\n  function handleCompanyMarriedEditCloseModal() {\r\n    setIsCompanyMarriedInformationEditModalOpen(false);\r\n  }\r\n  function handleCompanyMarriedInformationEditOpenModal() {\r\n    setIsCompanyMarriedInformationEditModalOpen(true);\r\n  }\r\n  function handleCompanyMarriedInformationEditCloseModal() {\r\n    setIsCompanyMarriedInformationEditModalOpen(false);\r\n  }\r\n  //married tax\r\n  const [isCompanyMarriedTaxModalOpen, setIsCompanyMarriedTaxModalOpen] =\r\n    useState(false);\r\n  function handleCompanyMarriedTaxOpenModal() {\r\n    setIsCompanyMarriedTaxModalOpen(true);\r\n  }\r\n  function handleCompanyMarriedTaxCloseModal() {\r\n    setIsCompanyMarriedTaxModalOpen(false);\r\n  }\r\n  //end married tax\r\n  const [taxInformationId, setTaxInformationId] = useState();\r\n  const [marriedTaxId, setMarriedTaxId] = useState();\r\n  const [editMarriedInfo, setEditMarriedInfo] = useState({\r\n    Id: taxInformationId,\r\n    FirstName: \"\",\r\n    MiddleName: \"\",\r\n    LastName: \"\",\r\n    NationalityID: \"\",\r\n    CountryOfOriginID: \"\",\r\n    CountryOfResidenceID: \"\",\r\n    ProofOfIdentityTypeID: \"\",\r\n    ProofOfIdentity: \"\",\r\n    MarriageDate: \"\",\r\n    MarriageCertificate: \"\",\r\n    MarriageCertificateIssuer: \"\",\r\n    ProofOfIdentityIssueDate: \"\",\r\n    ProofOfIdentityExpirDate: \"\",\r\n  });\r\n  const handleInputChangeEditMarriedStatus = (event) => {\r\n    const { name, value } = event.target;\r\n    setEditMarriedInfo({ ...editMarriedInfo, [name]: value });\r\n  };\r\n  const updateMarriedById = (taxInformationId) => {\r\n    CommonServices.getMarried(taxInformationId)\r\n      .then((res) => {\r\n        setEditMarriedInfo({\r\n          ...editMarriedInfo,\r\n          Id: taxInformationId,\r\n          FirstName: res.data.Result.FirstName,\r\n          MiddleName: res.data.Result.MiddleName,\r\n          LastName: res.data.Result.LastName,\r\n          NationalityID: res.data.Result.NationalityID,\r\n          CountryOfOriginID: res.data.Result.CountryOfOriginID,\r\n          CountryOfResidenceID: res.data.Result.CountryOfResidenceID,\r\n          ProofOfIdentityTypeID: res.data.Result.ProofOfIdentityTypeID,\r\n          ProofOfIdentity: res.data.Result.ProofOfIdentity,\r\n          MarriageDate: res.data.Result.MarriageDate,\r\n          MarriageCertificate: res.data.Result.MarriageCertificate,\r\n          MarriageCertificateIssuer: res.data.Result.MarriageCertificateIssuer,\r\n          ProofOfIdentityIssueDate: res.data.Result.ProofOfIdentityIssueDate,\r\n          ProofOfIdentityExpirDate: res.data.Result.ProofOfIdentityExpirDate,\r\n        });\r\n      })\r\n      .catch((err) => console.log(err));\r\n  };\r\n  useEffect(() => {\r\n    updateMarriedById();\r\n  }, []);\r\n  const updateMarriedInfo = () => {\r\n    // editMarriedInfo.ProofOfIdentity = {selectedPathIdentity}\r\n    CommonServices.updateMarried(taxInformationId, editMarriedInfo)\r\n      .then((response) => {})\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n  useEffect(() => {\r\n    updateMarriedInfo();\r\n  }, []);\r\n  const fetchContry = () => {\r\n    CommonServices.getCountry()\r\n      .then((response) => {\r\n        setContry(response.data.Result);\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n  useEffect(() => {\r\n    fetchContry();\r\n  }, []);\r\n\r\n  const fetchProofOfIdentityType = () => {\r\n    CommonServices.getProofOfIdentityTypes()\r\n      .then((response) => {\r\n        setProofOfIdentityType(response.data.Result);\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n  useEffect(() => {\r\n    fetchProofOfIdentityType();\r\n  }, []);\r\n  const getMarriedTax = (marriedId) => {\r\n    CommonServices.getTaxByMarriedId(marriedId)\r\n      .then((response) => {\r\n        setMarriedTax(response.data.Result);\r\n        console.log(response.data.Result);\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n  return (\r\n    <div>\r\n      <CompanyModal\r\n        isOpen={isCompanyMartailStatusModalOpen}\r\n        onClose={handleCompanyMartailStatusCloseModal}\r\n        title=\"Add marital status information\"\r\n      >\r\n        <div className=\"rounded-lg overflow-hidden overflow-x-scroll overflow-y-scroll\">\r\n          <AddMaritalStatus\r\n            SoleId={SoleId}\r\n            // BiSkipNext ={BiSkipNext }\r\n          />\r\n          <ViewMarriedTax\r\n            holdMarriedTax={holdMarriedTax}\r\n            isCompanyMarriedTaxModalOpen={isCompanyMarriedTaxModalOpen}\r\n            handleCompanyMarriedTaxCloseModal={\r\n              handleCompanyMarriedTaxCloseModal\r\n            }\r\n            handleCompanyMarriedTaxOpenModal={handleCompanyMarriedTaxOpenModal}\r\n            marriedTaxId={marriedTaxId}\r\n          />\r\n          {holdMarried ? (\r\n            <table className=\"table table-bordered table-striped bg-purple-100\">\r\n              <thead>\r\n                <th className=\"px-2 py-4\"> Name</th>\r\n                <th className=\"px-2 py-4\"> Nationality</th>\r\n                <th className=\"px-2 py-4\"> Country Of Origin</th>\r\n                <th className=\"px-2 py-4\"> Country Of Residence</th>\r\n                <th className=\"px-2 py-4\"> Proof Of Identity Type</th>\r\n                <th className=\"px-2 py-4\"> Proof Of Identity</th>\r\n                <th className=\"px-2 py-4\"> Marriage Date</th>\r\n                <th className=\"px-2 py-4\"> Marriage Certificate Issuer</th>\r\n                <th className=\"px-2 py-4\"> Proof Of Identity Issue Date</th>\r\n                <th className=\"px-2 py-4\"> Proof Of Identity Expir Date</th>\r\n                <th className=\"px-2 py-4\"> Action </th>\r\n              </thead>\r\n              <tbody>\r\n                <tr>\r\n                  <td>\r\n                    {holdMarried.FirstName} {holdMarried.MiddleName}{\" \"}\r\n                    {holdMarried.LastName}\r\n                  </td>\r\n                  <td>{holdMarried.Nationality}</td>\r\n                  <td>{holdMarried.CountryOfOrigin}</td>\r\n                  <td>{holdMarried.CountryOfResidence}</td>\r\n                  <td>{holdMarried.ProofOfIdentityType}</td>\r\n                  <td>{holdMarried.ProofOfIdentity}</td>\r\n                  <td>{holdMarried.MarriageDate}</td>\r\n                  <td>{holdMarried.MarriageCertificateIssuer}</td>\r\n                  <td>{holdMarried.ProofOfIdentityIssueDate}</td>\r\n                  <td>{holdMarried.ProofOfIdentityExpirDate}</td>\r\n                  <td>{holdMarried.TaxClearanceID}</td>\r\n                  <td>\r\n                    <button\r\n                      onClick={() => {\r\n                        handleCompanyMarriedInformationEditOpenModal();\r\n                        updateMarriedById(holdMarried.Id);\r\n                        setTaxInformationId(holdMarried.Id);\r\n                        setMarriedTaxId(holdMarried.Id);\r\n                      }}\r\n                      className=\"text-purple-600 rounded-md font-semibold \"\r\n                    >\r\n                      Edit\r\n                    </button>\r\n                  </td>\r\n                  <td>{\"   \"}</td>\r\n                  <td>\r\n                    <button\r\n                      type=\"submit\"\r\n                      onClick={() => {\r\n                        handleCompanyMarriedTaxOpenModal();\r\n                        getMarriedTax(holdMarried.Id);\r\n                        setMarriedTaxId(holdMarried.Id);\r\n                      }}\r\n                      className=\"text-purple-600 rounded-md font-semibold \"\r\n                    >\r\n                      Tax\r\n                    </button>\r\n                  </td>\r\n                </tr>\r\n              </tbody>\r\n            </table>\r\n          ) : (\r\n            \"\"\r\n          )}\r\n        </div>\r\n      </CompanyModal>\r\n      <CompanyModal\r\n        isOpen={isCompanyMarriedInformationEditModalOpen}\r\n        onClose={handleCompanyMarriedEditCloseModal}\r\n        title=\"Married edit information\"\r\n      >\r\n        <div>\r\n          <form onSubmit={updateMarriedInfo}>\r\n            <div className=\"relative center justify-center flex-1 w-full max-w-full grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\">\r\n              <LoanTextField\r\n                id=\"FirstName\"\r\n                label=\"FirstName\"\r\n                value={editMarriedInfo.FirstName}\r\n                onChange={handleInputChangeEditMarriedStatus}\r\n                name=\"FirstName\"\r\n              />\r\n              <LoanTextField\r\n                id=\"MiddleName\"\r\n                label=\"MiddleName\"\r\n                value={editMarriedInfo.MiddleName}\r\n                onChange={handleInputChangeEditMarriedStatus}\r\n                name=\"MiddleName\"\r\n              />\r\n              <LoanTextField\r\n                id=\"LastName\"\r\n                label=\"LastName\"\r\n                value={editMarriedInfo.LastName}\r\n                onChange={handleInputChangeEditMarriedStatus}\r\n                name=\"LastName\"\r\n              />\r\n              <FormControl variant=\"standard\" sx={{ minWidth: 120 }}>\r\n                <InputLabel id=\"countrylbl\" color=\"secondary\">\r\n                  {\" \"}\r\n                  Nationality{\" \"}\r\n                </InputLabel>\r\n                <Select\r\n                  color=\"secondary\"\r\n                  onChange={(event) =>\r\n                    (editMarriedInfo.NationalityID = event.target.value)\r\n                  }\r\n                  labelId=\"countrylbl\"\r\n                  id=\"countrySelect\"\r\n                  label=\"Country\"\r\n                >\r\n                  <MenuItem value=\"\">\r\n                    <em>None</em>\r\n                  </MenuItem>\r\n                  {country.map((yourCounty) => (\r\n                    <MenuItem\r\n                      key={yourCounty.Id}\r\n                      NationalityID={yourCounty.Id}\r\n                      value={yourCounty.Id}\r\n                    >\r\n                      {yourCounty.Name}\r\n                    </MenuItem>\r\n                  ))}\r\n                </Select>\r\n              </FormControl>\r\n              <FormControl variant=\"standard\" sx={{ minWidth: 120 }}>\r\n                <InputLabel id=\"countrylbl\" color=\"secondary\">\r\n                  {\" \"}\r\n                  Country Of Origin{\" \"}\r\n                </InputLabel>\r\n                <Select\r\n                  color=\"secondary\"\r\n                  onChange={(event) =>\r\n                    (editMarriedInfo.CountryOfOriginID = event.target.value)\r\n                  }\r\n                  labelId=\"countrylbl\"\r\n                  id=\"countrySelect\"\r\n                  label=\"Country\"\r\n                >\r\n                  <MenuItem value=\"\">\r\n                    <em>None</em>\r\n                  </MenuItem>\r\n                  {country.map((yourCounty) => (\r\n                    <MenuItem\r\n                      key={yourCounty.Id}\r\n                      NationalityID={yourCounty.Id}\r\n                      value={yourCounty.Id}\r\n                    >\r\n                      {yourCounty.Name}\r\n                    </MenuItem>\r\n                  ))}\r\n                </Select>\r\n              </FormControl>\r\n              <FormControl variant=\"standard\" sx={{ minWidth: 120 }}>\r\n                <InputLabel id=\"countrylbl\" color=\"secondary\">\r\n                  {\" \"}\r\n                  Country Of Residence{\" \"}\r\n                </InputLabel>\r\n                <Select\r\n                  color=\"secondary\"\r\n                  onChange={(event) =>\r\n                    (editMarriedInfo.CountryOfResidenceID = event.target.value)\r\n                  }\r\n                  labelId=\"countrylbl\"\r\n                  id=\"countrySelect\"\r\n                  label=\"Country\"\r\n                >\r\n                  <MenuItem value=\"\">\r\n                    <em>None</em>\r\n                  </MenuItem>\r\n                  {country.map((yourCounty) => (\r\n                    <MenuItem\r\n                      key={yourCounty.Id}\r\n                      NationalityID={yourCounty.Id}\r\n                      value={yourCounty.Id}\r\n                    >\r\n                      {yourCounty.Name}\r\n                    </MenuItem>\r\n                  ))}\r\n                </Select>\r\n              </FormControl>\r\n              <FormControl variant=\"standard\" sx={{ minWidth: 120 }}>\r\n                <InputLabel id=\"countrylbl\" color=\"secondary\">\r\n                  {\" \"}\r\n                  Proof Of Identity Type{\" \"}\r\n                </InputLabel>\r\n                <Select\r\n                  color=\"secondary\"\r\n                  onChange={(event) =>\r\n                    (editMarriedInfo.ProofOfIdentityTypeID = event.target.value)\r\n                  }\r\n                  labelId=\"countrylbl\"\r\n                  id=\"countrySelect\"\r\n                  label=\"Country\"\r\n                >\r\n                  <MenuItem value=\"\">\r\n                    <em>None</em>\r\n                  </MenuItem>\r\n                  {proofOfIdentityType.map((yourProofOfIdentityType) => (\r\n                    <MenuItem\r\n                      key={yourProofOfIdentityType.Id}\r\n                      ProofOfIdentityTypeID={yourProofOfIdentityType.Id}\r\n                      value={yourProofOfIdentityType.Id}\r\n                    >\r\n                      {yourProofOfIdentityType.Name}\r\n                    </MenuItem>\r\n                  ))}\r\n                </Select>\r\n              </FormControl>\r\n              <div>\r\n                {currentFile && (\r\n                  <div className=\"progress\">\r\n                    <div\r\n                      className=\"progress-bar progress-bar-info progress-bar-striped\"\r\n                      role=\"progressbar\"\r\n                      aria-valuenow={progress}\r\n                      aria-valuemin=\"0\"\r\n                      aria-valuemax=\"100\"\r\n                      style={{ width: progress + \"%\" }}\r\n                    >\r\n                      {progress}%\r\n                    </div>\r\n                  </div>\r\n                )}\r\n                <label className=\"btn btn-default\">\r\n                  <input type=\"file\" onChange={selectFile} />\r\n                </label>\r\n                <button\r\n                  className=\"bg-[#c94fc9] hover:bg-purple-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\"\r\n                  disabled={!selectedFiles}\r\n                  onChange={\r\n                    (editMarriedInfo.ProofOfIdentity = selectedPathIdentity)\r\n                  }\r\n                  onClick={uploadIdentity}\r\n                >\r\n                  Upload Proof Of Identity\r\n                </button>\r\n                <div className=\"alert alert-light\" role=\"alert\">\r\n                  {message}\r\n                </div>\r\n              </div>\r\n              <p>\r\n                Marriage Date:\r\n                <input\r\n                  id=\"MarriageDate\"\r\n                  name=\"MarriageDate\"\r\n                  label=\"MarriageDate\"\r\n                  placeholder=\"MarriageDate\"\r\n                  type=\"date\"\r\n                  value={\r\n                    marriageDate.getFullYear().toString() +\r\n                    \"-\" +\r\n                    (marriageDate.getMonth() + 1).toString().padStart(2, 0) +\r\n                    \"-\" +\r\n                    marriageDate.getDate().toString().padStart(2, 0)\r\n                  }\r\n                  onChange={(e) => {\r\n                    setMarriageDate(new Date(e.target.value));\r\n                    editMarriedInfo.MarriageDate = marriageDate;\r\n                  }}\r\n                />{\" \"}\r\n              </p>\r\n              <div>\r\n                {currentFile && (\r\n                  <div className=\"progress\">\r\n                    <div\r\n                      className=\"progress-bar progress-bar-info progress-bar-striped\"\r\n                      role=\"progressbar\"\r\n                      aria-valuenow={progress}\r\n                      aria-valuemin=\"0\"\r\n                      aria-valuemax=\"100\"\r\n                      style={{ width: progress + \"%\" }}\r\n                    >\r\n                      {progress}%\r\n                    </div>\r\n                  </div>\r\n                )}\r\n                <label className=\"btn btn-default\">\r\n                  <input type=\"file\" onChange={selectFile} />\r\n                </label>\r\n                <button\r\n                  className=\"bg-[#c94fc9] hover:bg-purple-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\"\r\n                  onChange={\r\n                    (editMarriedInfo.MarriageCertificate = selectedPathMarriege)\r\n                  }\r\n                  disabled={!selectedFiles}\r\n                  onClick={uploadMarriegeCertificate}\r\n                >\r\n                  Upload Marriage Certificate\r\n                </button>\r\n                <div className=\"alert alert-light\" role=\"alert\">\r\n                  {message}\r\n                </div>\r\n              </div>\r\n              <LoanTextField\r\n                id=\"MarriageCertificateIssuer\"\r\n                label=\"MarriageCertificateIssuer\"\r\n                value={editMarriedInfo.MarriageCertificateIssuer}\r\n                onChange={handleInputChangeEditMarriedStatus}\r\n                name=\"MarriageCertificateIssuer\"\r\n              />\r\n              <p>\r\n                Proof Of Identity Issue Date:\r\n                <input\r\n                  id=\"ProofOfIdentityIssueDate\"\r\n                  name=\"ProofOfIdentityIssueDate\"\r\n                  label=\"ProofOfIdentityIssueDate\"\r\n                  placeholder=\"ProofOfIdentityIssueDate\"\r\n                  type=\"date\"\r\n                  value={\r\n                    proofOfIdentityIssueDate.getFullYear().toString() +\r\n                    \"-\" +\r\n                    (proofOfIdentityIssueDate.getMonth() + 1)\r\n                      .toString()\r\n                      .padStart(2, 0) +\r\n                    \"-\" +\r\n                    proofOfIdentityIssueDate.getDate().toString().padStart(2, 0)\r\n                  }\r\n                  onChange={(e) => {\r\n                    setProofOfIdentityIssueDate(new Date(e.target.value));\r\n                    editMarriedInfo.ProofOfIdentityIssueDate =\r\n                      proofOfIdentityIssueDate;\r\n                  }}\r\n                />{\" \"}\r\n              </p>\r\n              <p>\r\n                Proof Of Identity Expir Date:\r\n                <input\r\n                  id=\"ProofOfIdentityExpirDate\"\r\n                  name=\"ProofOfIdentityExpirDate\"\r\n                  label=\"ProofOfIdentityExpirDate\"\r\n                  placeholder=\"ProofOfIdentityExpirDate\"\r\n                  type=\"date\"\r\n                  value={\r\n                    proofOfIdentityExpirDate.getFullYear().toString() +\r\n                    \"-\" +\r\n                    (proofOfIdentityExpirDate.getMonth() + 1)\r\n                      .toString()\r\n                      .padStart(2, 0) +\r\n                    \"-\" +\r\n                    proofOfIdentityExpirDate.getDate().toString().padStart(2, 0)\r\n                  }\r\n                  onChange={(e) => {\r\n                    setProofOfIdentityExpirDate(new Date(e.target.value));\r\n                    editMarriedInfo.ProofOfIdentityExpirDate =\r\n                      proofOfIdentityExpirDate;\r\n                  }}\r\n                />{\" \"}\r\n              </p>\r\n            </div>\r\n            <div>\r\n              <button className=\"bg-[purple] hover:bg-purple-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\">\r\n                Update\r\n              </button>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </CompanyModal>\r\n    </div>\r\n  );\r\n};\r\nexport default ViewMaritalStatus;\r\n","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\SoleAndPartnership\\MaritalStatus\\ViewUnMarriedStatus.jsx",["1162","1163","1164","1165","1166","1167","1168","1169","1170"],[],"import { useState, useEffect } from \"react\";\r\nimport CompanyModal from \"../../Common/CompanyModal\";\r\nimport LoanTextField from \"../../../Common/LoanTextField\";\r\nimport { Select, FormControl, MenuItem, InputLabel } from \"@mui/material\";\r\nimport AddUnMaritalStatus from \"./AddUnMarriedStatus\";\r\nimport CommonServices from \"../../Common/CommonServices\";\r\nconst ViewUnMarriedStatus = ({\r\n  holdUnMarried,\r\n  SoleId,\r\n  isCompanyMartailStatusUnmarriedModalOpen,\r\n  handleCompanyMartailStatusUnmarriedCloseModal,\r\n  handleCompanyMartailStatusUnmarriedOpenModal,\r\n}) => {\r\n  const [unMarriedCertficateIssueDate, setUnMarriedCertficateIssueDate] =\r\n    useState(new Date());\r\n  const [unMarriedCertficateExpiredDate, setUnMarriedCertficateExpiredDate] =\r\n    useState(new Date());\r\n  //upload start\r\n  const [selectedPathUnMarriedCertficate, setSelectedPathUnMarriedCertficate] = useState(null);\r\n  const [selectedFiles, setSelectedFiles] = useState(undefined);\r\n  const [currentFile, setCurrentFile] = useState(undefined);\r\n  const [fileInfos, setFileInfos] = useState([]);\r\n  const [progress, setProgress] = useState(0);\r\n  const [message, setMessage] = useState(\"\");\r\n  const selectFile = (event) => {\r\n    setSelectedFiles(event.target.files);\r\n  };\r\n  //upload 1\r\n  const uploadIdentity = () => {\r\n    let currentFile = selectedFiles[0];\r\n    setProgress(0);\r\n    setCurrentFile(currentFile);\r\n    CommonServices.upload(currentFile, (event) => {\r\n      setProgress(Math.round((100 * event.loaded) / event.total));\r\n    })\r\n      .then((response) => {\r\n        setMessage(response.data.message);\r\n        setSelectedPathUnMarriedCertficate(response.data.Result);\r\n      })\r\n      .then((files) => {\r\n        setFileInfos(files.data);\r\n      })\r\n      .catch(() => {\r\n        setProgress(0);\r\n        setCurrentFile(undefined);\r\n      });\r\n    setSelectedFiles(undefined);\r\n  };\r\n\r\n  const [\r\n    isCompanyUnmarriedInformationEditModalOpen,\r\n    setIsCompanyUnmarriedInformationEditModalOpen,\r\n  ] = useState(false);\r\n  function handleCompanyUnmarriedEditCloseModal() {\r\n    setIsCompanyUnmarriedInformationEditModalOpen(false);\r\n  }\r\n  function handleCompanyUnmarriedInformationEditOpenModal() {\r\n    setIsCompanyUnmarriedInformationEditModalOpen(true);\r\n  }\r\n  function handleCompanyUnmarriedInformationEditCloseModal() {\r\n    setIsCompanyUnmarriedInformationEditModalOpen(false);\r\n  }\r\n  const [taxInformationId, setTaxInformationId] = useState();\r\n  const [editUnmarriedInfo, setEditUnmarriedInfo] = useState({\r\n    UnMarriedCertficate: \"\",\r\n    UnMarriedCertficateIssueDate: \"\",\r\n    UnMarriedCertficateExpiredDate: \"\",\r\n    UnMarriedCertficateIssuer: \"\",\r\n  });\r\n  const handleInputChangeEditUnMarriedStatus = (event) => {\r\n    const { name, value } = event.target;\r\n    setEditUnmarriedInfo({ ...editUnmarriedInfo, [name]: value });\r\n  };\r\n  const updateUnmarriedById = (taxInformationId1) => {\r\n    CommonServices.getUnmarried(taxInformationId1)\r\n      .then((res) => {\r\n        setEditUnmarriedInfo({\r\n          ...editUnmarriedInfo,\r\n          UnMarriedCertficate: res.data.Result.UnMarriedCertficate,\r\n          UnMarriedCertficateIssueDate:\r\n            res.data.Result.UnMarriedCertficateIssueDate,\r\n          UnMarriedCertficateExpiredDate:\r\n            res.data.Result.UnMarriedCertficateExpiredDate,\r\n          UnMarriedCertficateIssuer: res.data.Result.UnMarriedCertficateIssuer,\r\n        });\r\n      })\r\n      .catch((err) => console.log(err));\r\n  };\r\n  useEffect(() => {\r\n    updateUnmarriedById();\r\n  }, []);\r\n  const updateUnmarriedInfo = () => {\r\n    CommonServices.updateUnmarried(taxInformationId, editUnmarriedInfo)\r\n      .then((response) => {})\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n  useEffect(() => {\r\n    updateUnmarriedInfo();\r\n  }, []);\r\n  return (\r\n    <div>\r\n      <CompanyModal\r\n        isOpen={isCompanyMartailStatusUnmarriedModalOpen}\r\n        onClose={handleCompanyMartailStatusUnmarriedCloseModal}\r\n        title=\"Edit unMarried status information\"\r\n      >\r\n        <div className=\"rounded-lg overflow-hidden\">\r\n          {holdUnMarried ? (\r\n            <table className=\"table table-bordered table-striped bg-purple-100\">\r\n              <thead>\r\n                <th className=\"px-2 py-4\"> UnMarried Certficate</th>\r\n                <th className=\"px-2 py-4\"> UnMarried Certficate Issue Date</th>\r\n                <th className=\"px-2 py-4\">\r\n                  {\" \"}\r\n                  UnMarried Certficate Expired Date\r\n                </th>\r\n                <th className=\"px-2 py-4\"> UnMarried Certficate Issue</th>\r\n                <th className=\"px-2 py-4\"> Action </th>\r\n              </thead>\r\n              <tbody>\r\n                <tr>\r\n                  <td>{holdUnMarried.UnMarriedCertficate}</td>\r\n                  <td>{holdUnMarried.UnMarriedCertficateIssueDate}</td>\r\n                  <td>{holdUnMarried.UnMarriedCertficateExpiredDate}</td>\r\n                  <td>{holdUnMarried.UnMarriedCertficateIssuer}</td>\r\n                  <td>\r\n                    <button\r\n                      onClick={() => {\r\n                        handleCompanyUnmarriedInformationEditOpenModal();\r\n                        updateUnmarriedById(holdUnMarried.Id);\r\n                        setTaxInformationId(holdUnMarried.Id);\r\n                      }}\r\n                      className=\"text-purple-600 rounded-md font-semibold \"\r\n                    >\r\n                      Edit\r\n                    </button>\r\n                  </td>\r\n                </tr>\r\n              </tbody>\r\n            </table>\r\n          ) : (\r\n            \"\"\r\n          )}\r\n        </div>\r\n        <div>\r\n          {holdUnMarried <= 0 && (\r\n            <AddUnMaritalStatus\r\n              Add\r\n              marital\r\n              status\r\n              information\r\n              SoleId={SoleId}\r\n            />\r\n          )}\r\n        </div>\r\n      </CompanyModal>\r\n      <CompanyModal\r\n        isOpen={isCompanyUnmarriedInformationEditModalOpen}\r\n        onClose={handleCompanyUnmarriedEditCloseModal}\r\n        title=\"UnMarried edit information\"\r\n      >\r\n        <div>\r\n          <form onSubmit={updateUnmarriedInfo}>\r\n            <div className=\"relative center justify-center flex-1 w-full max-w-full grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\">\r\n              <div>\r\n                {currentFile && (\r\n                  <div className=\"progress\">\r\n                    <div\r\n                      className=\"progress-bar progress-bar-info progress-bar-striped\"\r\n                      role=\"progressbar\"\r\n                      aria-valuenow={progress}\r\n                      aria-valuemin=\"0\"\r\n                      aria-valuemax=\"100\"\r\n                      style={{ width: progress + \"%\" }}\r\n                    >\r\n                      {progress}%\r\n                    </div>\r\n                  </div>\r\n                )}\r\n                <label className=\"btn btn-default\">\r\n                  <input type=\"file\" onChange={selectFile} />\r\n                </label>\r\n                <button\r\n                  className=\"bg-[#c94fc9] hover:bg-purple-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\"\r\n                  disabled={!selectedFiles}\r\n                  onChange={  \r\n                    editUnmarriedInfo.UnMarriedCertficate = selectedPathUnMarriedCertficate\r\n                  }\r\n                  onClick={uploadIdentity}\r\n                >\r\n                  upload UnMarried Certficate\r\n                </button>\r\n                <div className=\"alert alert-light\" role=\"alert\">\r\n                  {message}\r\n                </div>\r\n              </div>\r\n              <p>\r\n                UnMarried Certficate Issue Date:\r\n                <input\r\n                  id=\"UnMarriedCertficateIssueDate\"\r\n                  name=\"UnMarriedCertficateIssueDate\"\r\n                  label=\"UnMarriedCertficateIssueDate\"\r\n                  placeholder=\"UnMarriedCertficateIssueDate\"\r\n                  type=\"date\"\r\n                  value={\r\n                    unMarriedCertficateIssueDate.getFullYear().toString() +\r\n                    \"-\" +\r\n                    (unMarriedCertficateIssueDate.getMonth() + 1)\r\n                      .toString()\r\n                      .padStart(2, 0) +\r\n                    \"-\" +\r\n                    unMarriedCertficateIssueDate\r\n                      .getDate()\r\n                      .toString()\r\n                      .padStart(2, 0)\r\n                  }\r\n                  onChange={(e) => {\r\n                    setUnMarriedCertficateExpiredDate(new Date(e.target.value));\r\n                    editUnmarriedInfo.UnMarriedCertficateIssueDate =\r\n                      unMarriedCertficateIssueDate;\r\n                  }}\r\n                />{\" \"}\r\n              </p>\r\n              <p>\r\n                UnMarried Certficate Expired Date:\r\n                <input\r\n                  id=\"UnMarriedCertficateExpiredDate\"\r\n                  name=\"UnMarriedCertficateExpiredDate\"\r\n                  label=\"UnMarriedCertficateExpiredDate\"\r\n                  placeholder=\"UnMarriedCertficateExpiredDate\"\r\n                  type=\"date\"\r\n                  value={\r\n                    unMarriedCertficateExpiredDate.getFullYear().toString() +\r\n                    \"-\" +\r\n                    (unMarriedCertficateExpiredDate.getMonth() + 1)\r\n                      .toString()\r\n                      .padStart(2, 0) +\r\n                    \"-\" +\r\n                    unMarriedCertficateExpiredDate\r\n                      .getDate()\r\n                      .toString()\r\n                      .padStart(2, 0)\r\n                  }\r\n                  onChange={(e) => {\r\n                    setUnMarriedCertficateExpiredDate(new Date(e.target.value));\r\n                    editUnmarriedInfo.UnMarriedCertficateExpiredDate =\r\n                      unMarriedCertficateExpiredDate;\r\n                  }}\r\n                />{\" \"}\r\n              </p>\r\n              {/* <LoanTextField\r\n                id=\"UnMarriedCertficate\"\r\n                label=\"UnMarriedCertficate\"\r\n                value={editUnmarriedInfo.UnMarriedCertficate}\r\n                onChange={handleInputChangeEditUnMarriedStatus}\r\n                name=\"UnMarriedCertficate\"\r\n              />\r\n              <LoanTextField\r\n                id=\"UnMarriedCertficateIssueDate\"\r\n                label=\"UnMarriedCertficateIssueDate\"\r\n                value={editUnmarriedInfo.UnMarriedCertficateIssueDate}\r\n                onChange={handleInputChangeEditUnMarriedStatus}\r\n                name=\"UnMarriedCertficateIssueDate\"\r\n              />\r\n              <LoanTextField\r\n                id=\"UnMarriedCertficateExpiredDate\"\r\n                label=\"UnMarriedCertficateExpiredDate\"\r\n                value={editUnmarriedInfo.UnMarriedCertficateExpiredDate}\r\n                onChange={handleInputChangeEditUnMarriedStatus}\r\n                name=\"UnMarriedCertficateExpiredDate\"\r\n              /> */}\r\n              <LoanTextField\r\n                id=\"UnMarriedCertficateIssuer\"\r\n                label=\"UnMarriedCertficateIssuer\"\r\n                value={editUnmarriedInfo.UnMarriedCertficateIssuer}\r\n                onChange={handleInputChangeEditUnMarriedStatus}\r\n                name=\"UnMarriedCertficateIssuer\"\r\n              />\r\n            </div>\r\n            <div>\r\n              <button className=\"bg-[purple] hover:bg-purple-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\">\r\n                Update\r\n              </button>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </CompanyModal>\r\n    </div>\r\n  );\r\n};\r\nexport default ViewUnMarriedStatus;\r\n","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\PLCAndShare\\ViewOtherBankCreditExposure.jsx",["1171","1172","1173","1174","1175","1176","1177","1178","1179","1180","1181"],[],"import { useParams, useNavigate } from \"react-router-dom\";\r\nimport { useState, useEffect } from \"react\";\r\nimport LoanTextField from \"../../Common/LoanTextField\";\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\nimport CompanyModal from \"../Common/CompanyModal\";\r\nimport PLCAndShareService from \"./PLCAndShareService\";\r\nimport { Select, FormControl, MenuItem, InputLabel } from \"@mui/material\";\r\nconst ViewOtherBankCreditExposure = ({\r\n  handleGeneralOtherBankCreditExposureCloseModal,\r\n  isOtherBankCreditExposureModalOpen,\r\n  getOtherBankCreditExposureInformation,\r\n  handleInputChangeOtherBankCreditExposure,\r\n  OtherBankCreditExposure,\r\n  PLCAndShareInformationId,\r\n  setOtherBankCreditExposure,\r\n  getCompanyOtherBankCreditExposureInformationById,\r\n  newOtherBankCreditExposure\r\n}) => {\r\n  const [reportingDate, setReportingDate] = useState(new Date());\r\n  const [startDate, setStartDate] = useState(new Date());\r\n  const [maturityDate, setMaturityDate] = useState(new Date());\r\n  const [reportingDateEdit, setReportingDateEdit] = useState(new Date());\r\n  const [startDateEdit, setStartDateEdit] = useState(new Date());\r\n  const [maturityDateEdit, setMaturityDateEdit] = useState(new Date());\r\n  const [selectedPathCreditInfo, setSelectedPathCreditInfo] = useState(null);\r\n  const [submitted, setSubmitted] = useState();\r\n  const [holdId, setHoldId] = useState();\r\n  const selectFileCreditInfo = (event) => {\r\n    setSelectedFiles(event.target.files);\r\n  };\r\n  const uploadCreditInfo = () => {\r\n    let currentFile = selectedFiles[0];\r\n    setProgress(0);\r\n    setCurrentFile(currentFile);\r\n\r\n    PLCAndShareService.uploadCreditInfo(currentFile, (event) => {\r\n      setProgress(Math.round((100 * event.loaded) / event.total));\r\n    })\r\n      .then((response) => {\r\n        setMessage(response.data.message);\r\n        setSelectedPathCreditInfo(response.data.Result);\r\n      })\r\n      .then((files) => {\r\n        setFileInfos(files.data);\r\n      })\r\n      .catch(() => {\r\n        setProgress(0);\r\n        // setMessage(\"Could not upload the file!\");\r\n        setCurrentFile(undefined);\r\n      });\r\n    setSelectedFiles(undefined);\r\n  };\r\n  const saveOtherBankCreditExposure = (e) => {\r\n    e.preventDefault();\r\n    var data = {\r\n      FullName: OtherBankCreditExposure.FullName,\r\n      TinNumber: OtherBankCreditExposure.TinNumber,\r\n      BankName: OtherBankCreditExposure.BankName,\r\n      BranchName: OtherBankCreditExposure.BranchName,\r\n      AccountNumber: OtherBankCreditExposure.AccountNumber,\r\n      LoanTypeId: OtherBankCreditExposure.LoanTypeId,\r\n      ReportingDate: reportingDate,\r\n      CurrencyId: OtherBankCreditExposure.CurrencyId,\r\n      ApprovedAmount: OtherBankCreditExposure.ApprovedAmount,\r\n      StartDate: startDate,\r\n      MaturityDate: maturityDate,\r\n      RepaymentFrequencyId: OtherBankCreditExposure.RepaymentFrequencyId,\r\n      NumberOfInstallment: OtherBankCreditExposure.NumberOfInstallment,\r\n      InstallmentAmount: OtherBankCreditExposure.InstallmentAmount,\r\n      OutstandingLoanBalance: OtherBankCreditExposure.OutstandingLoanBalance,\r\n      LoanStatusId: OtherBankCreditExposure.LoanStatusId,\r\n      NoOfDaysInArrears: OtherBankCreditExposure.NoOfDaysInArrears,\r\n      BalanceOverdue: OtherBankCreditExposure.BalanceOverdue,\r\n      NoOfRestructuring: OtherBankCreditExposure.NoOfRestructuring,\r\n      RestructuredCreditReferenceNumber: OtherBankCreditExposure.RestructuredCreditReferenceNumber,\r\n      SectorTypeId: OtherBankCreditExposure.SectorTypeId,\r\n      IndustryTypeId: OtherBankCreditExposure.IndustryTypeId,\r\n      CreditInformationDocument: selectedPathCreditInfo,\r\n    };\r\n\r\n    PLCAndShareService.addOtherBankCreditExposure(data, PLCAndShareInformationId)\r\n      .then((response) => {\r\n        setOtherBankCreditExposure({\r\n          Id: response.data.Id,\r\n          FullName: response.data.FullName,\r\n          TinNumber: response.data.TinNumber,\r\n          BankName: response.data.BankName,\r\n          BranchName: response.data.BranchName,\r\n          AccountNumber: response.data.AccountNumber,\r\n          LoanTypeId: response.data.LoanTypeId,\r\n          ReportingDate: response.data.ReportingDate,\r\n          CurrencyId: response.data.CurrencyId,\r\n          ApprovedAmount: response.data.ApprovedAmount,\r\n          StartDate: response.data.StartDate,\r\n          MaturityDate: response.data.MaturityDate,\r\n          RepaymentFrequencyId: response.data.RepaymentFrequencyId,\r\n          NumberOfInstallment: response.data.NumberOfInstallment,\r\n          InstallmentAmount: response.data.InstallmentAmount,\r\n          OutstandingLoanBalance: response.data.OutstandingLoanBalance,\r\n          LoanStatusId: response.data.LoanStatusId,\r\n          NoOfDaysInArrears: response.data.NoOfDaysInArrears,\r\n          BalanceOverdue: response.data.BalanceOverdue,\r\n          NoOfRestructuring: response.data.NoOfRestructuring,\r\n          RestructuredCreditReferenceNumber: response.data.RestructuredCreditReferenceNumber,\r\n          SectorTypeId: response.data.SectorTypeId,\r\n          IndustryTypeId: response.data.IndustryTypeId,\r\n          CreditInformationDocument: response.data.CreditInformationDocument,\r\n        });\r\n\r\n        setSubmitted(true);\r\n        console.log(response.data);\r\n        setHoldId(response.data.Result.Id);\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n  const [\r\n\r\n    isOtherBankCreditExposureEditModalOpen,\r\n\r\n    setIsCompanyOtherBankEditedModalOpen,\r\n\r\n  ] = useState(false);\r\n\r\n  function handleCompanyOtherBankEditCloseModal() {\r\n\r\n    setIsCompanyOtherBankEditedModalOpen(false);\r\n\r\n  }\r\n\r\n  function handleCompanyOtherBankEditedModalOpen() {\r\n\r\n    setIsCompanyOtherBankEditedModalOpen(true);\r\n\r\n  }\r\n\r\n  function handleCompanyOtherBankEditCloseModal() {\r\n\r\n    setIsCompanyOtherBankEditedModalOpen(false);\r\n\r\n  }\r\n  // const [selectedPathCreditInfo, setSelectedPathCreditInfo] = useState(null);\r\n  const [selectedPathCreditInfoEdit, setSelectedPathCreditInfoEdit] = useState(null);\r\n  const [selectedFiles, setSelectedFiles] = useState(undefined);\r\n  const [currentFile, setCurrentFile] = useState(undefined);\r\n  const [fileInfos, setFileInfos] = useState([]);\r\n  const [progress, setProgress] = useState(0);\r\n  const [message, setMessage] = useState(\"\");\r\n\r\n  //Start Upload Edit\r\n  const selectFileCreditInfoEdit = (event) => {\r\n    setSelectedFiles(event.target.files);\r\n  };\r\n  const uploadCreditInfoEdit = () => {\r\n    let currentFile = selectedFiles[0];\r\n    setProgress(0);\r\n    setCurrentFile(currentFile);\r\n\r\n    PLCAndShareService.uploadCreditInfo(currentFile, (event) => {\r\n      setProgress(Math.round((100 * event.loaded) / event.total));\r\n    })\r\n      .then((response) => {\r\n        setMessage(response.data.message);\r\n        setSelectedPathCreditInfoEdit(response.data.Result);\r\n      })\r\n      .then((files) => {\r\n        setFileInfos(files.data);\r\n      })\r\n      .catch(() => {\r\n        setProgress(0);\r\n        // setMessage(\"Could not upload the file!\");\r\n        setCurrentFile(undefined);\r\n      });\r\n    setSelectedFiles(undefined);\r\n  };\r\n  //End Upload Edit\r\n  const [otherBankId, setOtherBankId] = useState();\r\n\r\n  const [editOtherBank, setEditOtherBank] = useState({\r\n\r\n    FullName: \"\",\r\n\r\n    TinNumber: \"\",\r\n\r\n    BankName: \"\",\r\n\r\n    BranchName: \"\",\r\n\r\n    AccountNumber: \"\",\r\n\r\n    LoanTypeId: \"\",\r\n\r\n    ReportingDate: \"\",\r\n\r\n    CurrencyId: \"\",\r\n\r\n    ApprovedAmount: \"\",\r\n\r\n    StartDate: \"\",\r\n\r\n    MaturityDate: \"\",\r\n\r\n    RepaymentFrequencyId: \"\",\r\n\r\n    NumberOfInstallment: \"\",\r\n\r\n    InstallmentAmount: \"\",\r\n\r\n    OutstandingLoanBalance: \"\",\r\n\r\n    LoanStatusId: \"\",\r\n\r\n    NoOfDaysInArrears: \"\",\r\n\r\n    BalanceOverdue: \"\",\r\n\r\n    NoOfRestructuring: \"\",\r\n\r\n    RestructuredCreditReferenceNumber: \"\",\r\n\r\n    SectorTypeId: \"\",\r\n\r\n    IndustryTypeId: \"\",\r\n\r\n    CreditInformationDocument: \"\",\r\n\r\n  });\r\n\r\n  const handleInputChangeEditOtherBank = (event) => {\r\n\r\n    const { name, value } = event.target;\r\n\r\n    setEditOtherBank({ ...editOtherBank, [name]: value });\r\n\r\n  };\r\n\r\n  const getOtherBankById = (otherBankId) => {\r\n\r\n    PLCAndShareService.getOtherBankById(otherBankId).then((res) => {\r\n\r\n      setEditOtherBank({\r\n\r\n        ...editOtherBank,\r\n\r\n        FullName: res.data.Result.FullName,\r\n\r\n        TinNumber: res.data.Result.TinNumber,\r\n\r\n        BankName: res.data.Result.BankName,\r\n\r\n        BranchName: res.data.Result.BranchName,\r\n\r\n        AccountNumber: res.data.Result.AccountNumber,\r\n\r\n        LoanTypeId: res.data.Result.LoanTypeId,\r\n\r\n        ReportingDate: res.data.Result.ReportingDate,\r\n\r\n        CurrencyId: res.data.Result.CurrencyId,\r\n\r\n        ApprovedAmount: res.data.Result.ApprovedAmount,\r\n\r\n        StartDate: res.data.Result.StartDate,\r\n\r\n        MaturityDate: res.data.Result.MaturityDate,\r\n\r\n        RepaymentFrequencyId: res.data.Result.RepaymentFrequencyId,\r\n\r\n        NumberOfInstallment: res.data.Result.NumberOfInstallment,\r\n\r\n        InstallmentAmount: res.data.Result.InstallmentAmount,\r\n\r\n        OutstandingLoanBalance: res.data.Result.OutstandingLoanBalance,\r\n\r\n        LoanStatusId: res.data.Result.LoanStatusId,\r\n\r\n        NoOfDaysInArrears: res.data.Result.NoOfDaysInArrears,\r\n\r\n        BalanceOverdue: res.data.Result.BalanceOverdue,\r\n\r\n        NoOfRestructuring: res.data.Result.NoOfRestructuring,\r\n\r\n        RestructuredCreditReferenceNumber:\r\n\r\n          res.data.Result.RestructuredCreditReferenceNumber,\r\n\r\n        SectorTypeId: res.data.Result.SectorTypeId,\r\n\r\n        IndustryTypeId: res.data.Result.IndustryTypeId,\r\n\r\n        CreditInformationDocument: res.data.Result.CreditInformationDocument,\r\n\r\n      });\r\n\r\n      // .catch((err) => console.log(err));\r\n\r\n    });\r\n\r\n  };\r\n\r\n  const updateOtherBank = () => {\r\n\r\n    PLCAndShareService.updateOtherBank(otherBankId, editOtherBank)\r\n\r\n      .then((response) => { })\r\n\r\n      .catch((e) => {\r\n\r\n        console.log(e);\r\n\r\n      });\r\n\r\n  };\r\n\r\n  useEffect(() => {\r\n\r\n    updateOtherBank();\r\n\r\n  }, []);\r\n  const [toggleTax, setToggleTax] = useState(false);\r\n  const [loan, setLoan] = useState([]);\r\n  const [currency, setCurrency] = useState([]);\r\n  const [GetRepayment, setGetRepayment] = useState([]);\r\n  const [selectedSector, setSelectedSector] = useState([]);\r\n  const [selectedSectorId, setSelectedSectorId] = useState([]);\r\n  const [loanStatus, setLoanStatus] = useState([]);\r\n  const [getIndustry, setGetIndustry] = useState([]);\r\n  debugger;\r\n  const loantype = () => {\r\n    PLCAndShareService.getLoanType()\r\n\r\n      .then((response) => {\r\n\r\n        setLoan(response.data.Result);\r\n\r\n        console.log(response.data.Result);\r\n\r\n      })\r\n\r\n      .catch((e) => {\r\n\r\n        console.log(e);\r\n\r\n      });\r\n\r\n  };\r\n\r\n  useEffect(() => {\r\n\r\n    loantype();\r\n\r\n  }, []);\r\n\r\n  const getCurrency = () => {\r\n\r\n    PLCAndShareService.getCurrency()\r\n\r\n      .then((response) => {\r\n\r\n        setCurrency(response.data.Result);\r\n\r\n        console.log(response.data.Result);\r\n\r\n      })\r\n\r\n      .catch((e) => {\r\n\r\n        console.log(e);\r\n\r\n      });\r\n\r\n  };\r\n\r\n  useEffect(() => {\r\n\r\n    getCurrency();\r\n\r\n  }, []);\r\n\r\n  const repayment = () => {\r\n\r\n    PLCAndShareService.payment()\r\n\r\n      .then((response) => {\r\n\r\n        setGetRepayment(response.data.Result);\r\n\r\n        console.log(response.data.Result);\r\n\r\n      })\r\n\r\n      .catch((e) => {\r\n\r\n        console.log(e);\r\n\r\n      });\r\n\r\n  };\r\n\r\n  useEffect(() => {\r\n\r\n    repayment();\r\n\r\n  }, []);\r\n\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  const getSector = () => {\r\n\r\n    setIsLoading(true);\r\n\r\n    PLCAndShareService.sector()\r\n\r\n      .then((response) => {\r\n\r\n        setSelectedSector(response.data.Result);\r\n\r\n        // setSelectedSectorId(response.data.Result.Id);\r\n\r\n        console.log(response.data.Result);\r\n\r\n      })\r\n\r\n      .catch((e) => {\r\n\r\n        console.log(e);\r\n\r\n      });\r\n\r\n    setIsLoading(false);\r\n\r\n  };\r\n\r\n  useEffect(() => {\r\n\r\n    getSector();\r\n\r\n  }, []);\r\n\r\n  const industry = (selectedSectorId) => {\r\n\r\n    setIsLoading(true);\r\n\r\n    PLCAndShareService.holdIndustry(selectedSectorId)\r\n\r\n      .then((response) => {\r\n\r\n        setGetIndustry(response.data.Result);\r\n\r\n        debugger;\r\n\r\n        console.log(response.data.Result.Id);\r\n\r\n      })\r\n\r\n      .catch((e) => {\r\n\r\n        console.log(e);\r\n\r\n      });\r\n\r\n    setIsLoading(false);\r\n\r\n  };\r\n\r\n  useEffect(() => {\r\n\r\n    industry();\r\n\r\n  }, []);\r\n\r\n  const getLoanStatusActive = () => {\r\n\r\n    PLCAndShareService.getLoanStatus()\r\n\r\n      .then((response) => {\r\n\r\n        setLoanStatus(response.data.Result);\r\n\r\n        console.log(response.data.Result);\r\n\r\n      })\r\n\r\n      .catch((e) => {\r\n\r\n        console.log(e);\r\n\r\n      });\r\n\r\n  };\r\n\r\n  useEffect(() => {\r\n\r\n    getLoanStatusActive();\r\n\r\n  }, []);\r\n  return (\r\n    <div>\r\n      <CompanyModal\r\n        isOpen={isOtherBankCreditExposureModalOpen}\r\n        onClose={handleGeneralOtherBankCreditExposureCloseModal}\r\n        title=\"Other Bank Credit Exposure information\"\r\n      >\r\n        <div>\r\n          {getOtherBankCreditExposureInformation ? (\r\n            <table className=\"table table-bordered table-striped bg-purple-100 \">\r\n\r\n              <thead>\r\n                <th className=\"px-2 py-4\"> ID</th>\r\n                <th className=\"px-2 py-4\"> Name</th>\r\n                <th className=\"px-2 py-4\"> Tin Number</th>\r\n\r\n                <th className=\"px-2 py-4\"> Bank Name</th>\r\n\r\n                <th className=\"px-2 py-4\"> Branch Name</th>\r\n\r\n                <th className=\"px-2 py-4\"> Account Number</th>\r\n\r\n                <th className=\"px-2 py-4\"> Loan Type</th>\r\n\r\n                <th className=\"px-2 py-4\"> Reporting Date</th>\r\n\r\n                <th className=\"px-2 py-4\"> Currency</th>\r\n\r\n                <th className=\"px-2 py-4\"> Approved Amount</th>\r\n\r\n                <th className=\"px-2 py-4\"> Start Date</th>\r\n\r\n                <th className=\"px-2 py-4\"> Maturity Date</th>\r\n\r\n                <th className=\"px-2 py-4\"> Repayment Frequency</th>\r\n\r\n                <th className=\"px-2 py-4\"> Credit Information Document</th>\r\n\r\n                <th className=\"px-2 py-4\"> Installment Amount</th>\r\n                <th className=\"px-2 py-4\"> Action </th>\r\n\r\n              </thead>\r\n              <tbody>\r\n                {getOtherBankCreditExposureInformation.map((getOtherBankCreditExposureInformation, index) => (\r\n\r\n                  <tr>\r\n                    <td>{getOtherBankCreditExposureInformation.Id} </td>\r\n                    <td>{getOtherBankCreditExposureInformation.FullName} </td>\r\n\r\n                    <td>{getOtherBankCreditExposureInformation.TinNumber} </td>\r\n\r\n                    <td>{getOtherBankCreditExposureInformation.BankName}</td>\r\n\r\n                    <td>{getOtherBankCreditExposureInformation.BranchName}</td>\r\n\r\n                    <td>{getOtherBankCreditExposureInformation.AccountNumber}</td>\r\n\r\n                    <td>{getOtherBankCreditExposureInformation.LoanType}</td>\r\n\r\n                    <td>{getOtherBankCreditExposureInformation.ReportingDate}</td>\r\n\r\n                    <td>{getOtherBankCreditExposureInformation.Currency}</td>\r\n\r\n                    <td>{getOtherBankCreditExposureInformation.ApprovedAmount}</td>\r\n\r\n                    <td>{getOtherBankCreditExposureInformation.StartDate}</td>\r\n\r\n                    <td>{getOtherBankCreditExposureInformation.MaturityDate}</td>\r\n\r\n                    <td>{getOtherBankCreditExposureInformation.RepaymentFrequency}</td>\r\n\r\n                    <td>{getOtherBankCreditExposureInformation.CreditInformationDocument}</td>\r\n\r\n                    <td>{getOtherBankCreditExposureInformation.InstallmentAmount}</td>\r\n                    <td>\r\n\r\n                      <button\r\n\r\n                        onClick={() => {\r\n\r\n                          handleCompanyOtherBankEditedModalOpen();\r\n                          getOtherBankById(getOtherBankCreditExposureInformation.Id);\r\n                          setOtherBankId(getOtherBankCreditExposureInformation.Id);\r\n                        }}\r\n\r\n                        className=\"text-purple-600 rounded-md font-semibold \"\r\n\r\n                      >\r\n\r\n                        Edit\r\n\r\n                      </button>\r\n\r\n                    </td>\r\n                  </tr>\r\n\r\n                ))}\r\n\r\n              </tbody>\r\n\r\n            </table>\r\n\r\n          ) : (\r\n            \"\"\r\n          )}\r\n          <button\r\n            onClick={() => setToggleTax(!toggleTax)}\r\n            className=\"text-purple-600 rounded-md font-medium \"\r\n          >\r\n            Add Other Bank Credit Exposure\r\n          </button>\r\n          {toggleTax &&\r\n            <div className=\"submit-form\">\r\n\r\n              <div className=\"relative center justify-center flex-1 w-full max-w-full grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\">\r\n                <LoanTextField\r\n                  id=\"FullName\"\r\n                  label=\"FullName\"\r\n                  variant=\"standard\"\r\n                  color=\"secondary\"\r\n                  size=\"\"\r\n                  required\r\n                  value={OtherBankCreditExposure.FullName}\r\n                  onChange={handleInputChangeOtherBankCreditExposure}\r\n                  name=\"FullName\"\r\n                />\r\n                <LoanTextField\r\n                  id=\"TinNumber\"\r\n                  label=\"TinNumber\"\r\n                  variant=\"standard\"\r\n                  color=\"secondary\"\r\n                  size=\"\"\r\n                  required\r\n                  value={OtherBankCreditExposure.TinNumber}\r\n                  onChange={handleInputChangeOtherBankCreditExposure}\r\n                  name=\"TinNumber\"\r\n                />\r\n                <LoanTextField\r\n                  id=\"BankName\"\r\n                  label=\"BankName\"\r\n                  variant=\"standard\"\r\n                  color=\"secondary\"\r\n                  size=\"\"\r\n                  required\r\n                  value={OtherBankCreditExposure.BankName}\r\n                  onChange={handleInputChangeOtherBankCreditExposure}\r\n                  name=\"BankName\"\r\n                />\r\n                <LoanTextField\r\n                  id=\"BranchName\"\r\n                  label=\"BranchName\"\r\n                  variant=\"standard\"\r\n                  color=\"secondary\"\r\n                  size=\"\"\r\n                  required\r\n                  value={OtherBankCreditExposure.BranchName}\r\n                  onChange={handleInputChangeOtherBankCreditExposure}\r\n                  name=\"BranchName\"\r\n                />\r\n                <LoanTextField\r\n                  id=\"AccountNumber\"\r\n                  label=\"AccountNumber\"\r\n                  variant=\"standard\"\r\n                  color=\"secondary\"\r\n                  size=\"\"\r\n                  required\r\n                  value={OtherBankCreditExposure.AccountNumber}\r\n                  onChange={handleInputChangeOtherBankCreditExposure}\r\n                  name=\"AccountNumber\"\r\n                />\r\n                <FormControl variant=\"standard\" sx={{ minWidth: 120 }}>\r\n\r\n                  <InputLabel id=\"countrylbl\" color=\"secondary\">\r\n\r\n                    loan type\r\n\r\n                  </InputLabel>\r\n\r\n                  <Select\r\n\r\n                    color=\"secondary\"\r\n\r\n                    onChange={(event) =>\r\n\r\n                      (OtherBankCreditExposure.LoanTypeId = event.target.value)\r\n\r\n                    }\r\n\r\n                    labelId=\"loanType\"\r\n\r\n                    id=\"loanTypeSelected\"\r\n\r\n                    label=\"loanType\"\r\n\r\n                  >\r\n\r\n                    <MenuItem value=\"\">\r\n\r\n                      <em>None</em>\r\n\r\n                    </MenuItem>\r\n\r\n                    {loan.map((yourLoan) => (\r\n\r\n                      <MenuItem\r\n\r\n                        key={yourLoan.Id}\r\n\r\n                        LoanTypeId={yourLoan.Id}\r\n\r\n                        value={yourLoan.Id}\r\n\r\n                      >\r\n\r\n                        {yourLoan.Name}\r\n\r\n                      </MenuItem>\r\n\r\n                    ))}\r\n\r\n                  </Select>\r\n\r\n                </FormControl>\r\n                <p>\r\n\r\n                Reporting Date:\r\n\r\n                  <input\r\n\r\n                    id=\"ReportingDate\"\r\n\r\n                    name=\"ReportingDate\"\r\n\r\n                    label=\"ReportingDate\"\r\n\r\n                    placeholder=\"ReportingDate\"\r\n\r\n                    type=\"date\"\r\n\r\n                    value={\r\n\r\n                      reportingDate.getFullYear().toString() +\r\n\r\n                      \"-\" +\r\n\r\n                      (reportingDate.getMonth() + 1)\r\n\r\n                        .toString()\r\n\r\n                        .padStart(2, 0) +\r\n\r\n                      \"-\" +\r\n\r\n                      reportingDate\r\n\r\n                        .getDate()\r\n\r\n                        .toString()\r\n\r\n                        .padStart(2, 0)\r\n\r\n                    }\r\n\r\n                    onChange={(e) => {\r\n\r\n                      setReportingDate(new Date(e.target.value));\r\n\r\n                      OtherBankCreditExposure.ReportingDate = reportingDate;\r\n\r\n                    }}\r\n\r\n                  />{\" \"}\r\n\r\n                </p>            \r\n                <FormControl variant=\"standard\" sx={{ minWidth: 120 }}>\r\n\r\n                  <InputLabel id=\"countrylbl\" color=\"secondary\">\r\n\r\n                    currency\r\n\r\n                  </InputLabel>\r\n\r\n                  <Select\r\n\r\n                    color=\"secondary\"\r\n\r\n                    onChange={(event) =>\r\n\r\n                      (OtherBankCreditExposure.CurrencyId = event.target.value)\r\n\r\n                    }\r\n\r\n                    labelId=\"CurrecnyId\"\r\n\r\n                    id=\"CurrecnyId\"\r\n\r\n                    label=\"CurrecnyId\"\r\n\r\n                  >\r\n\r\n                    <MenuItem value=\"\">\r\n\r\n                      <em>None</em>\r\n\r\n                    </MenuItem>\r\n\r\n                    {currency.map((yourCurrency) => (\r\n\r\n                      <MenuItem\r\n\r\n                        key={yourCurrency.Id}\r\n\r\n                        CurrecnyId={yourCurrency.Id}\r\n\r\n                        value={yourCurrency.Id}\r\n\r\n                      >\r\n\r\n                        {yourCurrency.Name}\r\n\r\n                      </MenuItem>\r\n\r\n                    ))}\r\n\r\n                  </Select>\r\n\r\n                </FormControl>\r\n\r\n                <LoanTextField\r\n                  id=\"ApprovedAmount\"\r\n                  label=\"ApprovedAmount\"\r\n                  variant=\"standard\"\r\n                  color=\"secondary\"\r\n                  size=\"\"\r\n                  required\r\n                  value={OtherBankCreditExposure.ApprovedAmount}\r\n                  onChange={handleInputChangeOtherBankCreditExposure}\r\n                  name=\"ApprovedAmount\"\r\n                />\r\n                <p>\r\n\r\n                Start Date:\r\n\r\n                  <input\r\n\r\n                    id=\"StartDate\"\r\n\r\n                    name=\"StartDate\"\r\n\r\n                    label=\"StartDate\"\r\n\r\n                    placeholder=\"StartDate\"\r\n\r\n                    type=\"date\"\r\n\r\n                    value={\r\n\r\n                      startDate.getFullYear().toString() +\r\n\r\n                      \"-\" +\r\n\r\n                      (startDate.getMonth() + 1)\r\n\r\n                        .toString()\r\n\r\n                        .padStart(2, 0) +\r\n\r\n                      \"-\" +\r\n\r\n                      startDate\r\n\r\n                        .getDate()\r\n\r\n                        .toString()\r\n\r\n                        .padStart(2, 0)\r\n\r\n                    }\r\n\r\n                    onChange={(e) => {\r\n\r\n                      setStartDate(new Date(e.target.value));\r\n\r\n                      OtherBankCreditExposure.StartDate = startDate;\r\n\r\n                    }}\r\n\r\n                  />{\" \"}\r\n\r\n                </p>\r\n                <p>\r\n\r\n                Maturity Date:\r\n\r\n                  <input\r\n\r\n                    id=\"MaturityDate\"\r\n\r\n                    name=\"MaturityDate\"\r\n\r\n                    label=\"MaturityDate\"\r\n\r\n                    placeholder=\"MaturityDate\"\r\n\r\n                    type=\"date\"\r\n\r\n                    value={\r\n\r\n                      maturityDate.getFullYear().toString() +\r\n\r\n                      \"-\" +\r\n\r\n                      (maturityDate.getMonth() + 1)\r\n\r\n                        .toString()\r\n\r\n                        .padStart(2, 0) +\r\n\r\n                      \"-\" +\r\n\r\n                      maturityDate\r\n\r\n                        .getDate()\r\n\r\n                        .toString()\r\n\r\n                        .padStart(2, 0)\r\n\r\n                    }\r\n\r\n                    onChange={(e) => {\r\n\r\n                      setMaturityDate(new Date(e.target.value));\r\n\r\n                      OtherBankCreditExposure.MaturityDate = maturityDate;\r\n                    }}\r\n\r\n                  />{\" \"}\r\n\r\n                </p>\r\n                <FormControl variant=\"standard\" sx={{ minWidth: 120 }}>\r\n\r\n                  <InputLabel id=\"countrylbl\" color=\"secondary\">\r\n\r\n                    Repayment Frequency\r\n\r\n                  </InputLabel>\r\n\r\n                  <Select\r\n\r\n                    color=\"secondary\"\r\n\r\n                    onChange={(event) =>\r\n                    (OtherBankCreditExposure.RepaymentFrequencyId =\r\n                      event.target.value)\r\n                    }\r\n                    labelId=\"repayment\"\r\n                    id=\"repaymentSelected\"\r\n\r\n                   label=\"repayment\"\r\n                  >\r\n                    <MenuItem value=\"\">\r\n\r\n                      <em>None</em>\r\n\r\n                    </MenuItem>\r\n\r\n                    {GetRepayment.map((yourRepayment) => (\r\n\r\n                      <MenuItem\r\n\r\n                        key={yourRepayment.Id}\r\n\r\n                        RepaymentFrequencyId={yourRepayment.Id}\r\n\r\n                        value={yourRepayment.Id}\r\n\r\n                      >\r\n\r\n                        {yourRepayment.Name}\r\n\r\n                      </MenuItem>\r\n\r\n                    ))}\r\n\r\n                  </Select>\r\n\r\n                </FormControl>\r\n                <LoanTextField\r\n                  id=\"NumberOfInstallment\"\r\n                  label=\"NumberOfInstallment\"\r\n                  variant=\"standard\"\r\n                  color=\"secondary\"\r\n                  size=\"\"\r\n                  required\r\n                  value={OtherBankCreditExposure.NumberOfInstallment}\r\n                  onChange={handleInputChangeOtherBankCreditExposure}\r\n                  name=\"NumberOfInstallment\"\r\n                />\r\n                <LoanTextField\r\n                  id=\"InstallmentAmount\"\r\n                  label=\"InstallmentAmount\"\r\n                  variant=\"standard\"\r\n                  color=\"secondary\"\r\n                  size=\"\"\r\n                  required\r\n                  value={OtherBankCreditExposure.InstallmentAmount}\r\n                  onChange={handleInputChangeOtherBankCreditExposure}\r\n                  name=\"InstallmentAmount\"\r\n                />\r\n                <LoanTextField\r\n                  id=\"OutstandingLoanBalance\"\r\n                  label=\"OutstandingLoanBalance\"\r\n                  variant=\"standard\"\r\n                  color=\"secondary\"\r\n                  size=\"\"\r\n                  required\r\n                  value={OtherBankCreditExposure.OutstandingLoanBalance}\r\n                  onChange={handleInputChangeOtherBankCreditExposure}\r\n                  name=\"OutstandingLoanBalance\"\r\n                />\r\n                <FormControl variant=\"standard\" sx={{ minWidth: 120 }}>\r\n\r\n                  <InputLabel id=\"countrylbl\" color=\"secondary\">\r\n\r\n                    Loan Status\r\n\r\n                  </InputLabel>\r\n\r\n                  <Select\r\n\r\n                    color=\"secondary\"\r\n\r\n                    onChange={(event) =>\r\n\r\n                      (OtherBankCreditExposure.LoanStatusId = event.target.value)\r\n\r\n                    }\r\n\r\n                    labelId=\"SectorTypeId\"\r\n\r\n                    id=\"SectorTypeSelected\"\r\n\r\n                    label=\"SectorTypeId\"\r\n\r\n                  >\r\n\r\n                    <MenuItem value=\"\">\r\n\r\n                      <em>None</em>\r\n\r\n                    </MenuItem>\r\n\r\n                    {loanStatus.map((yourLoanStatus) => (\r\n\r\n                      <MenuItem\r\n\r\n                        key={yourLoanStatus.Id}\r\n\r\n                        LoanStatusId={yourLoanStatus.Id}\r\n\r\n                        value={yourLoanStatus.Id}\r\n\r\n                      >\r\n\r\n                        {yourLoanStatus.Name}\r\n\r\n                      </MenuItem>\r\n\r\n                    ))}\r\n\r\n                  </Select>\r\n\r\n                </FormControl>\r\n\r\n                <LoanTextField\r\n                  id=\"NoOfDaysInArrears\"\r\n                  label=\"NoOfDaysInArrears\"\r\n                  variant=\"standard\"\r\n                  color=\"secondary\"\r\n                  size=\"\"\r\n                  required\r\n                  value={OtherBankCreditExposure.NoOfDaysInArrears}\r\n                  onChange={handleInputChangeOtherBankCreditExposure}\r\n                  name=\"NoOfDaysInArrears\"\r\n                />\r\n                <LoanTextField\r\n                  id=\"BalanceOverdue\"\r\n                  label=\"BalanceOverdue\"\r\n                  variant=\"standard\"\r\n                  color=\"secondary\"\r\n                  size=\"\"\r\n                  required\r\n                  value={OtherBankCreditExposure.BalanceOverdue}\r\n                  onChange={handleInputChangeOtherBankCreditExposure}\r\n                  name=\"BalanceOverdue\"\r\n                />\r\n                <LoanTextField\r\n                  id=\"NoOfRestructuring\"\r\n                  label=\"NoOfRestructuring\"\r\n                  variant=\"standard\"\r\n                  color=\"secondary\"\r\n                  size=\"\"\r\n                  required\r\n                  value={OtherBankCreditExposure.NoOfRestructuring}\r\n                  onChange={handleInputChangeOtherBankCreditExposure}\r\n                  name=\"NoOfRestructuring\"\r\n                />\r\n                <LoanTextField\r\n                  id=\"RestructuredCreditReferenceNumber\"\r\n                  label=\"RestructuredCreditReferenceNumber\"\r\n                  variant=\"standard\"\r\n                  color=\"secondary\"\r\n                  size=\"\"\r\n                  required\r\n                  value={OtherBankCreditExposure.RestructuredCreditReferenceNumber}\r\n                  onChange={handleInputChangeOtherBankCreditExposure}\r\n                  name=\"RestructuredCreditReferenceNumber\"\r\n                />\r\n                <FormControl variant=\"standard\" sx={{ minWidth: 120 }}>\r\n\r\n                  <InputLabel id=\"countrylbl\" color=\"secondary\">\r\n\r\n                    Sector Type\r\n\r\n                  </InputLabel>\r\n\r\n                  <Select\r\n\r\n                    color=\"secondary\"\r\n\r\n                    onChange={(event) => {\r\n\r\n                      setSelectedSectorId(event.target.value);\r\n\r\n                      industry(event.target.value);\r\n\r\n                      OtherBankCreditExposure.SectorTypeId = event.target.value;\r\n\r\n                    }}\r\n\r\n                    labelId=\"SectorTypeId\"\r\n\r\n                    id=\"SectorTypeSelected\"\r\n\r\n                    label=\"SectorTypeId\"\r\n\r\n                  >\r\n\r\n                    <MenuItem value=\"\">\r\n\r\n                      <em>None</em>\r\n\r\n                    </MenuItem>\r\n\r\n                    {selectedSector.map((yourSector) => (\r\n\r\n                      <MenuItem\r\n\r\n                        key={yourSector.Id}\r\n\r\n                        SectorTypeId={yourSector.Id}\r\n\r\n                        value={yourSector.Id}\r\n\r\n                      >\r\n\r\n                        {yourSector.Name}\r\n\r\n                      </MenuItem>\r\n\r\n                    ))}\r\n\r\n                  </Select>\r\n\r\n                </FormControl>\r\n\r\n                <FormControl variant=\"standard\" sx={{ minWidth: 120 }}>\r\n\r\n                  <InputLabel id=\"countrylbl\" color=\"secondary\">\r\n\r\n                    industry Type\r\n\r\n                  </InputLabel>\r\n\r\n                  <Select\r\n\r\n                    color=\"secondary\"\r\n\r\n                    onChange={(event) =>\r\n\r\n                      (OtherBankCreditExposure.IndustryTypeId = event.target.value)\r\n\r\n                    }\r\n\r\n                    labelId=\"IndustryTypeId\"\r\n\r\n                    id=\"IndustryTypeSelected\"\r\n\r\n                    label=\"IndustryTypeId\"\r\n\r\n                  >\r\n\r\n                    <MenuItem value=\"\">\r\n\r\n                      <em>None</em>\r\n\r\n                    </MenuItem>\r\n\r\n                    {getIndustry.map((yourIndustry) => (\r\n\r\n                      <MenuItem\r\n\r\n                        key={yourIndustry.Id}\r\n\r\n                        IndustryTypeId={yourIndustry.Id}\r\n\r\n                        value={yourIndustry.Id}\r\n\r\n                      >\r\n\r\n                        {yourIndustry.Name}\r\n\r\n                      </MenuItem>\r\n\r\n                    ))}\r\n\r\n                  </Select>\r\n\r\n                </FormControl>\r\n                <div>\r\n                  {currentFile && (\r\n                    <div className=\"progress\">\r\n                      <div\r\n                        className=\"progress-bar progress-bar-info progress-bar-striped\"\r\n                        role=\"progressbar\"\r\n                        aria-valuenow={progress}\r\n                        aria-valuemin=\"0\"\r\n                        aria-valuemax=\"100\"\r\n                        style={{ width: progress + \"%\" }}\r\n                      >\r\n                        {progress}%\r\n                      </div>\r\n                    </div>\r\n                  )}\r\n                  <label className=\"btn btn-default\">\r\n                    <input type=\"file\" onChange={selectFileCreditInfo} />\r\n                  </label>\r\n\r\n                  <button\r\n                    className=\"btn btn-success\"\r\n                    disabled={!selectedFiles}\r\n                    onClick={uploadCreditInfo}\r\n                  >\r\n                    Credit Information Document\r\n                  </button>\r\n                  <div className=\"alert alert-light\" role=\"alert\">\r\n                    {message}\r\n                  </div>\r\n                </div>\r\n\r\n\r\n              </div>\r\n\r\n              <div className=\"flex justify-between\">\r\n                <button\r\n                  className=\"bg-[purple] hover:bg-purple-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\"\r\n                  onClick={saveOtherBankCreditExposure}\r\n                >\r\n                  Submit\r\n                </button>\r\n              </div>\r\n            </div>\r\n          }\r\n        </div>\r\n      </CompanyModal>\r\n      <CompanyModal\r\n\r\n        isOpen={isOtherBankCreditExposureEditModalOpen}\r\n\r\n        onClose={handleCompanyOtherBankEditCloseModal}\r\n\r\n        title=\"guarantor edit information\"\r\n\r\n      >\r\n\r\n        <div>\r\n\r\n          <form onSubmit={updateOtherBank}>\r\n\r\n            <div className=\"relative center justify-center flex-1 w-full max-w-full grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\">\r\n\r\n              <LoanTextField\r\n\r\n                id=\"FullName\"\r\n\r\n                label=\"FullName\"\r\n\r\n                value={editOtherBank.FullName}\r\n\r\n                onChange={handleInputChangeEditOtherBank}\r\n\r\n                name=\"FullName\"\r\n\r\n              />\r\n\r\n              <LoanTextField\r\n\r\n                id=\"TinNumber\"\r\n\r\n                label=\"TinNumber\"\r\n\r\n                value={editOtherBank.TinNumber}\r\n\r\n                onChange={handleInputChangeEditOtherBank}\r\n\r\n                name=\"TinNumber\"\r\n\r\n              />\r\n\r\n              <LoanTextField\r\n\r\n                id=\"BankName\"\r\n\r\n                label=\"BankName\"\r\n\r\n                value={editOtherBank.BankName}\r\n\r\n                onChange={handleInputChangeEditOtherBank}\r\n\r\n                name=\"BankName\"\r\n\r\n              />\r\n\r\n              <LoanTextField\r\n\r\n                id=\"BranchName\"\r\n\r\n                label=\"BranchName\"\r\n\r\n                value={editOtherBank.BranchName}\r\n\r\n                onChange={handleInputChangeEditOtherBank}\r\n\r\n                name=\"BranchName\"\r\n\r\n              />\r\n\r\n              <LoanTextField\r\n\r\n                id=\"AccountNumber\"\r\n\r\n                label=\"AccountNumber\"\r\n\r\n                value={editOtherBank.AccountNumber}\r\n\r\n                onChange={handleInputChangeEditOtherBank}\r\n\r\n                name=\"AccountNumber\"\r\n\r\n              />\r\n\r\n              {/* LoanTypeId */}\r\n\r\n              <FormControl variant=\"standard\" sx={{ minWidth: 120 }}>\r\n\r\n                <InputLabel id=\"countrylbl\" color=\"secondary\">\r\n\r\n                  loan type\r\n\r\n                </InputLabel>\r\n\r\n                <Select\r\n\r\n                  color=\"secondary\"\r\n\r\n                  onChange={(event) =>\r\n\r\n                    (editOtherBank.LoanTypeId = event.target.value)\r\n\r\n                  }\r\n\r\n                  labelId=\"loanType\"\r\n\r\n                  id=\"loanTypeSelected\"\r\n\r\n                  label=\"loanType\"\r\n\r\n                >\r\n\r\n                  <MenuItem value=\"\">\r\n\r\n                    <em>None</em>\r\n\r\n                  </MenuItem>\r\n\r\n                  {loan.map((yourLoan) => (\r\n\r\n                    <MenuItem\r\n\r\n                      key={yourLoan.Id}\r\n\r\n                      LoanTypeId={yourLoan.Id}\r\n\r\n                      value={yourLoan.Id}\r\n\r\n                    >\r\n\r\n                      {yourLoan.Name}\r\n\r\n                    </MenuItem>\r\n\r\n                  ))}\r\n\r\n                </Select>\r\n\r\n              </FormControl>\r\n              <p>\r\n\r\n                 Reporting Date:\r\n\r\n<input\r\n\r\nid=\"ReportingDate\"\r\n\r\nname=\"ReportingDate\"\r\n\r\nlabel=\"ReportingDate\"\r\n\r\nplaceholder=\"ReportingDate\"\r\n\r\ntype=\"date\"\r\n\r\nvalue={\r\n\r\n  reportingDateEdit.getFullYear().toString() +\r\n\r\n\"-\" +\r\n\r\n(reportingDateEdit.getMonth() + 1)\r\n\r\n.toString()\r\n\r\n.padStart(2, 0) +\r\n\r\n\"-\" +\r\n\r\nreportingDateEdit\r\n\r\n.getDate()\r\n\r\n.toString()\r\n\r\n.padStart(2, 0)\r\n\r\n}\r\n\r\nonChange={(e) => {\r\n\r\nsetReportingDateEdit(new Date(e.target.value));\r\n\r\neditOtherBank.ReportingDate = reportingDateEdit;\r\n\r\n}}\r\n\r\n/>{\" \"}\r\n\r\n</p> \r\n\r\n              {/* <LoanTextField\r\n\r\n                id=\"ReportingDate\"\r\n\r\n                label=\"ReportingDate\"\r\n\r\n                value={editOtherBank.ReportingDate}\r\n\r\n                onChange={handleInputChangeEditOtherBank}\r\n\r\n                name=\"ReportingDate\"\r\n\r\n              /> */}\r\n\r\n              {/* CurrencyId */}\r\n\r\n              <FormControl variant=\"standard\" sx={{ minWidth: 120 }}>\r\n\r\n                <InputLabel id=\"countrylbl\" color=\"secondary\">\r\n\r\n                  currency\r\n\r\n                </InputLabel>\r\n\r\n                <Select\r\n\r\n                  color=\"secondary\"\r\n\r\n                  onChange={(event) =>\r\n\r\n                    (editOtherBank.CurrencyId = event.target.value)\r\n\r\n                  }\r\n\r\n                  labelId=\"loanType\"\r\n\r\n                  id=\"loanTypeSelected\"\r\n\r\n                  label=\"loanType\"\r\n\r\n                >\r\n\r\n                  <MenuItem value=\"\">\r\n\r\n                    <em>None</em>\r\n\r\n                  </MenuItem>\r\n\r\n                  {currency.map((yourCurrency) => (\r\n\r\n                    <MenuItem\r\n\r\n                      key={yourCurrency.Id}\r\n\r\n                      LoanTypeId={yourCurrency.Id}\r\n\r\n                      value={yourCurrency.Id}\r\n\r\n                    >\r\n\r\n                      {yourCurrency.Name}\r\n\r\n                    </MenuItem>\r\n\r\n                  ))}\r\n\r\n                </Select>\r\n\r\n              </FormControl>\r\n\r\n              <LoanTextField\r\n\r\n                id=\"ApprovedAmount\"\r\n\r\n                label=\"ApprovedAmount\"\r\n\r\n                value={editOtherBank.ApprovedAmount}\r\n\r\n                onChange={handleInputChangeEditOtherBank}\r\n\r\n                name=\"ApprovedAmount\"\r\n\r\n              />\r\n                 <p>\r\n\r\n                 Start Date:\r\n\r\n<input\r\n\r\nid=\"StartDate\"\r\n\r\nname=\"StartDate\"\r\n\r\nlabel=\"StartDate\"\r\n\r\nplaceholder=\"StartDate\"\r\n\r\ntype=\"date\"\r\n\r\nvalue={\r\n\r\n  startDateEdit.getFullYear().toString() +\r\n\r\n\"-\" +\r\n\r\n(startDateEdit.getMonth() + 1)\r\n\r\n.toString()\r\n\r\n.padStart(2, 0) +\r\n\r\n\"-\" +\r\n\r\nstartDateEdit\r\n\r\n.getDate()\r\n\r\n.toString()\r\n\r\n.padStart(2, 0)\r\n\r\n}\r\n\r\nonChange={(e) => {\r\n\r\nsetStartDateEdit(new Date(e.target.value));\r\n\r\neditOtherBank.StartDate = startDateEdit;\r\n\r\n}}\r\n\r\n/>{\" \"}\r\n\r\n</p> \r\n\r\n              {/* <LoanTextField\r\n\r\n                id=\"StartDate\"\r\n\r\n                label=\"StartDate\"\r\n\r\n                value={editOtherBank.StartDate}\r\n\r\n                onChange={handleInputChangeEditOtherBank}\r\n\r\n                name=\"StartDate\"\r\n\r\n              /> */}\r\n\r\n              {/* <LoanTextField\r\n\r\n                id=\"MaturityDate\"\r\n\r\n                label=\"MaturityDate\"\r\n\r\n                value={editOtherBank.MaturityDate}\r\n\r\n                onChange={handleInputChangeEditOtherBank}\r\n\r\n                name=\"MaturityDate\"\r\n\r\n              /> */}\r\n              <p>\r\n\r\n              Maturity Date:\r\n\r\n  <input\r\n\r\n    id=\"MaturityDate\"\r\n\r\n    name=\"MaturityDate\"\r\n\r\n    label=\"MaturityDate\"\r\n\r\n    placeholder=\"MaturityDate\"\r\n\r\n    type=\"date\"\r\n\r\n    value={\r\n\r\n      maturityDateEdit.getFullYear().toString() +\r\n\r\n      \"-\" +\r\n\r\n      (maturityDateEdit.getMonth() + 1)\r\n\r\n        .toString()\r\n\r\n        .padStart(2, 0) +\r\n\r\n      \"-\" +\r\n\r\n      maturityDateEdit\r\n\r\n        .getDate()\r\n\r\n        .toString()\r\n\r\n        .padStart(2, 0)\r\n\r\n    }\r\n\r\n    onChange={(e) => {\r\n\r\n      setMaturityDateEdit(new Date(e.target.value));\r\n\r\n      editOtherBank.MaturityDate = maturityDateEdit;\r\n\r\n    }}\r\n\r\n  />{\" \"}\r\n\r\n</p>            \r\n\r\n\r\n              <FormControl variant=\"standard\" sx={{ minWidth: 120 }}>\r\n\r\n                <InputLabel id=\"countrylbl\" color=\"secondary\">\r\n\r\n                  Repayment Frequency\r\n\r\n                </InputLabel>\r\n\r\n                <Select\r\n\r\n                  color=\"secondary\"\r\n\r\n                  onChange={(event) =>\r\n\r\n                  (editOtherBank.RepaymentFrequencyId =\r\n\r\n                    event.target.value)\r\n\r\n                  }\r\n\r\n                  labelId=\"repayment\"\r\n\r\n                  id=\"repaymentSelected\"\r\n\r\n                  label=\"repayment\"\r\n\r\n                >\r\n\r\n                  <MenuItem value=\"\">\r\n\r\n                    <em>None</em>\r\n\r\n                  </MenuItem>\r\n\r\n                  {GetRepayment.map((yourRepayment) => (\r\n\r\n                    <MenuItem\r\n\r\n                      key={yourRepayment.Id}\r\n\r\n                      RepaymentFrequencyId={yourRepayment.Id}\r\n\r\n                      value={yourRepayment.Id}\r\n\r\n                    >\r\n\r\n                      {yourRepayment.Name}\r\n\r\n                    </MenuItem>\r\n\r\n                  ))}\r\n\r\n                </Select>\r\n\r\n              </FormControl>\r\n\r\n              <LoanTextField\r\n                  id=\"NumberOfInstallment\"\r\n                  label=\"NumberOfInstallment\"\r\n                  variant=\"standard\"\r\n                  color=\"secondary\"\r\n                  size=\"\"\r\n                  required\r\n                  value={editOtherBank.NumberOfInstallment}\r\n                  onChange={handleInputChangeEditOtherBank}\r\n                  name=\"NumberOfInstallment\"\r\n                />\r\n              <LoanTextField\r\n\r\n                id=\"InstallmentAmount\"\r\n\r\n                label=\"InstallmentAmount\"\r\n\r\n                value={editOtherBank.InstallmentAmount}\r\n\r\n                onChange={handleInputChangeEditOtherBank}\r\n\r\n                name=\"InstallmentAmount\"\r\n\r\n              />\r\n\r\n              <LoanTextField\r\n\r\n                id=\"OutstandingLoanBalance\"\r\n\r\n                label=\"OutstandingLoanBalance\"\r\n\r\n                value={editOtherBank.OutstandingLoanBalance}\r\n\r\n                onChange={handleInputChangeEditOtherBank}\r\n\r\n                name=\"OutstandingLoanBalance\"\r\n\r\n              />\r\n\r\n              {/* LoanStatusId */}\r\n\r\n              <FormControl variant=\"standard\" sx={{ minWidth: 120 }}>\r\n\r\n                <InputLabel id=\"countrylbl\" color=\"secondary\">\r\n\r\n                  Loan Status\r\n\r\n                </InputLabel>\r\n\r\n                <Select\r\n\r\n                  color=\"secondary\"\r\n\r\n                  onChange={(event) =>\r\n\r\n                    (editOtherBank.LoanStatusId = event.target.value)\r\n\r\n                  }\r\n\r\n                  labelId=\"LoanStatusId\"\r\n\r\n                  id=\"LoanStatusId\"\r\n\r\n                  label=\"LoanStatusId\"\r\n\r\n                >\r\n\r\n                  <MenuItem value=\"\">\r\n\r\n                    <em>None</em>\r\n\r\n                  </MenuItem>\r\n\r\n                  {loanStatus.map((yourLoanStatus) => (\r\n\r\n                    <MenuItem\r\n\r\n                      key={yourLoanStatus.Id}\r\n\r\n                      LoanStatusId={yourLoanStatus.Id}\r\n\r\n                      value={yourLoanStatus.Id}\r\n\r\n                    >\r\n\r\n                      {yourLoanStatus.Name}\r\n\r\n                    </MenuItem>\r\n\r\n                  ))}\r\n\r\n                </Select>\r\n\r\n              </FormControl>\r\n\r\n              <LoanTextField\r\n\r\n                id=\"NoOfDaysInArrears\"\r\n\r\n                label=\"NoOfDaysInArrears\"\r\n\r\n                value={editOtherBank.NoOfDaysInArrears}\r\n\r\n                onChange={handleInputChangeEditOtherBank}\r\n\r\n                name=\"NoOfDaysInArrears\"\r\n\r\n              />\r\n\r\n              <LoanTextField\r\n\r\n                id=\"BalanceOverdue\"\r\n\r\n                label=\"BalanceOverdue\"\r\n\r\n                value={editOtherBank.BalanceOverdue}\r\n\r\n                onChange={handleInputChangeEditOtherBank}\r\n\r\n                name=\"BalanceOverdue\"\r\n\r\n              />\r\n\r\n              <LoanTextField\r\n\r\n                id=\"NoOfRestructuring\"\r\n\r\n                label=\"NoOfRestructuring\"\r\n\r\n                value={editOtherBank.NoOfRestructuring}\r\n\r\n                onChange={handleInputChangeEditOtherBank}\r\n\r\n                name=\"NoOfRestructuring\"\r\n\r\n              />\r\n\r\n              <LoanTextField\r\n\r\n                id=\"RestructuredCreditReferenceNumber\"\r\n\r\n                label=\"RestructuredCreditReferenceNumber\"\r\n\r\n                value={editOtherBank.RestructuredCreditReferenceNumber}\r\n\r\n                onChange={handleInputChangeEditOtherBank}\r\n\r\n                name=\"RestructuredCreditReferenceNumber\"\r\n\r\n              />\r\n\r\n              {/* SectorTypeId */}\r\n\r\n              <FormControl variant=\"standard\" sx={{ minWidth: 120 }}>\r\n\r\n                <InputLabel id=\"countrylbl\" color=\"secondary\">\r\n\r\n                  Sector Type\r\n\r\n                </InputLabel>\r\n\r\n                <Select\r\n\r\n                  color=\"secondary\"\r\n\r\n                  onChange={(event) => {\r\n\r\n                    setSelectedSectorId(event.target.value);\r\n\r\n                    industry(event.target.value);\r\n\r\n                    editOtherBank.SectorTypeId = event.target.value;\r\n\r\n                  }}\r\n\r\n                  labelId=\"SectorTypeId\"\r\n\r\n                  id=\"SectorTypeSelected\"\r\n\r\n                  label=\"SectorTypeId\"\r\n\r\n                >\r\n\r\n                  <MenuItem value=\"\">\r\n\r\n                    <em>None</em>\r\n\r\n                  </MenuItem>\r\n\r\n                  {selectedSector.map((yourSector) => (\r\n\r\n                    <MenuItem\r\n\r\n                      key={yourSector.Id}\r\n\r\n                      SectorTypeId={yourSector.Id}\r\n\r\n                      value={yourSector.Id}\r\n\r\n                    >\r\n\r\n                      {yourSector.Name}\r\n\r\n                    </MenuItem>\r\n\r\n                  ))}\r\n\r\n                </Select>\r\n\r\n              </FormControl>\r\n\r\n              <FormControl variant=\"standard\" sx={{ minWidth: 120 }}>\r\n\r\n                <InputLabel id=\"countrylbl\" color=\"secondary\">\r\n\r\n                  industry Type\r\n\r\n                </InputLabel>\r\n\r\n                <Select\r\n\r\n                  color=\"secondary\"\r\n\r\n                  onChange={(event) =>\r\n\r\n                    (editOtherBank.IndustryTypeId = event.target.value)\r\n\r\n                  }\r\n\r\n                  labelId=\"IndustryTypeId\"\r\n\r\n                  id=\"IndustryTypeSelected\"\r\n\r\n                  label=\"IndustryTypeId\"\r\n\r\n                >\r\n\r\n                  <MenuItem value=\"\">\r\n\r\n                    <em>None</em>\r\n\r\n                  </MenuItem>\r\n\r\n                  {getIndustry.map((yourIndustry) => (\r\n\r\n                    <MenuItem\r\n\r\n                      key={yourIndustry.Id}\r\n\r\n                      IndustryTypeId={yourIndustry.Id}\r\n\r\n                      value={yourIndustry.Id}\r\n\r\n                    >\r\n\r\n                      {yourIndustry.Name}\r\n\r\n                    </MenuItem>\r\n\r\n                  ))}\r\n\r\n                </Select>\r\n\r\n              </FormControl>\r\n\r\n              {/* IndustryTypeId */}\r\n\r\n\r\n\r\n              <div>\r\n                {currentFile && (\r\n                  <div className=\"progress\">\r\n                    <div\r\n                      className=\"progress-bar progress-bar-info progress-bar-striped\"\r\n                      role=\"progressbar\"\r\n                      aria-valuenow={progress}\r\n                      aria-valuemin=\"0\"\r\n                      aria-valuemax=\"100\"\r\n                      style={{ width: progress + \"%\" }}\r\n                    >\r\n                      {progress}%\r\n                    </div>\r\n                  </div>\r\n                )}\r\n                <label className=\"btn btn-default\">\r\n                  <input type=\"file\" onChange={selectFileCreditInfoEdit} />\r\n                </label>\r\n\r\n                <button\r\n                  className=\"btn btn-success\"\r\n                  disabled={!selectedFiles}\r\n                  onChange={\r\n\r\n                    editOtherBank.CreditInformationDocument = selectedPathCreditInfoEdit\r\n\r\n                  }\r\n                  onClick={uploadCreditInfoEdit}\r\n                >\r\n                  Credit Information Document\r\n                </button>\r\n                <div className=\"alert alert-light\" role=\"alert\">\r\n                  {message}\r\n                </div>\r\n              </div>\r\n\r\n            </div>\r\n\r\n            <div>\r\n\r\n              <button className=\"bg-[purple] hover:bg-purple-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\">\r\n\r\n                Update\r\n\r\n              </button>\r\n\r\n            </div>\r\n\r\n          </form>\r\n\r\n        </div>\r\n\r\n      </CompanyModal>\r\n\r\n\r\n\r\n    </div>\r\n\r\n  );\r\n\r\n\r\n};\r\nexport default ViewOtherBankCreditExposure;","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\SoleAndPartnership\\SoleTax\\ViewSoleTax.jsx",["1182","1183","1184","1185","1186"],[],"import { useState, useEffect } from \"react\";\r\nimport CompanyModal from \"../../Common/CompanyModal\";\r\nimport LoanTextField from \"../../../Common/LoanTextField\";\r\nimport CommonServices from \"../../Common/CommonServices\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nconst ViewSoleTax = ({\r\n  holdSoleTax,\r\n  taxId,\r\n  isCompanyTaxModalOpen,\r\n  handleCompanyTaxCloseModal,\r\n}) => {\r\n  //upload\r\n  const [newCertificate, setNewCertificate] = useState(null);\r\n  const [selectedFiles, setSelectedFiles] = useState(undefined);\r\n  const [currentFile, setCurrentFile] = useState(undefined);\r\n  const [fileInfos, setFileInfos] = useState([]);\r\n  const [progress, setProgress] = useState(0);\r\n  const [message, setMessage] = useState(\"\");\r\n  const selectFile = (event) => {\r\n    setSelectedFiles(event.target.files);\r\n  };\r\n  //upload 1\r\n  const uploadCertificate = () => {\r\n    let currentFile = selectedFiles[0];\r\n    setProgress(0);\r\n    setCurrentFile(currentFile);\r\n    CommonServices.upload(currentFile, (event) => {\r\n      setProgress(Math.round((100 * event.loaded) / event.total));\r\n    })\r\n      .then((response) => {\r\n        setMessage(response.data.message);\r\n        setNewCertificate(response.data.Result);\r\n      })\r\n      .then((files) => {\r\n        setFileInfos(files.data);\r\n      })\r\n      .catch(() => {\r\n        setProgress(0);\r\n        setCurrentFile(undefined);\r\n      });\r\n    setSelectedFiles(undefined);\r\n  };\r\n  const [issueDate, setIssueDate] = useState(new Date());\r\n  const [expireddate, setExpireddate] = useState(new Date());\r\n  const [isCompanyTaxEditModalOpen, setIsCompanyTaxEditModalOpen] =\r\n    useState(false);\r\n  function handleCompanyTaxEditCloseModal() {\r\n    setIsCompanyTaxEditModalOpen(false);\r\n  }\r\n  function handleCompanyTaxEditOpenModal() {\r\n    setIsCompanyTaxEditModalOpen(true);\r\n  }\r\n  function handleCompanyTaxEditCloseModal() {\r\n    setIsCompanyTaxEditModalOpen(false);\r\n  }\r\n  const [taxInformationId, setTaxInformationId] = useState();\r\n  const [editTax, setEditTax] = useState({\r\n    Id: taxInformationId,\r\n    Name: \"\",\r\n    TinNo: \"\",\r\n    IssueDate: \"\",\r\n    Expireddate: \"\",\r\n    TaxDebit: \"\",\r\n    Certificate: \"\",\r\n  });\r\n  const handleInputChangeEditTax = (event) => {\r\n    const { name, value } = event.target;\r\n    setEditTax({ ...editTax,\r\n      [name]: value });\r\n  };\r\n  const updateTaxById = (taxInformationId) => {\r\n    CommonServices.getTax(taxInformationId)\r\n      .then((res) => {\r\n        setEditTax({\r\n          ...editTax,\r\n          Id: taxInformationId,\r\n          Name: res.data.Result.Name,\r\n          TinNo: res.data.Result.TinNo,\r\n          IssueDate: res.data.Result.IssueDate,\r\n          Expireddate: res.data.Result.Expireddate,\r\n          TaxDebit: res.data.Result.TaxDebit,\r\n          Certificate: res.data.Result.Certificate,\r\n        });                \r\n      })\r\n      .catch((err) => console.log(err));\r\n  };\r\n  useEffect(() => {\r\n    updateTaxById();\r\n  }, []);\r\n  const updateTax = () => {\r\n    CommonServices.updateTax(taxInformationId, editTax)\r\n      .then((response) => {})\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n  useEffect(() => {\r\n    updateTax();\r\n  }, []);\r\n  //add married tax\r\n  const [toggleTax, setToggleTax] = useState(false);\r\n  const initialTaxState = {\r\n    Id: null,\r\n    Name: \"\",\r\n    TinNo: \"\",\r\n    Certificate: \"\",\r\n    IssueDate: \"\",\r\n    Expireddate: \"\",\r\n    TaxDebit: \"\",\r\n  };\r\n  const [submitted, setSubmitted] = useState(false);\r\n  const [tax, setTax] = useState(initialTaxState);\r\n  const newTax = () => {\r\n    setTax(initialTaxState);\r\n    setSubmitted(false);\r\n  };\r\n  const handleInputChangeTax = (event) => {\r\n    const { name, value } = event.target;\r\n    setTax({ ...tax,      \r\n      [name]: value });\r\n  };\r\n  const saveTax = () => {\r\n    var data = {\r\n      Name: tax.Name,\r\n      TinNo: tax.TinNo,\r\n      Certificate: newCertificate,\r\n      IssueDate: issueDate,\r\n      Expireddate: expireddate,\r\n      TaxDebit: tax.TaxDebit,\r\n    };\r\n    CommonServices.addTax(data, taxId)\r\n      .then((response) => {\r\n        setTax({\r\n          Id: response.data.Id,\r\n          Name: response.data.Name,\r\n          TinNo: response.data.TinNo,\r\n          Certificate: response.data.Certificate,\r\n          IssueDate: response.data.IssueDate,\r\n          Expireddate: response.data.Expireddate,\r\n          TaxDebit: response.data.TaxDebit,\r\n        });\r\n        setSubmitted(true);\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n  //end add married tax\r\n  return (\r\n    <div>\r\n      <CompanyModal\r\n        isOpen={isCompanyTaxModalOpen}\r\n        onClose={handleCompanyTaxCloseModal}\r\n        title=\"view Tax information\"\r\n      >\r\n        <div className=\"rounded-lg overflow-hidden\">\r\n          {holdSoleTax ? (\r\n            <>\r\n              <table className=\"table table-bordered table-striped bg-purple-100\">\r\n                <thead>\r\n                  <th className=\"px-2 py-4\"> Name </th>\r\n                  <th className=\"px-2 py-4\"> TinNo </th>\r\n                  <th className=\"px-2 py-4\"> Issue Date </th>\r\n                  <th className=\"px-2 py-4\"> Expired date </th>\r\n                  <th className=\"px-2 py-4\"> Tax Debi </th>\r\n                  <th className=\"px-2 py-4\">Certificate</th>\r\n                </thead>\r\n                <tbody>\r\n                  <tr>\r\n                    <td>{holdSoleTax.Name}</td>\r\n                    <td>{holdSoleTax.TinNo}</td>\r\n                    <td>{holdSoleTax.IssueDate}</td>\r\n                    <td>{holdSoleTax.Expireddate}</td>\r\n                    <td>{holdSoleTax.TaxDebit}</td>\r\n                    <td>{\"\"}</td>\r\n                    <td>{holdSoleTax.Certificate}</td>\r\n                    <td>\r\n                      <button\r\n                        onClick={() => {\r\n                          handleCompanyTaxEditOpenModal();\r\n                          updateTaxById(holdSoleTax.Id);\r\n                          setTaxInformationId(holdSoleTax.Id);\r\n                        }}\r\n                        className=\"text-purple-600 rounded-md font-semibold \"\r\n                      >\r\n                        Edit\r\n                      </button>\r\n                    </td>\r\n                  </tr>\r\n                </tbody>\r\n              </table>\r\n            </>\r\n          ) : (\r\n            \"\"\r\n          )}\r\n        </div>\r\n        <button\r\n          onClick={() => setToggleTax(!toggleTax)}\r\n          className=\"text-purple-600 rounded-md font-medium \"\r\n        >\r\n          Add tax\r\n        </button>\r\n\r\n        {toggleTax && (\r\n          <div className=\"submit-form\">\r\n            {submitted ? (\r\n              <div>\r\n                <h4>You submitted successfully!</h4>\r\n              </div>\r\n            ) : (\r\n              <div className=\"relative center justify-center flex-1 w-full max-w-full grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\">\r\n                <LoanTextField\r\n                  id=\"Name\"\r\n                  label=\"Name\"\r\n                  value={tax.Name}\r\n                  onChange={handleInputChangeTax}\r\n                  name=\"Name\"\r\n                />\r\n                <LoanTextField\r\n                  id=\"TinNo\"\r\n                  label=\"TinNo\"\r\n                  value={tax.TinNo}\r\n                  onChange={handleInputChangeTax}\r\n                  name=\"TinNo\"\r\n                />\r\n                <div>\r\n                  {currentFile && (\r\n                    <div className=\"progress\">\r\n                      <div\r\n                        className=\"progress-bar progress-bar-info progress-bar-striped\"\r\n                        role=\"progressbar\"\r\n                        aria-valuenow={progress}\r\n                        aria-valuemin=\"0\"\r\n                        aria-valuemax=\"100\"\r\n                        style={{ width: progress + \"%\" }}\r\n                      >\r\n                        {progress}%\r\n                      </div>\r\n                    </div>\r\n                  )}\r\n                  <label className=\"btn btn-default\">\r\n                    <input type=\"file\" onChange={selectFile} />\r\n                  </label>\r\n                  <button\r\n                    className=\"btn btn-success\"\r\n                    disabled={!selectedFiles}\r\n                    onClick={uploadCertificate}\r\n                  >\r\n                    Tax Certificate\r\n                  </button>\r\n                  <div className=\"alert alert-light\" role=\"alert\">\r\n                    {message}\r\n                  </div>\r\n                </div>\r\n                <p>\r\n                  issue Date:\r\n                  <div>\r\n                    <DatePicker\r\n                      selected={issueDate}\r\n                      onChange={(issueDate) => setIssueDate(issueDate)}\r\n                    />\r\n                  </div>\r\n                </p>\r\n                <p>\r\n                  Expired Date:\r\n                  <div>\r\n                    <DatePicker\r\n                      selected={expireddate}                      \r\n                      onChange={(expireddate) => setExpireddate(expireddate) }                   \r\n                    />                   \r\n                  </div>\r\n                </p>\r\n                <LoanTextField\r\n                  id=\"TaxDebit\"\r\n                  label=\"TaxDebit\"\r\n                  value={tax.TaxDebit}\r\n                  onChange={handleInputChangeTax}\r\n                  name=\"TaxDebit\"\r\n                />\r\n              </div>\r\n            )}\r\n            <div>\r\n              <button\r\n                className=\"bg-[purple] hover:bg-purple-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\"\r\n                onClick={() => {\r\n                  saveTax();\r\n                }}                \r\n              >                \r\n                save\r\n              </button>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </CompanyModal>\r\n      <CompanyModal\r\n        isOpen={isCompanyTaxEditModalOpen}\r\n        onClose={handleCompanyTaxEditCloseModal}\r\n        title=\"tax edit information\"\r\n      >\r\n        <div>\r\n          <form onSubmit={updateTax}>\r\n            <div className=\"relative center justify-center flex-1 w-full max-w-full grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\">\r\n              <LoanTextField\r\n                id=\"Name\"\r\n                label=\"Name\"\r\n                value={editTax.Name}\r\n                onChange={handleInputChangeEditTax}\r\n                name=\"Name\"\r\n              />\r\n              <LoanTextField\r\n                id=\"TinNo\"\r\n                label=\"TinNo\"\r\n                value={editTax.TinNo}\r\n                onChange={handleInputChangeEditTax}\r\n                name=\"TinNo\"\r\n              />\r\n              <div>\r\n                {currentFile && (\r\n                  <div className=\"progress\">\r\n                    <div\r\n                      className=\"progress-bar progress-bar-info progress-bar-striped\"\r\n                      role=\"progressbar\"\r\n                      aria-valuenow={progress}\r\n                      aria-valuemin=\"0\"\r\n                      aria-valuemax=\"100\"\r\n                      style={{ width: progress + \"%\" }}\r\n                    >\r\n                      {progress}%\r\n                    </div>\r\n                  </div>\r\n                )}\r\n                <label className=\"btn btn-default\">\r\n                  <input type=\"file\" onChange={selectFile} />\r\n                </label>\r\n                <button\r\n                  className=\"btn btn-success\"\r\n                  disabled={!selectedFiles}\r\n                  onChange={(editTax.Certificate = newCertificate)}\r\n                  onClick={uploadCertificate}\r\n                >\r\n                  Tax Certificate\r\n                </button>\r\n                <div className=\"alert alert-light\" role=\"alert\">\r\n                  {message}\r\n                </div>\r\n              </div>\r\n              <p>\r\n              Issue Date:\r\n                <input\r\n                  id=\"issueDate\"\r\n                  name=\"issueDate\"\r\n                  label=\"issueDate\"\r\n                  placeholder=\"issueDate\"\r\n                  type=\"date\"\r\n                  value={\r\n                    issueDate.getFullYear().toString() +\r\n                    \"-\" +\r\n                    (issueDate.getMonth() + 1)\r\n                      .toString()\r\n                      .padStart(2, 0) +\r\n                    \"-\" +\r\n                    issueDate\r\n                      .getDate()\r\n                      .toString()\r\n                      .padStart(2, 0)\r\n                  }\r\n                  onChange={(e) => {\r\n                    setIssueDate(new Date(e.target.value));\r\n                    editTax.IssueDate =\r\n                    issueDate;\r\n                  }}\r\n                />{\" \"}\r\n              </p>\r\n              <p>\r\n              Expired Date:\r\n                <input\r\n                  id=\"Expireddate\"\r\n                  name=\"Expireddate\"\r\n                  label=\"Expireddate\"\r\n                  placeholder=\"Expireddate\"\r\n                  type=\"date\"\r\n                  value={\r\n                    expireddate.getFullYear().toString() +\r\n                    \"-\" +\r\n                    (expireddate.getMonth() + 1)\r\n                      .toString()\r\n                      .padStart(2, 0) +\r\n                    \"-\" +\r\n                    expireddate\r\n                      .getDate()\r\n                      .toString()\r\n                      .padStart(2, 0)\r\n                  }\r\n                  onChange={(e) => {\r\n                    setExpireddate(new Date(e.target.value));\r\n                    editTax.Expireddate =\r\n                    expireddate;\r\n                  }}\r\n                />{\" \"}\r\n              </p>             \r\n              <LoanTextField\r\n                id=\"TaxDebit\"\r\n                label=\"TaxDebit\"\r\n                value={editTax.TaxDebit}\r\n                onChange={handleInputChangeEditTax}\r\n                name=\"TaxDebit\"\r\n              />\r\n            </div>\r\n            <div>\r\n              <button className=\"bg-[purple] hover:bg-purple-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\"\r\n              >\r\n                Update\r\n              </button>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </CompanyModal>\r\n    </div>\r\n  );\r\n};\r\nexport default ViewSoleTax;\r\n","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\SoleAndPartnership\\dependent\\ViewSoleDependent.jsx",["1187","1188","1189","1190","1191"],[],"import { useState, useEffect } from \"react\";\r\nimport CompanyModal from \"../../Common/CompanyModal\";\r\nimport LoanTextField from \"../../../Common/LoanTextField\";\r\nimport { Select, FormControl, MenuItem, InputLabel } from \"@mui/material\";\r\nimport CommonServices from \"../../Common/CommonServices\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nconst ViewSoleDependent = ({\r\n  holdSoleDependent,\r\n  isCompanySoleDependentModalOpen,\r\n  handleCompanySoleDependentCloseModal,\r\n  handleCompanySoleDependentOpenModal,\r\n  soleID, //well transfer to add sole dependent\r\n}) => {\r\n  //upload\r\n  const [newIdentity, setNewIdentity] = useState(null);\r\n  const [newBirthCertificate, setNewBirthCertificate] = useState(null);\r\n  const [selectedFiles, setSelectedFiles] = useState(undefined);\r\n  const [currentFile, setCurrentFile] = useState(undefined);\r\n  const [fileInfos, setFileInfos] = useState([]);\r\n  const [progress, setProgress] = useState(0);\r\n  const [message, setMessage] = useState(\"\");\r\n  const selectFile = (event) => {\r\n    setSelectedFiles(event.target.files);\r\n  };\r\n  //upload 1\r\n  const uploadProofOfIdentity = () => {\r\n    let currentFile = selectedFiles[0];\r\n    setProgress(0);\r\n    setCurrentFile(currentFile);\r\n    CommonServices.upload(currentFile, (event) => {\r\n      setProgress(Math.round((100 * event.loaded) / event.total));\r\n    })\r\n      .then((response) => {\r\n        setMessage(response.data.message);\r\n        setNewIdentity(response.data.Result);\r\n      })\r\n      .then((files) => {\r\n        setFileInfos(files.data);\r\n      })\r\n      .catch(() => {\r\n        setProgress(0);\r\n        setCurrentFile(undefined);\r\n      });\r\n    setSelectedFiles(undefined);\r\n  };\r\n  //upload 2\r\n  const uploadBirthCertificate = () => {\r\n    let currentFile = selectedFiles[0];\r\n    setProgress(0);\r\n    setCurrentFile(currentFile);\r\n    CommonServices.upload(currentFile, (event) => {\r\n      setProgress(Math.round((100 * event.loaded) / event.total));\r\n    })\r\n      .then((response) => {\r\n        setMessage(response.data.message);\r\n        setNewBirthCertificate(response.data.Result);\r\n      })\r\n      .then((files) => {\r\n        setFileInfos(files.data);\r\n      })\r\n      .catch(() => {\r\n        setProgress(0);\r\n        setCurrentFile(undefined);\r\n      });\r\n    setSelectedFiles(undefined);\r\n  };\r\n  const [identityIssueDate, setIdentityIssueDate] = useState(new Date());\r\n  const [identityExpirDate, setIdentityExpirDate] = useState(new Date());\r\n  const [country, setContry] = useState([]);\r\n  const [proofOfIdentityType, setProofOfIdentityType] = useState([]);\r\n  const [dependentRelationshipType, setDependentRelationshipType] = useState(\r\n    []\r\n  );\r\n  const [\r\n    isCompanySoleDependentEditedModalOpen,\r\n    setIsCompanySoleDependentEditedModalOpen,\r\n  ] = useState(false);\r\n  function handleCompanySoleDependentEditCloseModal() {\r\n    setIsCompanySoleDependentEditedModalOpen(false);\r\n  }\r\n  function handleCompanySoleDependentEditedModalOpen() {\r\n    setIsCompanySoleDependentEditedModalOpen(true);\r\n  }\r\n  function handleCompanyMarriedInformationEditCloseModal() {\r\n    setIsCompanySoleDependentEditedModalOpen(false);\r\n  }\r\n  const [dependentId, setDependentId] = useState();\r\n  const [editSoleDependent, setEditSoleDependent] = useState({\r\n    SoleAndPartnerShipId: soleID,\r\n    FirstName: \"\",\r\n    MiddleName: \"\",\r\n    LastName: \"\",\r\n    NationalityId: \"\",\r\n    CountryOfOriginId: \"\",\r\n    CountryOfResidenceId: \"\",\r\n    ProofOfIdentityTypeId: \"\",\r\n    ProofOfIdentityFile: \"\",\r\n    ProofOfIdentityIssueDate: \"\",\r\n    ProofOfIdentityExpirDate: \"\",\r\n    DependentRelationshipTypeId: \"\",\r\n    BirthCertificate: \"\",\r\n    BirthCertificateIssuer: \"\",\r\n  });\r\n  const handleInputChangeEditDependent = (event) => {\r\n    const { name, value } = event.target;\r\n    setEditSoleDependent({ ...editSoleDependent, [name]: value });\r\n  };\r\n  const getDependentById = (taxInformationId) => {\r\n    CommonServices.getDependentById(taxInformationId)\r\n      .then((res) => {\r\n        setEditSoleDependent({\r\n          ...editSoleDependent,\r\n          SoleAndPartnerShipId: res.data.Result.SoleAndPartnerShipId,\r\n          FirstName: res.data.Result.FirstName,\r\n          MiddleName: res.data.Result.MiddleName,\r\n          LastName: res.data.Result.LastName,\r\n          NationalityId: res.data.Result.NationalityId,\r\n          CountryOfOriginId: res.data.Result.CountryOfOriginId,\r\n          CountryOfResidenceId: res.data.Result.CountryOfResidenceId,\r\n          ProofOfIdentityTypeId: res.data.Result.ProofOfIdentityTypeId,\r\n          ProofOfIdentityFile: res.data.Result.ProofOfIdentityFile,\r\n          ProofOfIdentityIssueDate: res.data.Result.ProofOfIdentityIssueDate,\r\n          ProofOfIdentityExpirDate: res.data.Result.ProofOfIdentityExpirDate,\r\n          DependentRelationshipTypeId:\r\n            res.data.Result.DependentRelationshipTypeId,\r\n          BirthCertificate: res.data.Result.BirthCertificate,\r\n          BirthCertificateIssuer: res.data.Result.BirthCertificateIssuer,\r\n        });\r\n      })\r\n      .catch((err) => console.log(err));\r\n  };\r\n  useEffect(() => {\r\n    getDependentById();\r\n  }, []);\r\n  const updateDependent = () => {\r\n    CommonServices.updateDependent(dependentId, editSoleDependent)\r\n      .then((response) => {})\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n  useEffect(() => {\r\n    updateDependent();\r\n  }, []);\r\n  const fetchContry = () => {\r\n    CommonServices.getCountry()\r\n      .then((response) => {\r\n        setContry(response.data.Result);\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n  useEffect(() => {\r\n    fetchContry();\r\n  }, []);\r\n  const fetchProofOfIdentityType = () => {\r\n    CommonServices.getProofOfIdentityTypes()\r\n      .then((response) => {\r\n        setProofOfIdentityType(response.data.Result);\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n  useEffect(() => {\r\n    fetchProofOfIdentityType();\r\n  }, []);\r\n\r\n  const fetchsetDependentRelationship = () => {\r\n    CommonServices.getDependent()\r\n      .then((response) => {\r\n        setDependentRelationshipType(response.data.Result);\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n  useEffect(() => {\r\n    fetchsetDependentRelationship();\r\n  }, []);\r\n  //add dependent\r\n  const [toggleSoleDependent, setToggleSoleDependent] = useState(false);\r\n  const [submitted, setSubmitted] = useState(false);\r\n  const initialSoleDependentState = {\r\n    Id: null,\r\n    FirstName: \"\",\r\n    MiddleName: \"\",\r\n    LastName: \"\",\r\n    NationalityId: \"\",\r\n    CountryOfOriginId: \"\",\r\n    CountryOfResidenceId: \"\",\r\n    ProofOfIdentityTypeId: \"\",\r\n    ProofOfIdentityFile: \"\",\r\n    ProofOfIdentityIssueDate: \"\",\r\n    ProofOfIdentityExpirDate: \"\",\r\n    DependentRelationshipTypeId: \"\",\r\n    BirthCertificate: \"\",\r\n    BirthCertificateIssuer: \"\",\r\n  };\r\n  const [soleDependent, setSoleDependent] = useState(initialSoleDependentState);\r\n  const handleInputChangeSoleDependent = (event) => {\r\n    const { name, value } = event.target;\r\n    setSoleDependent({ ...soleDependent, [name]: value });\r\n  };\r\n  const saveSoleDependent = () => {\r\n    var data = {\r\n      FirstName: soleDependent.FirstName,\r\n      MiddleName: soleDependent.MiddleName,\r\n      LastName: soleDependent.LastName,\r\n      NationalityId: soleDependent.NationalityId,\r\n      CountryOfOriginId: soleDependent.CountryOfOriginId,\r\n      CountryOfResidenceId: soleDependent.CountryOfResidenceId,\r\n      ProofOfIdentityTypeId: soleDependent.ProofOfIdentityTypeId,\r\n      ProofOfIdentityFile: newIdentity,\r\n      ProofOfIdentityIssueDate: identityIssueDate,\r\n      ProofOfIdentityExpirDate: identityExpirDate,\r\n      DependentRelationshipTypeId: soleDependent.DependentRelationshipTypeId,\r\n      BirthCertificate: newBirthCertificate,\r\n      BirthCertificateIssuer: soleDependent.BirthCertificateIssuer,\r\n    };\r\n    CommonServices.SoleDependent(data, soleID)\r\n      .then((response) => {\r\n        setSoleDependent({\r\n          Id: response.data.Id,\r\n          FirstName: response.data.FirstName,\r\n          MiddleName: response.data.MiddleName,\r\n          LastName: response.data.LastName,\r\n          NationalityId: response.data.NationalityId,\r\n          CountryOfOriginId: response.data.CountryOfOriginId,\r\n          CountryOfResidenceId: response.data.CountryOfResidenceId,\r\n          ProofOfIdentityTypeId: response.data.ProofOfIdentityTypeId,\r\n          ProofOfIdentityFile: response.data.ProofOfIdentityFile,\r\n          ProofOfIdentityIssueDate: response.data.ProofOfIdentityIssueDate,\r\n          ProofOfIdentityExpirDate: response.data.ProofOfIdentityExpirDate,\r\n          DependentRelationshipTypeId:\r\n            response.data.DependentRelationshipTypeId,\r\n          BirthCertificate: response.data.BirthCertificate,\r\n          BirthCertificateIssuer: response.data.BirthCertificateIssuer,\r\n        });\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n  //end dependent\r\n  const deleteDependent = (Id) => {\r\n    CommonServices.deleteDependent(Id)\r\n      .then((response) => {})\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n  useEffect(() => {\r\n    deleteDependent();\r\n  }, []);\r\n  return (\r\n    <div>\r\n      <CompanyModal\r\n        isOpen={isCompanySoleDependentModalOpen}\r\n        onClose={handleCompanySoleDependentCloseModal}\r\n        title=\"view dependent information\"\r\n      >\r\n        <div className=\"rounded-lg overflow-hidden\">\r\n          {holdSoleDependent ? (\r\n            <table className=\"table table-bordered table-striped bg-purple-100\">\r\n              <thead>\r\n                <th className=\"px-2 py-4\"> Name</th>\r\n                <th className=\"px-2 py-4\"> Nationality</th>\r\n                <th className=\"px-2 py-4\"> Origin Country</th>\r\n                <th className=\"px-2 py-4\"> Residence Country</th>\r\n                <th className=\"px-2 py-4\"> Identity Type</th>\r\n                <th className=\"px-2 py-4\"> Identity Issue Date</th>\r\n                <th className=\"px-2 py-4\"> Identity Expir Date</th>\r\n                <th className=\"px-2 py-4\"> Dependent Relationship Type</th>\r\n                <th className=\"px-2 py-4\"> Birth Certificate</th>\r\n                <th className=\"px-2 py-4\"> Certificate Issuer</th>\r\n                <th className=\"px-2 py-4\"> Action </th>\r\n              </thead>\r\n              <tbody>\r\n                {holdSoleDependent.map((soleDependent, index) => (\r\n                  <tr>\r\n                    {/* <td>{soleDependent.Id}</td> */}\r\n                    <td>\r\n                      {soleDependent.FirstName} {soleDependent.MiddleName}{\" \"}\r\n                      {soleDependent.LastName}\r\n                    </td>\r\n                    <td>{soleDependent.Nationality}</td>\r\n                    <td>{soleDependent.CountryOfOrigin}</td>\r\n                    <td>{soleDependent.CountryOfResidence}</td>\r\n                    <td>{soleDependent.ProofOfIdentityType}</td>\r\n                    {/* <td>{soleDependent.ProofOfIdentityFile}</td> */}\r\n                    <td>{soleDependent.ProofOfIdentityIssueDate}</td>\r\n                    <td>{soleDependent.ProofOfIdentityExpirDate}</td>\r\n                    <td>{soleDependent.DependentRelationshipType}</td>\r\n                    <td>{soleDependent.BirthCertificate}</td>\r\n                    <td>{soleDependent.BirthCertificateIssuer}</td>\r\n                    <td>\r\n                      <button\r\n                        onClick={() => {\r\n                          handleCompanySoleDependentEditedModalOpen();\r\n                          getDependentById(soleDependent.Id);\r\n                          setDependentId(soleDependent.Id);\r\n                        }}\r\n                        className=\"text-purple-600 rounded-md font-semibold \"\r\n                      >\r\n                        Edit\r\n                      </button>\r\n                    </td>\r\n                    <td>\r\n                      <button\r\n                        onClick={() => {\r\n                          deleteDependent(soleDependent.Id);\r\n                        }}\r\n                        className=\"text-purple-600 rounded-md font-semibold \"\r\n                      >\r\n                        delete\r\n                      </button>\r\n                    </td>\r\n                  </tr>\r\n                ))}\r\n              </tbody>\r\n            </table>\r\n          ) : (\r\n            \"\"\r\n          )}\r\n          <button\r\n            onClick={() => setToggleSoleDependent(!toggleSoleDependent)}\r\n            className=\"text-purple-600 rounded-md font-medium \"\r\n          >\r\n            Add Married\r\n          </button>\r\n          {toggleSoleDependent && (\r\n            <div className=\"submit-form\">\r\n              {submitted ? (\r\n                <div>\r\n                  <h4>You submitted successfully!</h4>\r\n                </div>\r\n              ) : (\r\n                <div className=\"relative center justify-center flex-1 w-full max-w-full grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\">\r\n                  <LoanTextField\r\n                    id=\"FirstName\"\r\n                    label=\"FirstName\"\r\n                    value={soleDependent.FirstName}\r\n                    onChange={handleInputChangeSoleDependent}\r\n                    name=\"FirstName\"\r\n                  />\r\n                  <LoanTextField\r\n                    id=\"MiddleName\"\r\n                    label=\"MiddleName\"\r\n                    value={soleDependent.MiddleName}\r\n                    onChange={handleInputChangeSoleDependent}\r\n                    name=\"MiddleName\"\r\n                  />\r\n                  <LoanTextField\r\n                    id=\"LastName\"\r\n                    label=\"LastName\"\r\n                    value={soleDependent.LastName}\r\n                    onChange={handleInputChangeSoleDependent}\r\n                    name=\"LastName\"\r\n                  />\r\n                  <FormControl variant=\"standard\" sx={{ minWidth: 120 }}>\r\n                    <InputLabel id=\"countrylbl\" color=\"secondary\">\r\n                      {\" \"}\r\n                      Nationality{\" \"}\r\n                    </InputLabel>\r\n                    <Select\r\n                      color=\"secondary\"\r\n                      onChange={(event) =>\r\n                        (soleDependent.NationalityId = event.target.value)\r\n                      }\r\n                      labelId=\"countrylbl\"\r\n                      id=\"countrySelect\"\r\n                      label=\"Country\"\r\n                    >\r\n                      <MenuItem value=\"\">\r\n                        <em>None</em>\r\n                      </MenuItem>\r\n                      {country.map((yourCounty) => (\r\n                        <MenuItem\r\n                          key={yourCounty.Id}\r\n                          NationalityID={yourCounty.Id}\r\n                          value={yourCounty.Id}\r\n                        >\r\n                          {yourCounty.Name}\r\n                        </MenuItem>\r\n                      ))}\r\n                    </Select>\r\n                  </FormControl>\r\n                  <FormControl variant=\"standard\" sx={{ minWidth: 120 }}>\r\n                    <InputLabel id=\"countrylbl\" color=\"secondary\">\r\n                      {\" \"}\r\n                      Country Of Origin{\" \"}\r\n                    </InputLabel>\r\n                    <Select\r\n                      color=\"secondary\"\r\n                      onChange={(event) =>\r\n                        (soleDependent.CountryOfOriginId = event.target.value)\r\n                      }\r\n                      labelId=\"countrylbl\"\r\n                      id=\"countrySelect\"\r\n                      label=\"Country\"\r\n                    >\r\n                      <MenuItem value=\"\">\r\n                        <em>None</em>\r\n                      </MenuItem>\r\n                      {country.map((yourCounty) => (\r\n                        <MenuItem\r\n                          key={yourCounty.Id}\r\n                          NationalityID={yourCounty.Id}\r\n                          value={yourCounty.Id}\r\n                        >\r\n                          {yourCounty.Name}\r\n                        </MenuItem>\r\n                      ))}\r\n                    </Select>\r\n                  </FormControl>\r\n                  <FormControl variant=\"standard\" sx={{ minWidth: 120 }}>\r\n                    <InputLabel id=\"countrylbl\" color=\"secondary\">\r\n                      {\" \"}\r\n                      Country Of Residence{\" \"}\r\n                    </InputLabel>\r\n                    <Select\r\n                      color=\"secondary\"\r\n                      onChange={(event) =>\r\n                        (soleDependent.CountryOfResidenceId =\r\n                          event.target.value)\r\n                      }\r\n                      labelId=\"countrylbl\"\r\n                      id=\"countrySelect\"\r\n                      label=\"Country\"\r\n                    >\r\n                      <MenuItem value=\"\">\r\n                        <em>None</em>\r\n                      </MenuItem>\r\n                      {country.map((yourCounty) => (\r\n                        <MenuItem\r\n                          key={yourCounty.Id}\r\n                          NationalityID={yourCounty.Id}\r\n                          value={yourCounty.Id}\r\n                        >\r\n                          {yourCounty.Name}\r\n                        </MenuItem>\r\n                      ))}\r\n                    </Select>\r\n                  </FormControl>\r\n                  <FormControl variant=\"standard\" sx={{ minWidth: 120 }}>\r\n                    <InputLabel id=\"countrylbl\" color=\"secondary\">\r\n                      {\" \"}\r\n                      Proof Of Identity Type{\" \"}\r\n                    </InputLabel>\r\n                    <Select\r\n                      color=\"secondary\"\r\n                      onChange={(event) =>\r\n                        (soleDependent.ProofOfIdentityTypeId =\r\n                          event.target.value)\r\n                      }\r\n                      labelId=\"countrylbl\"\r\n                      id=\"countrySelect\"\r\n                      label=\"Country\"\r\n                    >\r\n                      <MenuItem value=\"\">\r\n                        <em>None</em>\r\n                      </MenuItem>\r\n                      {proofOfIdentityType.map((yourProofOfIdentityType) => (\r\n                        <MenuItem\r\n                          key={yourProofOfIdentityType.Id}\r\n                          ProofOfIdentityTypeId={yourProofOfIdentityType.Id}\r\n                          value={yourProofOfIdentityType.Id}\r\n                        >\r\n                          {yourProofOfIdentityType.Name}\r\n                        </MenuItem>\r\n                      ))}\r\n                    </Select>\r\n                  </FormControl>\r\n                  <div>\r\n                    {currentFile && (\r\n                      <div className=\"progress\">\r\n                        <div\r\n                          className=\"progress-bar progress-bar-info progress-bar-striped\"\r\n                          role=\"progressbar\"\r\n                          aria-valuenow={progress}\r\n                          aria-valuemin=\"0\"\r\n                          aria-valuemax=\"100\"\r\n                          style={{ width: progress + \"%\" }}\r\n                        >\r\n                          {progress}%\r\n                        </div>\r\n                      </div>\r\n                    )}\r\n                    <label className=\"btn btn-default\">\r\n                      <input type=\"file\" onChange={selectFile} />\r\n                    </label>\r\n                    <button\r\n                      className=\"bg-[#371f37] hover:bg-purple-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\"\r\n                      disabled={!selectedFiles}\r\n                      onClick={uploadProofOfIdentity}\r\n                    >\r\n                      upload Proof Of Identity File\r\n                    </button>\r\n                    <div className=\"alert alert-light\" role=\"alert\">\r\n                      {message}\r\n                    </div>\r\n                  </div>\r\n                  <p>\r\n                    Identity Issue Date:\r\n                    <div>\r\n                      <DatePicker\r\n                        selected={identityIssueDate}\r\n                        onChange={(identityIssueDate) =>\r\n                          setIdentityIssueDate(identityIssueDate)\r\n                        }\r\n                      />\r\n                    </div>\r\n                  </p>\r\n                  <p>\r\n                    Identity Expire Date:\r\n                    <div>\r\n                      <DatePicker\r\n                        selected={identityExpirDate}\r\n                        onChange={(identityExpirDate) =>\r\n                          setIdentityExpirDate(identityExpirDate)\r\n                        }\r\n                      />\r\n                    </div>\r\n                  </p>\r\n\r\n                  <FormControl variant=\"standard\" sx={{ minWidth: 120 }}>\r\n                    <InputLabel id=\"countrylbl\" color=\"secondary\">\r\n                      {\" \"}\r\n                      Dependent Relationship Type{\" \"}\r\n                    </InputLabel>\r\n                    <Select\r\n                      color=\"secondary\"\r\n                      onChange={(event) =>\r\n                        (soleDependent.DependentRelationshipTypeId =\r\n                          event.target.value)\r\n                      }\r\n                      labelId=\"countrylbl\"\r\n                      id=\"countrySelect\"\r\n                      label=\"Country\"\r\n                    >\r\n                      <MenuItem value=\"\">\r\n                        <em>None</em>\r\n                      </MenuItem>\r\n                      {dependentRelationshipType.map(\r\n                        (dependentRelationship) => (\r\n                          <MenuItem\r\n                            key={dependentRelationship.Id}\r\n                            DependentRelationshipTypeId={\r\n                              dependentRelationship.Id\r\n                            }\r\n                            value={dependentRelationship.Id}\r\n                          >\r\n                            {dependentRelationship.Name}\r\n                          </MenuItem>\r\n                        )\r\n                      )}\r\n                    </Select>\r\n                  </FormControl>\r\n                  <div>\r\n                    {currentFile && (\r\n                      <div className=\"progress\">\r\n                        <div\r\n                          className=\"progress-bar progress-bar-info progress-bar-striped\"\r\n                          role=\"progressbar\"\r\n                          aria-valuenow={progress}\r\n                          aria-valuemin=\"0\"\r\n                          aria-valuemax=\"100\"\r\n                          style={{ width: progress + \"%\" }}\r\n                        >\r\n                          {progress}%\r\n                        </div>\r\n                      </div>\r\n                    )}\r\n                    <label className=\"btn btn-default\">\r\n                      <input type=\"file\" onChange={selectFile} />\r\n                    </label>\r\n                    <button\r\n                      className=\"bg-[#2f0e2f] hover:bg-purple-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\"\r\n                      disabled={!selectedFiles}\r\n                      onClick={uploadBirthCertificate}\r\n                    >\r\n                      upload Birth Certificate\r\n                    </button>\r\n                    <div className=\"alert alert-light\" role=\"alert\">\r\n                      {message}\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              )}\r\n              <div>\r\n                <button\r\n                  className=\"bg-[purple] hover:bg-purple-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\"\r\n                  onClick={() => {\r\n                    saveSoleDependent();\r\n                  }}\r\n                >\r\n                  save\r\n                </button>\r\n              </div>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </CompanyModal>\r\n      <CompanyModal\r\n        isOpen={isCompanySoleDependentEditedModalOpen}\r\n        onClose={handleCompanySoleDependentEditCloseModal}\r\n        title=\"dependent edit information\"\r\n      >\r\n        <div>\r\n          <form onSubmit={updateDependent}>\r\n            <div className=\"relative center justify-center flex-1 w-full max-w-full grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\">\r\n              <LoanTextField\r\n                id=\"FirstName\"\r\n                label=\"FirstName\"\r\n                value={editSoleDependent.FirstName}\r\n                onChange={handleInputChangeEditDependent}\r\n                name=\"FirstName\"\r\n              />\r\n              <LoanTextField\r\n                id=\"MiddleName\"\r\n                label=\"MiddleName\"\r\n                value={editSoleDependent.MiddleName}\r\n                onChange={handleInputChangeEditDependent}\r\n                name=\"MiddleName\"\r\n              />\r\n              <LoanTextField\r\n                id=\"LastName\"\r\n                label=\"LastName\"\r\n                value={editSoleDependent.LastName}\r\n                onChange={handleInputChangeEditDependent}\r\n                name=\"LastName\"\r\n              />\r\n              <FormControl variant=\"standard\" sx={{ minWidth: 120 }}>\r\n                <InputLabel id=\"countrylbl\" color=\"secondary\">\r\n                  {\" \"}\r\n                  Nationality{\" \"}\r\n                </InputLabel>\r\n                <Select\r\n                  color=\"secondary\"\r\n                  onChange={(event) =>\r\n                    (editSoleDependent.NationalityId = event.target.value)\r\n                  }\r\n                  labelId=\"countrylbl\"\r\n                  id=\"countrySelect\"\r\n                  label=\"Country\"\r\n                >\r\n                  <MenuItem value=\"\">\r\n                    <em>None</em>\r\n                  </MenuItem>\r\n                  {country.map((yourCounty) => (\r\n                    <MenuItem\r\n                      key={yourCounty.Id}\r\n                      NationalityID={yourCounty.Id}\r\n                      value={yourCounty.Id}\r\n                    >\r\n                      {yourCounty.Name}\r\n                    </MenuItem>\r\n                  ))}\r\n                </Select>\r\n              </FormControl>\r\n              <FormControl variant=\"standard\" sx={{ minWidth: 120 }}>\r\n                <InputLabel id=\"countrylbl\" color=\"secondary\">\r\n                  {\" \"}\r\n                  Country Of Origin{\" \"}\r\n                </InputLabel>\r\n                <Select\r\n                  color=\"secondary\"\r\n                  onChange={(event) =>\r\n                    (editSoleDependent.CountryOfOriginId = event.target.value)\r\n                  }\r\n                  labelId=\"countrylbl\"\r\n                  id=\"countrySelect\"\r\n                  label=\"Country\"\r\n                >\r\n                  <MenuItem value=\"\">\r\n                    <em>None</em>\r\n                  </MenuItem>\r\n                  {country.map((yourCounty) => (\r\n                    <MenuItem\r\n                      key={yourCounty.Id}\r\n                      NationalityID={yourCounty.Id}\r\n                      value={yourCounty.Id}\r\n                    >\r\n                      {yourCounty.Name}\r\n                    </MenuItem>\r\n                  ))}\r\n                </Select>\r\n              </FormControl>\r\n              <FormControl variant=\"standard\" sx={{ minWidth: 120 }}>\r\n                <InputLabel id=\"countrylbl\" color=\"secondary\">\r\n                  {\" \"}\r\n                  Country Of Residence{\" \"}\r\n                </InputLabel>\r\n                <Select\r\n                  color=\"secondary\"\r\n                  onChange={(event) =>\r\n                    (editSoleDependent.CountryOfResidenceId =\r\n                      event.target.value)\r\n                  }\r\n                  labelId=\"countrylbl\"\r\n                  id=\"countrySelect\"\r\n                  label=\"Country\"\r\n                >\r\n                  <MenuItem value=\"\">\r\n                    <em>None</em>\r\n                  </MenuItem>\r\n                  {country.map((yourCounty) => (\r\n                    <MenuItem\r\n                      key={yourCounty.Id}\r\n                      NationalityID={yourCounty.Id}\r\n                      value={yourCounty.Id}\r\n                    >\r\n                      {yourCounty.Name}\r\n                    </MenuItem>\r\n                  ))}\r\n                </Select>\r\n              </FormControl>\r\n              <FormControl variant=\"standard\" sx={{ minWidth: 120 }}>\r\n                <InputLabel id=\"countrylbl\" color=\"secondary\">\r\n                  {\" \"}\r\n                  Proof Of Identity Type{\" \"}\r\n                </InputLabel>\r\n                <Select\r\n                  color=\"secondary\"\r\n                  onChange={(event) =>\r\n                    (editSoleDependent.ProofOfIdentityTypeId =\r\n                      event.target.value)\r\n                  }\r\n                  labelId=\"countrylbl\"\r\n                  id=\"countrySelect\"\r\n                  label=\"Country\"\r\n                >\r\n                  <MenuItem value=\"\">\r\n                    <em>None</em>\r\n                  </MenuItem>\r\n                  {proofOfIdentityType.map((yourProofOfIdentityType) => (\r\n                    <MenuItem\r\n                      key={yourProofOfIdentityType.Id}\r\n                      ProofOfIdentityTypeId={yourProofOfIdentityType.Id}\r\n                      value={yourProofOfIdentityType.Id}\r\n                    >\r\n                      {yourProofOfIdentityType.Name}\r\n                    </MenuItem>\r\n                  ))}\r\n                </Select>\r\n              </FormControl>\r\n              <div>\r\n                {currentFile && (\r\n                  <div className=\"progress\">\r\n                    <div\r\n                      className=\"progress-bar progress-bar-info progress-bar-striped\"\r\n                      role=\"progressbar\"\r\n                      aria-valuenow={progress}\r\n                      aria-valuemin=\"0\"\r\n                      aria-valuemax=\"100\"\r\n                      style={{ width: progress + \"%\" }}\r\n                    >\r\n                      {progress}%\r\n                    </div>\r\n                  </div>\r\n                )}\r\n                <label className=\"btn btn-default\">\r\n                  <input type=\"file\" onChange={selectFile} />\r\n                </label>\r\n                <button\r\n                  className=\"bg-[#371f37] hover:bg-purple-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\"\r\n                  disabled={!selectedFiles}\r\n                  onChange={\r\n                    (editSoleDependent.ProofOfIdentityFile = newIdentity)\r\n                  }\r\n                  onClick={uploadProofOfIdentity}\r\n                >\r\n                  upload Proof Of Identity File\r\n                </button>\r\n                <div className=\"alert alert-light\" role=\"alert\">\r\n                  {message}\r\n                </div>\r\n              </div>\r\n              <p>\r\n                Proof Of Identity Issue Date:\r\n                <input\r\n                  id=\"ProofOfIdentityIssueDate\"\r\n                  name=\"ProofOfIdentityIssueDate\"\r\n                  label=\"ProofOfIdentityIssueDate\"\r\n                  placeholder=\"ProofOfIdentityIssueDate\"\r\n                  type=\"date\"\r\n                  value={\r\n                    identityIssueDate.getFullYear().toString() +\r\n                    \"-\" +\r\n                    (identityIssueDate.getMonth() + 1)\r\n                      .toString()\r\n                      .padStart(2, 0) +\r\n                    \"-\" +\r\n                    identityIssueDate.getDate().toString().padStart(2, 0)\r\n                  }\r\n                  onChange={(e) => {\r\n                    setIdentityIssueDate(new Date(e.target.value));\r\n                    editSoleDependent.ProofOfIdentityIssueDate =\r\n                      identityIssueDate;\r\n                  }}\r\n                />{\" \"}\r\n              </p>\r\n              <p>\r\n                Proof Of Identity Expire Date:\r\n                <input\r\n                  id=\"ProofOfIdentityExpirDate\"\r\n                  name=\"ProofOfIdentityExpirDate\"\r\n                  label=\"ProofOfIdentityExpirDate\"\r\n                  placeholder=\"ProofOfIdentityExpirDate\"\r\n                  type=\"date\"\r\n                  value={\r\n                    identityExpirDate.getFullYear().toString() +\r\n                    \"-\" +\r\n                    (identityExpirDate.getMonth() + 1)\r\n                      .toString()\r\n                      .padStart(2, 0) +\r\n                    \"-\" +\r\n                    identityExpirDate.getDate().toString().padStart(2, 0)\r\n                  }\r\n                  onChange={(e) => {\r\n                    setIdentityExpirDate(new Date(e.target.value));\r\n                    editSoleDependent.ProofOfIdentityExpirDate =\r\n                      identityExpirDate;\r\n                  }}\r\n                />{\" \"}\r\n              </p>\r\n              <FormControl variant=\"standard\" sx={{ minWidth: 120 }}>\r\n                <InputLabel id=\"countrylbl\" color=\"secondary\">\r\n                  {\" \"}\r\n                  Dependent Relationship Type{\" \"}\r\n                </InputLabel>\r\n                <Select\r\n                  color=\"secondary\"\r\n                  onChange={(event) =>\r\n                    (editSoleDependent.DependentRelationshipTypeId =\r\n                      event.target.value)\r\n                  }\r\n                  labelId=\"countrylbl\"\r\n                  id=\"countrySelect\"\r\n                  label=\"Country\"\r\n                >\r\n                  <MenuItem value=\"\">\r\n                    <em>None</em>\r\n                  </MenuItem>\r\n                  {dependentRelationshipType.map((dependentRelationship) => (\r\n                    <MenuItem\r\n                      key={dependentRelationship.Id}\r\n                      DependentRelationshipTypeId={dependentRelationship.Id}\r\n                      value={dependentRelationship.Id}\r\n                    >\r\n                      {dependentRelationship.Name}\r\n                    </MenuItem>\r\n                  ))}\r\n                </Select>\r\n              </FormControl>\r\n              <div>\r\n                {currentFile && (\r\n                  <div className=\"progress\">\r\n                    <div\r\n                      className=\"progress-bar progress-bar-info progress-bar-striped\"\r\n                      role=\"progressbar\"\r\n                      aria-valuenow={progress}\r\n                      aria-valuemin=\"0\"\r\n                      aria-valuemax=\"100\"\r\n                      style={{ width: progress + \"%\" }}\r\n                    >\r\n                      {progress}%\r\n                    </div>\r\n                  </div>\r\n                )}\r\n                <label className=\"btn btn-default\">\r\n                  <input type=\"file\" onChange={selectFile} />\r\n                </label>\r\n                <button\r\n                  className=\"bg-[#2f0e2f] hover:bg-purple-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\"\r\n                  disabled={!selectedFiles}\r\n                  onChange={\r\n                    (editSoleDependent.BirthCertificate = newBirthCertificate)\r\n                  }\r\n                  onClick={uploadBirthCertificate}\r\n                >\r\n                  upload Birth Certificate\r\n                </button>\r\n                <div className=\"alert alert-light\" role=\"alert\">\r\n                  {message}\r\n                </div>\r\n              </div>\r\n              <LoanTextField\r\n                id=\"BirthCertificateIssuer\"\r\n                label=\"BirthCertificateIssuer\"\r\n                value={editSoleDependent.BirthCertificateIssuer}\r\n                onChange={handleInputChangeEditDependent}\r\n                name=\"BirthCertificateIssuer\"\r\n              />\r\n            </div>\r\n            <div>\r\n              <button className=\"bg-[purple] hover:bg-purple-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\">\r\n                Update\r\n              </button>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </CompanyModal>\r\n    </div>\r\n  );\r\n};\r\nexport default ViewSoleDependent;\r\n","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\SOEAndGovernmental\\Tax\\SOEAndGovernmentalTaxService.js",[],[],"C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\SoleAndPartnership\\OtherBank\\OtherBank.jsx",["1192","1193","1194","1195","1196","1197","1198","1199"],[],"import { useState, useEffect } from \"react\";\r\nimport CompanyModal from \"../../Common/CompanyModal\";\r\nimport LoanTextField from \"../../../Common/LoanTextField\";\r\nimport { Select, FormControl, MenuItem, InputLabel } from \"@mui/material\";\r\nimport CommonServices from \"../../Common/CommonServices\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport AddOtherBank from \"./AddOtherBank\";\r\nconst OtherBank = ({\r\n  getOtherBankCredit,\r\n  isCompanySoleOtherBankModalOpen,\r\n  handleCompanySoleOtherBankCloseModal,\r\n  handleCompanySoleOtherBankOpenModal,\r\n  soleID, //well transfer to add sole dependent\r\n  companyId,\r\n}) => {\r\n  //upload\r\n  const [creditInformationDocument, setCreditInformationDocument] =\r\n    useState(null);\r\n  const [selectedFiles, setSelectedFiles] = useState(undefined);\r\n  const [currentFile, setCurrentFile] = useState(undefined);\r\n  const [fileInfos, setFileInfos] = useState([]);\r\n  const [progress, setProgress] = useState(0);\r\n  const [message, setMessage] = useState(\"\");\r\n  const selectFile = (event) => {\r\n    setSelectedFiles(event.target.files);\r\n  };\r\n  //upload 1\r\n  const uploadCreditInformationDocument = () => {\r\n    let currentFile = selectedFiles[0];\r\n    setProgress(0);\r\n    setCurrentFile(currentFile);\r\n    CommonServices.upload(currentFile, (event) => {\r\n      setProgress(Math.round((100 * event.loaded) / event.total));\r\n    })\r\n      .then((response) => {\r\n        setMessage(response.data.message);\r\n        setCreditInformationDocument(response.data.Result);\r\n      })\r\n      .then((files) => {\r\n        setFileInfos(files.data);\r\n      })\r\n      .catch(() => {\r\n        setProgress(0);\r\n        setCurrentFile(undefined);\r\n      });\r\n    setSelectedFiles(undefined);\r\n  };\r\n  const [reportingDate, setReportingDate] = useState(new Date());\r\n  const [startDate, setStartDate] = useState(new Date());\r\n  const [maturityDate, setMaturityDate] = useState(new Date());\r\n  const [\r\n    isCompanySoleOtherBankEditedModalOpen,\r\n    setIsCompanySoleOtherBankEditedModalOpen,\r\n  ] = useState(false);\r\n  function handleCompanySoleOtherBankEditCloseModal() {\r\n    setIsCompanySoleOtherBankEditedModalOpen(false);\r\n  }\r\n  function handleCompanySoleOtherBankEditedModalOpen() {\r\n    setIsCompanySoleOtherBankEditedModalOpen(true);\r\n  }\r\n  function handleCompanyOtherBankEditCloseModal() {\r\n    setIsCompanySoleOtherBankEditedModalOpen(false);\r\n  }\r\n  const [otherBankId, setOtherBankId] = useState();\r\n  const [editSoleOtherBank, setEditSoleOtherBank] = useState({\r\n    FullName: \"\",\r\n    TinNumber: \"\",\r\n    BankName: \"\",\r\n    BranchName: \"\",\r\n    AccountNumber: \"\",\r\n    LoanTypeId: \"\",\r\n    ReportingDate: \"\",\r\n    CurrencyId: \"\",\r\n    ApprovedAmount: \"\",\r\n    StartDate: \"\",\r\n    MaturityDate: \"\",\r\n    RepaymentFrequencyId: \"\",\r\n    NumberOfInstallment: \"\",\r\n    InstallmentAmount: \"\",\r\n    OutstandingLoanBalance: \"\",\r\n    LoanStatusId: \"\",\r\n    NoOfDaysInArrears: \"\",\r\n    BalanceOverdue: \"\",\r\n    NoOfRestructuring: \"\",\r\n    RestructuredCreditReferenceNumber: \"\",\r\n    SectorTypeId: \"\",\r\n    IndustryTypeId: \"\",\r\n    CreditInformationDocument: \"\",\r\n  });\r\n  const handleInputChangeEditOtherBank = (event) => {\r\n    const { name, value } = event.target;\r\n    setEditSoleOtherBank({ ...editSoleOtherBank, [name]: value });\r\n  };\r\n  const getOtherBankById = (taxInformationId) => {\r\n    CommonServices.getOtherBankById(taxInformationId).then((res) => {\r\n      setEditSoleOtherBank({\r\n        ...editSoleOtherBank,\r\n        FullName: res.data.Result.FullName,\r\n        TinNumber: res.data.Result.TinNumber,\r\n        BankName: res.data.Result.BankName,\r\n        BranchName: res.data.Result.BranchName,\r\n        AccountNumber: res.data.Result.AccountNumber,\r\n        LoanTypeId: res.data.Result.LoanTypeId,\r\n        ReportingDate: res.data.Result.ReportingDate,\r\n        CurrencyId: res.data.Result.CurrencyId,\r\n        ApprovedAmount: res.data.Result.ApprovedAmount,\r\n        StartDate: res.data.Result.StartDate,\r\n        MaturityDate: res.data.Result.MaturityDate,\r\n        RepaymentFrequencyId: res.data.Result.RepaymentFrequencyId,\r\n        NumberOfInstallment: res.data.Result.NumberOfInstallment,\r\n        InstallmentAmount: res.data.Result.InstallmentAmount,\r\n        OutstandingLoanBalance: res.data.Result.OutstandingLoanBalance,\r\n        LoanStatusId: res.data.Result.LoanStatusId,\r\n        NoOfDaysInArrears: res.data.Result.NoOfDaysInArrears,\r\n        BalanceOverdue: res.data.Result.BalanceOverdue,\r\n        NoOfRestructuring: res.data.Result.NoOfRestructuring,\r\n        RestructuredCreditReferenceNumber:\r\n          res.data.Result.RestructuredCreditReferenceNumber,\r\n        SectorTypeId: res.data.Result.SectorTypeId,\r\n        IndustryTypeId: res.data.Result.IndustryTypeId,\r\n        CreditInformationDocument: res.data.Result.CreditInformationDocument,\r\n      });\r\n    });\r\n  };\r\n  const updateOtherBank = () => {\r\n    CommonServices.updateOtherBank(otherBankId, editSoleOtherBank)\r\n      .then((response) => {})\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n  useEffect(() => {\r\n    updateOtherBank();\r\n  }, []);\r\n  //add dependent\r\n  const [toggleSoleOtherBank, setToggleSoleOtherBank] = useState(false);\r\n  const [submitted, setSubmitted] = useState(false);\r\n  const initialSoleOtherBankState = {\r\n    Id: null,\r\n    FullName: \"\",\r\n    TinNumber: \"\",\r\n    BankName: \"\",\r\n    BranchName: \"\",\r\n    AccountNumber: \"\",\r\n    LoanTypeId: \"\",\r\n    ReportingDate: \"\",\r\n    CurrencyId: \"\",\r\n    ApprovedAmount: \"\",\r\n    StartDate: \"\",\r\n    MaturityDate: \"\",\r\n    RepaymentFrequencyId: \"\",\r\n    NumberOfInstallment: \"\",\r\n    InstallmentAmount: \"\",\r\n    OutstandingLoanBalance: \"\",\r\n    LoanStatusId: \"\",\r\n    NoOfDaysInArrears: \"\",\r\n    BalanceOverdue: \"\",\r\n    NoOfRestructuring: \"\",\r\n    RestructuredCreditReferenceNumber: \"\",\r\n    SectorTypeId: \"\",\r\n    IndustryTypeId: \"\",\r\n    CreditInformationDocument: \"\",\r\n  };\r\n  const [soleOtherBank, setSoleOtherBank] = useState(initialSoleOtherBankState);\r\n  // const handleInputChangeSoleGuarantor = (event) => {\r\n  //   const { name, value } = event.target;\r\n  //   setSoleGuarantor({ ...soleGuarantor, [name]: value });\r\n  // };\r\n  const handleInputChangeSoleOtherBank = (event) => {\r\n    const { name, value } = event.target;\r\n    setSoleOtherBank({ ...soleOtherBank, [name]: value });\r\n  };\r\n\r\n  const saveSoleOtherBank = () => {\r\n    var data = {\r\n      FullName: soleOtherBank.FullName,\r\n      TinNumber: soleOtherBank.TinNumber,\r\n      BankName: soleOtherBank.BankName,\r\n      BranchName: soleOtherBank.BranchName,\r\n      AccountNumber: soleOtherBank.AccountNumber,\r\n      LoanTypeId: soleOtherBank.LoanTypeId,\r\n      ReportingDate: reportingDate,\r\n      CurrencyId: soleOtherBank.CurrencyId,\r\n      ApprovedAmount: soleOtherBank.ApprovedAmount,\r\n      StartDate: startDate,\r\n      MaturityDate: maturityDate,\r\n      RepaymentFrequencyId: soleOtherBank.RepaymentFrequencyId,\r\n      NumberOfInstallment: soleOtherBank.NumberOfInstallment,\r\n      InstallmentAmount: soleOtherBank.InstallmentAmount,\r\n      OutstandingLoanBalance: soleOtherBank.OutstandingLoanBalance,\r\n      LoanStatusId: soleOtherBank.LoanStatusId,\r\n      NoOfDaysInArrears: soleOtherBank.NoOfDaysInArrears,\r\n      BalanceOverdue: soleOtherBank.BalanceOverdue,\r\n      NoOfRestructuring: soleOtherBank.NoOfRestructuring,\r\n      RestructuredCreditReferenceNumber:\r\n        soleOtherBank.RestructuredCreditReferenceNumber,\r\n      SectorTypeId: soleOtherBank.SectorTypeId,\r\n      IndustryTypeId: soleOtherBank.IndustryTypeId,\r\n      CreditInformationDocument: creditInformationDocument,\r\n    };\r\n    CommonServices.addOtherBank(soleID, data)\r\n      .then((response) => {\r\n        setSoleOtherBank({\r\n          Id: response.data.Id,\r\n          FullName: response.data.FullName,\r\n          TinNumber: response.data.TinNumber,\r\n          BankName: response.data.BankName,\r\n          BranchName: response.data.BranchName,\r\n          AccountNumber: response.data.AccountNumber,\r\n          LoanTypeId: response.data.LoanTypeId,\r\n          ReportingDate: response.data.ReportingDate,\r\n          CurrencyId: response.data.CurrencyId,\r\n          ApprovedAmount: response.data.ApprovedAmount,\r\n          StartDate: response.data.StartDate,\r\n          MaturityDate: response.data.MaturityDate,\r\n          RepaymentFrequencyId: response.data.RepaymentFrequencyId,\r\n          NumberOfInstallment: response.data.NumberOfInstallment,\r\n          InstallmentAmount: response.data.InstallmentAmount,\r\n          OutstandingLoanBalance: response.data.OutstandingLoanBalance,\r\n          LoanStatusId: response.data.LoanStatusId,\r\n          NoOfDaysInArrears: response.data.NoOfDaysInArrears,\r\n          BalanceOverdue: response.data.BalanceOverdue,\r\n          NoOfRestructuring: response.data.NoOfRestructuring,\r\n          RestructuredCreditReferenceNumber:\r\n            response.data.RestructuredCreditReferenceNumber,\r\n          SectorTypeId: response.data.SectorTypeId,\r\n          IndustryTypeId: response.data.IndustryTypeId,\r\n          CreditInformationDocument: response.data.CreditInformationDocument,\r\n        });\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n  //end dependent\r\n  const deleteGuarantor = (Id) => {\r\n    CommonServices.deleteDependent(Id)\r\n      .then((response) => {\r\n        // setDependentRelationshipType(response.data.Result);\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n  useEffect(() => {\r\n    deleteGuarantor();\r\n  }, []);\r\n\r\n  const [loan, setLoan] = useState([]);\r\n  const [currency, setCurrency] = useState([]);\r\n  const [GetRepayment, setGetRepayment] = useState([]);\r\n  const [selectedSector, setSelectedSector] = useState([]);\r\n  const [selectedSectorId, setSelectedSectorId] = useState([]);\r\n  const [loanStatus, setLoanStatus] = useState([]);\r\n  const [getIndustry, setGetIndustry] = useState([]);\r\n  debugger;\r\n  const loantype = () => {\r\n    CommonServices.getLoanType()\r\n      .then((response) => {\r\n        setLoan(response.data.Result);\r\n        console.log(response.data.Result);\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n  useEffect(() => {\r\n    loantype();\r\n  }, []);\r\n  const getCurrency = () => {\r\n    CommonServices.getCurrency()\r\n      .then((response) => {\r\n        setCurrency(response.data.Result);\r\n        console.log(response.data.Result);\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n  useEffect(() => {\r\n    getCurrency();\r\n  }, []);\r\n\r\n  const repayment = () => {\r\n    CommonServices.payment()\r\n      .then((response) => {\r\n        setGetRepayment(response.data.Result);\r\n        console.log(response.data.Result);\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n  useEffect(() => {\r\n    repayment();\r\n  }, []);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [isOtherBank, setIsOtherBank] = useState([]);\r\n  const getSector = () => {\r\n    setIsLoading(true);\r\n    CommonServices.sector()\r\n      .then((response) => {\r\n        setSelectedSector(response.data.Result);\r\n        // setSelectedSectorId(response.data.Result.Id);\r\n        console.log(response.data.Result);\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n    setIsLoading(false);\r\n  };\r\n  useEffect(() => {\r\n    getSector();\r\n  }, []);\r\n  const industry = (selectedSectorId) => {\r\n    setIsLoading(true);\r\n    CommonServices.holdIndustry(selectedSectorId)\r\n      .then((response) => {\r\n        setGetIndustry(response.data.Result);\r\n        debugger;\r\n        console.log(response.data.Result.Id);\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n    setIsLoading(false);\r\n  };\r\n  useEffect(() => {\r\n    industry();\r\n  }, []);\r\n  const getLoanStatusActive = () => {\r\n    CommonServices.getLoanStatus()\r\n      .then((response) => {\r\n        setLoanStatus(response.data.Result);\r\n        console.log(response.data.Result);\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n  useEffect(() => {\r\n    getLoanStatusActive();\r\n  }, []);\r\n  const deleteOtherBankCreditExposure = (Id) => {\r\n    const confirm = window.confirm(`Are you sure you want to delete it?`);\r\n    if (confirm) {\r\n      CommonServices.deleteOtherBank(Id)\r\n        .then((response) => {\r\n          console.log(response.data.Result);\r\n        })\r\n        .catch((e) => {\r\n          console.log(e);\r\n        });\r\n    }\r\n  };\r\n  return (\r\n    <div>\r\n      <CompanyModal\r\n        isOpen={isCompanySoleOtherBankModalOpen}\r\n        onClose={handleCompanySoleOtherBankCloseModal}\r\n        title=\"view Other Bank information\"\r\n      >\r\n        <div className=\"rounded-lg overflow-hidden overflow-x-scroll overflow-y-scroll \">\r\n          <AddOtherBank\r\n            soleOtherBank={soleOtherBank}\r\n            handleInputChangeSoleOtherBank={handleInputChangeSoleOtherBank}\r\n            saveSoleOtherBank={saveSoleOtherBank}\r\n            GetRepayment={GetRepayment}\r\n            loan={loan}\r\n            currency={currency}\r\n            industry={industry}\r\n            loanStatus={loanStatus}\r\n            selectedSector={selectedSector}\r\n            getIndustry={getIndustry}\r\n            setSelectedSectorId={setSelectedSectorId}\r\n            setCreditInformationDocument={setCreditInformationDocument}\r\n          />\r\n          {getOtherBankCredit ? (\r\n            <table className=\"table table-bordered table-striped bg-purple-100 \">\r\n              <thead>\r\n                <th className=\"px-2 py-4\"> Name</th>\r\n                <th className=\"px-2 py-4\"> Tin Number</th>\r\n                <th className=\"px-2 py-4\"> Bank Name</th>\r\n                <th className=\"px-2 py-4\"> Branch Name</th>\r\n                <th className=\"px-2 py-4\"> Account Number</th>\r\n                <th className=\"px-2 py-4\"> Loan Type</th>\r\n                <th className=\"px-2 py-4\"> Reporting Date</th>\r\n                <th className=\"px-2 py-4\"> Currency</th>\r\n                <th className=\"px-2 py-4\"> Approved Amount</th>\r\n                <th className=\"px-2 py-4\"> Start Date</th>\r\n                <th className=\"px-2 py-4\"> Maturity Date</th>\r\n                <th className=\"px-2 py-4\"> Repayment Frequency</th>\r\n                <th className=\"px-2 py-4\"> Number Of Installment</th>\r\n                <th className=\"px-2 py-4\"> Installment Amount</th>\r\n                <th className=\"px-2 py-4\"> Outstanding Loan Balance</th>\r\n                <th className=\"px-2 py-4\"> Loan Status</th>\r\n                <th className=\"px-2 py-4\"> No Of Days In Arrears</th>\r\n                <th className=\"px-2 py-4\"> Balance Overdue</th>\r\n                <th className=\"px-2 py-4\"> No Of Restructuring</th>\r\n                <th className=\"px-2 py-4\">\r\n                  {\" \"}\r\n                  Restructured Credit Reference Number\r\n                </th>\r\n                <th className=\"px-2 py-4\"> Sector Type</th>\r\n                <th className=\"px-2 py-4\"> Industry Type</th>\r\n                <th className=\"px-2 py-4\"> Credit Information Document</th>\r\n                <th className=\"px-2 py-4\"> Action </th>\r\n              </thead>\r\n              <tbody>\r\n                {getOtherBankCredit.map((otherBankData, index) => (\r\n                  <tr>\r\n                    {/* <td>{otherBankData.Id}</td> */}\r\n                    <td>{otherBankData.FullName} </td>\r\n                    <td>{otherBankData.TinNumber} </td>\r\n                    <td>{otherBankData.BankName}</td>\r\n                    <td>{otherBankData.BranchName}</td>\r\n                    <td>{otherBankData.AccountNumber}</td>\r\n                    <td>{otherBankData.LoanType}</td>\r\n                    <td>{otherBankData.ReportingDate}</td>\r\n                    <td>{otherBankData.Currency}</td>\r\n                    <td>{otherBankData.ApprovedAmount}</td>\r\n                    <td>{otherBankData.StartDate}</td>\r\n                    <td>{otherBankData.MaturityDate}</td>\r\n                    <td>{otherBankData.RepaymentFrequency}</td>\r\n                    <td>{otherBankData.NumberOfInstallment}</td>\r\n                    <td>{otherBankData.InstallmentAmount}</td>\r\n                    <td>{otherBankData.OutstandingLoanBalance}</td>\r\n                    <td>{otherBankData.LoanStatus}</td>\r\n                    <td>{otherBankData.NoOfDaysInArrears}</td>\r\n                    <td>{otherBankData.BalanceOverdue}</td>\r\n                    <td>{otherBankData.NoOfRestructuring}</td>\r\n                    <td>{otherBankData.RestructuredCreditReferenceNumber}</td>\r\n                    <td>{otherBankData.SectorType}</td>\r\n                    <td>{otherBankData.IndustryType}</td>\r\n                    <td>{otherBankData.CreditInformationDocument}</td>\r\n                    <td>\r\n                      <button\r\n                        onClick={() => {\r\n                          handleCompanySoleOtherBankEditedModalOpen();\r\n                          getOtherBankById(otherBankData.Id);\r\n                          setOtherBankId(otherBankData.Id);\r\n                        }}\r\n                        className=\"text-purple-600 rounded-md font-semibold \"\r\n                      >\r\n                        Edit\r\n                      </button>\r\n                    </td>\r\n                    <td>\r\n                      <button\r\n                        onClick={() => {\r\n                          deleteOtherBankCreditExposure(otherBankData.Id);\r\n                        }}\r\n                        className=\"text-purple-600 rounded-md font-semibold \"\r\n                      >\r\n                        delete\r\n                      </button>\r\n                    </td>\r\n                  </tr>\r\n                ))}\r\n              </tbody>\r\n            </table>\r\n          ) : (\r\n            \"\"\r\n          )}\r\n        </div>\r\n      </CompanyModal>\r\n      <CompanyModal\r\n        isOpen={isCompanySoleOtherBankEditedModalOpen}\r\n        onClose={handleCompanySoleOtherBankEditCloseModal}\r\n        title=\"guarantor edit information\"\r\n      >\r\n        <div>\r\n          <form onSubmit={updateOtherBank}>\r\n            <div className=\"relative center justify-center flex-1 w-full max-w-full grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\">\r\n              <LoanTextField\r\n                id=\"FullName\"\r\n                label=\"FullName\"\r\n                value={editSoleOtherBank.FullName}\r\n                onChange={handleInputChangeEditOtherBank}\r\n                name=\"FullName\"\r\n              />\r\n              <LoanTextField\r\n                id=\"TinNumber\"\r\n                label=\"TinNumber\"\r\n                value={editSoleOtherBank.TinNumber}\r\n                onChange={handleInputChangeEditOtherBank}\r\n                name=\"TinNumber\"\r\n              />\r\n              <LoanTextField\r\n                id=\"BankName\"\r\n                label=\"BankName\"\r\n                value={editSoleOtherBank.BankName}\r\n                onChange={handleInputChangeEditOtherBank}\r\n                name=\"BankName\"\r\n              />\r\n              <LoanTextField\r\n                id=\"BranchName\"\r\n                label=\"BranchName\"\r\n                value={editSoleOtherBank.BranchName}\r\n                onChange={handleInputChangeEditOtherBank}\r\n                name=\"BranchName\"\r\n              />\r\n              <LoanTextField\r\n                id=\"AccountNumber\"\r\n                label=\"AccountNumber\"\r\n                value={editSoleOtherBank.AccountNumber}\r\n                onChange={handleInputChangeEditOtherBank}\r\n                name=\"AccountNumber\"\r\n              />\r\n              <FormControl variant=\"standard\" sx={{ minWidth: 120 }}>\r\n                <InputLabel id=\"countrylbl\" color=\"secondary\">\r\n                  loan type\r\n                </InputLabel>\r\n                <Select\r\n                  color=\"secondary\"\r\n                  onChange={(event) =>\r\n                    (editSoleOtherBank.LoanTypeId = event.target.value)\r\n                  }\r\n                  labelId=\"loanType\"\r\n                  id=\"loanTypeSelected\"\r\n                  label=\"loanType\"\r\n                >\r\n                  <MenuItem value=\"\">\r\n                    <em>None</em>\r\n                  </MenuItem>\r\n                  {loan.map((yourLoan) => (\r\n                    <MenuItem\r\n                      key={yourLoan.Id}\r\n                      LoanTypeId={yourLoan.Id}\r\n                      value={yourLoan.Id}\r\n                    >\r\n                      {yourLoan.Name}\r\n                    </MenuItem>\r\n                  ))}\r\n                </Select>\r\n              </FormControl>\r\n              <p>\r\n                Reporting Date:\r\n                <input\r\n                  id=\"ReportingDate\"\r\n                  name=\"ReportingDate\"\r\n                  label=\"ReportingDate\"\r\n                  placeholder=\"ReportingDate\"\r\n                  type=\"date\"\r\n                  value={\r\n                    reportingDate.getFullYear().toString() +\r\n                    \"-\" +\r\n                    (reportingDate.getMonth() + 1).toString().padStart(2, 0) +\r\n                    \"-\" +\r\n                    reportingDate.getDate().toString().padStart(2, 0)\r\n                  }\r\n                  onChange={(e) => {\r\n                    setReportingDate(new Date(e.target.value));\r\n                    editSoleOtherBank.ReportingDate = reportingDate;\r\n                  }}\r\n                />{\" \"}\r\n              </p>\r\n              <FormControl variant=\"standard\" sx={{ minWidth: 120 }}>\r\n                <InputLabel id=\"countrylbl\" color=\"secondary\">\r\n                  currency\r\n                </InputLabel>\r\n                <Select\r\n                  color=\"secondary\"\r\n                  onChange={(event) =>\r\n                    (editSoleOtherBank.CurrencyId = event.target.value)\r\n                  }\r\n                  labelId=\"loanType\"\r\n                  id=\"loanTypeSelected\"\r\n                  label=\"loanType\"\r\n                >\r\n                  <MenuItem value=\"\">\r\n                    <em>None</em>\r\n                  </MenuItem>\r\n                  {currency.map((yourCurrency) => (\r\n                    <MenuItem\r\n                      key={yourCurrency.Id}\r\n                      LoanTypeId={yourCurrency.Id}\r\n                      value={yourCurrency.Id}\r\n                    >\r\n                      {yourCurrency.Name}\r\n                    </MenuItem>\r\n                  ))}\r\n                </Select>\r\n              </FormControl>\r\n              <LoanTextField\r\n                id=\"ApprovedAmount\"\r\n                label=\"ApprovedAmount\"\r\n                value={editSoleOtherBank.ApprovedAmount}\r\n                onChange={handleInputChangeEditOtherBank}\r\n                name=\"ApprovedAmount\"\r\n              />\r\n              <p>\r\n                Start Date:\r\n                <input\r\n                  id=\"StartDate\"\r\n                  name=\"StartDate\"\r\n                  label=\"StartDate\"\r\n                  placeholder=\"StartDate\"\r\n                  type=\"date\"\r\n                  value={\r\n                    startDate.getFullYear().toString() +\r\n                    \"-\" +\r\n                    (startDate.getMonth() + 1).toString().padStart(2, 0) +\r\n                    \"-\" +\r\n                    startDate.getDate().toString().padStart(2, 0)\r\n                  }\r\n                  onChange={(e) => {\r\n                    setStartDate(new Date(e.target.value));\r\n                    editSoleOtherBank.StartDate = startDate;\r\n                  }}\r\n                />{\" \"}\r\n              </p>\r\n              <p>\r\n                Maturity Date:\r\n                <input\r\n                  id=\"MaturityDate\"\r\n                  name=\"MaturityDate\"\r\n                  label=\"MaturityDate\"\r\n                  placeholder=\"MaturityDate\"\r\n                  type=\"date\"\r\n                  value={\r\n                    maturityDate.getFullYear().toString() +\r\n                    \"-\" +\r\n                    (maturityDate.getMonth() + 1).toString().padStart(2, 0) +\r\n                    \"-\" +\r\n                    maturityDate.getDate().toString().padStart(2, 0)\r\n                  }\r\n                  onChange={(e) => {\r\n                    setMaturityDate(new Date(e.target.value));\r\n                    editSoleOtherBank.MaturityDate = maturityDate;\r\n                  }}\r\n                />{\" \"}\r\n              </p>\r\n              {/* RepaymentFrequencyId */}\r\n              <FormControl variant=\"standard\" sx={{ minWidth: 120 }}>\r\n                <InputLabel id=\"countrylbl\" color=\"secondary\">\r\n                  Repayment Frequency\r\n                </InputLabel>\r\n                <Select\r\n                  color=\"secondary\"\r\n                  onChange={(event) =>\r\n                    (editSoleOtherBank.RepaymentFrequencyId =\r\n                      event.target.value)\r\n                  }\r\n                  labelId=\"repayment\"\r\n                  id=\"repaymentSelected\"\r\n                  label=\"repayment\"\r\n                >\r\n                  <MenuItem value=\"\">\r\n                    <em>None</em>\r\n                  </MenuItem>\r\n                  {GetRepayment.map((yourRepayment) => (\r\n                    <MenuItem\r\n                      key={yourRepayment.Id}\r\n                      RepaymentFrequencyId={yourRepayment.Id}\r\n                      value={yourRepayment.Id}\r\n                    >\r\n                      {yourRepayment.Name}\r\n                    </MenuItem>\r\n                  ))}\r\n                </Select>\r\n              </FormControl>\r\n              <LoanTextField\r\n                id=\"InstallmentAmount\"\r\n                label=\"InstallmentAmount\"\r\n                value={editSoleOtherBank.InstallmentAmount}\r\n                onChange={handleInputChangeEditOtherBank}\r\n                name=\"InstallmentAmount\"\r\n              />\r\n              <LoanTextField\r\n                id=\"OutstandingLoanBalance\"\r\n                label=\"OutstandingLoanBalance\"\r\n                value={editSoleOtherBank.OutstandingLoanBalance}\r\n                onChange={handleInputChangeEditOtherBank}\r\n                name=\"OutstandingLoanBalance\"\r\n              />\r\n              {/* LoanStatusId */}\r\n              <FormControl variant=\"standard\" sx={{ minWidth: 120 }}>\r\n                <InputLabel id=\"countrylbl\" color=\"secondary\">\r\n                  Loan Status\r\n                </InputLabel>\r\n                <Select\r\n                  color=\"secondary\"\r\n                  onChange={(event) =>\r\n                    (editSoleOtherBank.LoanStatusId = event.target.value)\r\n                  }\r\n                  labelId=\"LoanStatusId\"\r\n                  id=\"LoanStatusId\"\r\n                  label=\"LoanStatusId\"\r\n                >\r\n                  <MenuItem value=\"\">\r\n                    <em>None</em>\r\n                  </MenuItem>\r\n                  {loanStatus.map((yourLoanStatus) => (\r\n                    <MenuItem\r\n                      key={yourLoanStatus.Id}\r\n                      LoanStatusId={yourLoanStatus.Id}\r\n                      value={yourLoanStatus.Id}\r\n                    >\r\n                      {yourLoanStatus.Name}\r\n                    </MenuItem>\r\n                  ))}\r\n                </Select>\r\n              </FormControl>\r\n              <LoanTextField\r\n                id=\"NoOfDaysInArrears\"\r\n                label=\"NoOfDaysInArrears\"\r\n                value={editSoleOtherBank.NoOfDaysInArrears}\r\n                onChange={handleInputChangeEditOtherBank}\r\n                name=\"NoOfDaysInArrears\"\r\n              />\r\n              <LoanTextField\r\n                id=\"BalanceOverdue\"\r\n                label=\"BalanceOverdue\"\r\n                value={editSoleOtherBank.BalanceOverdue}\r\n                onChange={handleInputChangeEditOtherBank}\r\n                name=\"BalanceOverdue\"\r\n              />\r\n              <LoanTextField\r\n                id=\"NoOfRestructuring\"\r\n                label=\"NoOfRestructuring\"\r\n                value={editSoleOtherBank.NoOfRestructuring}\r\n                onChange={handleInputChangeEditOtherBank}\r\n                name=\"NoOfRestructuring\"\r\n              />\r\n              <LoanTextField\r\n                id=\"RestructuredCreditReferenceNumber\"\r\n                label=\"RestructuredCreditReferenceNumber\"\r\n                value={editSoleOtherBank.RestructuredCreditReferenceNumber}\r\n                onChange={handleInputChangeEditOtherBank}\r\n                name=\"RestructuredCreditReferenceNumber\"\r\n              />\r\n              {/* SectorTypeId */}\r\n              <FormControl variant=\"standard\" sx={{ minWidth: 120 }}>\r\n                <InputLabel id=\"countrylbl\" color=\"secondary\">\r\n                  Sector Type\r\n                </InputLabel>\r\n                <Select\r\n                  color=\"secondary\"\r\n                  onChange={(event) => {\r\n                    setSelectedSectorId(event.target.value);\r\n                    industry(event.target.value);\r\n                    editSoleOtherBank.SectorTypeId = event.target.value;\r\n                  }}\r\n                  labelId=\"SectorTypeId\"\r\n                  id=\"SectorTypeSelected\"\r\n                  label=\"SectorTypeId\"\r\n                >\r\n                  <MenuItem value=\"\">\r\n                    <em>None</em>\r\n                  </MenuItem>\r\n                  {selectedSector.map((yourSector) => (\r\n                    <MenuItem\r\n                      key={yourSector.Id}\r\n                      SectorTypeId={yourSector.Id}\r\n                      value={yourSector.Id}\r\n                    >\r\n                      {yourSector.Name}\r\n                    </MenuItem>\r\n                  ))}\r\n                </Select>\r\n              </FormControl>\r\n              <FormControl variant=\"standard\" sx={{ minWidth: 120 }}>\r\n                <InputLabel id=\"countrylbl\" color=\"secondary\">\r\n                  industry Type\r\n                </InputLabel>\r\n                <Select\r\n                  color=\"secondary\"\r\n                  onChange={(event) =>\r\n                    (editSoleOtherBank.IndustryTypeId = event.target.value)\r\n                  }\r\n                  labelId=\"IndustryTypeId\"\r\n                  id=\"IndustryTypeSelected\"\r\n                  label=\"IndustryTypeId\"\r\n                >\r\n                  <MenuItem value=\"\">\r\n                    <em>None</em>\r\n                  </MenuItem>\r\n                  {getIndustry.map((yourIndustry) => (\r\n                    <MenuItem\r\n                      key={yourIndustry.Id}\r\n                      IndustryTypeId={yourIndustry.Id}\r\n                      value={yourIndustry.Id}\r\n                    >\r\n                      {yourIndustry.Name}\r\n                    </MenuItem>\r\n                  ))}\r\n                </Select>\r\n              </FormControl>\r\n              {/* IndustryTypeId */}\r\n              <div>\r\n                {currentFile && (\r\n                  <div className=\"progress\">\r\n                    <div\r\n                      className=\"progress-bar progress-bar-info progress-bar-striped\"\r\n                      role=\"progressbar\"\r\n                      aria-valuenow={progress}\r\n                      aria-valuemin=\"0\"\r\n                      aria-valuemax=\"100\"\r\n                      style={{ width: progress + \"%\" }}\r\n                    >\r\n                      {progress}%\r\n                    </div>\r\n                  </div>\r\n                )}\r\n                <label className=\"btn btn-default\">\r\n                  <input type=\"file\" onChange={selectFile} />\r\n                </label>\r\n                <button\r\n                  className=\"btn btn-success\"\r\n                  disabled={!selectedFiles}\r\n                  onChange={\r\n                    (editSoleOtherBank.CreditInformationDocument =\r\n                      creditInformationDocument)\r\n                  }\r\n                  onClick={uploadCreditInformationDocument}\r\n                >\r\n                  Tax Certificate\r\n                </button>\r\n                <div className=\"alert alert-light\" role=\"alert\">\r\n                  {message}\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div>\r\n              <button className=\"bg-[purple] hover:bg-purple-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\">\r\n                Update\r\n              </button>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </CompanyModal>\r\n    </div>\r\n  );\r\n};\r\nexport default OtherBank;\r\n","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\SoleAndPartnership\\guarantor\\ViewSoleGuarantor.jsx",["1200","1201","1202","1203","1204","1205","1206","1207","1208","1209"],[],"import { useState, useEffect } from \"react\";\r\nimport CompanyModal from \"../../Common/CompanyModal\";\r\nimport LoanTextField from \"../../../Common/LoanTextField\";\r\nimport { Select, FormControl, MenuItem, InputLabel } from \"@mui/material\";\r\nimport CommonServices from \"../../Common/CommonServices\";\r\nimport ViewMaritalStatus from \"./ViewMaritalStatus\";\r\nimport ViewunMarried from \"./ViewUnMarried\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nconst ViewSoleGuarantor = ({\r\n  holdSoleGuarantor,\r\n  isCompanySoleGuarantorModalOpen,\r\n  handleCompanySoleGuarantorCloseModal,\r\n  handleCompanySoleGuarantorOpenModal,\r\n  soleID, //well transfer to add sole dependent\r\n}) => {\r\n  //upload\r\n  const [newCertificate, setNewCertificate] = useState(null);\r\n  const [selectedFiles, setSelectedFiles] = useState(undefined);\r\n  const [currentFile, setCurrentFile] = useState(undefined);\r\n  const [fileInfos, setFileInfos] = useState([]);\r\n  const [progress, setProgress] = useState(0);\r\n  const [message, setMessage] = useState(\"\");\r\n  const selectFile = (event) => {\r\n    setSelectedFiles(event.target.files);\r\n  };\r\n  //upload 1\r\n  const uploadCertificate = () => {\r\n    let currentFile = selectedFiles[0];\r\n    setProgress(0);\r\n    setCurrentFile(currentFile);\r\n    CommonServices.upload(currentFile, (event) => {\r\n      setProgress(Math.round((100 * event.loaded) / event.total));\r\n    })\r\n      .then((response) => {\r\n        setMessage(response.data.message);\r\n        setNewCertificate(response.data.Result);\r\n      })\r\n      .then((files) => {\r\n        setFileInfos(files.data);\r\n      })\r\n      .catch(() => {\r\n        setProgress(0);\r\n        setCurrentFile(undefined);\r\n      });\r\n    setSelectedFiles(undefined);\r\n  };\r\n  const [issueDate, setIssueDate] = useState(new Date());\r\n  const [expireddate, setExpireddate] = useState(new Date());\r\n  const [guarantorId, setGuarantorId] = useState([]);\r\n  const [proofOfIdentityType, setProofOfIdentityType] = useState([]);\r\n  const [dependentRelationshipType, setGuarantorRelationshipType] = useState(\r\n    []\r\n  );\r\n  const [\r\n    isCompanySoleGuarantorEditedModalOpen,\r\n    setIsCompanySoleGuarantorEditedModalOpen,\r\n  ] = useState(false);\r\n  function handleCompanySoleGuarantorEditCloseModal() {\r\n    setIsCompanySoleGuarantorEditedModalOpen(false);\r\n  }\r\n  function handleCompanySoleGuarantorEditedModalOpen() {\r\n    setIsCompanySoleGuarantorEditedModalOpen(true);\r\n  }\r\n  function handleCompanyGuarantorEditCloseModal() {\r\n    setIsCompanySoleGuarantorEditedModalOpen(false);\r\n  }\r\n  const [editSoleGuarantor, setEditSoleGuarantor] = useState({\r\n    // SoleAndPartnerShipId: soleID,\r\n    Id: guarantorId,\r\n    Name: \"\",\r\n    MartialStatusTypeId: \"\",\r\n    TaxClerance: {\r\n      Name: \"\",\r\n      TinNo: \"\",\r\n      Certificate: \"\",\r\n      IssueDate: \"\",\r\n      Expireddate: \"\",\r\n      TaxDebit: \"\",\r\n    },\r\n  });\r\n  const handleInputChangeEditGuarantor = (event) => {\r\n    const { name, value } = event.target;\r\n    setEditSoleGuarantor({ ...editSoleGuarantor, [name]: value });\r\n  };\r\n  const handleInputChangeEditTaxClearance = (event) => {\r\n    const { name, value } = event.target;\r\n    setEditSoleGuarantor({\r\n      ...editSoleGuarantor,\r\n      TaxClerance: {\r\n        ...editSoleGuarantor.TaxClerance,\r\n        [name]: value,\r\n      },\r\n    });\r\n  };\r\n  const getGuarantorById = (Id) => {\r\n    CommonServices.getGuarantorById(Id)\r\n      .then((res) => {\r\n        setEditSoleGuarantor({\r\n          ...editSoleGuarantor,\r\n          // SoleAndPartnerShipId: res.data.Result.SoleAndPartnerShipId,\r\n          Name: res.data.Result.Name,\r\n          MartialStatusTypeId: res.data.Result.MartialStatusTypeId,\r\n          TaxClerance: {\r\n            Name: res.data.Result.TaxClerance.Name,\r\n            MartialStatusTypeId:\r\n              res.data.Result.TaxClerance.MartialStatusTypeId,\r\n            TinNo: res.data.Result.TaxClerance.TinNo,\r\n            Certificate: res.data.Result.TaxClerance.Certificate,\r\n            IssueDate: res.data.Result.TaxClerance.IssueDate,\r\n            Expireddate: res.data.Result.TaxClerance.Expireddate,\r\n            TaxDebit: res.data.Result.TaxClerance.TaxDebit,\r\n          },\r\n        });\r\n      })\r\n      .catch((err) => console.log(err));\r\n  };\r\n  useEffect(() => {\r\n    getGuarantorById();\r\n  }, []);\r\n  const updateGuarantor = () => {\r\n    CommonServices.updateGuarantor(guarantorId, editSoleGuarantor)\r\n      .then((response) => {})\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n  useEffect(() => {\r\n    updateGuarantor();\r\n  }, []);\r\n  //add dependent\r\n  const [toggleSoleGuarantor, setToggleSoleGuarantor] = useState(false);\r\n  const [submitted, setSubmitted] = useState(false);\r\n  const initialSoleGuarantorState = {\r\n    Id: null,\r\n    Name: \"\",\r\n    MartialStatusTypeId: \"\",\r\n    TaxClerance: {\r\n      Name: \"\",\r\n      TinNo: \"\",\r\n      Certificate: \"\",\r\n      IssueDate: \"\",\r\n      Expireddate: \"\",\r\n      TaxDebit: \"\",\r\n    },\r\n  };\r\n  const [soleGuarantor, setSoleGuarantor] = useState(initialSoleGuarantorState);\r\n  const handleInputChangeSoleGuarantor = (event) => {\r\n    const { name, value } = event.target;\r\n    setSoleGuarantor({ ...soleGuarantor, [name]: value });\r\n  };\r\n  const handleInputChangeTaxClearance = (event) => {\r\n    const { name, value } = event.target;\r\n    setSoleGuarantor({\r\n      ...soleGuarantor,\r\n      TaxClerance: {\r\n        ...soleGuarantor.TaxClerance,\r\n        [name]: value,\r\n      },\r\n    });\r\n  };\r\n  const saveSoleGuarantor = () => {\r\n    var data = {\r\n      Name: soleGuarantor.Name,\r\n      MartialStatusTypeId: soleGuarantor.MartialStatusTypeId,\r\n      TaxClerance: {\r\n        Name: soleGuarantor.TaxClerance.Name,\r\n        TinNo: soleGuarantor.TaxClerance.TinNo,\r\n        Certificate: newCertificate,\r\n        IssueDate: issueDate,\r\n        Expireddate: expireddate,\r\n        TaxDebit: soleGuarantor.TaxClerance.TaxDebit,\r\n      },\r\n    };\r\n    CommonServices.addGuarantor(soleID, data)\r\n      .then((response) => {\r\n        setSoleGuarantor({\r\n          Id: response.data.Id,\r\n          Name: response.data.Name,\r\n          MartialStatusTypeId: response.data.MartialStatusTypeId,\r\n          TaxClerance: {\r\n            Name: response.data.TaxClerance.Name,\r\n            TinNo: response.data.TaxClerance.TinNo,\r\n            Certificate: response.data.TaxClerance.Certificate,\r\n            IssueDate: response.data.TaxClerance.IssueDate,\r\n            Expireddate: response.data.TaxClerance.Expireddate,\r\n            TaxDebit: response.data.TaxClerance.TaxDebit,\r\n          },\r\n        });\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n  //end dependent\r\n  const deleteGuarantor = (Id) => {\r\n    CommonServices.deleteDependent(Id)\r\n      .then((response) => {})\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n  useEffect(() => {\r\n    deleteGuarantor();\r\n  }, []);\r\n\r\n  const [maritalStatus, setMaritalStatus] = useState([]);\r\n  const getMaritailStatusGuarantor = () => {\r\n    CommonServices.getMaritalStatus()\r\n      .then((response) => {\r\n        setMaritalStatus(response.data.Result);\r\n        console.log(response.data.Result);\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n  useEffect(() => {\r\n    getMaritailStatusGuarantor();\r\n  }, []);\r\n  const [isCompanyMartailStatusModalOpen, setIsCompanyMartailStatusModalOpen] =\r\n    useState(false);\r\n  function handleCompanyMartailStatusOpenModal() {\r\n    setIsCompanyMartailStatusModalOpen(true);\r\n  }\r\n  function handleCompanyMartailStatusCloseModal() {\r\n    setIsCompanyMartailStatusModalOpen(false);\r\n  }\r\n\r\n  const [isCompanyUnMarriedOpenModal, setIsCompanyUnMarriedOpenModal] =\r\n    useState(false);\r\n  function handleCompanyUnMarriedOpenModal() {\r\n    setIsCompanyUnMarriedOpenModal(true);\r\n  }\r\n  function handleCompanyUnMarriedCloseModal() {\r\n    setIsCompanyUnMarriedOpenModal(false);\r\n  }\r\n  const fetchMartialStatus = (martailStatus) => {\r\n    if (martailStatus == \"Married\") {\r\n      handleCompanyMartailStatusOpenModal();\r\n    } else {\r\n      handleCompanyUnMarriedOpenModal();\r\n    }\r\n  };\r\n  const [holdMarried, setMarried] = useState([]);\r\n  const [holdUnMarried, setUnMarried] = useState([]);\r\n\r\n  const getGuarantorSpouse = (guarantorId) => {\r\n    debugger;\r\n    CommonServices.getGuarantorSpouse(guarantorId)\r\n      .then((response) => {\r\n        setMarried(response.data.Result);\r\n        console.log(response.data.Result);\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n  const getGuarantorUnmarried = (guarantorId) => {\r\n    debugger;\r\n    CommonServices.getGuarantorUnMarried(guarantorId)\r\n      .then((response) => {\r\n        setUnMarried(response.data.Result);\r\n        console.log(response.data.Result);\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n  return (\r\n    <div>\r\n      <>\r\n        <CompanyModal\r\n          isOpen={isCompanySoleGuarantorModalOpen}\r\n          onClose={handleCompanySoleGuarantorCloseModal}\r\n          title=\"view Guarantor information\"\r\n        >\r\n          <ViewMaritalStatus\r\n            holdMarried={holdMarried}\r\n            isCompanyMartailStatusModalOpen={isCompanyMartailStatusModalOpen}\r\n            handleCompanyMartailStatusCloseModal={\r\n              handleCompanyMartailStatusCloseModal\r\n            }\r\n            handleMaritalStatusModalOpen={handleCompanyMartailStatusOpenModal}\r\n            guarantorId={guarantorId}\r\n          />\r\n          <ViewunMarried\r\n            holdUnMarried={holdUnMarried}\r\n            isCompanyUnMarriedModalOpen={isCompanyUnMarriedOpenModal}\r\n            handleCompanyUnMarriedCloseModal={handleCompanyUnMarriedCloseModal}\r\n            handleUnMarriedModalOpen={handleCompanyUnMarriedOpenModal}\r\n            guarantorId={guarantorId}\r\n          />\r\n          <div className=\"rounded-lg overflow-hidden\">\r\n            {holdSoleGuarantor.TaxClerance ? (\r\n              <table className=\"table table-bordered table-striped bg-purple-100\">\r\n                <thead>\r\n                  <th className=\"px-2 py-4\">Name</th>\r\n                  <th className=\"px-2 py-4\">marital status</th>\r\n                  <th className=\"px-2 py-4\"> Tax Name</th>\r\n                  <th className=\"px-2 py-4\"> TinNo</th>\r\n                  <th className=\"px-2 py-4\"> Certificate</th>\r\n                  <th className=\"px-2 py-4\"> Issue Date</th>\r\n                  <th className=\"px-2 py-4\"> Expired date</th>\r\n                  <th className=\"px-2 py-4\"> Tax Debit</th>\r\n                  <th className=\"px-2 py-4\"> Marital Status details</th>\r\n                  <th className=\"px-2 py-4\"> Action </th>\r\n                </thead>\r\n                <tbody>\r\n                  <>\r\n                    <tr>\r\n                      {/* <td>{holdSoleGuarantor.Id}</td> */}\r\n                      <td>{holdSoleGuarantor.Name}</td>\r\n                      <td>{holdSoleGuarantor.MartialStatusType}</td>\r\n                      <td>{holdSoleGuarantor.TaxClerance.Name}</td>\r\n                      <td>{holdSoleGuarantor.TaxClerance.TinNo}</td>\r\n                      <td>{holdSoleGuarantor.TaxClerance.Certificate}</td>\r\n                      <td>{holdSoleGuarantor.TaxClerance.IssueDate}</td>\r\n                      <td>{holdSoleGuarantor.TaxClerance.Expireddate}</td>\r\n                      <td>{holdSoleGuarantor.TaxClerance.TaxDebit}</td>\r\n                      {/* <td>{holdSoleGuarantor.MartialStatusType}</td> */}\r\n                      <td>\r\n                        <button\r\n                          type=\"submit\"\r\n                          onClick={() => {\r\n                            fetchMartialStatus(\r\n                              holdSoleGuarantor.MartialStatusType\r\n                            );\r\n                            getGuarantorSpouse(holdSoleGuarantor.Id);\r\n                            getGuarantorUnmarried(holdSoleGuarantor.Id);\r\n                            setGuarantorId(holdSoleGuarantor.Id);\r\n                          }}\r\n                          className=\"text-purple-600 rounded-md font-semibold \"\r\n                        >\r\n                          Marital status detail\r\n                        </button>\r\n                      </td>\r\n                      <td>\r\n                        <button\r\n                          onClick={() => {\r\n                            handleCompanySoleGuarantorEditedModalOpen();\r\n                            getGuarantorById(holdSoleGuarantor.Id);\r\n                            setGuarantorId(holdSoleGuarantor.Id);\r\n                          }}\r\n                          className=\"text-purple-600 rounded-md font-semibold \"\r\n                        >\r\n                          Edit\r\n                        </button>\r\n                      </td>\r\n                    </tr>\r\n                  </>\r\n                  {/* ))} */}\r\n                </tbody>\r\n              </table>\r\n            ) : (\r\n              \"\"\r\n            )}\r\n            <button\r\n              onClick={() => setToggleSoleGuarantor(!toggleSoleGuarantor)}\r\n              className=\"text-purple-600 rounded-md font-medium \"\r\n            >\r\n              Add guarantor\r\n            </button>\r\n            {toggleSoleGuarantor && (\r\n              <div className=\"submit-form\">\r\n                {submitted ? (\r\n                  <div>\r\n                    <h4>You submitted successfully!</h4>\r\n                  </div>\r\n                ) : (\r\n                  <div className=\"relative center justify-center flex-1 w-full max-w-full grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\">\r\n                    <LoanTextField\r\n                      id=\"Name\"\r\n                      label=\"Name\"\r\n                      value={soleGuarantor.Name}\r\n                      onChange={handleInputChangeSoleGuarantor}\r\n                      name=\"Name\"\r\n                    />\r\n                    <FormControl variant=\"standard\" sx={{ minWidth: 120 }}>\r\n                      <InputLabel id=\"countrylbl\" color=\"secondary\">\r\n                        marital status\r\n                      </InputLabel>\r\n                      <Select\r\n                        color=\"secondary\"\r\n                        onChange={(event) =>\r\n                          (soleGuarantor.MartialStatusTypeId =\r\n                            event.target.value)\r\n                        }\r\n                        labelId=\"loanType\"\r\n                        id=\"loanTypeSelected\"\r\n                        label=\"loanType\"\r\n                      >\r\n                        <MenuItem value=\"\">\r\n                          <em>None</em>\r\n                        </MenuItem>\r\n                        {maritalStatus.map((yourMarital) => (\r\n                          <MenuItem\r\n                            key={yourMarital.Id}\r\n                            MartialStatusTypeId={yourMarital.Id}\r\n                            value={yourMarital.Id}\r\n                          >\r\n                            {yourMarital.Name}\r\n                          </MenuItem>\r\n                        ))}\r\n                      </Select>\r\n                    </FormControl>\r\n                    <LoanTextField\r\n                      id=\"Name\"\r\n                      label=\"Name\"\r\n                      value={soleGuarantor.TaxClerance.Name}\r\n                      onChange={handleInputChangeTaxClearance}\r\n                      name=\"Name\"\r\n                    />\r\n                    <LoanTextField\r\n                      id=\"TinNo\"\r\n                      label=\"TinNo\"\r\n                      value={soleGuarantor.TaxClerance.TinNo}\r\n                      onChange={handleInputChangeTaxClearance}\r\n                      name=\"TinNo\"\r\n                    />\r\n                    <div>\r\n                      {currentFile && (\r\n                        <div className=\"progress\">\r\n                          <div\r\n                            className=\"progress-bar progress-bar-info progress-bar-striped\"\r\n                            role=\"progressbar\"\r\n                            aria-valuenow={progress}\r\n                            aria-valuemin=\"0\"\r\n                            aria-valuemax=\"100\"\r\n                            style={{ width: progress + \"%\" }}\r\n                          >\r\n                            {progress}%\r\n                          </div>\r\n                        </div>\r\n                      )}\r\n                      <label className=\"btn btn-default\">\r\n                        <input type=\"file\" onChange={selectFile} />\r\n                      </label>\r\n                      <button\r\n                        className=\"bg-[#715171] hover:bg-purple-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\"\r\n                        disabled={!selectedFiles}\r\n                        onClick={uploadCertificate}\r\n                      >\r\n                        Tax Certificate\r\n                      </button>\r\n                      <div className=\"alert alert-light\" role=\"alert\">\r\n                        {message}\r\n                      </div>\r\n                    </div>\r\n                    <p>\r\n                      issue Date:\r\n                      <div>\r\n                        <DatePicker\r\n                          selected={issueDate}\r\n                          onChange={(issueDate) => setIssueDate(issueDate)}\r\n                        />\r\n                      </div>\r\n                    </p>\r\n                    <p>\r\n                      Expired Date:\r\n                      <div>\r\n                        <DatePicker\r\n                          selected={expireddate}\r\n                          onChange={(expireddate) =>\r\n                            setExpireddate(expireddate)\r\n                          }\r\n                        />\r\n                      </div>\r\n                    </p>\r\n                    <LoanTextField\r\n                      id=\"TaxDebit\"\r\n                      label=\"TaxDebit\"\r\n                      value={soleGuarantor.TaxClerance.TaxDebit}\r\n                      onChange={handleInputChangeTaxClearance}\r\n                      name=\"TaxDebit\"\r\n                    />\r\n                  </div>\r\n                )}\r\n                <div>\r\n                  <button\r\n                    className=\"bg-[purple] hover:bg-purple-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\"\r\n                    onClick={() => {\r\n                      saveSoleGuarantor();\r\n                    }}\r\n                  >\r\n                    save\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            )}\r\n          </div>\r\n        </CompanyModal>\r\n        <CompanyModal\r\n          isOpen={isCompanySoleGuarantorEditedModalOpen}\r\n          onClose={handleCompanySoleGuarantorEditCloseModal}\r\n          title=\"guarantor edit information\"\r\n        >\r\n          <div>\r\n            <form onSubmit={updateGuarantor}>\r\n              <div className=\"relative center justify-center flex-1 w-full max-w-full grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\">\r\n                <LoanTextField\r\n                  id=\"Name\"\r\n                  label=\"Name\"\r\n                  value={editSoleGuarantor.Name}\r\n                  onChange={handleInputChangeEditGuarantor}\r\n                  name=\"Name\"\r\n                />\r\n                <FormControl variant=\"standard\" sx={{ minWidth: 120 }}>\r\n                  <InputLabel id=\"countrylbl\" color=\"secondary\">\r\n                    marital status\r\n                  </InputLabel>\r\n                  <Select\r\n                    color=\"secondary\"\r\n                    onChange={(event) =>\r\n                      (editSoleGuarantor.MartialStatusTypeId =\r\n                        event.target.value)\r\n                    }\r\n                    labelId=\"loanType\"\r\n                    id=\"loanTypeSelected\"\r\n                    label=\"loanType\"\r\n                  >\r\n                    <MenuItem value=\"\">\r\n                      <em>None</em>\r\n                    </MenuItem>\r\n                    {maritalStatus.map((yourMarital) => (\r\n                      <MenuItem\r\n                        key={yourMarital.Id}\r\n                        MartialStatusTypeId={yourMarital.Id}\r\n                        value={yourMarital.Id}\r\n                      >\r\n                        {yourMarital.Name}\r\n                      </MenuItem>\r\n                    ))}\r\n                  </Select>\r\n                </FormControl>\r\n                <LoanTextField\r\n                  id=\"Name\"\r\n                  label=\"Name\"\r\n                  value={editSoleGuarantor.TaxClerance.Name}\r\n                  onChange={handleInputChangeEditTaxClearance}\r\n                  name=\"Name\"\r\n                />\r\n                <LoanTextField\r\n                  id=\"TinNo\"\r\n                  label=\"TinNo\"\r\n                  value={editSoleGuarantor.TaxClerance.TinNo}\r\n                  onChange={handleInputChangeEditTaxClearance}\r\n                  name=\"TinNo\"\r\n                />\r\n                <div>\r\n                  {currentFile && (\r\n                    <div className=\"progress\">\r\n                      <div\r\n                        className=\"progress-bar progress-bar-info progress-bar-striped\"\r\n                        role=\"progressbar\"\r\n                        aria-valuenow={progress}\r\n                        aria-valuemin=\"0\"\r\n                        aria-valuemax=\"100\"\r\n                        style={{ width: progress + \"%\" }}\r\n                      >\r\n                        {progress}%\r\n                      </div>\r\n                    </div>\r\n                  )}\r\n                  <label className=\"btn btn-default\">\r\n                    <input type=\"file\" onChange={selectFile} />\r\n                  </label>\r\n                  <button\r\n                    className=\"bg-[#2c0d2c] hover:bg-purple-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\"\r\n                    disabled={!selectedFiles}\r\n                    onChange={\r\n                      (editSoleGuarantor.TaxClerance.Certificate =\r\n                        newCertificate)\r\n                    }\r\n                    onClick={uploadCertificate}\r\n                  >\r\n                    upload Tax Certificate\r\n                  </button>\r\n                  <div className=\"alert alert-light\" role=\"alert\">\r\n                    {message}\r\n                  </div>\r\n                </div>\r\n                <p>\r\n                  Issue Date:\r\n                  <input\r\n                    id=\"issueDate\"\r\n                    name=\"issueDate\"\r\n                    label=\"issueDate\"\r\n                    placeholder=\"issueDate\"\r\n                    type=\"date\"\r\n                    value={\r\n                      issueDate.getFullYear().toString() +\r\n                      \"-\" +\r\n                      (issueDate.getMonth() + 1).toString().padStart(2, 0) +\r\n                      \"-\" +\r\n                      issueDate.getDate().toString().padStart(2, 0)\r\n                    }\r\n                    onChange={(e) => {\r\n                      setIssueDate(new Date(e.target.value));\r\n                      editSoleGuarantor.TaxClerance.IssueDate = issueDate;\r\n                    }}\r\n                  />{\" \"}\r\n                </p>\r\n                <p>\r\n                  Expired Date:\r\n                  <input\r\n                    id=\"Expireddate\"\r\n                    name=\"Expireddate\"\r\n                    label=\"Expireddate\"\r\n                    placeholder=\"Expireddate\"\r\n                    type=\"date\"\r\n                    value={\r\n                      expireddate.getFullYear().toString() +\r\n                      \"-\" +\r\n                      (expireddate.getMonth() + 1).toString().padStart(2, 0) +\r\n                      \"-\" +\r\n                      expireddate.getDate().toString().padStart(2, 0)\r\n                    }\r\n                    onChange={(e) => {\r\n                      setExpireddate(new Date(e.target.value));\r\n                      editSoleGuarantor.TaxClerance.Expireddate = expireddate;\r\n                    }}\r\n                  />{\" \"}\r\n                </p>\r\n                <LoanTextField\r\n                  id=\"TaxDebit\"\r\n                  label=\"TaxDebit\"\r\n                  value={editSoleGuarantor.TaxClerance.TaxDebit}\r\n                  onChange={handleInputChangeEditTaxClearance}\r\n                  name=\"TaxDebit\"\r\n                />\r\n              </div>\r\n              <div>\r\n                <button className=\"bg-[purple] hover:bg-purple-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\">\r\n                  Update\r\n                </button>\r\n              </div>\r\n            </form>\r\n          </div>\r\n        </CompanyModal>\r\n      </>\r\n    </div>\r\n  );\r\n};\r\nexport default ViewSoleGuarantor;\r\n","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\SOEAndGovernmental\\UploadSOEAndGovernmental.jsx",[],[],"C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\SOEAndGovernmental\\EditSOEAndGovernmentalComponent.jsx",[],[],"C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\SOEAndGovernmental\\Tax\\AddSOEAndGovernmentalTax.jsx",["1210"],[],"import LoanTextField from \"../../../Common/LoanTextField\";\r\nimport { TextField } from \"@mui/material\";\r\nimport LoanDateTime from \"../../../Common/LoanDateTime\";\r\nimport { LocalizationProvider } from \"@mui/x-date-pickers/LocalizationProvider\";\r\nimport { AdapterDayjs } from \"@mui/x-date-pickers/AdapterDayjs\";\r\nimport { DesktopDatePicker } from \"@mui/x-date-pickers/DesktopDatePicker\";\r\nconst AddSOEAndGovernmentalTax = ({\r\n  SaveSOEAndGovernmentalTax,\r\n  soeAndGovernmentalTax,\r\n  handleInputChangeSoeAndGovernmentalTax,\r\n}) => {\r\n  return (\r\n    <div className=\"border border-solid border-purple-100 mt-4\">\r\n      <form onSubmit={SaveSOEAndGovernmentalTax}>\r\n        <div className=\"justify-center flex-1 w-full max-w-full grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4 p-4\">\r\n          <LoanTextField\r\n            id=\"Name\"\r\n            label=\"Name\"\r\n            color=\"secondary\"\r\n            variant=\"standard\"\r\n            placeholder=\"Name\"\r\n          />\r\n          <LoanTextField\r\n            id=\"TinNo\"\r\n            label=\"TinNo\"\r\n            color=\"secondary\"\r\n            variant=\"standard\"\r\n            placeholder=\"TinNo\"\r\n          />\r\n          <LoanTextField\r\n            id=\"Certificate\"\r\n            label=\"Certificate\"\r\n            color=\"secondary\"\r\n            variant=\"standard\"\r\n            placeholder=\"Certificate\"\r\n          />\r\n          <LocalizationProvider dateAdapter={AdapterDayjs}>\r\n            <DesktopDatePicker\r\n              id=\"IssueDate\"\r\n              color=\"secondary\"\r\n              label=\"Issue Date\"\r\n              inputFormat=\"MM/DD/YYYY\"\r\n              className=\"w-full max-w-full\"\r\n              slotProps={{\r\n                textField: { variant: \"standard\", color: \"secondary\" },\r\n              }}\r\n              renderInput={() => (\r\n                <TextField\r\n                //   value={credit.registeredDate}\r\n                //   onChange={handleLoanInputChange}\r\n                />\r\n              )}\r\n            />\r\n          </LocalizationProvider>\r\n          <LocalizationProvider dateAdapter={AdapterDayjs}>\r\n            <DesktopDatePicker\r\n              id=\"Expireddate\"\r\n              color=\"secondary\"\r\n              label=\"Expired Date\"\r\n              inputFormat=\"MM/DD/YYYY\"\r\n              className=\"w-full max-w-full\"\r\n              slotProps={{\r\n                textField: { variant: \"standard\", color: \"secondary\" },\r\n              }}\r\n              //   renderInput={() => (\r\n              //     <TextField\r\n              //       value={credit.registeredDate}\r\n              //       onChange={handleLoanInputChange}\r\n              //     />\r\n              //   )}\r\n            />\r\n          </LocalizationProvider>\r\n          <LoanTextField\r\n            id=\"TaxDebit\"\r\n            label=\"TaxDebit\"\r\n            color=\"secondary\"\r\n            variant=\"standard\"\r\n            placeholder=\"TaxDebit\"\r\n          />\r\n        </div>\r\n        <div className=\"flex justify-center p-4\">\r\n          <button\r\n            type=\"submit\"\r\n            className=\"bg-[purple] hover:bg-purple-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\"\r\n          >\r\n            Save\r\n          </button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AddSOEAndGovernmentalTax;\r\n","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\PLCAndShare\\guarantor\\Guarantor.jsx",["1211","1212","1213","1214","1215","1216","1217","1218","1219"],[],"import { useState, useEffect } from \"react\";\r\nimport CompanyModal from \"../../Common/CompanyModal\";\r\nimport LoanTextField from \"../../../Common/LoanTextField\";\r\nimport { Select, FormControl, MenuItem, InputLabel } from \"@mui/material\";\r\nimport PLCAndShareService from \"../PLCAndShareService\";\r\nimport ViewMaritalStatus from \"../ViewMaritalStatus\";\r\nimport ViewUnMarried from \"../ViewUnMarried\";\r\nconst Guarantor = ({\r\n  holdGuarantor,\r\n  PLCAndShareInformationId,\r\n  isCompanyGuarantorModalOpen,\r\n  handleCompanyGuarantorCloseModal,\r\n}) => {\r\n  const [expiredDateEdit, setExpiredDateEdit] = useState(new Date());\r\n  const [issueDateEdit, setIssueDateEdit] = useState(new Date());\r\n  const [issueDate, setIssueDate] = useState(new Date());\r\n  const [expireddate, setExpireddate] = useState(new Date());\r\n  const [selectedPathCert, setSelectedPathCert] = useState(null);\r\n  const [selectedPathCertsp, setSelectedPathCertsp] = useState(null);\r\n  const [selectedPathCertEdit, setSelectedPathCertEdit] = useState(null);\r\n  const [selectedPathCertspEdit, setSelectedPathCertspEdit] = useState(null);\r\n  const [selectedFiles, setSelectedFiles] = useState(undefined);\r\n  const [currentFile, setCurrentFile] = useState(undefined);\r\n  const [fileInfos, setFileInfos] = useState([]);\r\n  const [progress, setProgress] = useState(0);\r\n  const [message, setMessage] = useState(\"\");\r\n  const selectFileCert = (event) => {\r\n    setSelectedFiles(event.target.files);\r\n  };\r\n  const uploadCert = () => {\r\n    let currentFile = selectedFiles[0];\r\n    setProgress(0);\r\n    setCurrentFile(currentFile);\r\n\r\n    PLCAndShareService.uploadGuarantor(currentFile, (event) => {\r\n      setProgress(Math.round((100 * event.loaded) / event.total));\r\n    })\r\n      .then((response) => {\r\n        setMessage(response.data.message);\r\n        setSelectedPathCert(response.data.Result);\r\n      })\r\n      .then((files) => {\r\n        setFileInfos(files.data);\r\n      })\r\n      .catch(() => {\r\n        setProgress(0);\r\n        // setMessage(\"Could not upload the file!\");\r\n        setCurrentFile(undefined);\r\n      });\r\n    setSelectedFiles(undefined);\r\n  };\r\n  //Start Upload Edit\r\n  const selectFileCertEdit = (event) => {\r\n    setSelectedFiles(event.target.files);\r\n  };\r\n  const uploadCertEdit = () => {\r\n    let currentFile = selectedFiles[0];\r\n    setProgress(0);\r\n    setCurrentFile(currentFile);\r\n\r\n    PLCAndShareService.uploadGuarantor(currentFile, (event) => {\r\n      setProgress(Math.round((100 * event.loaded) / event.total));\r\n    })\r\n      .then((response) => {\r\n        setMessage(response.data.message);\r\n        setSelectedPathCertEdit(response.data.Result);\r\n      })\r\n      .then((files) => {\r\n        setFileInfos(files.data);\r\n      })\r\n      .catch(() => {\r\n        setProgress(0);\r\n        // setMessage(\"Could not upload the file!\");\r\n        setCurrentFile(undefined);\r\n      });\r\n    setSelectedFiles(undefined);\r\n  };\r\n  const [HoldUnMarried, setHoldUnMarried] = useState([]);\r\n  const getUnMarried = (Id) => {\r\n    PLCAndShareService.getCompanyPLCAndShareGuarantorUnmarriedInfo(Id)\r\n      .then((response) => {\r\n          setHoldUnMarried(response.data.Result);\r\n        console.log(response.data.Result);\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n  //End Upload Edit\r\n  const [GetMaritalStatusType, setGetMaritalStatusType] = useState([]);\r\n  const [\r\n    isCompanyGuarantorEditedModalOpen,\r\n    setIsCompanyGuarantorEditedModalOpen,\r\n  ] = useState(false);\r\n  function handleCompanyGuarantorEditCloseModal() {\r\n    setIsCompanyGuarantorEditedModalOpen(false);\r\n  }\r\n  function handleCompanyGuarantorEditedModalOpen() {\r\n    setIsCompanyGuarantorEditedModalOpen(true);\r\n  }\r\n  const [guarantorInformationId, setGuarantorId] = useState();\r\n  const [editGuarantor, setEditGuarantor] = useState({\r\n    Name: \"\",\r\n    MartialStatusTypeId: \"\",\r\n    TaxClerance: {\r\n      Name: \"\",\r\n      TinNo: \"\",\r\n      Certificate: \"\",\r\n      IssueDate: \"\",\r\n      Expireddate: \"\",\r\n      TaxDebit: \"\",\r\n    },\r\n  });\r\n  const handleInputChangeEditGuarantor = (event) => {\r\n    const { name, value } = event.target;\r\n    setEditGuarantor({ ...editGuarantor, [name]: value });\r\n  };\r\n  const handleInputChangeEditTaxClerance = (event) => {\r\n    const { name, value } = event.target;\r\n    setEditGuarantor({\r\n      ...editGuarantor,\r\n      TaxClerance: {\r\n        ...editGuarantor.TaxClerance,\r\n        [name]: value\r\n      },\r\n    });\r\n  };\r\n  const getGuarantorById = (guarantorInformationId) => {\r\n    PLCAndShareService.getGuarantorById(guarantorInformationId)\r\n      .then((res) => {\r\n        setEditGuarantor({\r\n          ...editGuarantor,\r\n          Name: res.data.Result.Name,\r\n          MartialStatusTypeId: res.data.Result.MartialStatusTypeId,\r\n          TaxClerance: {\r\n            Name: res.data.Result.TaxClerance.Name,\r\n            TinNo: res.data.Result.TaxClerance.TinNo,\r\n            Certificate: res.data.Result.TaxClerance.Certificate,\r\n            IssueDate: res.data.Result.TaxClerance.IssueDate,\r\n            Expireddate: res.data.Result.TaxClerance.Expireddate,\r\n            TaxDebit: res.data.Result.TaxClerance.TaxDebit,\r\n          },\r\n        });\r\n      })\r\n      .catch((err) => console.log(err));\r\n  };\r\n  useEffect(() => {\r\n    getGuarantorById();\r\n  }, []);\r\n  const updateGuarantorById = () => {\r\n    PLCAndShareService.updateGuarantor(guarantorInformationId, editGuarantor)\r\n      .then((response) => { })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n  useEffect(() => {\r\n    updateGuarantorById();\r\n  }, []);\r\n  const [toggleGuarantor, setToggleGuarantor] = useState(false);\r\n  const initialGuarantorState = {\r\n    Id: null,\r\n    guarantorId: PLCAndShareInformationId,\r\n    Name: \"\",\r\n    MartialStatusTypeId: \"\",\r\n    TaxClerance: {\r\n      Name: \"\",\r\n      TinNo: \"\",\r\n      Certificate: selectedPathCert,\r\n      IssueDate: \"\",\r\n      Expireddate: \"\",\r\n      TaxDebit: \"\",\r\n    },\r\n  };\r\n  const [Guarantor, setGuarantor] = useState(initialGuarantorState);\r\n  const handleInputChangeGuarantor = (event) => {\r\n    const { name, value } = event.target;\r\n    setGuarantor({ ...Guarantor, [name]: value });\r\n  };\r\n  const handleInputChangeTaxClearance = (event) => {\r\n    const { name, value } = event.target;\r\n    setGuarantor({\r\n      ...Guarantor,\r\n      TaxClerance: {\r\n        ...Guarantor.TaxClerance,\r\n        [name]: value\r\n      },\r\n    });\r\n  };\r\n  const saveGuarantor = () => {\r\n    var data = {\r\n      Name: Guarantor.Name,\r\n      MartialStatusTypeId: Guarantor.MartialStatusTypeId,\r\n      TaxClerance: {\r\n        Name: Guarantor.TaxClerance.Name,\r\n        TinNo: Guarantor.TaxClerance.TinNo,\r\n        Certificate: selectedPathCert,\r\n        IssueDate: issueDate,\r\n        Expireddate: expireddate,\r\n        TaxDebit: Guarantor.TaxClerance.TaxDebit,\r\n      },\r\n    };\r\n    PLCAndShareService.addGuarantor(data, PLCAndShareInformationId)\r\n      .then((response) => {\r\n        setGuarantor({\r\n          Id: response.data.Id,\r\n          Name: response.data.Name,\r\n          MartialStatusTypeId: response.data.MartialStatusTypeId,\r\n          TaxClerance: {\r\n            Name: response.data.TaxClerance.Name,\r\n            TinNo: response.data.TaxClerance.TinNo,\r\n            Certificate: response.data.TaxClerance.Certificate,\r\n            IssueDate: response.data.TaxClerance.IssueDate,\r\n            Expireddate: response.data.TaxClerance.Expireddate,\r\n            TaxDebit: response.data.TaxClerance.TaxDebit,\r\n          },\r\n        });\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n  const MaritalStatusType = () => {\r\n\r\n    PLCAndShareService.MaritalStatus()\r\n\r\n      .then((response) => {\r\n\r\n        setGetMaritalStatusType(response.data.Result);\r\n\r\n        console.log(response.data.Result);\r\n\r\n      })\r\n\r\n      .catch((e) => {\r\n\r\n        console.log(e);\r\n\r\n      });\r\n\r\n  };\r\n\r\n  useEffect(() => {\r\n\r\n    MaritalStatusType();\r\n\r\n  }, []);\r\n\r\n  const [isCompanyMartailStatusModalOpen, setIsCompanyMartailStatusModalOpen] =\r\n\r\n    useState(false);\r\n\r\n  function handleCompanyMartailStatusOpenModal() {\r\n\r\n    setIsCompanyMartailStatusModalOpen(true);\r\n\r\n  }\r\n\r\n  function handleCompanyMartailStatusCloseModal() {\r\n\r\n    setIsCompanyMartailStatusModalOpen(false);\r\n\r\n  }\r\n\r\n\r\n  const [isCompanyGuarantorUnMarriedModalOpen, IseIsCompanyGuarantorUnMarriedModalOpen] =\r\n\r\n    useState(false);\r\n\r\n  function handleGuarantorUnMarriedOpenModal() {\r\n\r\n    IseIsCompanyGuarantorUnMarriedModalOpen(true);\r\n\r\n  }\r\n\r\n  function handleGuarantorUnMarriedCloseModal() {\r\n\r\n    IseIsCompanyGuarantorUnMarriedModalOpen(false);\r\n\r\n  }\r\n  const fetchMartialStatus = (martailStatus) => {\r\n\r\n    if (martailStatus == \"Married\") {\r\n\r\n      handleCompanyMartailStatusOpenModal();\r\n\r\n    } else {\r\n\r\n      handleGuarantorUnMarriedOpenModal();\r\n\r\n    }\r\n\r\n  };\r\n\r\n  const [holdMarried, setMarried] = useState([]);\r\n\r\n  const [holdUnMarried, setUnMarried] = useState([]);\r\n\r\n\r\n  const getGuarantorSpouse = (guarantorInformationId) => {\r\n\r\n    debugger;\r\n\r\n    PLCAndShareService.getCompanyPLCAndShareGuarantorSpouseInfo(guarantorInformationId)\r\n\r\n      .then((response) => {\r\n\r\n        setMarried(response.data.Result);\r\n\r\n        console.log(response.data.Result);\r\n\r\n      })\r\n\r\n      .catch((e) => {\r\n\r\n        console.log(e);\r\n\r\n      });\r\n\r\n  };\r\n\r\n  const getGuarantorUnmarried = (guarantorId) => {\r\n\r\n    debugger;\r\n\r\n    PLCAndShareService.getCompanyPLCAndShareGuarantorUnmarriedInfo(guarantorId)\r\n\r\n      .then((response) => {\r\n\r\n        setUnMarried(response.data.Result);\r\n\r\n        console.log(response.data.Result);\r\n\r\n      })\r\n\r\n      .catch((e) => {\r\n\r\n        console.log(e);\r\n\r\n      });\r\n\r\n  };\r\n\r\n\r\n  return (\r\n    <div>\r\n      <CompanyModal\r\n        isOpen={isCompanyGuarantorModalOpen}\r\n        onClose={handleCompanyGuarantorCloseModal}\r\n        title=\"view Guarantor information\"\r\n      >\r\n        <ViewMaritalStatus\r\n\r\n          holdMarried={holdMarried}\r\n\r\n          isCompanyMartailStatusModalOpen={\r\n\r\n            isCompanyMartailStatusModalOpen\r\n\r\n          }\r\n\r\n          handleCompanyMartailStatusCloseModal={\r\n\r\n            handleCompanyMartailStatusCloseModal\r\n\r\n          }\r\n\r\n          handleMaritalStatusModalOpen={\r\n\r\n            handleCompanyMartailStatusOpenModal\r\n\r\n          }\r\n\r\n        guarantorInformationId={guarantorInformationId}\r\n\r\n        />\r\n\r\n        <ViewUnMarried\r\n        guarantorInformationId={guarantorInformationId}\r\n\r\n          holdUnMarried={holdUnMarried}\r\n\r\n          isCompanyGuarantorUnMarriedModalOpen={isCompanyGuarantorUnMarriedModalOpen }\r\n          handleGuarantorUnMarriedCloseModal = {handleGuarantorUnMarriedCloseModal}\r\n\r\n        // guarantorId={guarantorId}\r\n\r\n        />\r\n        <div className=\"rounded-lg overflow-hidden\">\r\n          {holdGuarantor.TaxClerance ? (\r\n            <table className=\"table table-bordered table-striped bg-purple-100\">\r\n              <thead>\r\n                <th className=\"px-2 py-4\"> Name</th>\r\n                <th className=\"px-2 py-4\"> MartialStatusType</th>\r\n                <th className=\"px-2 py-4\"> Tax Clearance Name</th>\r\n                <th className=\"px-2 py-4\"> TinNo</th>\r\n                <th className=\"px-2 py-4\"> Certificate</th>\r\n                <th className=\"px-2 py-4\"> IssueDate</th>\r\n                <th className=\"px-2 py-4\"> Expireddate</th>\r\n                <th className=\"px-2 py-4\"> TaxDebit</th>\r\n                <th className=\"px-2 py-4\"> Action </th>\r\n              </thead>\r\n              <tbody>\r\n                <>\r\n                  {/* {holdSoleGuarantor.map((guarntorData, index) => ( */}\r\n                  <tr>\r\n                    <td>{holdGuarantor.Name}</td>\r\n                    <td>{holdGuarantor.MartialStatusType}</td>\r\n                    <td>{holdGuarantor.TaxClerance.Name}</td>\r\n                    <td>{holdGuarantor.TaxClerance.TinNo}</td>\r\n                    <td>{holdGuarantor.TaxClerance.Certificate}</td>\r\n                    <td>{holdGuarantor.TaxClerance.IssueDate}</td>\r\n                    <td>{holdGuarantor.TaxClerance.Expireddate}</td>\r\n                    <td>{holdGuarantor.TaxClerance.TaxDebit}</td>\r\n                    <td>\r\n                      <button\r\n                        onClick={() => {\r\n                          handleCompanyGuarantorEditedModalOpen();\r\n                          getGuarantorById(holdGuarantor.Id);\r\n                          setGuarantorId(holdGuarantor.Id);\r\n                        }}\r\n                        className=\"text-purple-600 rounded-md font-semibold \"\r\n                      >\r\n                        Edit\r\n                      </button>\r\n                    </td>\r\n                    <td>\r\n\r\n                      <button\r\n\r\n                        type=\"submit\"\r\n\r\n                        onClick={() => {\r\n                          // handleGuarantorUnMarriedOpenModal();\r\n                          fetchMartialStatus(holdGuarantor.MartialStatusType);\r\n                          getGuarantorSpouse(holdGuarantor.Id);\r\n                          getGuarantorUnmarried(holdGuarantor.Id);\r\n                          setGuarantorId(holdGuarantor.Id);\r\n                          getUnMarried(holdGuarantor.Id);\r\n\r\n                        }}\r\n\r\n                        className=\"text-purple-600 rounded-md font-semibold \"\r\n\r\n                      >\r\n\r\n                        Marital status detail\r\n\r\n                      </button>\r\n\r\n                    </td>\r\n                    <td>\r\n                    </td>\r\n                  </tr>\r\n                </>\r\n                {/* ))} */}\r\n              </tbody>\r\n            </table>\r\n          ) : (\r\n            \"\"\r\n          )}\r\n          <button\r\n            onClick={() => setToggleGuarantor(!toggleGuarantor)}\r\n            className=\"text-purple-600 rounded-md font-medium \"\r\n          >\r\n            Add guarantor\r\n          </button>\r\n          {toggleGuarantor &&\r\n            <div className=\"submit-form\">\r\n              <div className=\"relative center justify-center flex-1 w-full max-w-full grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\">\r\n                <LoanTextField\r\n                  id=\"Name\"\r\n                  label=\"Name\"\r\n                  value={Guarantor.Name}\r\n                  onChange={handleInputChangeGuarantor}\r\n                  name=\"Name\"\r\n                />\r\n                <FormControl variant=\"standard\" sx={{ minWidth: 120 }}>\r\n\r\n                  <InputLabel id=\"countrylbl\" color=\"secondary\">\r\n                    Marital Status Type\r\n\r\n                  </InputLabel>\r\n                  <Select\r\n                    color=\"secondary\"\r\n                    onChange={(event) =>\r\n                    (Guarantor.MartialStatusTypeId =\r\n                      event.target.value)\r\n                    }\r\n\r\n                    labelId=\"MaritalStatus\"\r\n\r\n                    id=\"MaritalStatusType\"\r\n\r\n                    label=\"MaritalStatus\"\r\n\r\n                  >\r\n\r\n                    <MenuItem value=\"\">\r\n\r\n                      <em>None</em>\r\n\r\n                    </MenuItem>\r\n\r\n                    {GetMaritalStatusType.map((YourMaritalStatus) => (\r\n\r\n                      <MenuItem\r\n\r\n                        key={YourMaritalStatus.Id}\r\n\r\n                        MartialStatusTypeId={YourMaritalStatus.Id}\r\n\r\n                        value={YourMaritalStatus.Id}\r\n\r\n                      >\r\n\r\n                        {YourMaritalStatus.Name}\r\n\r\n                      </MenuItem>\r\n\r\n                    ))}\r\n\r\n                  </Select>\r\n\r\n                </FormControl>\r\n                <LoanTextField\r\n                  id=\"Name\"\r\n                  label=\"TaxClerance Name\"\r\n                  value={Guarantor.TaxClerance.Name}\r\n                  onChange={handleInputChangeTaxClearance}\r\n                  name=\"Name\"\r\n                />\r\n                <LoanTextField\r\n                  id=\"TinNo\"\r\n                  label=\"TinNo\"\r\n                  value={Guarantor.TaxClerance.TinNo}\r\n                  onChange={handleInputChangeTaxClearance}\r\n                  name=\"TinNo\"\r\n                />\r\n                <p>\r\n\r\n                  Issue Date:\r\n\r\n                  <input\r\n\r\n                    id=\"IssueDate\"\r\n\r\n                    name=\"IssueDate\"\r\n\r\n                    label=\"IssueDate\"\r\n\r\n                    placeholder=\"IssueDate\"\r\n\r\n                    type=\"date\"\r\n\r\n                    value={\r\n\r\n                      issueDate.getFullYear().toString() +\r\n\r\n                      \"-\" +\r\n\r\n                      (issueDate.getMonth() + 1)\r\n\r\n                        .toString()\r\n\r\n                        .padStart(2, 0) +\r\n\r\n                      \"-\" +\r\n\r\n                      issueDate\r\n\r\n                        .getDate()\r\n\r\n                        .toString()\r\n\r\n                        .padStart(2, 0)\r\n\r\n                    }\r\n\r\n                    onChange={(e) => {\r\n\r\n                      setIssueDate(new Date(e.target.value));\r\n\r\n                      Guarantor.TaxClerance.IssueDate = issueDate;\r\n\r\n                    }}\r\n\r\n                  />{\" \"}\r\n\r\n                </p>\r\n                <p>\r\n\r\n                  Expired Date:\r\n\r\n                  <input\r\n\r\n                    id=\"Expireddate\"\r\n\r\n                    name=\"Expireddate\"\r\n\r\n                    label=\"Expireddate\"\r\n\r\n                    placeholder=\"Expireddate\"\r\n\r\n                    type=\"date\"\r\n\r\n                    value={\r\n\r\n                      expireddate.getFullYear().toString() +\r\n\r\n                      \"-\" +\r\n\r\n                      (expireddate.getMonth() + 1)\r\n\r\n                        .toString()\r\n\r\n                        .padStart(2, 0) +\r\n\r\n                      \"-\" +\r\n\r\n                      expireddate\r\n\r\n                        .getDate()\r\n\r\n                        .toString()\r\n\r\n                        .padStart(2, 0)\r\n\r\n                    }\r\n\r\n                    onChange={(e) => {\r\n\r\n                      setExpireddate(new Date(e.target.value));\r\n\r\n                      Guarantor.TaxClerance.Expireddate = expireddate;\r\n                    }}\r\n\r\n                  />{\" \"}\r\n\r\n                </p>\r\n                <LoanTextField\r\n                  id=\"TaxDebit\"\r\n                  label=\"TaxDebit\"\r\n                  value={Guarantor.TaxClerance.TaxDebit}\r\n                  onChange={handleInputChangeTaxClearance}\r\n                  name=\"TaxDebit\"\r\n                />\r\n                <div>\r\n                  {currentFile && (\r\n                    <div className=\"progress\">\r\n                      <div\r\n                        className=\"progress-bar progress-bar-info progress-bar-striped\"\r\n                        role=\"progressbar\"\r\n                        aria-valuenow={progress}\r\n                        aria-valuemin=\"0\"\r\n                        aria-valuemax=\"100\"\r\n                        style={{ width: progress + \"%\" }}\r\n                      >\r\n                        {progress}%\r\n                      </div>\r\n                    </div>\r\n                  )}\r\n                  <label className=\"btn btn-default\">\r\n                    <input type=\"file\" onChange={selectFileCert} />\r\n                  </label>\r\n\r\n                  <button\r\n                    className=\"btn btn-success\"\r\n                    disabled={!selectedFiles}\r\n                    onClick={uploadCert}\r\n                  >\r\n                    Upload Certificate\r\n                  </button>\r\n                  <div className=\"alert alert-light\" role=\"alert\">\r\n                    {message}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n              <div>\r\n                <button\r\n                  className=\"bg-[purple] hover:bg-purple-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\"\r\n                  onClick={() => {\r\n                    saveGuarantor();\r\n                  }}\r\n                >\r\n                  save\r\n                </button>\r\n              </div>\r\n            </div>\r\n          }\r\n        </div>\r\n      </CompanyModal>\r\n      <CompanyModal\r\n        isOpen={isCompanyGuarantorEditedModalOpen}\r\n        onClose={handleCompanyGuarantorEditCloseModal}\r\n        title=\"Edit guarantor information\"\r\n      >\r\n        <div>\r\n          <form onSubmit={updateGuarantorById}>\r\n\r\n            <div className=\"relative center justify-center flex-1 w-full max-w-full grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\">\r\n\r\n              <LoanTextField\r\n                id=\"Name\"\r\n                label=\"Name\"\r\n                value={editGuarantor.Name}\r\n                onChange={handleInputChangeEditGuarantor}\r\n                name=\"Name\"\r\n              />\r\n              <FormControl variant=\"standard\" sx={{ minWidth: 120 }}>\r\n\r\n                <InputLabel id=\"countrylbl\" color=\"secondary\">\r\n\r\n                  Marital Status Type\r\n\r\n                </InputLabel>\r\n\r\n                <Select\r\n\r\n                  color=\"secondary\"\r\n\r\n                  onChange={(event) =>\r\n\r\n                  (editGuarantor.MartialStatusTypeId =\r\n\r\n                    event.target.value)\r\n\r\n                  }\r\n\r\n                  labelId=\"MaritalStatusTypeId\"\r\n\r\n                  id=\"MaritalStatusTypeId\"\r\n\r\n                  label=\"MaritalStatusTypeId\"\r\n\r\n                >\r\n\r\n                  <MenuItem value=\"\">\r\n\r\n                    <em>None</em>\r\n\r\n                  </MenuItem>\r\n\r\n                  {GetMaritalStatusType.map((YourMaritalStatus) => (\r\n\r\n                    <MenuItem\r\n\r\n                      key={YourMaritalStatus.Id}\r\n\r\n                      MartialStatusTypeId={YourMaritalStatus.Id}\r\n\r\n                      value={YourMaritalStatus.Id}\r\n                    >\r\n                      {YourMaritalStatus.Name}\r\n\r\n                    </MenuItem>\r\n\r\n                  ))}\r\n\r\n                </Select>\r\n\r\n              </FormControl>\r\n              <LoanTextField\r\n                id=\"Name\"\r\n                label=\"Name\"\r\n                value={editGuarantor.TaxClerance.Name}\r\n                onChange={handleInputChangeEditTaxClerance}\r\n                name=\"Name\"\r\n              />\r\n              <LoanTextField\r\n                id=\"TinNo\"\r\n                label=\"TinNo\"\r\n                value={editGuarantor.TaxClerance.TinNo}\r\n                onChange={handleInputChangeEditTaxClerance}\r\n                name=\"TinNo\"\r\n              />\r\n\r\n              <p>\r\n                Issue Date:\r\n                <input\r\n\r\n                  id=\"IssueDate\"\r\n                  name=\"IssueDate\"\r\n                  label=\"IssueDate\"\r\n                  placeholder=\"IssueDate\"\r\n                  type=\"date\"\r\n                  value={\r\n                    issueDateEdit.getFullYear().toString() +\r\n                    \"-\" +\r\n                    (issueDateEdit.getMonth() + 1)\r\n\r\n                      .toString()\r\n                      .padStart(2, 0) +\r\n\r\n                    \"-\" +\r\n                    issueDateEdit\r\n                      .getDate()\r\n                      .toString()\r\n                      .padStart(2, 0)\r\n\r\n                  }\r\n\r\n                  onChange={(e) => {\r\n                    setIssueDateEdit(new Date(e.target.value));\r\n                    editGuarantor.TaxClerance.IssueDate = issueDateEdit;\r\n                  }}\r\n                />{\" \"}\r\n              </p>\r\n              <p>\r\n                Expired Date:\r\n                <input\r\n                  id=\"Expireddate\"\r\n                  name=\"Expireddate\"\r\n                  label=\"Expireddate\"\r\n                  placeholder=\"Expireddate\"\r\n                  type=\"date\"\r\n                  value={\r\n                    expiredDateEdit.getFullYear().toString() +\r\n                    \"-\" +\r\n                    (expiredDateEdit.getMonth() + 1)\r\n                      .toString()\r\n                      .padStart(2, 0) +\r\n                    \"-\" +\r\n                    expiredDateEdit\r\n                      .getDate()\r\n                      .toString()\r\n                      .padStart(2, 0)\r\n                  }\r\n                  onChange={(e) => {\r\n                    setExpiredDateEdit(new Date(e.target.value));\r\n                    editGuarantor.TaxClerance.Expireddate = expiredDateEdit;\r\n                  }}\r\n                />{\" \"}\r\n              </p>\r\n              <LoanTextField\r\n                id=\"TaxDebit\"\r\n                label=\"TaxDebit\"\r\n                value={editGuarantor.TaxClerance.TaxDebit}\r\n                onChange={handleInputChangeEditTaxClerance}\r\n                name=\"TaxDebit\"\r\n              />\r\n              <div>\r\n                {currentFile && (\r\n                  <div className=\"progress\">\r\n                    <div\r\n                      className=\"progress-bar progress-bar-info progress-bar-striped\"\r\n                      role=\"progressbar\"\r\n                      aria-valuenow={progress}\r\n                      aria-valuemin=\"0\"\r\n                      aria-valuemax=\"100\"\r\n                      style={{ width: progress + \"%\" }}\r\n                    >\r\n                      {progress}%\r\n                    </div>\r\n                  </div>\r\n                )}\r\n                <label className=\"btn btn-default\">\r\n                  <input type=\"file\" onChange={selectFileCertEdit} />\r\n                </label>\r\n                <button\r\n                  className=\"btn btn-success\"\r\n                  disabled={!selectedFiles}\r\n                  onChange={\r\n                    editGuarantor.TaxClerance.Certificate = selectedPathCertEdit\r\n                  }\r\n                  onClick={uploadCertEdit}\r\n                >\r\n                  Upload Certificate\r\n                </button>\r\n                <div className=\"alert alert-light\" role=\"alert\">\r\n                  {message}\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div>\r\n              <button className=\"bg-[purple] hover:bg-purple-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\">\r\n                Update\r\n              </button>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </CompanyModal>\r\n    </div>\r\n  );\r\n};\r\nexport default Guarantor;\r\n","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\SoleAndPartnership\\MaritalStatus\\AddWidowedStatus.jsx",["1220","1221","1222","1223","1224","1225","1226","1227","1228","1229","1230","1231","1232","1233"],[],"import { useState, useEffect } from \"react\";\r\nimport CompanyModal from \"../../Common/CompanyModal\";\r\nimport LoanIconButton from \"../../../Common/LoanIconButton\";\r\nimport { BsPlus } from \"react-icons/bs\";\r\nimport { IconButton } from \"@material-tailwind/react\";\r\nimport LoanTextField from \"../../../Common/LoanTextField\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport {\r\n  InputLabel,\r\n  TextField,\r\n  MenuItem,\r\n  FormControl,\r\n  Select,\r\n} from \"@mui/material\";\r\nimport CommonServices from \"../../Common/CommonServices\";\r\nconst AddWidowedStatus = ({ SoleId }) => {\r\n  //upload\r\n  const [selectedPathIdentity, setSelectedPathIdentity] = useState(null);\r\n  const [selectedPathUnmarriege, setSelectedPathUnmarriege] = useState(null);\r\n  const [selectedFiles, setSelectedFiles] = useState(undefined);\r\n  const [currentFile, setCurrentFile] = useState(undefined);\r\n  const [fileInfos, setFileInfos] = useState([]);\r\n  const [progress, setProgress] = useState(0);\r\n  const [message, setMessage] = useState(\"\");\r\n  const selectFile = (event) => {\r\n    setSelectedFiles(event.target.files);\r\n  };\r\n  //upload 1\r\n  const uploadMarriegeCertificate = () => {\r\n    let currentFile = selectedFiles[0];\r\n    setProgress(0);\r\n    setCurrentFile(currentFile);\r\n    CommonServices.upload(currentFile, (event) => {\r\n      setProgress(Math.round((100 * event.loaded) / event.total));\r\n    })\r\n      .then((response) => {\r\n        setMessage(response.data.message);\r\n        setSelectedPathIdentity(response.data.Result);\r\n      })\r\n      .then((files) => {\r\n        setFileInfos(files.data);\r\n      })\r\n      .catch(() => {\r\n        setProgress(0);\r\n        setCurrentFile(undefined);\r\n      });\r\n    setSelectedFiles(undefined);\r\n  };\r\n  //end upload\r\n  //upload 2\r\n  const uploadUnMarriegeCertificate = () => {\r\n    let currentFile = selectedFiles[0];\r\n    setProgress(0);\r\n    setCurrentFile(currentFile);\r\n    CommonServices.upload(currentFile, (event) => {\r\n      setProgress(Math.round((100 * event.loaded) / event.total));\r\n    })\r\n      .then((response) => {\r\n        setMessage(response.data.message);\r\n        setSelectedPathUnmarriege(response.data.Result);\r\n      })\r\n      .then((files) => {\r\n        setFileInfos(files.data);\r\n      })\r\n      .catch(() => {\r\n        setProgress(0);\r\n        setCurrentFile(undefined);\r\n      });\r\n    setSelectedFiles(undefined);\r\n  };\r\n  //endupload2\r\n  const [dateOfWidowed, setDateOfWidowed] = useState(new Date());\r\n  const [unMarriedCertficateIssueDate, setUnMarriedCertficateIssueDate] =\r\n    useState(new Date());\r\n  const [unMarriedCertficateExpiredDate, setUnMarriedCertficateExpiredDate] =\r\n    useState(new Date());\r\n  const [submitted, setSubmitted] = useState(false);\r\n  const [isCompanyMaritalStatusModalOpen, setIsCompanyMaritalStatusModalOpen] =\r\n    useState(false);\r\n  function handleGeneralCloseModal() {\r\n    isCompanyMaritalStatusModalOpen(false);\r\n  }\r\n  function handleCompanyMaritalStatusCloseModal() {\r\n    setIsCompanyMaritalStatusModalOpen(false);\r\n  }\r\n  const [toggleWidowedInfo, setToggleWidowedInfo] = useState(false);\r\n  const initialMartailStatusWidowedState = {\r\n    Id: null,\r\n    SoleAndPartnerShipID: SoleId,\r\n    DateOfWidowed: \"\",\r\n    MarraigeCertificate: \"\",\r\n    MarraigeCertificateIssuer: \"\",\r\n    UnmarriedCertificate: \"\",\r\n    UnmarraiedCertificateIssuer: \"\",\r\n    UnmarriedCertificateIssuDate: \"\",\r\n    UnmarriedCertificateExpiredDate: \"\",\r\n    CourtDecision: \"\",\r\n  };\r\n  const [martailStatusWidowed, setMartailStatusWidowed] = useState(\r\n    initialMartailStatusWidowedState\r\n  );\r\n  const newMartailStatusWidowed = () => {\r\n    setMartailStatusWidowed(initialMartailStatusWidowedState);\r\n    setSubmitted(false);\r\n  };\r\n  const handleInputChangeMartailStatusWidowed = (event) => {\r\n    const { name, value } = event.target;\r\n    setMartailStatusWidowed({ ...martailStatusWidowed, [name]: value });\r\n  };\r\n  const saveWidowed = () => {\r\n    var data = {\r\n      SoleAndPartnerShipID: martailStatusWidowed.SoleAndPartnerShipID,\r\n      DateOfWidowed: martailStatusWidowed.DateOfWidowed,\r\n      MarraigeCertificate: selectedPathIdentity,\r\n      MarraigeCertificateIssuer: martailStatusWidowed.MarraigeCertificateIssuer,\r\n      UnmarriedCertificate: selectedPathUnmarriege,\r\n      UnmarraiedCertificateIssuer:\r\n        martailStatusWidowed.UnmarraiedCertificateIssuer,\r\n      UnmarriedCertificateIssuDate:\r\n        martailStatusWidowed.UnmarriedCertificateIssuDate,\r\n      UnmarriedCertificateExpiredDate:\r\n        martailStatusWidowed.UnmarriedCertificateExpiredDate,\r\n      CourtDecision: martailStatusWidowed.CourtDecision,\r\n    };\r\n    CommonServices.UnmarriedSole(data, SoleId)\r\n      .then((response) => {\r\n        setMartailStatusWidowed({\r\n          Id: response.data.Id,\r\n          SoleAndPartnerShipID: response.data.SoleAndPartnerShipID,\r\n          UnMarriedCertficate: response.data.UnMarriedCertficate,\r\n          UnMarriedCertficateIssueDate:\r\n            response.data.UnMarriedCertficateIssueDate,\r\n          UnMarriedCertficateExpiredDate:\r\n            response.data.UnMarriedCertficateExpiredDate,\r\n          UnMarriedCertficateIssuer: response.data.UnMarriedCertficateIssuer,\r\n        });\r\n        setSubmitted(true);\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n  return (\r\n    <div>\r\n      <button\r\n        onClick={() => setToggleWidowedInfo(!toggleWidowedInfo)}\r\n        className=\"text-purple-600 rounded-md font-medium \"\r\n      >\r\n        Add Widowed\r\n      </button>\r\n\r\n      {toggleWidowedInfo && (\r\n        <div className=\"submit-form\">\r\n          {submitted ? (\r\n            <div>\r\n              <h4>You submitted successfully!</h4>\r\n            </div>\r\n          ) : (\r\n            <div className=\"relative center justify-center flex-1 w-full max-w-full grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\">\r\n              <p>\r\n                Date Of Widowed:\r\n                <div>\r\n                  <DatePicker\r\n                    selected={dateOfWidowed}\r\n                    onChange={(dateOfWidowed) =>\r\n                      setDateOfWidowed(dateOfWidowed)\r\n                    }\r\n                  />\r\n                </div>\r\n              </p>\r\n              <div>\r\n                {currentFile && (\r\n                  <div className=\"progress\">\r\n                    <div\r\n                      className=\"progress-bar progress-bar-info progress-bar-striped\"\r\n                      role=\"progressbar\"\r\n                      aria-valuenow={progress}\r\n                      aria-valuemin=\"0\"\r\n                      aria-valuemax=\"100\"\r\n                      style={{ width: progress + \"%\" }}\r\n                    >\r\n                      {progress}%\r\n                    </div>\r\n                  </div>\r\n                )}\r\n                <label className=\"btn btn-default\">\r\n                  <input type=\"file\" onChange={selectFile} />\r\n                </label>\r\n                <button\r\n                  className=\"btn btn-success\"\r\n                  disabled={!selectedFiles}\r\n                  onClick={uploadMarriegeCertificate}\r\n                >\r\n                  Upload Marriage Certificate\r\n                </button>\r\n                <div className=\"alert alert-light\" role=\"alert\">\r\n                  {message}\r\n                </div>\r\n              </div>\r\n              <LoanTextField\r\n                id=\"MarraigeCertificateIssuer\"\r\n                label=\"MarraigeCertificateIssuer\"\r\n                value={martailStatusWidowed.MarraigeCertificateIssuer}\r\n                onChange={handleInputChangeMartailStatusWidowed}\r\n                name=\"MarraigeCertificateIssuer\"\r\n              />\r\n              <div>\r\n                {currentFile && (\r\n                  <div className=\"progress\">\r\n                    <div\r\n                      className=\"progress-bar progress-bar-info progress-bar-striped\"\r\n                      role=\"progressbar\"\r\n                      aria-valuenow={progress}\r\n                      aria-valuemin=\"0\"\r\n                      aria-valuemax=\"100\"\r\n                      style={{ width: progress + \"%\" }}\r\n                    >\r\n                      {progress}%\r\n                    </div>\r\n                  </div>\r\n                )}\r\n                <label className=\"btn btn-default\">\r\n                  <input type=\"file\" onChange={selectFile} />\r\n                </label>\r\n                <button\r\n                  className=\"btn btn-success\"\r\n                  disabled={!selectedFiles}\r\n                  onClick={uploadUnMarriegeCertificate}\r\n                >\r\n                  Upload UnMarriage Certificate\r\n                </button>\r\n                <div className=\"alert alert-light\" role=\"alert\">\r\n                  {message}\r\n                </div>\r\n              </div>\r\n              <LoanTextField\r\n                id=\"UnmarraiedCertificateIssuer\"\r\n                label=\"UnmarraiedCertificateIssuer\"\r\n                value={martailStatusWidowed.UnmarraiedCertificateIssuer}\r\n                onChange={handleInputChangeMartailStatusWidowed}\r\n                name=\"UnmarraiedCertificateIssuer\"\r\n              />\r\n              <p>\r\n                UnMarried Certficate Issue Date:\r\n                <div>\r\n                  <DatePicker\r\n                    selected={unMarriedCertficateIssueDate}\r\n                    onChange={(unMarriedCertficateIssueDate) =>\r\n                      setUnMarriedCertficateIssueDate(\r\n                        unMarriedCertficateIssueDate\r\n                      )\r\n                    }\r\n                  />\r\n                </div>\r\n              </p>\r\n              <p>\r\n                UnMarried Certficate Expired Date:\r\n                <div>\r\n                  <DatePicker\r\n                    selected={unMarriedCertficateExpiredDate}\r\n                    onChange={(unMarriedCertficateExpiredDate) =>\r\n                      setUnMarriedCertficateExpiredDate(\r\n                        unMarriedCertficateExpiredDate\r\n                      )\r\n                    }\r\n                  />\r\n                </div>\r\n              </p>\r\n              <LoanTextField\r\n                id=\"CourtDecision\"\r\n                label=\"CourtDecision\"\r\n                value={martailStatusWidowed.CourtDecision}\r\n                onChange={handleInputChangeMartailStatusWidowed}\r\n                name=\"CourtDecision\"\r\n              />\r\n            </div>\r\n          )}\r\n          <div>\r\n            <button\r\n              className=\"bg-[purple] hover:bg-purple-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\"\r\n              onClick={() => {\r\n                saveWidowed();\r\n              }}\r\n            >\r\n              save\r\n            </button>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\nexport default AddWidowedStatus;\r\n","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\SoleAndPartnership\\MaritalStatus\\AddDivorcedStatus.jsx",["1234","1235","1236","1237","1238"],[],"import { useState, useEffect } from \"react\";\r\nimport LoanTextField from \"../../../Common/LoanTextField\";\r\nimport CommonServices from \"../../Common/CommonServices\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nconst AddDivorcedStatus = ({ SoleId }) => {\r\n  //upload\r\n  const [selectedPathIdentity, setSelectedPathIdentity] = useState(null);\r\n  const [selectedPathUnmarriege, setSelectedPathUnmarriege] = useState(null);\r\n  const [selectedFiles, setSelectedFiles] = useState(undefined);\r\n  const [currentFile, setCurrentFile] = useState(undefined);\r\n  const [fileInfos, setFileInfos] = useState([]);\r\n  const [progress, setProgress] = useState(0);\r\n  const [message, setMessage] = useState(\"\");\r\n  const selectFile = (event) => {\r\n    setSelectedFiles(event.target.files);\r\n  };\r\n  //upload 1\r\n  const uploadMarriegeCertificate = () => {\r\n    let currentFile = selectedFiles[0];\r\n    setProgress(0);\r\n    setCurrentFile(currentFile);\r\n    CommonServices.upload(currentFile, (event) => {\r\n      setProgress(Math.round((100 * event.loaded) / event.total));\r\n    })\r\n      .then((response) => {\r\n        setMessage(response.data.message);\r\n        setSelectedPathIdentity(response.data.Result);\r\n      })\r\n      .then((files) => {\r\n        setFileInfos(files.data);\r\n      })\r\n      .catch(() => {\r\n        setProgress(0);\r\n        setCurrentFile(undefined);\r\n      });\r\n    setSelectedFiles(undefined);\r\n  };\r\n  //end upload\r\n  //upload 2\r\n  const uploadUnMarriegeCertificate = () => {\r\n    let currentFile = selectedFiles[0];\r\n    setProgress(0);\r\n    setCurrentFile(currentFile);\r\n    CommonServices.upload(currentFile, (event) => {\r\n      setProgress(Math.round((100 * event.loaded) / event.total));\r\n    })\r\n      .then((response) => {\r\n        setMessage(response.data.message);\r\n        setSelectedPathUnmarriege(response.data.Result);\r\n      })\r\n      .then((files) => {\r\n        setFileInfos(files.data);\r\n      })\r\n      .catch(() => {\r\n        setProgress(0);\r\n        setCurrentFile(undefined);\r\n      });\r\n    setSelectedFiles(undefined);\r\n  };\r\n  //endupload2\r\n  const [submitted, setSubmitted] = useState(false);\r\n  const [isCompanyMaritalStatusModalOpen, setIsCompanyMaritalStatusModalOpen] =\r\n    useState(false);\r\n  function handleGeneralCloseModal() {\r\n    isCompanyMaritalStatusModalOpen(false);\r\n  }\r\n  function handleCompanyMaritalStatusCloseModal() {\r\n    setIsCompanyMaritalStatusModalOpen(false);\r\n  }\r\n  const [toggleDivorcedInfo, setToggleDivorcedInfo] = useState(false);\r\n  const [divorceDate, setDivorceDate] = useState(new Date());\r\n  const [unMarriedCertficateIssueDate, setUnMarriedCertficateIssueDate] =\r\n    useState(new Date());\r\n  const [unMarriedCertficateExpiredDate, setUnMarriedCertficateExpiredDate] =\r\n    useState(new Date());\r\n  const initialMartailStatusDivorcedState = {\r\n    Id: null,\r\n    SoleAndPartnerShipID: SoleId,\r\n    DivorceDate: \"\",\r\n    MarriageCertificate: \"\",\r\n    MarriageCertificateIssuer: \"\",\r\n    UnMarriedCertficate: \"\",\r\n    UnMarriedCertficateIssueDate: \"\",\r\n    UnMarriedCertficateExpiredDate: \"\",\r\n    UnMarriedCertficateIssuer: \"\",\r\n    CourtDecision: \"\",\r\n  };\r\n  const [martailStatusDivorced, setMartailStatusDivorced] = useState(\r\n    initialMartailStatusDivorcedState\r\n  );\r\n  const newMartailStatusDivorced = () => {\r\n    setMartailStatusDivorced(initialMartailStatusDivorcedState);\r\n    setSubmitted(false);\r\n  };\r\n  const handleInputChangeMartailStatusDivorced = (event) => {\r\n    const { name, value } = event.target;\r\n    setMartailStatusDivorced({ ...martailStatusDivorced, [name]: value });\r\n  };\r\n  const saveDivorced = () => {\r\n    var data = {\r\n      SoleAndPartnerShipID: martailStatusDivorced.SoleAndPartnerShipID,\r\n      DivorceDate: divorceDate,\r\n      MarriageCertificate: selectedPathIdentity,\r\n      MarriageCertificateIssuer:\r\n        martailStatusDivorced.MarriageCertificateIssuer,\r\n      UnMarriedCertficate: selectedPathUnmarriege,\r\n      UnMarriedCertficateIssueDate: unMarriedCertficateIssueDate,\r\n      UnMarriedCertficateExpiredDate: unMarriedCertficateExpiredDate,\r\n      UnMarriedCertficateIssuer:\r\n        martailStatusDivorced.UnMarriedCertficateIssuer,\r\n      CourtDecision: martailStatusDivorced.CourtDecision,\r\n    };\r\n    CommonServices.divorcedSole(data, SoleId)\r\n      .then((response) => {\r\n        setMartailStatusDivorced({\r\n          Id: response.data.Id,\r\n          SoleAndPartnerShipID: response.data.SoleAndPartnerShipID,\r\n          DivorceDate: response.data.DivorceDate,\r\n          MarriageCertificate: response.data.MarriageCertificate,\r\n          MarriageCertificateIssuer: response.data.MarriageCertificateIssuer,\r\n          UnMarriedCertficate: response.data.UnMarriedCertficate,\r\n          UnMarriedCertficateIssueDate:\r\n            response.data.UnMarriedCertficateIssueDate,\r\n          UnMarriedCertficateExpiredDate:\r\n            response.data.UnMarriedCertficateExpiredDate,\r\n          UnMarriedCertficateIssuer: response.data.UnMarriedCertficateIssuer,\r\n          CourtDecision: response.data.CourtDecision,\r\n        });\r\n        setSubmitted(true);\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <button\r\n        onClick={() => setToggleDivorcedInfo(!toggleDivorcedInfo)}\r\n        className=\"text-purple-600 rounded-md font-medium \"\r\n      >\r\n        Add Divorced\r\n      </button>\r\n      {toggleDivorcedInfo && (\r\n        <div className=\"submit-form\">\r\n          {submitted ? (\r\n            <div>\r\n              <h4>You submitted successfully!</h4>\r\n            </div>\r\n          ) : (\r\n            <div className=\"relative center justify-center flex-1 w-full max-w-full grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\">\r\n              <p>\r\n                divorce Date:\r\n                <div>\r\n                  <DatePicker\r\n                    selected={divorceDate}\r\n                    onChange={(divorceDate) => setDivorceDate(divorceDate)}\r\n                  />\r\n                </div>\r\n              </p>\r\n              <div>\r\n                {currentFile && (\r\n                  <div className=\"progress\">\r\n                    <div\r\n                      className=\"progress-bar progress-bar-info progress-bar-striped\"\r\n                      role=\"progressbar\"\r\n                      aria-valuenow={progress}\r\n                      aria-valuemin=\"0\"\r\n                      aria-valuemax=\"100\"\r\n                      style={{ width: progress + \"%\" }}\r\n                    >\r\n                      {progress}%\r\n                    </div>\r\n                  </div>\r\n                )}\r\n                <label className=\"btn btn-default\">\r\n                  <input type=\"file\" onChange={selectFile} />\r\n                </label>\r\n                <button\r\n                  className=\"btn btn-success\"\r\n                  disabled={!selectedFiles}\r\n                  onClick={uploadMarriegeCertificate}\r\n                >\r\n                  Upload Marriage Certificate\r\n                </button>\r\n                <div className=\"alert alert-light\" role=\"alert\">\r\n                  {message}\r\n                </div>\r\n              </div>\r\n              <LoanTextField\r\n                id=\"MarriageCertificateIssuer\"\r\n                label=\"MarriageCertificateIssuer\"\r\n                value={martailStatusDivorced.MarriageCertificateIssuer}\r\n                onChange={handleInputChangeMartailStatusDivorced}\r\n                name=\"MarriageCertificateIssuer\"\r\n              />\r\n              <div>\r\n                {currentFile && (\r\n                  <div className=\"progress\">\r\n                    <div\r\n                      className=\"progress-bar progress-bar-info progress-bar-striped\"\r\n                      role=\"progressbar\"\r\n                      aria-valuenow={progress}\r\n                      aria-valuemin=\"0\"\r\n                      aria-valuemax=\"100\"\r\n                      style={{ width: progress + \"%\" }}\r\n                    >\r\n                      {progress}%\r\n                    </div>\r\n                  </div>\r\n                )}\r\n                <label className=\"btn btn-default\">\r\n                  <input type=\"file\" onChange={selectFile} />\r\n                </label>\r\n                <button\r\n                  className=\"btn btn-success\"\r\n                  disabled={!selectedFiles}\r\n                  onClick={uploadUnMarriegeCertificate}\r\n                >\r\n                  Upload UnMarriage Certificate\r\n                </button>\r\n                <div className=\"alert alert-light\" role=\"alert\">\r\n                  {message}\r\n                </div>\r\n              </div>\r\n              <p>\r\n                unMarried Certficate Issue Date:\r\n                <div>\r\n                  <DatePicker\r\n                    selected={unMarriedCertficateIssueDate}\r\n                    onChange={(unMarriedCertficateIssueDate) =>\r\n                      setUnMarriedCertficateIssueDate(\r\n                        unMarriedCertficateIssueDate\r\n                      )\r\n                    }\r\n                  />\r\n                </div>\r\n              </p>\r\n              <p>\r\n                unMarried Certficate Expired Date:\r\n                <div>\r\n                  <DatePicker\r\n                    selected={unMarriedCertficateExpiredDate}\r\n                    onChange={(unMarriedCertficateExpiredDate) =>\r\n                      setUnMarriedCertficateExpiredDate(\r\n                        unMarriedCertficateExpiredDate\r\n                      )\r\n                    }\r\n                  />\r\n                </div>\r\n              </p>\r\n              <LoanTextField\r\n                id=\"UnMarriedCertficateIssuer\"\r\n                label=\"UnMarriedCertficateIssuer\"\r\n                value={martailStatusDivorced.UnMarriedCertficateIssuer}\r\n                onChange={handleInputChangeMartailStatusDivorced}\r\n                name=\"UnMarriedCertficateIssuer\"\r\n              />\r\n              <LoanTextField\r\n                id=\"CourtDecision\"\r\n                label=\"CourtDecision\"\r\n                value={martailStatusDivorced.CourtDecision}\r\n                onChange={handleInputChangeMartailStatusDivorced}\r\n                name=\"CourtDecision\"\r\n              />\r\n            </div>\r\n          )}\r\n          <div>\r\n            <button\r\n              className=\"bg-[purple] hover:bg-purple-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\"\r\n              onClick={() => {\r\n                saveDivorced();\r\n              }}\r\n            >\r\n              save\r\n            </button>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\nexport default AddDivorcedStatus;\r\n","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\SoleAndPartnership\\MaritalStatus\\ViewMarriedTax.jsx",["1239","1240","1241","1242","1243"],[],"import { useState, useEffect } from \"react\";\r\nimport CompanyModal from \"../../Common/CompanyModal\";\r\nimport LoanTextField from \"../../../Common/LoanTextField\";\r\nimport CommonServices from \"../../Common/CommonServices\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nconst ViewMaritalStatus = ({\r\n  holdMarriedTax,\r\n  marriedTaxId,\r\n  isCompanyMarriedTaxModalOpen,\r\n  handleCompanyMarriedTaxCloseModal,\r\n}) => {\r\n  //upload\r\n  const [newCertificate, setNewCertificate] = useState(null);\r\n  const [selectedFiles, setSelectedFiles] = useState(undefined);\r\n  const [currentFile, setCurrentFile] = useState(undefined);\r\n  const [fileInfos, setFileInfos] = useState([]);\r\n  const [progress, setProgress] = useState(0);\r\n  const [message, setMessage] = useState(\"\");\r\n  const selectFile = (event) => {\r\n    setSelectedFiles(event.target.files);\r\n  };\r\n  //upload 1\r\n  const uploadCertificate = () => {\r\n    let currentFile = selectedFiles[0];\r\n    setProgress(0);\r\n    setCurrentFile(currentFile);\r\n    CommonServices.upload(currentFile, (event) => {\r\n      setProgress(Math.round((100 * event.loaded) / event.total));\r\n    })\r\n      .then((response) => {\r\n        setMessage(response.data.message);\r\n        setNewCertificate(response.data.Result);\r\n      })\r\n      .then((files) => {\r\n        setFileInfos(files.data);\r\n      })\r\n      .catch(() => {\r\n        setProgress(0);\r\n        setCurrentFile(undefined);\r\n      });\r\n    setSelectedFiles(undefined);\r\n  };\r\n  const [issueDate, setIssueDate] = useState(new Date());\r\n  const [expireddate, setExpireddate] = useState(new Date());\r\n\r\n  const [\r\n    isCompanyMarriedTaxEditModalOpen,\r\n    setIsCompanyMarriedTaxEditModalOpen,\r\n  ] = useState(false);\r\n  function handleCompanyMarriedTaxEditCloseModal() {\r\n    setIsCompanyMarriedTaxEditModalOpen(false);\r\n  }\r\n  function handleCompanyMarriedTaxEditOpenModal() {\r\n    setIsCompanyMarriedTaxEditModalOpen(true);\r\n  }\r\n  function handleCompanyMarriedTaxEditCloseModal() {\r\n    setIsCompanyMarriedTaxEditModalOpen(false);\r\n  }\r\n  const [taxInformationId, setTaxInformationId] = useState();\r\n  const [editMarriedTax, setEditMarriedTax] = useState({\r\n    Id: taxInformationId,\r\n    Name: \"\",\r\n    TinNo: \"\",\r\n    IssueDate: \"\",\r\n    Expireddate: \"\",\r\n    TaxDebit: \"\",\r\n    Certificate: \"\",\r\n  });\r\n  const handleInputChangeEditMarriedTax = (event) => {\r\n    const { name, value } = event.target;\r\n    setEditMarriedTax({ ...editMarriedTax, [name]: value });\r\n  };\r\n  const updateMarriedTaxById = (taxInformationId) => {\r\n    CommonServices.getMarriedTax(taxInformationId)\r\n      .then((res) => {\r\n        setEditMarriedTax({\r\n          ...editMarriedTax,\r\n          Id: taxInformationId,\r\n          Name: res.data.Result.Name,\r\n          TinNo: res.data.Result.TinNo,\r\n          IssueDate: res.data.Result.IssueDate,\r\n          Expireddate: res.data.Result.Expireddate,\r\n          TaxDebit: res.data.Result.TaxDebit,\r\n          Certificate: res.data.Result.Certificate,\r\n        });\r\n      })\r\n      .catch((err) => console.log(err));\r\n  };\r\n  useEffect(() => {\r\n    updateMarriedTaxById();\r\n  }, []);\r\n  const updateMarriedTax = () => {\r\n    CommonServices.updateMarriedTax(taxInformationId, editMarriedTax)\r\n      .then((response) => {})\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n  useEffect(() => {\r\n    updateMarriedTax();\r\n  }, []);\r\n  //add married tax\r\n  const [toggleMarriedTax, setToggleMarriedTax] = useState(false);\r\n  const initialMarriedTaxState = {\r\n    Id: null,\r\n    Name: \"\",\r\n    TinNo: \"\",\r\n    Certificate: \"\",\r\n    IssueDate: \"\",\r\n    Expireddate: \"\",\r\n    TaxDebit: \"\",\r\n  };\r\n  const [submitted, setSubmitted] = useState(false);\r\n\r\n  const [marriedTax, setMarriedTax] = useState(initialMarriedTaxState);\r\n  const newMarriedTax = () => {\r\n    setMarriedTax(initialMarriedTaxState);\r\n    setSubmitted(false);\r\n  };\r\n  const handleInputChangeMarriedTax = (event) => {\r\n    const { name, value } = event.target;\r\n    setMarriedTax({ ...marriedTax, [name]: value });\r\n  };\r\n  const saveMarriedTax = () => {\r\n    var data = {\r\n      Name: marriedTax.Name,\r\n      TinNo: marriedTax.TinNo,\r\n      Certificate: newCertificate,\r\n      IssueDate: issueDate,\r\n      Expireddate: expireddate,\r\n      TaxDebit: marriedTax.TaxDebit,\r\n    };\r\n    CommonServices.addMarriedTax(data, marriedTaxId)\r\n      .then((response) => {\r\n        setMarriedTax({\r\n          Id: response.data.Id,\r\n          Name: response.data.Name,\r\n          TinNo: response.data.TinNo,\r\n          Certificate: response.data.Certificate,\r\n          IssueDate: response.data.IssueDate,\r\n          Expireddate: response.data.Expireddate,\r\n          TaxDebit: response.data.TaxDebit,\r\n        });\r\n        setSubmitted(true);\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n  //end add married tax\r\n  return (\r\n    <div>\r\n      <CompanyModal\r\n        isOpen={isCompanyMarriedTaxModalOpen}\r\n        onClose={handleCompanyMarriedTaxCloseModal}\r\n        title=\"view married Tax information\"\r\n      >\r\n        <div className=\"rounded-lg overflow-hidden\">\r\n          {holdMarriedTax ? (\r\n            <>\r\n              <table className=\"table table-bordered table-striped bg-purple-100\">\r\n                <thead>\r\n                  <th className=\"px-2 py-4\"> Name </th>\r\n                  <th className=\"px-2 py-4\"> TinNo </th>\r\n                  <th className=\"px-2 py-4\"> Issue Date </th>\r\n                  <th className=\"px-2 py-4\"> Expired date </th>\r\n                  <th className=\"px-2 py-4\"> Tax Debi </th>\r\n                  <th className=\"px-2 py-4\">Certificate</th>\r\n                </thead>\r\n                <tbody>\r\n                  <tr>\r\n                    <td>{holdMarriedTax.Name}</td>\r\n                    <td>{holdMarriedTax.TinNo}</td>\r\n                    <td>{holdMarriedTax.IssueDate}</td>\r\n                    <td>{holdMarriedTax.Expireddate}</td>\r\n                    <td>{holdMarriedTax.TaxDebit}</td>\r\n                    <td>{holdMarriedTax.Certificate}</td>\r\n                    <td>\r\n                      <button\r\n                        onClick={() => {\r\n                          handleCompanyMarriedTaxEditOpenModal();\r\n                          updateMarriedTaxById(holdMarriedTax.Id);\r\n                          setTaxInformationId(holdMarriedTax.Id);\r\n                        }}\r\n                        className=\"text-purple-600 rounded-md font-semibold \"\r\n                      >\r\n                        Edit\r\n                      </button>\r\n                    </td>\r\n                  </tr>\r\n                </tbody>\r\n              </table>\r\n            </>\r\n          ) : (\r\n            \"\"\r\n          )}\r\n        </div>\r\n        <button\r\n          onClick={() => setToggleMarriedTax(!toggleMarriedTax)}\r\n          className=\"text-purple-600 rounded-md font-medium \"\r\n        >\r\n          Add tax\r\n        </button>\r\n\r\n        {toggleMarriedTax && (\r\n          <div className=\"submit-form\">\r\n            {submitted ? (\r\n              <div>\r\n                <h4>You submitted successfully!</h4>\r\n              </div>\r\n            ) : (\r\n              <div className=\"relative center justify-center flex-1 w-full max-w-full grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\">\r\n                <LoanTextField\r\n                  id=\"Name\"\r\n                  label=\"Name\"\r\n                  value={marriedTax.Name}\r\n                  onChange={handleInputChangeMarriedTax}\r\n                  name=\"Name\"\r\n                />\r\n                <LoanTextField\r\n                  id=\"TinNo\"\r\n                  label=\"TinNo\"\r\n                  value={marriedTax.TinNo}\r\n                  onChange={handleInputChangeMarriedTax}\r\n                  name=\"TinNo\"\r\n                />\r\n                <p>\r\n                  issue Date:\r\n                  <div>\r\n                    <DatePicker\r\n                      selected={issueDate}\r\n                      onChange={(issueDate) => setIssueDate(issueDate)}\r\n                    />\r\n                  </div>\r\n                </p>\r\n                <p>\r\n                  Expired Date:\r\n                  <div>\r\n                    <DatePicker\r\n                      selected={expireddate}\r\n                      onChange={(expireddate) => setExpireddate(expireddate)}\r\n                    />\r\n                  </div>\r\n                </p>\r\n                <LoanTextField\r\n                  id=\"TaxDebit\"\r\n                  label=\"TaxDebit\"\r\n                  value={marriedTax.TaxDebit}\r\n                  onChange={handleInputChangeMarriedTax}\r\n                  name=\"TaxDebit\"\r\n                />\r\n                <LoanTextField\r\n                  id=\"TaxClearanceCertificate\"\r\n                  label=\"TaxClearanceCertificate\"\r\n                  value={marriedTax.Certificate}\r\n                  onChange={handleInputChangeMarriedTax}\r\n                  name=\"TaxClearanceCertificate\"\r\n                />\r\n                <div>\r\n                  {currentFile && (\r\n                    <div className=\"progress\">\r\n                      <div\r\n                        className=\"progress-bar progress-bar-info progress-bar-striped\"\r\n                        role=\"progressbar\"\r\n                        aria-valuenow={progress}\r\n                        aria-valuemin=\"0\"\r\n                        aria-valuemax=\"100\"\r\n                        style={{ width: progress + \"%\" }}\r\n                      >\r\n                        {progress}%\r\n                      </div>\r\n                    </div>\r\n                  )}\r\n                  <label className=\"btn btn-default\">\r\n                    <input type=\"file\" onChange={selectFile} />\r\n                  </label>\r\n                  <button\r\n                    className=\"btn btn-success\"\r\n                    disabled={!selectedFiles}\r\n                    onClick={uploadCertificate}\r\n                  >\r\n                    Tax Certificate\r\n                  </button>\r\n                  <div className=\"alert alert-light\" role=\"alert\">\r\n                    {message}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            )}\r\n            <div>\r\n              <button\r\n                className=\"bg-[purple] hover:bg-purple-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\"\r\n                onClick={() => {\r\n                  saveMarriedTax();\r\n                }}\r\n              >\r\n                save\r\n              </button>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </CompanyModal>\r\n      <CompanyModal\r\n        isOpen={isCompanyMarriedTaxEditModalOpen}\r\n        onClose={handleCompanyMarriedTaxEditCloseModal}\r\n        title=\"tax edit information\"\r\n      >\r\n        <div>\r\n          <form onSubmit={updateMarriedTax}>\r\n            <div className=\"relative center justify-center flex-1 w-full max-w-full grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\">\r\n              <LoanTextField\r\n                id=\"Name\"\r\n                label=\"Name\"\r\n                value={editMarriedTax.Name}\r\n                onChange={handleInputChangeEditMarriedTax}\r\n                name=\"Name\"\r\n              />\r\n              <LoanTextField\r\n                id=\"TinNo\"\r\n                label=\"TinNo\"\r\n                value={editMarriedTax.TinNo}\r\n                onChange={handleInputChangeEditMarriedTax}\r\n                name=\"TinNo\"\r\n              />\r\n              <div>\r\n                {currentFile && (\r\n                  <div className=\"progress\">\r\n                    <div\r\n                      className=\"progress-bar progress-bar-info progress-bar-striped\"\r\n                      role=\"progressbar\"\r\n                      aria-valuenow={progress}\r\n                      aria-valuemin=\"0\"\r\n                      aria-valuemax=\"100\"\r\n                      style={{ width: progress + \"%\" }}\r\n                    >\r\n                      {progress}%\r\n                    </div>\r\n                  </div>\r\n                )}\r\n                <label className=\"btn btn-default\">\r\n                  <input type=\"file\" onChange={selectFile} />\r\n                </label>\r\n                <button\r\n                  className=\"btn btn-success\"\r\n                  disabled={!selectedFiles}\r\n                  onChange={(editMarriedTax.Certificate = newCertificate)}\r\n                  onClick={uploadCertificate}\r\n                >\r\n                  Tax Certificate\r\n                </button>\r\n                <div className=\"alert alert-light\" role=\"alert\">\r\n                  {message}\r\n                </div>\r\n              </div>\r\n\r\n              <p>\r\n                Issue Date:\r\n                <input\r\n                  id=\"IssueDate\"\r\n                  name=\"IssueDate\"\r\n                  label=\"IssueDate\"\r\n                  placeholder=\"IssueDate\"\r\n                  type=\"date\"\r\n                  value={\r\n                    issueDate.getFullYear().toString() +\r\n                    \"-\" +\r\n                    (issueDate.getMonth() + 1).toString().padStart(2, 0) +\r\n                    \"-\" +\r\n                    issueDate.getDate().toString().padStart(2, 0)\r\n                  }\r\n                  onChange={(e) => {\r\n                    setIssueDate(new Date(e.target.value));\r\n                    editMarriedTax.IssueDate = issueDate;\r\n                  }}\r\n                />{\" \"}\r\n              </p>\r\n              <p>\r\n                Expired Date:\r\n                <input\r\n                  id=\"Expireddate\"\r\n                  name=\"Expireddate\"\r\n                  label=\"Expireddate\"\r\n                  placeholder=\"Expireddate\"\r\n                  type=\"date\"\r\n                  value={\r\n                    expireddate.getFullYear().toString() +\r\n                    \"-\" +\r\n                    (expireddate.getMonth() + 1).toString().padStart(2, 0) +\r\n                    \"-\" +\r\n                    expireddate.getDate().toString().padStart(2, 0)\r\n                  }\r\n                  onChange={(e) => {\r\n                    setExpireddate(new Date(e.target.value));\r\n                    editMarriedTax.Expireddate = expireddate;\r\n                  }}\r\n                />{\" \"}\r\n              </p>\r\n              <LoanTextField\r\n                id=\"TaxDebit\"\r\n                label=\"TaxDebit\"\r\n                value={editMarriedTax.TaxDebit}\r\n                onChange={handleInputChangeEditMarriedTax}\r\n                name=\"TaxDebit\"\r\n              />\r\n            </div>\r\n            <div>\r\n              <button className=\"bg-[purple] hover:bg-purple-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\">\r\n                Update\r\n              </button>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </CompanyModal>\r\n    </div>\r\n  );\r\n};\r\nexport default ViewMaritalStatus;\r\n","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\SoleAndPartnership\\MaritalStatus\\AddUnMarriedStatus.jsx",["1244","1245","1246","1247","1248","1249","1250","1251","1252","1253","1254"],[],"import { useState, useEffect } from \"react\";\r\nimport LoanTextField from \"../../../Common/LoanTextField\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport {\r\n  InputLabel,\r\n  TextField,\r\n  MenuItem,\r\n  FormControl,\r\n  Select,\r\n} from \"@mui/material\";\r\nimport CommonServices from \"../../Common/CommonServices\";\r\nconst AddUnMarriedStatus = ({ SoleId }) => {\r\n  const [unMarriedCertficateIssueDate, setUnMarriedCertficateIssueDate] =\r\n    useState(new Date());\r\n  const [unMarriedCertficateExpiredDate, setUnMarriedCertficateExpiredDate] =\r\n    useState(new Date());\r\n  //upload start\r\n  const [selectedPathIdentity, setSelectedPathIdentity] = useState(null);\r\n  const [selectedFiles, setSelectedFiles] = useState(undefined);\r\n  const [currentFile, setCurrentFile] = useState(undefined);\r\n  const [fileInfos, setFileInfos] = useState([]);\r\n  const [progress, setProgress] = useState(0);\r\n  const [message, setMessage] = useState(\"\");\r\n  const selectFile = (event) => {\r\n    setSelectedFiles(event.target.files);\r\n  };\r\n  //upload 1\r\n  const uploadIdentity = () => {\r\n    let currentFile = selectedFiles[0];\r\n    setProgress(0);\r\n    setCurrentFile(currentFile);\r\n    CommonServices.upload(currentFile, (event) => {\r\n      setProgress(Math.round((100 * event.loaded) / event.total));\r\n    })\r\n      .then((response) => {\r\n        setMessage(response.data.message);\r\n        setSelectedPathIdentity(response.data.Result);\r\n      })\r\n      .then((files) => {\r\n        setFileInfos(files.data);\r\n      })\r\n      .catch(() => {\r\n        setProgress(0);\r\n        setCurrentFile(undefined);\r\n      });\r\n    setSelectedFiles(undefined);\r\n  };\r\n\r\n  const [submitted, setSubmitted] = useState(false);\r\n  const [isCompanyMaritalStatusModalOpen, setIsCompanyMaritalStatusModalOpen] =\r\n    useState(false);\r\n  function handleGeneralCloseModal() {\r\n    isCompanyMaritalStatusModalOpen(false);\r\n  }\r\n  function handleCompanyMaritalStatusCloseModal() {\r\n    setIsCompanyMaritalStatusModalOpen(false);\r\n  }\r\n  const [toggleMarriedInfo, setToggleMarriedInfo] = useState(false);\r\n  const initialMartailStatusUnmarriedState = {\r\n    Id: null,\r\n    SoleAndPartnerShipID: SoleId,\r\n    UnMarriedCertficate: \"\",\r\n    UnMarriedCertficateIssueDate: \"\",\r\n    UnMarriedCertficateExpiredDate: \"\",\r\n    UnMarriedCertficateIssuer: \"\",\r\n  };\r\n  const [martailStatusUnmarried, setMartailStatusUnmarried] = useState(\r\n    initialMartailStatusUnmarriedState\r\n  );\r\n  const newMartailStatusUnmarried = () => {\r\n    setMartailStatusUnmarried(initialMartailStatusUnmarriedState);\r\n    setSubmitted(false);\r\n  };\r\n  const handleInputChangeMartailStatusUnmarried = (event) => {\r\n    const { name, value } = event.target;\r\n    setMartailStatusUnmarried({ ...martailStatusUnmarried, [name]: value });\r\n  };\r\n  const saveUnmarried = () => {\r\n    var data = {\r\n      SoleAndPartnerShipID: martailStatusUnmarried.SoleAndPartnerShipID,\r\n      UnMarriedCertficate: selectedPathIdentity,\r\n      UnMarriedCertficateIssueDate: unMarriedCertficateIssueDate,\r\n      UnMarriedCertficateExpiredDate: unMarriedCertficateExpiredDate,\r\n      UnMarriedCertficateIssuer:\r\n        martailStatusUnmarried.UnMarriedCertficateIssuer,\r\n    };\r\n    CommonServices.UnmarriedSole(data, SoleId)\r\n      .then((response) => {\r\n        setMartailStatusUnmarried({\r\n          Id: response.data.Id,\r\n          SoleAndPartnerShipID: response.data.SoleAndPartnerShipID,\r\n          UnMarriedCertficate: response.data.UnMarriedCertficate,\r\n          UnMarriedCertficateIssueDate:\r\n            response.data.UnMarriedCertficateIssueDate,\r\n          UnMarriedCertficateExpiredDate:\r\n            response.data.UnMarriedCertficateExpiredDate,\r\n          UnMarriedCertficateIssuer: response.data.UnMarriedCertficateIssuer,\r\n        });\r\n        setSubmitted(true);\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n  return (\r\n    <div>\r\n      <button\r\n        onClick={() => setToggleMarriedInfo(!toggleMarriedInfo)}\r\n        className=\"text-purple-600 rounded-md font-medium \"\r\n      >\r\n        Add Married\r\n      </button>\r\n\r\n      {toggleMarriedInfo && (\r\n        <div className=\"submit-form\">\r\n          {submitted ? (\r\n            <div>\r\n              <h4>You submitted successfully!</h4>\r\n            </div>\r\n          ) : (\r\n            <div className=\"relative center justify-center flex-1 w-full max-w-full grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\">\r\n              <div>\r\n                {currentFile && (\r\n                  <div className=\"progress\">\r\n                    <div\r\n                      className=\"progress-bar progress-bar-info progress-bar-striped\"\r\n                      role=\"progressbar\"\r\n                      aria-valuenow={progress}\r\n                      aria-valuemin=\"0\"\r\n                      aria-valuemax=\"100\"\r\n                      style={{ width: progress + \"%\" }}\r\n                    >\r\n                      {progress}%\r\n                    </div>\r\n                  </div>\r\n                )}\r\n                <label className=\"btn btn-default\">\r\n                  <input type=\"file\" onChange={selectFile} />\r\n                </label>\r\n                <button\r\n                  className=\"bg-[#c94fc9] hover:bg-purple-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\"\r\n                  disabled={!selectedFiles}\r\n                  onClick={uploadIdentity}\r\n                >\r\n                  upload UnMarried Certficate\r\n                </button>\r\n                <div className=\"alert alert-light\" role=\"alert\">\r\n                  {message}\r\n                </div>\r\n              </div>\r\n              <p>\r\n                Marriage Date:\r\n                <div>\r\n                  <DatePicker\r\n                    selected={unMarriedCertficateIssueDate}\r\n                    onChange={(unMarriedCertficateIssueDate) =>\r\n                      setUnMarriedCertficateExpiredDate(\r\n                        unMarriedCertficateIssueDate\r\n                      )\r\n                    }\r\n                  />\r\n                </div>\r\n              </p>\r\n              <p>\r\n                Marriage Date:\r\n                <div>\r\n                  <DatePicker\r\n                    selected={unMarriedCertficateExpiredDate}\r\n                    onChange={(unMarriedCertficateExpiredDate) =>\r\n                      setUnMarriedCertficateExpiredDate(\r\n                        unMarriedCertficateExpiredDate\r\n                      )\r\n                    }\r\n                  />\r\n                </div>\r\n              </p>\r\n              <LoanTextField\r\n                id=\"UnMarriedCertficateIssuer\"\r\n                label=\"UnMarriedCertficateIssuer\"\r\n                value={martailStatusUnmarried.UnMarriedCertficateIssuer}\r\n                onChange={handleInputChangeMartailStatusUnmarried}\r\n                name=\"UnMarriedCertficateIssuer\"\r\n              />\r\n            </div>\r\n          )}\r\n          <div>\r\n            <button\r\n              className=\"bg-[purple] hover:bg-purple-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\"\r\n              onClick={() => {\r\n                saveUnmarried();\r\n              }}\r\n            >\r\n              save\r\n            </button>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\nexport default AddUnMarriedStatus;\r\n","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\SoleAndPartnership\\MaritalStatus\\AddMaritalStatus.jsx",["1255","1256","1257","1258","1259","1260","1261","1262"],[],"import { useState, useEffect } from \"react\";\r\nimport CompanyModal from \"../../Common/CompanyModal\";\r\nimport LoanIconButton from \"../../../Common/LoanIconButton\";\r\nimport { BsPlus } from \"react-icons/bs\";\r\nimport { IconButton } from \"@material-tailwind/react\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport {\r\n  InputLabel,\r\n  TextField,\r\n  MenuItem,\r\n  FormControl,\r\n  Select,\r\n} from \"@mui/material\";\r\nimport CommonServices from \"../../Common/CommonServices\";\r\nconst AddMaritalStatus = ({\r\n  SoleId,\r\n  // handleSkip,\r\n  // BiSkipPrevious,\r\n  // BiSkipNext\r\n}) => {\r\n  //upload start\r\n\r\n  const [selectedPathIdentity, setSelectedPathIdentity] = useState(null);\r\n  const [selectedPathMarriege, setSelectedPathMarriege] = useState(null);\r\n  const [selectedFiles, setSelectedFiles] = useState(undefined);\r\n  const [currentFile, setCurrentFile] = useState(undefined);\r\n  const [fileInfos, setFileInfos] = useState([]);\r\n  const [progress, setProgress] = useState(0);\r\n  const [message, setMessage] = useState(\"\");\r\n  const selectFile = (event) => {\r\n    setSelectedFiles(event.target.files);\r\n  };\r\n  //upload 1\r\n  const uploadIdentity = () => {\r\n    let currentFile = selectedFiles[0];\r\n    setProgress(0);\r\n    setCurrentFile(currentFile);\r\n    CommonServices.upload(currentFile, (event) => {\r\n      setProgress(Math.round((100 * event.loaded) / event.total));\r\n    })\r\n      .then((response) => {\r\n        setMessage(response.data.message);\r\n        setSelectedPathIdentity(response.data.Result);\r\n      })\r\n      .then((files) => {\r\n        setFileInfos(files.data);\r\n      })\r\n      .catch(() => {\r\n        setProgress(0);\r\n        setCurrentFile(undefined);\r\n      });\r\n    setSelectedFiles(undefined);\r\n  };\r\n  //end upload\r\n  //upload 2\r\n  const uploadMarriegeCertificate = () => {\r\n    let currentFile = selectedFiles[0];\r\n    setProgress(0);\r\n    setCurrentFile(currentFile);\r\n    CommonServices.upload(currentFile, (event) => {\r\n      setProgress(Math.round((100 * event.loaded) / event.total));\r\n    })\r\n      .then((response) => {\r\n        setMessage(response.data.message);\r\n        setSelectedPathMarriege(response.data.Result);\r\n      })\r\n      .then((files) => {\r\n        setFileInfos(files.data);\r\n      })\r\n      .catch(() => {\r\n        setProgress(0);\r\n        setCurrentFile(undefined);\r\n      });\r\n    setSelectedFiles(undefined);\r\n  };\r\n  //endupload2\r\n  //uppload end\r\n  //date\r\n  const [marriageDate, setMarriageDate] = useState(new Date());\r\n  const [proofOfIdentityIssueDate, setProofOfIdentityIssueDate] = useState(\r\n    new Date()\r\n  );\r\n  const [proofOfIdentityExpirDate, setProofOfIdentityExpirDate] = useState(\r\n    new Date()\r\n  );\r\n  //end date\r\n  const [submitted, setSubmitted] = useState(false);\r\n  const [isCompanyMaritalStatusModalOpen, setIsCompanyMaritalStatusModalOpen] =\r\n    useState(false);\r\n  function handleGeneralCloseModal() {\r\n    isCompanyMaritalStatusModalOpen(false);\r\n  }\r\n  function handleCompanyMaritalStatusCloseModal() {\r\n    setIsCompanyMaritalStatusModalOpen(false);\r\n  }\r\n  const [toggleMarriedInfo, setToggleMarriedInfo] = useState(false);\r\n  const [country, setContry] = useState([]);\r\n  const [proofOfIdentityType, setProofOfIdentityType] = useState([]);\r\n  const initialMaritalStatusMarriedState = {\r\n    Id: null,\r\n    FirstName: \"\",\r\n    MiddleName: \"\",\r\n    LastName: \"\",\r\n    NationalityID: \"\",\r\n    CountryOfOriginID: \"\",\r\n    CountryOfResidenceID: \"\",\r\n    ProofOfIdentityTypeID: \"\",\r\n    ProofOfIdentity: \"\",\r\n    MarriageDate: \"\",\r\n    MarriageCertificate: \"\",\r\n    MarriageCertificateIssuer: \"\",\r\n    ProofOfIdentityIssueDate: \"\",\r\n    ProofOfIdentityExpirDate: \"\",\r\n  };\r\n  const [maritalStatusMarried, setMaritalStatusMarried] = useState(\r\n    initialMaritalStatusMarriedState\r\n  );\r\n  const newMaritalStatusMarried = () => {\r\n    setMaritalStatusMarried(initialMaritalStatusMarriedState);\r\n    setSubmitted(false);\r\n  };\r\n  const handleInputChangeMaritalStatusMarried = (event) => {\r\n    const { name, value } = event.target;\r\n    setMaritalStatusMarried({ ...maritalStatusMarried, [name]: value });\r\n  };\r\n  const saveMarried = () => {\r\n    var data = {\r\n      FirstName: maritalStatusMarried.FirstName,\r\n      MiddleName: maritalStatusMarried.MiddleName,\r\n      LastName: maritalStatusMarried.LastName,\r\n      NationalityID: maritalStatusMarried.NationalityID,\r\n      CountryOfOriginID: maritalStatusMarried.CountryOfOriginID,\r\n      CountryOfResidenceID: maritalStatusMarried.CountryOfResidenceID,\r\n      ProofOfIdentityTypeID: maritalStatusMarried.ProofOfIdentityTypeID,\r\n      ProofOfIdentity: selectedPathIdentity,\r\n      MarriageDate: marriageDate,\r\n      MarriageCertificate: selectedPathMarriege,\r\n      MarriageCertificateIssuer: maritalStatusMarried.MarriageCertificateIssuer,\r\n      ProofOfIdentityIssueDate: proofOfIdentityIssueDate,\r\n      ProofOfIdentityExpirDate: proofOfIdentityExpirDate,\r\n    };\r\n    CommonServices.marriedSole(data, SoleId)\r\n      .then((response) => {\r\n        setMaritalStatusMarried({\r\n          Id: response.data.Id,\r\n          FirstName: response.data.FirstName,\r\n          MiddleName: response.data.MiddleName,\r\n          LastName: response.data.LastName,\r\n          NationalityID: response.data.NationalityID,\r\n          CountryOfOriginID: response.data.CountryOfOriginID,\r\n          CountryOfResidenceID: response.data.CountryOfResidenceID,\r\n          ProofOfIdentityTypeID: response.data.ProofOfIdentityTypeID,\r\n          ProofOfIdentity: response.data.ProofOfIdentity,\r\n          MarriageDate: response.data.MarriageDate,\r\n          MarriageCertificate: response.data.MarriageCertificate,\r\n          MarriageCertificateIssuer: response.data.MarriageCertificateIssuer,\r\n          ProofOfIdentityIssueDate: response.data.ProofOfIdentityIssueDate,\r\n          ProofOfIdentityExpirDate: response.data.ProofOfIdentityExpirDate,\r\n        });\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n  const fetchContry = () => {\r\n    CommonServices.getCountry()\r\n      .then((response) => {\r\n        setContry(response.data.Result);\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n  useEffect(() => {\r\n    fetchContry();\r\n  }, []);\r\n\r\n  const fetchProofOfIdentityType = () => {\r\n    CommonServices.getProofOfIdentityTypes()\r\n      .then((response) => {\r\n        setProofOfIdentityType(response.data.Result);\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n  useEffect(() => {\r\n    fetchProofOfIdentityType();\r\n  }, []);\r\n  const [isMaritalStatusModalOpen, setIsMaritalStatusModalOpen] =\r\n    useState(false);\r\n  function handleMaritalStatusOpenModal() {\r\n    setIsMaritalStatusModalOpen(true);\r\n  }\r\n  function handlMaritalStatusCloseModal() {\r\n    setIsMaritalStatusModalOpen(false);\r\n  }\r\n  return (\r\n    <>\r\n      <div className=\"flex\">\r\n        <LoanIconButton\r\n          style={{ color: \"purple\" }}\r\n          // icon={<BiSkipPrevious />}\r\n          text=\"Back\"\r\n          // onClick={handleSkip}\r\n        />\r\n        <LoanIconButton\r\n          style={{ color: \"purple\" }}\r\n          icon={<BsPlus />}\r\n          text=\"Add\"\r\n          onClick={handleMaritalStatusOpenModal}\r\n        />\r\n        <LoanIconButton\r\n          style={{ color: \"purple\" }}\r\n          // icon={<BiSkipNext />}\r\n          text=\"Skip\"\r\n          // onClick={handleSkip}\r\n        />\r\n      </div>\r\n      <div>\r\n        <CompanyModal\r\n          isOpen={isMaritalStatusModalOpen}\r\n          onClose={handlMaritalStatusCloseModal}\r\n          title=\"add married information \"\r\n        >\r\n          <div className=\" relative center justify-center flex-1 w-full max-w-full grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\">\r\n            <TextField\r\n              id=\"FirstName\"\r\n              label=\"FirstName\"\r\n              variant=\"standard\"\r\n              color=\"secondary\"\r\n              size=\"\"\r\n              required\r\n              value={maritalStatusMarried.FirstName}\r\n              onChange={handleInputChangeMaritalStatusMarried}\r\n              name=\"FirstName\"\r\n            />\r\n            <TextField\r\n              id=\"MiddleName\"\r\n              label=\"MiddleName\"\r\n              variant=\"standard\"\r\n              color=\"secondary\"\r\n              size=\"\"\r\n              required\r\n              value={maritalStatusMarried.MiddleName}\r\n              onChange={handleInputChangeMaritalStatusMarried}\r\n              name=\"MiddleName\"\r\n            />\r\n            <TextField\r\n              id=\"LastName\"\r\n              label=\"LastName\"\r\n              variant=\"standard\"\r\n              color=\"secondary\"\r\n              size=\"\"\r\n              required\r\n              value={maritalStatusMarried.LastName}\r\n              onChange={handleInputChangeMaritalStatusMarried}\r\n              name=\"LastName\"\r\n            />\r\n            <FormControl variant=\"standard\" sx={{ minWidth: 120 }}>\r\n              <InputLabel id=\"countrylbl\" color=\"secondary\">\r\n                {\" \"}\r\n                Nationality{\" \"}\r\n              </InputLabel>\r\n              <Select\r\n                color=\"secondary\"\r\n                onChange={(event) =>\r\n                  (maritalStatusMarried.NationalityID = event.target.value)\r\n                }\r\n                labelId=\"countrylbl\"\r\n                id=\"countrySelect\"\r\n                label=\"Country\"\r\n              >\r\n                <MenuItem value=\"\">\r\n                  <em>None</em>\r\n                </MenuItem>\r\n                {country.map((yourCounty) => (\r\n                  <MenuItem\r\n                    key={yourCounty.Id}\r\n                    NationalityID={yourCounty.Id}\r\n                    value={yourCounty.Id}\r\n                  >\r\n                    {yourCounty.Name}\r\n                  </MenuItem>\r\n                ))}\r\n              </Select>\r\n            </FormControl>\r\n            <FormControl variant=\"standard\" sx={{ minWidth: 120 }}>\r\n              <InputLabel id=\"countrylbl\" color=\"secondary\">\r\n                {\" \"}\r\n                Country Of Origin{\" \"}\r\n              </InputLabel>\r\n              <Select\r\n                color=\"secondary\"\r\n                onChange={(event) =>\r\n                  (maritalStatusMarried.CountryOfOriginID = event.target.value)\r\n                }\r\n                labelId=\"countrylbl\"\r\n                id=\"countrySelect\"\r\n                label=\"Country\"\r\n              >\r\n                <MenuItem value=\"\">\r\n                  <em>None</em>\r\n                </MenuItem>\r\n                {country.map((yourCounty) => (\r\n                  <MenuItem\r\n                    key={yourCounty.Id}\r\n                    NationalityID={yourCounty.Id}\r\n                    value={yourCounty.Id}\r\n                  >\r\n                    {yourCounty.Name}\r\n                  </MenuItem>\r\n                ))}\r\n              </Select>\r\n            </FormControl>\r\n            <FormControl variant=\"standard\" sx={{ minWidth: 120 }}>\r\n              <InputLabel id=\"countrylbl\" color=\"secondary\">\r\n                {\" \"}\r\n                Country Of Residence{\" \"}\r\n              </InputLabel>\r\n              <Select\r\n                color=\"secondary\"\r\n                onChange={(event) =>\r\n                  (maritalStatusMarried.CountryOfResidenceID =\r\n                    event.target.value)\r\n                }\r\n                labelId=\"countrylbl\"\r\n                id=\"countrySelect\"\r\n                label=\"Country\"\r\n              >\r\n                <MenuItem value=\"\">\r\n                  <em>None</em>\r\n                </MenuItem>\r\n                {country.map((yourCounty) => (\r\n                  <MenuItem\r\n                    key={yourCounty.Id}\r\n                    NationalityID={yourCounty.Id}\r\n                    value={yourCounty.Id}\r\n                  >\r\n                    {yourCounty.Name}\r\n                  </MenuItem>\r\n                ))}\r\n              </Select>\r\n            </FormControl>\r\n            <FormControl variant=\"standard\" sx={{ minWidth: 120 }}>\r\n              <InputLabel id=\"countrylbl\" color=\"secondary\">\r\n                {\" \"}\r\n                Proof Of Identity Type{\" \"}\r\n              </InputLabel>\r\n              <Select\r\n                color=\"secondary\"\r\n                onChange={(event) =>\r\n                  (maritalStatusMarried.ProofOfIdentityTypeID =\r\n                    event.target.value)\r\n                }\r\n                labelId=\"countrylbl\"\r\n                id=\"countrySelect\"\r\n                label=\"Country\"\r\n              >\r\n                <MenuItem value=\"\">\r\n                  <em>None</em>\r\n                </MenuItem>\r\n                {proofOfIdentityType.map((yourProofOfIdentityType) => (\r\n                  <MenuItem\r\n                    key={yourProofOfIdentityType.Id}\r\n                    ProofOfIdentityTypeID={yourProofOfIdentityType.Id}\r\n                    value={yourProofOfIdentityType.Id}\r\n                  >\r\n                    {yourProofOfIdentityType.Name}\r\n                  </MenuItem>\r\n                ))}\r\n              </Select>\r\n            </FormControl>\r\n            <div>\r\n              {currentFile && (\r\n                <div className=\"progress\">\r\n                  <div\r\n                    className=\"progress-bar progress-bar-info progress-bar-striped\"\r\n                    role=\"progressbar\"\r\n                    aria-valuenow={progress}\r\n                    aria-valuemin=\"0\"\r\n                    aria-valuemax=\"100\"\r\n                    style={{ width: progress + \"%\" }}\r\n                  >\r\n                    {progress}%\r\n                  </div>\r\n                </div>\r\n              )}\r\n              <label className=\"btn btn-default\">\r\n                <input type=\"file\" onChange={selectFile} />\r\n              </label>\r\n              <button\r\n                className=\"bg-[#c94fc9] hover:bg-purple-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\"\r\n                disabled={!selectedFiles}\r\n                onClick={uploadIdentity}\r\n              >\r\n                Upload Proof Of Identity\r\n              </button>\r\n              <div className=\"alert alert-light\" role=\"alert\">\r\n                {message}\r\n              </div>\r\n            </div>\r\n            <p>\r\n              Marriage Date:\r\n              <div>\r\n                <DatePicker\r\n                  selected={marriageDate}\r\n                  onChange={(marriageDate) => setMarriageDate(marriageDate)}\r\n                />\r\n              </div>\r\n            </p>\r\n\r\n            <div>\r\n              {currentFile && (\r\n                <div className=\"progress\">\r\n                  <div\r\n                    className=\"progress-bar progress-bar-info progress-bar-striped\"\r\n                    role=\"progressbar\"\r\n                    aria-valuenow={progress}\r\n                    aria-valuemin=\"0\"\r\n                    aria-valuemax=\"100\"\r\n                    style={{ width: progress + \"%\" }}\r\n                  >\r\n                    {progress}%\r\n                  </div>\r\n                </div>\r\n              )}\r\n              <label className=\"btn btn-default\">\r\n                <input type=\"file\" onChange={selectFile} />\r\n              </label>\r\n              <button\r\n                className=\"bg-[#c94fc9] hover:bg-purple-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\"\r\n                disabled={!selectedFiles}\r\n                onClick={uploadMarriegeCertificate}\r\n              >\r\n                Upload Marriage Certificate\r\n              </button>\r\n              <div className=\"alert alert-light\" role=\"alert\">\r\n                {message}\r\n              </div>\r\n            </div>\r\n\r\n            <TextField\r\n              id=\"MarriageCertificateIssuer\"\r\n              label=\"MarriageCertificateIssuer\"\r\n              variant=\"standard\"\r\n              color=\"secondary\"\r\n              size=\"\"\r\n              required\r\n              value={maritalStatusMarried.MarriageCertificateIssuer}\r\n              onChange={handleInputChangeMaritalStatusMarried}\r\n              name=\"MarriageCertificateIssuer\"\r\n            />\r\n            <p>\r\n              Proof Of Identity Issue Date:\r\n              <div>\r\n                <DatePicker\r\n                  selected={proofOfIdentityIssueDate}\r\n                  onChange={(proofOfIdentityIssueDate) =>\r\n                    setProofOfIdentityIssueDate(proofOfIdentityIssueDate)\r\n                  }\r\n                />\r\n              </div>\r\n            </p>\r\n            <p>\r\n              Proof Of Identity Expire Date:\r\n              <div>\r\n                <DatePicker\r\n                  selected={proofOfIdentityExpirDate}\r\n                  onChange={(proofOfIdentityExpirDate) =>\r\n                    setProofOfIdentityExpirDate(proofOfIdentityExpirDate)\r\n                  }\r\n                />\r\n              </div>\r\n            </p>\r\n          </div>\r\n\r\n          <div>\r\n            <button\r\n              className=\"bg-[purple] hover:bg-purple-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\"\r\n              onClick={() => {\r\n                saveMarried();\r\n              }}\r\n            >\r\n              save\r\n            </button>\r\n          </div>\r\n        </CompanyModal>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\nexport default AddMaritalStatus;\r\n","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Common\\LoanDateTime.jsx",[],[],"C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\SoleAndPartnership\\guarantor\\ViewMaritalStatus.jsx",["1263","1264","1265","1266","1267","1268","1269","1270","1271","1272","1273","1274","1275"],[],"import { useState, useEffect } from \"react\";\r\nimport CompanyModal from \"../../Common/CompanyModal\";\r\nimport LoanTextField from \"../../../Common/LoanTextField\";\r\nimport { Select, FormControl, MenuItem, InputLabel } from \"@mui/material\";\r\nimport CommonServices from \"../../Common/CommonServices\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nconst ViewMaritalStatus = ({\r\n  holdMarried,\r\n  guarantorId,\r\n  isCompanyMartailStatusModalOpen,\r\n  handleCompanyMartailStatusCloseModal,\r\n  handleMaritalStatusModalOpen,\r\n}) => {\r\n  //upload\r\n  const [newCertificate, setNewCertificate] = useState(null);\r\n  const [marriageCertificate, setMarriageCertificate] = useState(null);\r\n  const [selectedFiles, setSelectedFiles] = useState(undefined);\r\n  const [currentFile, setCurrentFile] = useState(undefined);\r\n  const [fileInfos, setFileInfos] = useState([]);\r\n  const [progress, setProgress] = useState(0);\r\n  const [message, setMessage] = useState(\"\");\r\n  const selectFile = (event) => {\r\n    setSelectedFiles(event.target.files);\r\n  };\r\n  //upload 1\r\n  const uploadMarriageCertificate = () => {\r\n    let currentFile = selectedFiles[0];\r\n    setProgress(0);\r\n    setCurrentFile(currentFile);\r\n    CommonServices.upload(currentFile, (event) => {\r\n      setProgress(Math.round((100 * event.loaded) / event.total));\r\n    })\r\n      .then((response) => {\r\n        setMessage(response.data.message);\r\n        setMarriageCertificate(response.data.Result);\r\n      })\r\n      .then((files) => {\r\n        setFileInfos(files.data);\r\n      })\r\n      .catch(() => {\r\n        setProgress(0);\r\n        setCurrentFile(undefined);\r\n      });\r\n    setSelectedFiles(undefined);\r\n  };\r\n  //upload 2\r\n  const uploadCertificate = () => {\r\n    let currentFile = selectedFiles[0];\r\n    setProgress(0);\r\n    setCurrentFile(currentFile);\r\n    CommonServices.upload(currentFile, (event) => {\r\n      setProgress(Math.round((100 * event.loaded) / event.total));\r\n    })\r\n      .then((response) => {\r\n        setMessage(response.data.message);\r\n        setNewCertificate(response.data.Result);\r\n      })\r\n      .then((files) => {\r\n        setFileInfos(files.data);\r\n      })\r\n      .catch(() => {\r\n        setProgress(0);\r\n        setCurrentFile(undefined);\r\n      });\r\n    setSelectedFiles(undefined);\r\n  };\r\n  const [issueDate, setIssueDate] = useState(new Date());\r\n  const [expireddate, setExpireddate] = useState(new Date());\r\n  const [marriageCertificateIssuDate, setMarriageCertificateIssuDate] =\r\n    useState(new Date());\r\n\r\n  const [\r\n    isCompanyMarriedInformationEditModalOpen,\r\n    setIsCompanyMarriedInformationEditModalOpen,\r\n  ] = useState(false);\r\n  function handleCompanyMarriedEditCloseModal() {\r\n    setIsCompanyMarriedInformationEditModalOpen(false);\r\n  }\r\n  function handleCompanyMarriedInformationEditOpenModal() {\r\n    setIsCompanyMarriedInformationEditModalOpen(true);\r\n  }\r\n  function handleCompanyMarriedInformationEditCloseModal() {\r\n    setIsCompanyMarriedInformationEditModalOpen(false);\r\n  }\r\n  //married tax\r\n  const [isCompanyMarriedTaxModalOpen, setIsCompanyMarriedTaxModalOpen] =\r\n    useState(false);\r\n  //end married tax\r\n  const [taxInformationId, setTaxInformationId] = useState();\r\n  const [marriedTaxId, setMarriedTaxId] = useState();\r\n  const [editMarriedInfo, setEditMarriedInfo] = useState({\r\n    SpouseName: \"\",\r\n    MarriageCertificate: \"\",\r\n    MarriageCertificateIssuDate: \"\",\r\n    TaxClerance: {\r\n      Name: \"\",\r\n      TinNo: \"\",\r\n      Certificate: \"\",\r\n      IssueDate: \"\",\r\n      Expireddate: \"\",\r\n      TaxDebit: \"\",\r\n    },\r\n  });\r\n  const handleInputChangeEditMarriedStatus = (event) => {\r\n    const { name, value } = event.target;\r\n    setEditMarriedInfo({ ...editMarriedInfo, [name]: value });\r\n  };\r\n  const handleInputChangeEditTaxClearance = (event) => {\r\n    const { name, value } = event.target;\r\n    setEditMarriedInfo({\r\n      ...editMarriedInfo,\r\n      TaxClerance: {\r\n        ...editMarriedInfo.TaxClerance,\r\n        [name]: value,\r\n      },\r\n    });\r\n  };\r\n  const updateMarriedById = (taxInformationId) => {\r\n    CommonServices.getGuarantorMarried(taxInformationId)\r\n      .then((res) => {\r\n        setEditMarriedInfo({\r\n          ...editMarriedInfo,\r\n          SpouseName: res.data.Result.SpouseName,\r\n          MarriageCertificate: res.data.Result.MarriageCertificate,\r\n          MarriageCertificateIssuDate:\r\n            res.data.Result.MarriageCertificateIssuDate,\r\n          TaxClerance: {\r\n            Name: res.data.Result.TaxClerance.Name,\r\n            TinNo: res.data.Result.TaxClerance.TinNo,\r\n            Certificate: res.data.Result.TaxClerance.Certificate,\r\n            IssueDate: res.data.Result.TaxClerance.IssueDate,\r\n            Expireddate: res.data.Result.TaxClerance.Expireddate,\r\n            TaxDebit: res.data.Result.TaxClerance.TaxDebit,\r\n          },\r\n        });\r\n      })\r\n      .catch((err) => console.log(err));\r\n  };\r\n  useEffect(() => {\r\n    updateMarriedById();\r\n  }, []);\r\n  const updateMarriedInfo = () => {\r\n    CommonServices.updateGuarantorMarried(taxInformationId, editMarriedInfo)\r\n      .then((response) => {})\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n  useEffect(() => {\r\n    updateMarriedInfo();\r\n  }, []);\r\n  //add\r\n  const [toggleGuarantorMarried, setToggleGuarantorMarried] = useState(false);\r\n  const [submitted, setSubmitted] = useState(false);\r\n  const initialGuarantorMarriedState = {\r\n    Id: null,\r\n    SpouseName: \"\",\r\n    MarriageCertificate: \"\",\r\n    MarriageCertificateIssuDate: \"\",\r\n    TaxClerance: {\r\n      Name: \"\",\r\n      TinNo: \"\",\r\n      Certificate: \"\",\r\n      IssueDate: \"\",\r\n      Expireddate: \"\",\r\n      TaxDebit: \"\",\r\n    },\r\n  };\r\n  const [guarantorMarried, setGuarantorMarried] = useState(\r\n    initialGuarantorMarriedState\r\n  );\r\n  const handleInputChangeGuarantorMarried = (event) => {\r\n    const { name, value } = event.target;\r\n    setGuarantorMarried({ ...guarantorMarried, [name]: value });\r\n  };\r\n  const handleInputChangeTaxClearance = (event) => {\r\n    const { name, value } = event.target;\r\n    setGuarantorMarried({\r\n      ...guarantorMarried,\r\n      TaxClerance: {\r\n        ...guarantorMarried.TaxClerance,\r\n        [name]: value,\r\n      },\r\n    });\r\n  };\r\n  const saveGuarantorMarried = () => {\r\n    var data = {\r\n      SpouseName: guarantorMarried.SpouseName,\r\n      MarriageCertificate: newCertificate,\r\n      MarriageCertificateIssuDate: issueDate,\r\n      TaxClerance: {\r\n        Name: guarantorMarried.TaxClerance.Name,\r\n        TinNo: guarantorMarried.TaxClerance.TinNo,\r\n        Certificate: marriageCertificate,\r\n        IssueDate: expireddate,\r\n        Expireddate: marriageCertificateIssuDate,\r\n        TaxDebit: guarantorMarried.TaxClerance.TaxDebit,\r\n      },\r\n    };\r\n    CommonServices.addGuarantorMarried(guarantorId, data)\r\n      .then((response) => {\r\n        setGuarantorMarried({\r\n          Id: response.data.Id,\r\n          SpouseName: response.data.SpouseName,\r\n          MarriageCertificate: response.data.MarriageCertificate,\r\n          MarriageCertificateIssuDate:\r\n            response.data.MarriageCertificateIssuDate,\r\n          TaxClerance: {\r\n            Name: response.data.TaxClerance.Name,\r\n            TinNo: response.data.TaxClerance.TinNo,\r\n            Certificate: response.data.TaxClerance.Certificate,\r\n            IssueDate: response.data.TaxClerance.IssueDate,\r\n            Expireddate: response.data.TaxClerance.Expireddate,\r\n            TaxDebit: response.data.TaxClerance.TaxDebit,\r\n          },\r\n        });\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n  return (\r\n    <div>\r\n      <CompanyModal\r\n        isOpen={isCompanyMartailStatusModalOpen}\r\n        onClose={handleCompanyMartailStatusCloseModal}\r\n        title=\"Add marital status information\"\r\n      >\r\n        <div className=\"rounded-lg overflow-hidden overflow-x-scroll overflow-y-scroll\">\r\n          {holdMarried.TaxClerance ? (\r\n            <table className=\"table table-bordered table-striped bg-purple-100\">\r\n              <thead>\r\n                <th className=\"px-2 py-4\">SpouseName</th>\r\n                <th className=\"px-2 py-4\">Marriage Certificate</th>\r\n                <th className=\"px-2 py-4\">Marriage Certificate Issu Date</th>\r\n                <th className=\"px-2 py-4\"> Tax Name</th>\r\n                <th className=\"px-2 py-4\"> TinNo</th>\r\n                <th className=\"px-2 py-4\"> Certificate</th>\r\n                <th className=\"px-2 py-4\"> Issue Date</th>\r\n                <th className=\"px-2 py-4\"> Expired date</th>\r\n                <th className=\"px-2 py-4\"> Tax Debit</th>\r\n                <th className=\"px-2 py-4\"> Action </th>\r\n              </thead>\r\n              <tbody>\r\n                <>\r\n                  <tr>\r\n                    {/* <td>{holdMarried.Id}</td> */}\r\n                    <td>{holdMarried.SpouseName}</td>\r\n                    <td>{holdMarried.MarriageCertificate}</td>\r\n                    <td>{holdMarried.MarriageCertificateIssuDate}</td>\r\n                    <td>{holdMarried.TaxClerance.Name}</td>\r\n                    <td>{holdMarried.TaxClerance.TinNo}</td>\r\n                    <td>{holdMarried.TaxClerance.Certificate}</td>\r\n                    <td>{holdMarried.TaxClerance.IssueDate}</td>\r\n                    <td>{holdMarried.TaxClerance.Expireddate}</td>\r\n                    <td>{holdMarried.TaxClerance.TaxDebit}</td>\r\n                    <td>\r\n                      <button\r\n                        onClick={() => {\r\n                          handleCompanyMarriedInformationEditOpenModal();\r\n                          updateMarriedById(holdMarried.Id);\r\n                          setTaxInformationId(holdMarried.Id);\r\n                        }}\r\n                        className=\"text-purple-600 rounded-md font-semibold \"\r\n                      >\r\n                        Edit\r\n                      </button>\r\n                    </td>\r\n                  </tr>\r\n                </>\r\n                {/* ))} */}\r\n              </tbody>\r\n            </table>\r\n          ) : (\r\n            \"\"\r\n          )}\r\n          <button\r\n            onClick={() => setToggleGuarantorMarried(!toggleGuarantorMarried)}\r\n            className=\"text-purple-600 rounded-md font-medium \"\r\n          >\r\n            Add guarantor\r\n          </button>\r\n          {toggleGuarantorMarried && (\r\n            <div className=\"submit-form\">\r\n              {submitted ? (\r\n                <div>\r\n                  <h4>You submitted successfully!</h4>\r\n                </div>\r\n              ) : (\r\n                <div className=\"relative center justify-center flex-1 w-full max-w-full grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\">\r\n                  <LoanTextField\r\n                    id=\"SpouseName\"\r\n                    label=\"SpouseName\"\r\n                    value={guarantorMarried.SpouseName}\r\n                    onChange={handleInputChangeGuarantorMarried}\r\n                    name=\"SpouseName\"\r\n                  />\r\n                  <div>\r\n                    {currentFile && (\r\n                      <div className=\"progress\">\r\n                        <div\r\n                          className=\"progress-bar progress-bar-info progress-bar-striped\"\r\n                          role=\"progressbar\"\r\n                          aria-valuenow={progress}\r\n                          aria-valuemin=\"0\"\r\n                          aria-valuemax=\"100\"\r\n                          style={{ width: progress + \"%\" }}\r\n                        >\r\n                          {progress}%\r\n                        </div>\r\n                      </div>\r\n                    )}\r\n                    <label className=\"btn btn-default\">\r\n                      <input type=\"file\" onChange={selectFile} />\r\n                    </label>\r\n                    <button\r\n                      className=\"btn btn-success\"\r\n                      disabled={!selectedFiles}\r\n                      onClick={uploadMarriageCertificate}\r\n                    >\r\n                      Marriage Certificate\r\n                    </button>\r\n                    <div className=\"alert alert-light\" role=\"alert\">\r\n                      {message}\r\n                    </div>\r\n                  </div>\r\n                  <p>\r\n                    Marriage Certificate Issue Date:\r\n                    <div>\r\n                      <DatePicker\r\n                        selected={marriageCertificateIssuDate}\r\n                        onChange={(marriageCertificateIssuDate) =>\r\n                          setMarriageCertificateIssuDate(\r\n                            marriageCertificateIssuDate\r\n                          )\r\n                        }\r\n                      />\r\n                    </div>\r\n                  </p>\r\n                  <LoanTextField\r\n                    id=\"Name\"\r\n                    label=\"Name\"\r\n                    value={guarantorMarried.TaxClerance.Name}\r\n                    onChange={handleInputChangeTaxClearance}\r\n                    name=\"Name\"\r\n                  />\r\n                  <LoanTextField\r\n                    id=\"TinNo\"\r\n                    label=\"TinNo\"\r\n                    value={guarantorMarried.TaxClerance.TinNo}\r\n                    onChange={handleInputChangeTaxClearance}\r\n                    name=\"TinNo\"\r\n                  />\r\n                  <div>\r\n                    {currentFile && (\r\n                      <div className=\"progress\">\r\n                        <div\r\n                          className=\"progress-bar progress-bar-info progress-bar-striped\"\r\n                          role=\"progressbar\"\r\n                          aria-valuenow={progress}\r\n                          aria-valuemin=\"0\"\r\n                          aria-valuemax=\"100\"\r\n                          style={{ width: progress + \"%\" }}\r\n                        >\r\n                          {progress}%\r\n                        </div>\r\n                      </div>\r\n                    )}\r\n                    <label className=\"btn btn-default\">\r\n                      <input type=\"file\" onChange={selectFile} />\r\n                    </label>\r\n                    <button\r\n                      className=\"btn btn-success\"\r\n                      disabled={!selectedFiles}\r\n                      onClick={uploadCertificate}\r\n                    >\r\n                      upload tax Certificate\r\n                    </button>\r\n                    <div className=\"alert alert-light\" role=\"alert\">\r\n                      {message}\r\n                    </div>\r\n                  </div>\r\n                  <p>\r\n                    Tax Issue Date:\r\n                    <div>\r\n                      <DatePicker\r\n                        selected={issueDate}\r\n                        onChange={(issueDate) => setIssueDate(issueDate)}\r\n                      />\r\n                    </div>\r\n                  </p>\r\n                  <p>\r\n                    Tax Expired date:\r\n                    <div>\r\n                      <DatePicker\r\n                        selected={expireddate}\r\n                        onChange={(expireddate) => setExpireddate(expireddate)}\r\n                      />\r\n                    </div>\r\n                  </p>\r\n                  <LoanTextField\r\n                    id=\"TaxDebit\"\r\n                    label=\"TaxDebit\"\r\n                    value={guarantorMarried.TaxClerance.TaxDebit}\r\n                    onChange={handleInputChangeTaxClearance}\r\n                    name=\"TaxDebit\"\r\n                  />\r\n                </div>\r\n              )}\r\n              <div>\r\n                <button\r\n                  className=\"bg-[purple] hover:bg-purple-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\"\r\n                  onClick={() => {\r\n                    saveGuarantorMarried();\r\n                  }}\r\n                >\r\n                  save\r\n                </button>\r\n              </div>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </CompanyModal>\r\n      <CompanyModal\r\n        isOpen={isCompanyMarriedInformationEditModalOpen}\r\n        onClose={handleCompanyMarriedEditCloseModal}\r\n        title=\"Married edit information\"\r\n      >\r\n        <div>\r\n          <form onSubmit={updateMarriedInfo}>\r\n            <div className=\"relative center justify-center flex-1 w-full max-w-full grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\">\r\n              <LoanTextField\r\n                id=\"SpouseName\"\r\n                label=\"SpouseName\"\r\n                value={editMarriedInfo.SpouseName}\r\n                onChange={handleInputChangeEditMarriedStatus}\r\n                name=\"SpouseName\"\r\n              />\r\n              <div>\r\n                {currentFile && (\r\n                  <div className=\"progress\">\r\n                    <div\r\n                      className=\"progress-bar progress-bar-info progress-bar-striped\"\r\n                      role=\"progressbar\"\r\n                      aria-valuenow={progress}\r\n                      aria-valuemin=\"0\"\r\n                      aria-valuemax=\"100\"\r\n                      style={{ width: progress + \"%\" }}\r\n                    >\r\n                      {progress}%\r\n                    </div>\r\n                  </div>\r\n                )}\r\n                <label className=\"btn btn-default\">\r\n                  <input type=\"file\" onChange={selectFile} />\r\n                </label>\r\n                <button\r\n                  className=\"btn btn-success\"\r\n                  disabled={!selectedFiles}\r\n                  onChange={\r\n                    (editMarriedInfo.MarriageCertificate = newCertificate)\r\n                  }\r\n                  onClick={uploadMarriageCertificate}\r\n                >\r\n                  upload Marriage Certificate\r\n                </button>\r\n                <div className=\"alert alert-light\" role=\"alert\">\r\n                  {message}\r\n                </div>\r\n              </div>\r\n              <p>\r\n                Marriage Certificate Issue Date:\r\n                <input\r\n                  id=\"MarriageCertificateIssuDate\"\r\n                  name=\"MarriageCertificateIssuDate\"\r\n                  label=\"MarriageCertificateIssuDate\"\r\n                  placeholder=\"MarriageCertificateIssuDate\"\r\n                  type=\"date\"\r\n                  value={\r\n                    marriageCertificateIssuDate.getFullYear().toString() +\r\n                    \"-\" +\r\n                    (marriageCertificateIssuDate.getMonth() + 1)\r\n                      .toString()\r\n                      .padStart(2, 0) +\r\n                    \"-\" +\r\n                    marriageCertificateIssuDate\r\n                      .getDate()\r\n                      .toString()\r\n                      .padStart(2, 0)\r\n                  }\r\n                  onChange={(e) => {\r\n                    setMarriageCertificateIssuDate(new Date(e.target.value));\r\n                    editMarriedInfo.MarriageCertificateIssuDate =\r\n                      marriageCertificateIssuDate;\r\n                  }}\r\n                />{\" \"}\r\n              </p>\r\n              <LoanTextField\r\n                id=\"Name\"\r\n                label=\"Name\"\r\n                value={editMarriedInfo.TaxClerance.Name}\r\n                onChange={handleInputChangeEditTaxClearance}\r\n                name=\"Name\"\r\n              />\r\n\r\n              <LoanTextField\r\n                id=\"TinNo\"\r\n                label=\"TinNo\"\r\n                value={editMarriedInfo.TaxClerance.TinNo}\r\n                onChange={handleInputChangeEditTaxClearance}\r\n                name=\"TinNo\"\r\n              />\r\n              <div>\r\n                {currentFile && (\r\n                  <div className=\"progress\">\r\n                    <div\r\n                      className=\"progress-bar progress-bar-info progress-bar-striped\"\r\n                      role=\"progressbar\"\r\n                      aria-valuenow={progress}\r\n                      aria-valuemin=\"0\"\r\n                      aria-valuemax=\"100\"\r\n                      style={{ width: progress + \"%\" }}\r\n                    >\r\n                      {progress}%\r\n                    </div>\r\n                  </div>\r\n                )}\r\n                <label className=\"btn btn-default\">\r\n                  <input type=\"file\" onChange={selectFile} />\r\n                </label>\r\n                <button\r\n                  className=\"btn btn-success\"\r\n                  disabled={!selectedFiles}\r\n                  onChange={\r\n                    (editMarriedInfo.TaxClerance.Certificate = newCertificate)\r\n                  }\r\n                  onClick={uploadCertificate}\r\n                >\r\n                  upload Certificate\r\n                </button>\r\n                <div className=\"alert alert-light\" role=\"alert\">\r\n                  {message}\r\n                </div>\r\n              </div>\r\n              <p>\r\n                Marriage Certificate Issue Date:\r\n                <input\r\n                  id=\"IssueDate\"\r\n                  name=\"IssueDate\"\r\n                  label=\"IssueDate\"\r\n                  placeholder=\"IssueDate\"\r\n                  type=\"date\"\r\n                  value={\r\n                    issueDate.getFullYear().toString() +\r\n                    \"-\" +\r\n                    (issueDate.getMonth() + 1).toString().padStart(2, 0) +\r\n                    \"-\" +\r\n                    issueDate.getDate().toString().padStart(2, 0)\r\n                  }\r\n                  onChange={(e) => {\r\n                    setIssueDate(new Date(e.target.value));\r\n                    editMarriedInfo.TaxClerance.IssueDate = issueDate;\r\n                  }}\r\n                />{\" \"}\r\n              </p>\r\n              <p>\r\n                Marriage Certificate Issue Date:\r\n                <input\r\n                  id=\"Expireddate\"\r\n                  name=\"Expireddate\"\r\n                  label=\"Expireddate\"\r\n                  placeholder=\"Expireddate\"\r\n                  type=\"date\"\r\n                  value={\r\n                    expireddate.getFullYear().toString() +\r\n                    \"-\" +\r\n                    (expireddate.getMonth() + 1).toString().padStart(2, 0) +\r\n                    \"-\" +\r\n                    expireddate.getDate().toString().padStart(2, 0)\r\n                  }\r\n                  onChange={(e) => {\r\n                    setIssueDate(new Date(e.target.value));\r\n                    editMarriedInfo.TaxClerance.Expireddate = expireddate;\r\n                  }}\r\n                />{\" \"}\r\n              </p>\r\n              <LoanTextField\r\n                id=\"TaxDebit\"\r\n                label=\"TaxDebit\"\r\n                value={editMarriedInfo.TaxClerance.TaxDebit}\r\n                onChange={handleInputChangeEditTaxClearance}\r\n                name=\"TaxDebit\"\r\n              />\r\n            </div>\r\n            <div>\r\n              <button className=\"bg-[purple] hover:bg-purple-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\">\r\n                Update\r\n              </button>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </CompanyModal>\r\n    </div>\r\n  );\r\n};\r\nexport default ViewMaritalStatus;\r\n","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\PLCAndShare\\ViewMaritalStatus.jsx",["1276","1277","1278","1279","1280","1281","1282","1283","1284","1285"],[],"import { useState, useEffect } from \"react\";\r\nimport PLCAndShareService from \"./PLCAndShareService\";\r\nimport { Select, FormControl, MenuItem, InputLabel } from \"@mui/material\";\r\nimport CompanyModal from \"../Common/CompanyModal\";\r\nimport LoanTextField from \"../../Common/LoanTextField\";\r\nconst ViewMaritalStatus = ({\r\n  guarantorInformationId,\r\n  holdMarried,\r\n  isCompanyMartailStatusModalOpen,\r\n  handleCompanyMartailStatusCloseModal,\r\n}) => {\r\n  const [marriageCertificateIssuDate, setMarriageCertificateIssuDate] = useState(new Date());\r\n  const [marriageCertificateIssuDateEdit, setMarriageCertificateIssuDateEdit] = useState(new Date());\r\n  const [expiredDateEdit, setExpiredDateEdit] = useState(new Date());\r\n  const [issueDateEdit, setIssueDateEdit] = useState(new Date());\r\n  const [issueDate, setIssueDate] = useState(new Date());\r\n  const [expireddate, setExpireddate] = useState(new Date());\r\n  const [selectedPathCertsp, setSelectedPathCertsp] = useState(null);\r\n  const [selectedPathCertspEdit, setSelectedPathCertspEdit] = useState(null);\r\n  const [selectedFiles, setSelectedFiles] = useState(undefined);\r\n  const [currentFile, setCurrentFile] = useState(undefined);\r\n  const [fileInfos, setFileInfos] = useState([]);\r\n  const [progress, setProgress] = useState(0);\r\n  const [message, setMessage] = useState(\"\");\r\n  const [toggleGuarantorSpouse, setToggleGuarantorSpouse] = useState(false);\r\n  const selectFileCertsp = (event) => {\r\n    setSelectedFiles(event.target.files);\r\n  };\r\n  const uploadCertsp = () => {\r\n    let currentFile = selectedFiles[0];\r\n    setProgress(0);\r\n    setCurrentFile(currentFile);\r\n    PLCAndShareService.uploadGuarantorSpouse(currentFile, (event) => {\r\n      setProgress(Math.round((100 * event.loaded) / event.total));\r\n    })\r\n      .then((response) => {\r\n        setMessage(response.data.message);\r\n        setSelectedPathCertsp(response.data.Result);\r\n      })\r\n      .then((files) => {\r\n        setFileInfos(files.data);\r\n      })\r\n      .catch(() => {\r\n        setProgress(0);\r\n        // setMessage(\"Could not upload the file!\");\r\n        setCurrentFile(undefined);\r\n      });\r\n    setSelectedFiles(undefined);\r\n  };\r\n  //Start Upload Edit\r\n  const selectFileCertspEdit = (event) => {\r\n    setSelectedFiles(event.target.files);\r\n  };\r\n  const uploadCertspEdit = () => {\r\n    let currentFile = selectedFiles[0];\r\n    setProgress(0);\r\n    setCurrentFile(currentFile);\r\n\r\n    PLCAndShareService.uploadGuarantorSpouse(currentFile, (event) => {\r\n      setProgress(Math.round((100 * event.loaded) / event.total));\r\n    })\r\n      .then((response) => {\r\n        setMessage(response.data.message);\r\n        setSelectedPathCertspEdit(response.data.Result);\r\n      })\r\n      .then((files) => {\r\n        setFileInfos(files.data);\r\n      })\r\n      .catch(() => {\r\n        setProgress(0);\r\n        // setMessage(\"Could not upload the file!\");\r\n        setCurrentFile(undefined);\r\n      });\r\n    setSelectedFiles(undefined);\r\n  };\r\n  //End Upload Edit\r\n  //   const [isCompanyGuarantorSpouseModalOpen, setIsCompanyGuarantorSpouseModalOpen] =\r\n  //     useState(false);\r\n  //   function handleCompanyGuarantorSpouseOpenModal() {\r\n  //     setIsCompanyGuarantorSpouseModalOpen(true);\r\n  //   }\r\n  //   function handleCompanyGuarantorSpouseCloseModal() {\r\n  //     setIsCompanyGuarantorSpouseModalOpen(false);\r\n  //   }\r\n  const [holdGuarantorSpouse, setHoldGuarantorSpouse] = useState([]);\r\n  const initialGuarantorSpouseState = {\r\n    Id: null,\r\n    // guarantorSpouseId: guarantorInformationId,\r\n    SpouseName: \"\",\r\n    MarriageCertificate: \"\",\r\n    MarriageCertificateIssuDate: \"\",\r\n    TaxClerance: {\r\n      Name: \"\",\r\n      TinNo: \"\",\r\n      Certificate: \"\",\r\n      IssueDate: \"\",\r\n      Expireddate: \"\",\r\n      TaxDebit: \"\",\r\n    },\r\n  };\r\n  const [GuarantorSpouse, setGuarantorSpouse] = useState(initialGuarantorSpouseState);\r\n  const handleInputChangeGuarantorSpouse = (event) => {\r\n    const { name, value } = event.target;\r\n    setGuarantorSpouse({ ...GuarantorSpouse, [name]: value });\r\n  };\r\n  const handleInputChangeSpouseTaxClearance = (event) => {\r\n    const { name, value } = event.target;\r\n    setGuarantorSpouse({\r\n      ...GuarantorSpouse,\r\n      TaxClerance: {\r\n        ...GuarantorSpouse.TaxClerance,\r\n        [name]: value\r\n      },\r\n    });\r\n  };\r\n  const saveGuarantorSpouse = () => {\r\n    var data = {\r\n      SpouseName: GuarantorSpouse.SpouseName,\r\n      MarriageCertificate: selectedPathCertsp,\r\n      MarriageCertificateIssuDate: marriageCertificateIssuDate,\r\n      TaxClerance: {\r\n        Name: GuarantorSpouse.TaxClerance.Name,\r\n        TinNo: GuarantorSpouse.TaxClerance.TinNo,\r\n        Certificate: selectedPathCertsp,\r\n        IssueDate: issueDate,\r\n        Expireddate: expireddate,\r\n        TaxDebit: GuarantorSpouse.TaxClerance.TaxDebit,\r\n      },\r\n    };\r\n    PLCAndShareService.addGuarantorSpouse(data, guarantorInformationId)\r\n      .then((response) => {\r\n        setGuarantorSpouse({\r\n          Id: response.data.Id,\r\n          SpouseName: response.data.SpouseName,\r\n          MarriageCertificate: response.data.MarriageCertificate,\r\n          MarriageCertificateIssuDate: response.data.MarriageCertificateIssuDate,\r\n          TaxClerance: {\r\n            Name: response.data.TaxClerance.Name,\r\n            TinNo: response.data.TaxClerance.TinNo,\r\n            Certificate: response.data.TaxClerance.Certificate,\r\n            IssueDate: response.data.TaxClerance.IssueDate,\r\n            Expireddate: response.data.TaxClerance.Expireddate,\r\n            TaxDebit: response.data.TaxClerance.TaxDebit,\r\n          },\r\n        });\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n  const getGuarantorSpouse = (Id) => {\r\n    PLCAndShareService.getCompanyPLCAndShareGuarantorSpouseInfo(Id)\r\n      .then((response) => {\r\n        setHoldGuarantorSpouse(response.data.Result);\r\n        console.log(response.data.Result);\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n  const [\r\n    isCompanyGuarantorSpouseEditedModalOpen,\r\n    setIsCompanyGuarantorSpouseEditedModalOpen,\r\n  ] = useState(false);\r\n  function handleCompanyGuarantorSpouseEditCloseModal() {\r\n    setIsCompanyGuarantorSpouseEditedModalOpen(false);\r\n  }\r\n  function handleCompanyGuarantorSpouseEditedModalOpen() {\r\n    setIsCompanyGuarantorSpouseEditedModalOpen(true);\r\n  }\r\n  const [guarantorSpouseId, setGuarantorSpouseById] = useState();\r\n  const [editGuarantorSpouse, setEditGuarantorSpouse] = useState({\r\n    SpouseName: \"\",\r\n    MarriageCertificate: \"\",\r\n    MarriageCertificateIssuDate: \"\",\r\n    TaxClerance: {\r\n      Name: \"\",\r\n      TinNo: \"\",\r\n      Certificate: selectedPathCertspEdit,\r\n      IssueDate: \"\",\r\n      Expireddate: \"\",\r\n      TaxDebit: \"\",\r\n    },\r\n  });\r\n  const handleInputChangeEditGuarantorSpouse = (event) => {\r\n    const { name, value } = event.target;\r\n    setEditGuarantorSpouse({ ...editGuarantorSpouse, [name]: value });\r\n  };\r\n  const handleInputChangeEditSpouseTaxClerance = (event) => {\r\n    const { name, value } = event.target;\r\n    setEditGuarantorSpouse({\r\n      ...editGuarantorSpouse,\r\n      TaxClerance: {\r\n        ...editGuarantorSpouse.TaxClerance,\r\n        [name]: value\r\n      },\r\n    });\r\n  };\r\n  const getGuarantorSpouseById = (Id) => {\r\n    PLCAndShareService.getGuarantorSpouseById(Id)\r\n      .then((res) => {\r\n        setEditGuarantorSpouse({\r\n          ...editGuarantorSpouse,\r\n          SpouseName: res.data.Result.SpouseName,\r\n          MarriageCertificate: res.data.Result.MarriageCertificate,\r\n          MarriageCertificateIssuDate: res.data.Result.MarriageCertificateIssuDate,\r\n          TaxClerance: {\r\n            Name: res.data.Result.TaxClerance.Name,\r\n            TinNo: res.data.Result.TaxClerance.TinNo,\r\n            Certificate: res.data.Result.TaxClerance.Certificate,\r\n            IssueDate: res.data.Result.TaxClerance.IssueDate,\r\n            Expireddate: res.data.Result.TaxClerance.Expireddate,\r\n            TaxDebit: res.data.Result.TaxClerance.TaxDebit,\r\n          },\r\n        });\r\n      })\r\n      .catch((err) => console.log(err));\r\n  };\r\n  useEffect(() => {\r\n    getGuarantorSpouseById();\r\n  }, []);\r\n  const updateGuarantorSpouseById = () => {\r\n    PLCAndShareService.updateGuarantorSpouse(guarantorSpouseId, editGuarantorSpouse)\r\n      .then((response) => { })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n  useEffect(() => {\r\n    updateGuarantorSpouseById();\r\n  }, []);\r\n  return (\r\n    <div>\r\n      <CompanyModal\r\n        isOpen={isCompanyMartailStatusModalOpen}\r\n        onClose={handleCompanyMartailStatusCloseModal}\r\n        title=\"view Guarantor Spouse information\"\r\n      >\r\n        <div>\r\n          {holdMarried.TaxClerance ? (\r\n            <table className=\"table table-bordered table-striped bg-purple-100 \">\r\n              <thead>\r\n                <th className=\"px-2 py-4\"> SpouseName</th>\r\n                <th className=\"px-2 py-4\"> MarriageCertificate</th>\r\n                <th className=\"px-2 py-4\"> MarriageCertificateIssuDate</th>\r\n                <th className=\"px-2 py-4\"> TinNo</th>\r\n                <th className=\"px-2 py-4\"> Certificate</th>\r\n                <th className=\"px-2 py-4\"> IssueDate</th>\r\n                <th className=\"px-2 py-4\"> Expireddate</th>\r\n                <th className=\"px-2 py-4\"> TaxDebit</th>\r\n                <th className=\"px-2 py-4\"> Action </th>\r\n              </thead>\r\n              <tbody>\r\n                <>\r\n                  {/* {holdGuarantorSpouse.map((holdGuarantorSpouse, index) => ( */}\r\n                  <tr>\r\n                    <td>{holdMarried.SpouseName}</td>\r\n                    <td>{holdMarried.MarriageCertificate}</td>\r\n                    <td>{holdMarried.MarriageCertificateIssuDate}</td>\r\n                    <td>{holdMarried.TaxClerance.TinNo}</td>\r\n                    <td>{holdMarried.TaxClerance.Certificate}</td>\r\n                    <td>{holdMarried.TaxClerance.IssueDate}</td>\r\n                    <td>{holdMarried.TaxClerance.Expireddate}</td>\r\n                    <td>{holdMarried.TaxClerance.TaxDebit}</td>\r\n\r\n                    <td>\r\n                      <button\r\n                        onClick={() => {\r\n                          handleCompanyGuarantorSpouseEditedModalOpen();\r\n                          getGuarantorSpouseById(holdMarried.Id);\r\n                          setGuarantorSpouseById(holdMarried.Id);\r\n                        }}\r\n                        className=\"text-purple-600 rounded-md font-semibold \"\r\n                      >\r\n                        Edit\r\n                      </button>\r\n                    </td>\r\n                    <td>\r\n                    </td>\r\n                  </tr>\r\n                  {/* ))} */}\r\n                </>\r\n              </tbody>\r\n            </table>\r\n          ) : (\r\n            \"\"\r\n          )}\r\n          <button\r\n            onClick={() => setToggleGuarantorSpouse(!toggleGuarantorSpouse)}\r\n            className=\"text-purple-600 rounded-md font-medium \"\r\n          >\r\n            Add guarantor Spouse\r\n          </button>\r\n          {toggleGuarantorSpouse &&\r\n            <div className=\"submit-form\">\r\n              <div className=\"relative center justify-center flex-1 w-full max-w-full grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\">\r\n                <LoanTextField\r\n                  id=\"SpouseName\"\r\n                  label=\"SpouseName\"\r\n                  value={GuarantorSpouse.SpouseName}\r\n                  onChange={handleInputChangeGuarantorSpouse}\r\n                  name=\"SpouseName\"\r\n                />\r\n                <p>\r\n              Marriage Certificate Issue Date:\r\n                <input\r\n\r\n                  id=\"MarriageCertificateIssuDate\"\r\n                  name=\"MarriageCertificateIssuDate\"\r\n                  label=\"MarriageCertificateIssuDate\"\r\n                  placeholder=\"MarriageCertificateIssuDate\"\r\n                  type=\"date\"\r\n                  value={\r\n                    marriageCertificateIssuDate.getFullYear().toString() +\r\n                    \"-\" +\r\n                    (marriageCertificateIssuDate.getMonth() + 1)\r\n\r\n                      .toString()\r\n                      .padStart(2, 0) +\r\n\r\n                    \"-\" +\r\n                    marriageCertificateIssuDate\r\n                      .getDate()\r\n                      .toString()\r\n                      .padStart(2, 0)\r\n\r\n                  }\r\n\r\n                  onChange={(e) => {\r\n                    setMarriageCertificateIssuDate(new Date(e.target.value));\r\n                    GuarantorSpouse.MarriageCertificateIssuDate = marriageCertificateIssuDate;\r\n                  }}\r\n                />{\" \"}\r\n              </p>\r\n               \r\n                <div>\r\n                  {currentFile && (\r\n                    <div className=\"progress\">\r\n                      <div\r\n                        className=\"progress-bar progress-bar-info progress-bar-striped\"\r\n                        role=\"progressbar\"\r\n                        aria-valuenow={progress}\r\n                        aria-valuemin=\"0\"\r\n                        aria-valuemax=\"100\"\r\n                        style={{ width: progress + \"%\" }}\r\n                      >\r\n                        {progress}%\r\n                      </div>\r\n                    </div>\r\n                  )}\r\n                  <label className=\"btn btn-default\">\r\n                    <input type=\"file\" onChange={selectFileCertsp} />\r\n                  </label>\r\n\r\n                  <button\r\n                    className=\"btn btn-success\"\r\n                    disabled={!selectedFiles}\r\n                    onClick={uploadCertsp}\r\n                  >\r\n                    Upload Marriage Certificate\r\n                  </button>\r\n                  <div className=\"alert alert-light\" role=\"alert\">\r\n                    {message}\r\n                  </div>\r\n                </div>\r\n                <LoanTextField\r\n                  id=\"Name\"\r\n                  label=\"Name\"\r\n                  value={GuarantorSpouse.Name}\r\n                  onChange={handleInputChangeSpouseTaxClearance}\r\n                  name=\"Name\"\r\n                />\r\n                <LoanTextField\r\n                  id=\"TinNo\"\r\n                  label=\"TinNo\"\r\n                  value={GuarantorSpouse.TinNo}\r\n                  onChange={handleInputChangeSpouseTaxClearance}\r\n                  name=\"TinNo\"\r\n                />\r\n                <p>\r\n\r\n                  Issue Date:\r\n\r\n                  <input\r\n\r\n                    id=\"IssueDate\"\r\n\r\n                    name=\"IssueDate\"\r\n\r\n                    label=\"IssueDate\"\r\n\r\n                    placeholder=\"IssueDate\"\r\n\r\n                    type=\"date\"\r\n\r\n                    value={\r\n\r\n                      issueDate.getFullYear().toString() +\r\n\r\n                      \"-\" +\r\n\r\n                      (issueDate.getMonth() + 1)\r\n\r\n                        .toString()\r\n\r\n                        .padStart(2, 0) +\r\n\r\n                      \"-\" +\r\n\r\n                      issueDate\r\n\r\n                        .getDate()\r\n\r\n                        .toString()\r\n\r\n                        .padStart(2, 0)\r\n\r\n                    }\r\n\r\n                    onChange={(e) => {\r\n\r\n                      setIssueDate(new Date(e.target.value));\r\n\r\n                      GuarantorSpouse.TaxClerance.IssueDate = issueDate;\r\n\r\n                    }}\r\n\r\n                  />{\" \"}\r\n\r\n                </p>\r\n                <p>\r\n\r\n                  Expired Date:\r\n\r\n                  <input\r\n\r\n                    id=\"Expireddate\"\r\n\r\n                    name=\"Expireddate\"\r\n\r\n                    label=\"Expireddate\"\r\n\r\n                    placeholder=\"Expireddate\"\r\n\r\n                    type=\"date\"\r\n\r\n                    value={\r\n\r\n                      expireddate.getFullYear().toString() +\r\n\r\n                      \"-\" +\r\n\r\n                      (expireddate.getMonth() + 1)\r\n\r\n                        .toString()\r\n\r\n                        .padStart(2, 0) +\r\n\r\n                      \"-\" +\r\n\r\n                      expireddate\r\n\r\n                        .getDate()\r\n\r\n                        .toString()\r\n\r\n                        .padStart(2, 0)\r\n\r\n                    }\r\n\r\n                    onChange={(e) => {\r\n\r\n                      setExpireddate(new Date(e.target.value));\r\n\r\n                      GuarantorSpouse.TaxClerance.Expireddate = expireddate;\r\n                    }}\r\n\r\n                  />{\" \"}\r\n\r\n                </p>\r\n                <div>\r\n                  {currentFile && (\r\n                    <div className=\"progress\">\r\n                      <div\r\n                        className=\"progress-bar progress-bar-info progress-bar-striped\"\r\n                        role=\"progressbar\"\r\n                        aria-valuenow={progress}\r\n                        aria-valuemin=\"0\"\r\n                        aria-valuemax=\"100\"\r\n                        style={{ width: progress + \"%\" }}\r\n                      >\r\n                        {progress}%\r\n                      </div>\r\n                    </div>\r\n                  )}\r\n                  <label className=\"btn btn-default\">\r\n                    <input type=\"file\" onChange={selectFileCertsp} />\r\n                  </label>\r\n\r\n                  <button\r\n                    className=\"btn btn-success\"\r\n                    disabled={!selectedFiles}\r\n                    onClick={uploadCertsp}\r\n                  >\r\n                    Upload Tax Certificate\r\n                  </button>\r\n                  <div className=\"alert alert-light\" role=\"alert\">\r\n                    {message}\r\n                  </div>\r\n                </div>\r\n                <LoanTextField\r\n                  id=\"TaxDebit\"\r\n                  label=\"TaxDebit\"\r\n                  value={GuarantorSpouse.TaxDebit}\r\n                  onChange={handleInputChangeSpouseTaxClearance}\r\n                  name=\"TaxDebit\"\r\n                />\r\n\r\n              </div>\r\n\r\n              <div>\r\n                <button\r\n                  className=\"bg-[purple] hover:bg-purple-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\"\r\n                  onClick={() => {\r\n                    saveGuarantorSpouse();\r\n                  }}\r\n                >\r\n                  save\r\n                </button>\r\n              </div>\r\n            </div>\r\n          }\r\n        </div>\r\n      </CompanyModal>\r\n      <CompanyModal\r\n        isOpen={isCompanyGuarantorSpouseEditedModalOpen}\r\n        onClose={handleCompanyGuarantorSpouseEditCloseModal}\r\n        title=\"Edit guarantor Spouse information\"\r\n      >\r\n        <div>\r\n          <form onSubmit={updateGuarantorSpouseById}>\r\n\r\n            <div className=\"relative center justify-center flex-1 w-full max-w-full grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\">\r\n\r\n              <LoanTextField\r\n                id=\"SpouseName\"\r\n                label=\"SpouseName\"\r\n                value={editGuarantorSpouse.SpouseName}\r\n                onChange={handleInputChangeEditGuarantorSpouse}\r\n                name=\"SpouseName\"\r\n              />\r\n              <LoanTextField\r\n                id=\"MarriageCertificate\"\r\n                label=\"MarriageCertificate\"\r\n                value={editGuarantorSpouse.MarriageCertificate}\r\n                onChange={handleInputChangeEditGuarantorSpouse}\r\n                name=\"MarriageCertificate\"\r\n              /> \r\n              <p>\r\n              Marriage Certificate Issue Date:\r\n                <input\r\n\r\n                  id=\"MarriageCertificateIssuDate\"\r\n                  name=\"MarriageCertificateIssuDate\"\r\n                  label=\"MarriageCertificateIssuDate\"\r\n                  placeholder=\"MarriageCertificateIssuDate\"\r\n                  type=\"date\"\r\n                  value={\r\n                    marriageCertificateIssuDate.getFullYear().toString() +\r\n                    \"-\" +\r\n                    (marriageCertificateIssuDate.getMonth() + 1)\r\n\r\n                      .toString()\r\n                      .padStart(2, 0) +\r\n\r\n                    \"-\" +\r\n                    marriageCertificateIssuDate\r\n                      .getDate()\r\n                      .toString()\r\n                      .padStart(2, 0)\r\n\r\n                  }\r\n\r\n                  onChange={(e) => {\r\n                    setMarriageCertificateIssuDateEdit(new Date(e.target.value));\r\n                    editGuarantorSpouse.MarriageCertificateIssuDate = marriageCertificateIssuDate;\r\n                  }}\r\n                />{\" \"}\r\n              </p>\r\n\r\n              <LoanTextField\r\n                id=\"Name\"\r\n                label=\"Name\"\r\n                value={editGuarantorSpouse.TaxClerance.Name}\r\n                onChange={handleInputChangeEditSpouseTaxClerance}\r\n                name=\"Name\"\r\n              />\r\n              <LoanTextField\r\n                id=\"TinNo\"\r\n                label=\"TinNo\"\r\n                value={editGuarantorSpouse.TaxClerance.TinNo}\r\n                onChange={handleInputChangeEditSpouseTaxClerance}\r\n                name=\"TinNo\"\r\n              />\r\n\r\n              <LoanTextField\r\n                id=\"IssueDate\"\r\n                label=\"IssueDate\"\r\n                value={editGuarantorSpouse.TaxClerance.IssueDate}\r\n                onChange={handleInputChangeEditSpouseTaxClerance}\r\n                name=\"IssueDate\"\r\n              />\r\n              <p>\r\n                Issue Date:\r\n                <input\r\n\r\n                  id=\"IssueDate\"\r\n                  name=\"IssueDate\"\r\n                  label=\"IssueDate\"\r\n                  placeholder=\"IssueDate\"\r\n                  type=\"date\"\r\n                  value={\r\n                    issueDateEdit.getFullYear().toString() +\r\n                    \"-\" +\r\n                    (issueDateEdit.getMonth() + 1)\r\n\r\n                      .toString()\r\n                      .padStart(2, 0) +\r\n\r\n                    \"-\" +\r\n                    issueDateEdit\r\n                      .getDate()\r\n                      .toString()\r\n                      .padStart(2, 0)\r\n\r\n                  }\r\n\r\n                  onChange={(e) => {\r\n                    setIssueDateEdit(new Date(e.target.value));\r\n                    editGuarantorSpouse.TaxClerance.IssueDate = issueDateEdit;\r\n                  }}\r\n                />{\" \"}\r\n              </p>\r\n              <p>\r\n                Expired Date:\r\n                <input\r\n                  id=\"Expireddate\"\r\n                  name=\"Expireddate\"\r\n                  label=\"Expireddate\"\r\n                  placeholder=\"Expireddate\"\r\n                  type=\"date\"\r\n                  value={\r\n                    expiredDateEdit.getFullYear().toString() +\r\n                    \"-\" +\r\n                    (expiredDateEdit.getMonth() + 1)\r\n                      .toString()\r\n                      .padStart(2, 0) +\r\n                    \"-\" +\r\n                    expiredDateEdit\r\n                      .getDate()\r\n                      .toString()\r\n                      .padStart(2, 0)\r\n                  }\r\n                  onChange={(e) => {\r\n                    setExpiredDateEdit(new Date(e.target.value));\r\n                    editGuarantorSpouse.TaxClerance.Expireddate = expiredDateEdit;\r\n                  }}\r\n                />{\" \"}\r\n              </p>\r\n              <div>\r\n                {currentFile && (\r\n                  <div className=\"progress\">\r\n                    <div\r\n                      className=\"progress-bar progress-bar-info progress-bar-striped\"\r\n                      role=\"progressbar\"\r\n                      aria-valuenow={progress}\r\n                      aria-valuemin=\"0\"\r\n                      aria-valuemax=\"100\"\r\n                      style={{ width: progress + \"%\" }}\r\n                    >\r\n                      {progress}%\r\n                    </div>\r\n                  </div>\r\n                )}\r\n                <label className=\"btn btn-default\">\r\n                  <input type=\"file\" onChange={selectFileCertspEdit} />\r\n                </label>\r\n\r\n                <button\r\n                  className=\"btn btn-success\"\r\n                  disabled={!selectedFiles}\r\n                  onClick={uploadCertspEdit}\r\n                >\r\n                  Upload Certificate\r\n                </button>\r\n                <div className=\"alert alert-light\" role=\"alert\">\r\n                  {message}\r\n                </div>\r\n              </div>\r\n\r\n            </div>\r\n            <div>\r\n              <button className=\"bg-[purple] hover:bg-purple-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\">\r\n                Update\r\n              </button>\r\n            </div>\r\n          </form>\r\n\r\n        </div>\r\n\r\n      </CompanyModal>\r\n    </div>\r\n\r\n  );\r\n\r\n\r\n};\r\nexport default ViewMaritalStatus;","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\PLCAndShare\\ViewUnMarried.jsx",["1286","1287","1288","1289","1290"],[],"import { useState, useEffect } from \"react\";\r\nimport PLCAndShareService from \"./PLCAndShareService\";\r\nimport CompanyModal from \"../Common/CompanyModal\";\r\nconst ViewUnMarried = ({\r\n    holdGuarantor,\r\n    isCompanyGuarantorUnMarriedModalOpen,\r\n    handleGuarantorUnMarriedCloseModal,\r\n    guarantorInformationId,\r\n    holdUnMarried\r\n}) => {\r\n    const [unmarriedCertficateIssuDateEdit, setUnmarriedCertficateIssuDateEdit] = useState(new Date());\r\n    const [unmarriedCertficateExpireDateEdit, setUnmarriedCertficateExpireDateEdit] = useState(new Date());\r\n    const [unmarriedCertficateIssuDate, setUnmarriedCertficateIssuDate] = useState(new Date());\r\n    const [unmarriedCertficateExpireDate, setUnmarriedCertficateExpireDate] = useState(new Date());\r\n    const [selectedPathCert, setSelectedPathCert] = useState(null);\r\n    const [selectedPathCertEdit, setSelectedPathCertEdit] = useState(null);\r\n    const [selectedFiles, setSelectedFiles] = useState(undefined);\r\n    const [currentFile, setCurrentFile] = useState(undefined);\r\n    const [fileInfos, setFileInfos] = useState([]);\r\n    const [progress, setProgress] = useState(0);\r\n    const [message, setMessage] = useState(\"\");\r\n    const selectFileCert = (event) => {\r\n        setSelectedFiles(event.target.files);\r\n    };\r\n    const uploadCert = () => {\r\n        let currentFile = selectedFiles[0];\r\n        setProgress(0);\r\n        setCurrentFile(currentFile);\r\n\r\n        PLCAndShareService.uploadGuarantorUnmarried(currentFile, (event) => {\r\n            setProgress(Math.round((100 * event.loaded) / event.total));\r\n        })\r\n            .then((response) => {\r\n                setMessage(response.data.message);\r\n                setSelectedPathCert(response.data.Result);\r\n            })\r\n            .then((files) => {\r\n                setFileInfos(files.data);\r\n            })\r\n            .catch(() => {\r\n                setProgress(0);\r\n                // setMessage(\"Could not upload the file!\");\r\n                setCurrentFile(undefined);\r\n            });\r\n        setSelectedFiles(undefined);\r\n    };\r\n    //Start Upload Edit\r\n    const selectFileCertEdit = (event) => {\r\n        setSelectedFiles(event.target.files);\r\n    };\r\n    const uploadCertEdit = () => {\r\n        let currentFile = selectedFiles[0];\r\n        setProgress(0);\r\n        setCurrentFile(currentFile);\r\n\r\n        PLCAndShareService.uploadGuarantorUnmarried(currentFile, (event) => {\r\n            setProgress(Math.round((100 * event.loaded) / event.total));\r\n        })\r\n            .then((response) => {\r\n                setMessage(response.data.message);\r\n                setSelectedPathCertEdit(response.data.Result);\r\n            })\r\n            .then((files) => {\r\n                setFileInfos(files.data);\r\n            })\r\n            .catch(() => {\r\n                setProgress(0);\r\n                // setMessage(\"Could not upload the file!\");\r\n                setCurrentFile(undefined);\r\n            });\r\n        setSelectedFiles(undefined);\r\n    };\r\n    //End Upload Edit\r\n    const [\r\n        isCompanyGuarantorUnMarriedEditedModalOpen,\r\n        setIsCompanyGuarantorUnMarriedEditedModalOpen,\r\n    ] = useState(false);\r\n    function handleCompanyGuarantorUnMarriedEditCloseModal() {\r\n        setIsCompanyGuarantorUnMarriedEditedModalOpen(false);\r\n    }\r\n    function handleCompanyGuarantorUnMarriedEditedModalOpen() {\r\n        setIsCompanyGuarantorUnMarriedEditedModalOpen(true);\r\n    }\r\n    const [unMarriedInformationId, setUnMarriedId] = useState();\r\n    const [editUnMarried, setEditUnMarried] = useState({\r\n        UnmarriedCertficate: \"\",\r\n        UnmarriedCertficateIssuDate: \"\",\r\n        UnmarriedCertficateExpireDate: \"\",\r\n\r\n    });\r\n    const handleInputChangeEditGuarantorUnMarried = (event) => {\r\n        const { name, value } = event.target;\r\n        setEditUnMarried({ ...editUnMarried, [name]: value });\r\n    };\r\n    const getGuarantorUnMarriedById = (Id) => {\r\n        PLCAndShareService.getGuarantorUnmarriedById(Id)\r\n            .then((res) => {\r\n                setEditUnMarried({\r\n                    ...editUnMarried,\r\n                    UnmarriedCertficate: res.data.Result.UnmarriedCertficate,\r\n                    UnmarriedCertficateIssuDate: res.data.Result.UnmarriedCertficateIssuDate,\r\n                    UnmarriedCertficateExpireDate: res.data.Result.UnmarriedCertficateExpireDate,\r\n                });\r\n            })\r\n            .catch((err) => console.log(err));\r\n    };\r\n    useEffect(() => {\r\n        getGuarantorUnMarriedById();\r\n    }, []);\r\n    const updateGuarantorUnMarriedById = () => {\r\n        PLCAndShareService.updateGuarantorUnMarried(unMarriedInformationId, editUnMarried)\r\n            .then((response) => { })\r\n            .catch((e) => {\r\n                console.log(e);\r\n            });\r\n    };\r\n    useEffect(() => {\r\n        updateGuarantorUnMarriedById();\r\n    }, []);\r\n    const [toggleGuarantorUnMarried, setToggleGuarantorUnMarried] = useState(false);\r\n    const initialGuarantorUnMarriedState = {\r\n        Id: null,\r\n        UnmarriedCertficate: \"\",\r\n        UnmarriedCertficateIssuDate: \"\",\r\n        UnmarriedCertficateExpireDate: \"\",\r\n\r\n    };\r\n    const [GuarantorUnMarried, setGuarantorUnMarried] = useState(initialGuarantorUnMarriedState);\r\n    const handleInputChangeGuarantorUnMarried = (event) => {\r\n        const { name, value } = event.target;\r\n        setGuarantorUnMarried({ ...GuarantorUnMarried, [name]: value });\r\n    };\r\n    const saveGuarantorUnMarried = () => {\r\n        var data = {\r\n            UnmarriedCertficate: selectedPathCert,\r\n            UnmarriedCertficateIssuDate: unmarriedCertficateIssuDate,\r\n            UnmarriedCertficateExpireDate: unmarriedCertficateExpireDate,\r\n        };\r\n        PLCAndShareService.addGuarantorUnmarried(data, guarantorInformationId)\r\n            .then((response) => {\r\n                setGuarantorUnMarried({\r\n                    Id: response.data.Id,\r\n                    UnmarriedCertficate: response.data.UnmarriedCertficate,\r\n                    UnmarriedCertficateIssuDate: response.data.UnmarriedCertficateIssuDate,\r\n                    UnmarriedCertficateExpireDate: response.data.UnmarriedCertficateExpireDate,\r\n                });\r\n            })\r\n            .catch((e) => {\r\n                console.log(e);\r\n            });\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <CompanyModal\r\n                isOpen={isCompanyGuarantorUnMarriedModalOpen}\r\n                onClose={handleGuarantorUnMarriedCloseModal}\r\n                title=\"view Guarantor UnMarried information\"\r\n            >\r\n                <div className=\"rounded-lg overflow-hidden\">\r\n                    {holdUnMarried ? (\r\n                        <table className=\"table table-bordered table-striped bg-purple-100\">\r\n                            <thead>\r\n                                <th className=\"px-2 py-4\"> ID</th>\r\n                                <th className=\"px-2 py-4\"> Unmarried Certficate</th>\r\n                                <th className=\"px-2 py-4\"> Unmarried Certficate Issue Date</th>\r\n                                <th className=\"px-2 py-4\"> Unmarried Certficate Expire Date</th>\r\n                                <th className=\"px-2 py-4\"> Action </th>\r\n                            </thead>\r\n                            <tbody>\r\n                                <>\r\n                                    {/* {holdSoleGuarantor.map((guarntorData, index) => ( */}\r\n                                    <tr>\r\n                                        <td>{holdUnMarried.Id}</td>\r\n                                        <td>{holdUnMarried.UnmarriedCertficate}</td>\r\n                                        <td>{holdUnMarried.UnmarriedCertficateIssuDate}</td>\r\n                                        <td>{holdUnMarried.UnmarriedCertficateExpireDate}</td>\r\n\r\n                                        <td>\r\n                                            <button\r\n                                                onClick={() => {\r\n                                                    handleCompanyGuarantorUnMarriedEditedModalOpen();\r\n                                                    getGuarantorUnMarriedById(holdUnMarried.Id);\r\n                                                    setUnMarriedId(holdUnMarried.Id);\r\n                                                }}\r\n                                                className=\"text-purple-600 rounded-md font-semibold \"\r\n                                            >\r\n                                                Edit\r\n                                            </button>\r\n                                        </td>\r\n                                        <td>\r\n                                        </td>\r\n                                    </tr>\r\n                                </>\r\n                                {/* ))} */}\r\n                            </tbody>\r\n                        </table>\r\n                    ) : (\r\n                        \"\"\r\n                    )}\r\n                    <button\r\n                        onClick={() => setToggleGuarantorUnMarried(!toggleGuarantorUnMarried)}\r\n                        className=\"text-purple-600 rounded-md font-medium \"\r\n                    >\r\n                        Add guarantor UnMarried\r\n                    </button>\r\n                    {toggleGuarantorUnMarried &&\r\n                        <div className=\"submit-form\">\r\n                            <div className=\"relative center justify-center flex-1 w-full max-w-full grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\">\r\n                                <p>\r\n\r\n                                    Unmarried Certficate Issue Date:\r\n\r\n                                    <input\r\n\r\n                                        id=\"UnmarriedCertficateIssuDate\"\r\n\r\n                                        name=\"UnmarriedCertficateIssuDate\"\r\n\r\n                                        label=\"UnmarriedCertficateIssuDate\"\r\n\r\n                                        placeholder=\"UnmarriedCertficateIssuDate\"\r\n\r\n                                        type=\"date\"\r\n\r\n                                        value={\r\n\r\n                                            unmarriedCertficateIssuDate.getFullYear().toString() +\r\n\r\n                                            \"-\" +\r\n\r\n                                            (unmarriedCertficateIssuDate.getMonth() + 1)\r\n\r\n                                                .toString()\r\n\r\n                                                .padStart(2, 0) +\r\n\r\n                                            \"-\" +\r\n\r\n                                            unmarriedCertficateIssuDate\r\n\r\n                                                .getDate()\r\n\r\n                                                .toString()\r\n\r\n                                                .padStart(2, 0)\r\n\r\n                                        }\r\n\r\n                                        onChange={(e) => {\r\n\r\n                                            setUnmarriedCertficateIssuDate(new Date(e.target.value));\r\n\r\n                                            GuarantorUnMarried.UnmarriedCertficateIssuDate = unmarriedCertficateIssuDate;\r\n\r\n                                        }}\r\n\r\n                                    />{\" \"}\r\n\r\n                                </p>\r\n                                <p>\r\n\r\n                                    Unmarried Certficate Expire Date:\r\n\r\n                                    <input\r\n\r\n                                        id=\"UnmarriedCertficateExpireDate\"\r\n\r\n                                        name=\"UnmarriedCertficateExpireDate\"\r\n\r\n                                        label=\"UnmarriedCertficateExpireDate\"\r\n\r\n                                        placeholder=\"UnmarriedCertficateExpireDate\"\r\n\r\n                                        type=\"date\"\r\n\r\n                                        value={\r\n\r\n                                            unmarriedCertficateExpireDate.getFullYear().toString() +\r\n\r\n                                            \"-\" +\r\n\r\n                                            (unmarriedCertficateExpireDate.getMonth() + 1)\r\n\r\n                                                .toString()\r\n\r\n                                                .padStart(2, 0) +\r\n\r\n                                            \"-\" +\r\n\r\n                                            unmarriedCertficateExpireDate\r\n\r\n                                                .getDate()\r\n\r\n                                                .toString()\r\n\r\n                                                .padStart(2, 0)\r\n\r\n                                        }\r\n\r\n                                        onChange={(e) => {\r\n\r\n                                            setUnmarriedCertficateExpireDate(new Date(e.target.value));\r\n\r\n                                            GuarantorUnMarried.UnmarriedCertficateExpireDate = unmarriedCertficateExpireDate;\r\n                                        }}\r\n\r\n                                    />{\" \"}\r\n\r\n                                </p>\r\n\r\n                                <div>\r\n                                    {currentFile && (\r\n                                        <div className=\"progress\">\r\n                                            <div\r\n                                                className=\"progress-bar progress-bar-info progress-bar-striped\"\r\n                                                role=\"progressbar\"\r\n                                                aria-valuenow={progress}\r\n                                                aria-valuemin=\"0\"\r\n                                                aria-valuemax=\"100\"\r\n                                                style={{ width: progress + \"%\" }}\r\n                                            >\r\n                                                {progress}%\r\n                                            </div>\r\n                                        </div>\r\n                                    )}\r\n                                    <label className=\"btn btn-default\">\r\n                                        <input type=\"file\" onChange={selectFileCert} />\r\n                                    </label>\r\n\r\n                                    <button\r\n                                        className=\"btn btn-success\"\r\n                                        disabled={!selectedFiles}\r\n                                        onClick={uploadCert}\r\n                                    >\r\n                                        Upload Unmarried Certficate\r\n                                    </button>\r\n                                    <div className=\"alert alert-light\" role=\"alert\">\r\n                                        {message}\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div>\r\n                                <button\r\n                                    className=\"bg-[purple] hover:bg-purple-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\"\r\n                                    onClick={() => {\r\n                                        saveGuarantorUnMarried();\r\n                                    }}\r\n                                >\r\n                                    save\r\n                                </button>\r\n                            </div>\r\n                        </div>\r\n                    }\r\n                </div>\r\n            </CompanyModal>\r\n            <CompanyModal\r\n                isOpen={isCompanyGuarantorUnMarriedEditedModalOpen}\r\n                onClose={handleCompanyGuarantorUnMarriedEditCloseModal}\r\n                title=\"Edit guarantor  UnMarriedinformation\"\r\n            >\r\n                <div>\r\n                    <form onSubmit={updateGuarantorUnMarriedById}>\r\n\r\n                        <div className=\"relative center justify-center flex-1 w-full max-w-full grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\">\r\n\r\n                            <p>\r\n\r\n                                Unmarried Certficate Issue Date:\r\n\r\n                                <input\r\n\r\n                                    id=\"UnmarriedCertficateIssuDate\"\r\n\r\n                                    name=\"UnmarriedCertficateIssuDate\"\r\n\r\n                                    label=\"UnmarriedCertficateIssuDate\"\r\n\r\n                                    placeholder=\"UnmarriedCertficateIssuDate\"\r\n\r\n                                    type=\"date\"\r\n\r\n                                    value={\r\n\r\n                                        unmarriedCertficateIssuDateEdit.getFullYear().toString() +\r\n\r\n                                        \"-\" +\r\n\r\n                                        (unmarriedCertficateIssuDateEdit.getMonth() + 1)\r\n\r\n                                            .toString()\r\n\r\n                                            .padStart(2, 0) +\r\n\r\n                                        \"-\" +\r\n\r\n                                        unmarriedCertficateIssuDateEdit\r\n\r\n                                            .getDate()\r\n\r\n                                            .toString()\r\n\r\n                                            .padStart(2, 0)\r\n\r\n                                    }\r\n\r\n                                    onChange={(e) => {\r\n\r\n                                        setUnmarriedCertficateIssuDateEdit(new Date(e.target.value));\r\n\r\n                                        editUnMarried.UnmarriedCertficateIssuDate = unmarriedCertficateIssuDateEdit;\r\n\r\n                                    }}\r\n\r\n                                />{\" \"}\r\n\r\n                            </p>\r\n                            <p>\r\n\r\n                                Unmarried Certficate Expire Date:\r\n\r\n                                <input\r\n\r\n                                    id=\"UnmarriedCertficateExpireDate\"\r\n\r\n                                    name=\"UnmarriedCertficateExpireDate\"\r\n\r\n                                    label=\"UnmarriedCertficateExpireDate\"\r\n\r\n                                    placeholder=\"UnmarriedCertficateExpireDate\"\r\n\r\n                                    type=\"date\"\r\n\r\n                                    value={\r\n\r\n                                        unmarriedCertficateExpireDateEdit.getFullYear().toString() +\r\n\r\n                                        \"-\" +\r\n\r\n                                        (unmarriedCertficateExpireDateEdit.getMonth() + 1)\r\n\r\n                                            .toString()\r\n\r\n                                            .padStart(2, 0) +\r\n\r\n                                        \"-\" +\r\n\r\n                                        unmarriedCertficateExpireDateEdit\r\n\r\n                                            .getDate()\r\n\r\n                                            .toString()\r\n\r\n                                            .padStart(2, 0)\r\n\r\n                                    }\r\n\r\n                                    onChange={(e) => {\r\n\r\n                                        setUnmarriedCertficateExpireDateEdit(new Date(e.target.value));\r\n\r\n                                        editUnMarried.UnmarriedCertficateExpireDate = unmarriedCertficateExpireDateEdit;\r\n                                    }}\r\n\r\n                                />{\" \"}\r\n\r\n                            </p>\r\n                            <div>\r\n                                {currentFile && (\r\n                                    <div className=\"progress\">\r\n                                        <div\r\n                                            className=\"progress-bar progress-bar-info progress-bar-striped\"\r\n                                            role=\"progressbar\"\r\n                                            aria-valuenow={progress}\r\n                                            aria-valuemin=\"0\"\r\n                                            aria-valuemax=\"100\"\r\n                                            style={{ width: progress + \"%\" }}\r\n                                        >\r\n                                            {progress}%\r\n                                        </div>\r\n                                    </div>\r\n                                )}\r\n                                <label className=\"btn btn-default\">\r\n                                    <input type=\"file\" onChange={selectFileCertEdit} />\r\n                                </label>\r\n                                <button\r\n                                    className=\"btn btn-success\"\r\n                                    disabled={!selectedFiles}\r\n                                    onChange={\r\n                                        editUnMarried.UnmarriedCertficate = selectedPathCertEdit\r\n                                    }\r\n                                    onClick={uploadCertEdit}\r\n                                >\r\n                                    Upload Unmarried Certficate\r\n                                </button>\r\n                                <div className=\"alert alert-light\" role=\"alert\">\r\n                                    {message}\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div>\r\n                            <button className=\"bg-[purple] hover:bg-purple-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\">\r\n                                Update\r\n                            </button>\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n            </CompanyModal>\r\n        </div>\r\n    );\r\n};\r\nexport default ViewUnMarried;\r\n","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\SoleAndPartnership\\guarantor\\ViewUnMarried.jsx",["1291","1292","1293","1294","1295","1296","1297","1298","1299","1300","1301","1302","1303","1304","1305","1306"],[],"import { useState, useEffect } from \"react\";\r\nimport CompanyModal from \"../../Common/CompanyModal\";\r\nimport LoanTextField from \"../../../Common/LoanTextField\";\r\nimport { Select, FormControl, MenuItem, InputLabel } from \"@mui/material\";\r\nimport CommonServices from \"../../Common/CommonServices\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nconst ViewUnMarried = ({\r\n  holdUnMarried,\r\n  isCompanyUnMarriedModalOpen,\r\n  handleCompanyUnMarriedCloseModal,\r\n  handleUnMarriedModalOpen,\r\n  guarantorId,\r\n}) => {\r\n  //upload\r\n  const [newCertificate, setNewCertificate] = useState(null);\r\n  const [selectedFiles, setSelectedFiles] = useState(undefined);\r\n  const [currentFile, setCurrentFile] = useState(undefined);\r\n  const [fileInfos, setFileInfos] = useState([]);\r\n  const [progress, setProgress] = useState(0);\r\n  const [message, setMessage] = useState(\"\");\r\n  const selectFile = (event) => {\r\n    setSelectedFiles(event.target.files);\r\n  };\r\n  //upload 1\r\n  const uploadCertificate = () => {\r\n    let currentFile = selectedFiles[0];\r\n    setProgress(0);\r\n    setCurrentFile(currentFile);\r\n    CommonServices.upload(currentFile, (event) => {\r\n      setProgress(Math.round((100 * event.loaded) / event.total));\r\n    })\r\n      .then((response) => {\r\n        setMessage(response.data.message);\r\n        setNewCertificate(response.data.Result);\r\n      })\r\n      .then((files) => {\r\n        setFileInfos(files.data);\r\n      })\r\n      .catch(() => {\r\n        setProgress(0);\r\n        setCurrentFile(undefined);\r\n      });\r\n    setSelectedFiles(undefined);\r\n  };\r\n  const [issueDate, setIssueDate] = useState(new Date());\r\n  const [expireddate, setExpireddate] = useState(new Date());\r\n\r\n  const [\r\n    isCompanyMarriedInformationEditModalOpen,\r\n    setIsCompanyMarriedInformationEditModalOpen,\r\n  ] = useState(false);\r\n  function handleCompanyMarriedEditCloseModal() {\r\n    setIsCompanyMarriedInformationEditModalOpen(false);\r\n  }\r\n  function handleCompanyMarriedInformationEditOpenModal() {\r\n    setIsCompanyMarriedInformationEditModalOpen(true);\r\n  }\r\n  function handleCompanyMarriedInformationEditCloseModal() {\r\n    setIsCompanyMarriedInformationEditModalOpen(false);\r\n  }\r\n  //married tax\r\n  const [isCompanyMarriedTaxModalOpen, setIsCompanyMarriedTaxModalOpen] =\r\n    useState(false);\r\n  //end married tax\r\n  const [taxInformationId, setTaxInformationId] = useState();\r\n  const [marriedTaxId, setMarriedTaxId] = useState();\r\n  const [editUnMarriedInfo, setEditUnMarriedInfo] = useState({\r\n    UnmarriedCertficate: \"\",\r\n    UnmarriedCertficateIssuDate: \"\",\r\n    UnmarriedCertficateExpireDate: \"\",\r\n  });\r\n  const handleInputChangeEditMarriedStatus = (event) => {\r\n    const { name, value } = event.target;\r\n    setEditUnMarriedInfo({ ...editUnMarriedInfo, [name]: value });\r\n  };\r\n  const updateUnMarriedById = (taxInformationId) => {\r\n    CommonServices.getGuarantorEditUnMarried(taxInformationId)\r\n      .then((res) => {\r\n        setEditUnMarriedInfo({\r\n          ...editUnMarriedInfo,\r\n          SpouseNaUnmarriedCertficateme: res.data.Result.UnmarriedCertficate,\r\n          UnmarriedCertficateIssuDate:\r\n            res.data.Result.UnmarriedCertficateIssuDate,\r\n          UnmarriedCertficateExpireDate:\r\n            res.data.Result.UnmarriedCertficateExpireDate,\r\n        });\r\n      })\r\n      .catch((err) => console.log(err));\r\n  };\r\n  useEffect(() => {\r\n    updateUnMarriedById();\r\n  }, []);\r\n  const updateUnMarriedInfo = () => {\r\n    CommonServices.updateGuarantorUnMarried(taxInformationId, editUnMarriedInfo)\r\n      .then((response) => {})\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n  useEffect(() => {\r\n    updateUnMarriedInfo();\r\n  }, []);\r\n  //add\r\n  const [toggleGuarantorUnMarried, setToggleGuarantorUnMarried] =\r\n    useState(false);\r\n  const [submitted, setSubmitted] = useState(false);\r\n  const initialGuarantorUnMarriedState = {\r\n    Id: null,\r\n    UnmarriedCertficate: \"\",\r\n    UnmarriedCertficateIssuDate: \"\",\r\n    UnmarriedCertficateExpireDate: \"\",\r\n  };\r\n  const [guarantorUnMarried, setGuarantorUnMarried] = useState(\r\n    initialGuarantorUnMarriedState\r\n  );\r\n  const handleInputChangeGuarantorUnMarried = (event) => {\r\n    const { name, value } = event.target;\r\n    setGuarantorUnMarried({ ...guarantorUnMarried, [name]: value });\r\n  };\r\n  const saveGuarantorUnMarried = () => {\r\n    var data = {\r\n      UnmarriedCertficate: newCertificate,\r\n      UnmarriedCertficateIssuDate: issueDate,\r\n      UnmarriedCertficateExpireDate: expireddate,\r\n    };\r\n    CommonServices.addGuarantorUnMarried(guarantorId, data)\r\n      .then((response) => {\r\n        setGuarantorUnMarried({\r\n          Id: response.data.Id,\r\n          SpouseNaUnmarriedCertficateme:\r\n            response.data.SpouseNaUnmarriedCertficateme,\r\n          UnmarriedCertficateIssuDate:\r\n            response.data.UnmarriedCertficateIssuDate,\r\n          UnmarriedCertficateExpireDate:\r\n            response.data.UnmarriedCertficateExpireDate,\r\n        });\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n  return (\r\n    <div>\r\n      <CompanyModal\r\n        isOpen={isCompanyUnMarriedModalOpen}\r\n        onClose={handleCompanyUnMarriedCloseModal}\r\n        title=\"view UnMarried status information\"\r\n      >\r\n        <div className=\"rounded-lg overflow-hidden\">\r\n          {holdUnMarried ? (\r\n            <table className=\"table table-bordered table-striped bg-purple-100\">\r\n              <thead>\r\n                <th className=\"px-2 py-4\">Unmarried Certficate</th>\r\n                <th className=\"px-2 py-4\">Unmarried Certficate Issue Date</th>\r\n                <th className=\"px-2 py-4\">Unmarried Certficate Expire Date</th>\r\n                <th className=\"px-2 py-4\"> Action </th>\r\n              </thead>\r\n              <tbody>\r\n                <>\r\n                  <tr>\r\n                    <td>{holdUnMarried.UnmarriedCertficate}</td>\r\n                    <td>{holdUnMarried.UnmarriedCertficateIssuDate}</td>\r\n                    <td>{holdUnMarried.UnmarriedCertficateExpireDate}</td>\r\n                    <td>\r\n                      <button\r\n                        onClick={() => {\r\n                          handleCompanyMarriedInformationEditOpenModal();\r\n                          updateUnMarriedById(holdUnMarried.Id);\r\n                          setTaxInformationId(holdUnMarried.Id);\r\n                        }}\r\n                        className=\"text-purple-600 rounded-md font-semibold \"\r\n                      >\r\n                        Edit\r\n                      </button>\r\n                    </td>\r\n                  </tr>\r\n                </>\r\n              </tbody>\r\n            </table>\r\n          ) : (\r\n            \"\"\r\n          )}\r\n          <button\r\n            onClick={() =>\r\n              setToggleGuarantorUnMarried(!toggleGuarantorUnMarried)\r\n            }\r\n            className=\"text-purple-600 rounded-md font-medium \"\r\n          >\r\n            Add UnMarried\r\n          </button>\r\n          {toggleGuarantorUnMarried && (\r\n            <div className=\"submit-form\">\r\n              {submitted ? (\r\n                <div>\r\n                  <h4>You submitted successfully!</h4>\r\n                </div>\r\n              ) : (\r\n                <div className=\"relative center justify-center flex-1 w-full max-w-full grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\">\r\n                  <div>\r\n                    {currentFile && (\r\n                      <div className=\"progress\">\r\n                        <div\r\n                          className=\"progress-bar progress-bar-info progress-bar-striped\"\r\n                          role=\"progressbar\"\r\n                          aria-valuenow={progress}\r\n                          aria-valuemin=\"0\"\r\n                          aria-valuemax=\"100\"\r\n                          style={{ width: progress + \"%\" }}\r\n                        >\r\n                          {progress}%\r\n                        </div>\r\n                      </div>\r\n                    )}\r\n                    <label className=\"btn btn-default\">\r\n                      <input type=\"file\" onChange={selectFile} />\r\n                    </label>\r\n                    <button\r\n                      className=\"btn btn-success\"\r\n                      disabled={!selectedFiles}\r\n                      onClick={uploadCertificate}\r\n                    >\r\n                      upload Unmarried Certficate\r\n                    </button>\r\n                    <div className=\"alert alert-light\" role=\"alert\">\r\n                      {message}\r\n                    </div>\r\n                  </div>\r\n                  <p>\r\n                    issue Date:\r\n                    <div>\r\n                      <DatePicker\r\n                        selected={issueDate}\r\n                        onChange={(issueDate) => setIssueDate(issueDate)}\r\n                      />\r\n                    </div>\r\n                  </p>\r\n                  <p>\r\n                    Expired Date:\r\n                    <div>\r\n                      <DatePicker\r\n                        selected={expireddate}\r\n                        onChange={(expireddate) => setExpireddate(expireddate)}\r\n                      />\r\n                    </div>\r\n                  </p>\r\n                </div>\r\n              )}\r\n              <div>\r\n                <button\r\n                  className=\"bg-[purple] hover:bg-purple-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\"\r\n                  onClick={() => {\r\n                    saveGuarantorUnMarried();\r\n                  }}\r\n                >\r\n                  save\r\n                </button>\r\n              </div>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </CompanyModal>\r\n      <CompanyModal\r\n        isOpen={isCompanyMarriedInformationEditModalOpen}\r\n        onClose={handleCompanyMarriedEditCloseModal}\r\n        title=\"UnMarried edit information\"\r\n      >\r\n        <div>\r\n          <form onSubmit={updateUnMarriedInfo}>\r\n            <div className=\"relative center justify-center flex-1 w-full max-w-full grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\">\r\n              <div>\r\n                {currentFile && (\r\n                  <div className=\"progress\">\r\n                    <div\r\n                      className=\"progress-bar progress-bar-info progress-bar-striped\"\r\n                      role=\"progressbar\"\r\n                      aria-valuenow={progress}\r\n                      aria-valuemin=\"0\"\r\n                      aria-valuemax=\"100\"\r\n                      style={{ width: progress + \"%\" }}\r\n                    >\r\n                      {progress}%\r\n                    </div>\r\n                  </div>\r\n                )}\r\n                <label className=\"btn btn-default\">\r\n                  <input type=\"file\" onChange={selectFile} />\r\n                </label>\r\n                <button\r\n                  className=\"btn btn-success\"\r\n                  disabled={!selectedFiles}\r\n                  onChange={\r\n                    (editUnMarriedInfo.UnmarriedCertficate = newCertificate)\r\n                  }\r\n                  onClick={uploadCertificate}\r\n                >\r\n                  Tax Certificate\r\n                </button>\r\n                <div className=\"alert alert-light\" role=\"alert\">\r\n                  {message}\r\n                </div>\r\n              </div>\r\n              <p>\r\n                Issue Date:\r\n                <input\r\n                  id=\"UnmarriedCertficateIssuDate\"\r\n                  name=\"UnmarriedCertficateIssuDate\"\r\n                  label=\"UnmarriedCertficateIssuDate\"\r\n                  placeholder=\"UnmarriedCertficateIssuDate\"\r\n                  type=\"date\"\r\n                  value={\r\n                    issueDate.getFullYear().toString() +\r\n                    \"-\" +\r\n                    (issueDate.getMonth() + 1).toString().padStart(2, 0) +\r\n                    \"-\" +\r\n                    issueDate.getDate().toString().padStart(2, 0)\r\n                  }\r\n                  onChange={(e) => {\r\n                    setIssueDate(new Date(e.target.value));\r\n                    editUnMarriedInfo.UnmarriedCertficateIssuDate = issueDate;\r\n                  }}\r\n                />{\" \"}\r\n              </p>\r\n              <p>\r\n                Expired Date:\r\n                <input\r\n                  id=\"UnmarriedCertficateExpireDate\"\r\n                  name=\"UnmarriedCertficateExpireDate\"\r\n                  label=\"UnmarriedCertficateExpireDate\"\r\n                  placeholder=\"UnmarriedCertficateExpireDate\"\r\n                  type=\"date\"\r\n                  value={\r\n                    expireddate.getFullYear().toString() +\r\n                    \"-\" +\r\n                    (expireddate.getMonth() + 1).toString().padStart(2, 0) +\r\n                    \"-\" +\r\n                    expireddate.getDate().toString().padStart(2, 0)\r\n                  }\r\n                  onChange={(e) => {\r\n                    setExpireddate(new Date(e.target.value));\r\n                    editUnMarriedInfo.UnmarriedCertficateExpireDate =\r\n                      expireddate;\r\n                  }}\r\n                />{\" \"}\r\n              </p>\r\n            </div>\r\n            <div>\r\n              <button className=\"bg-[purple] hover:bg-purple-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\">\r\n                Update\r\n              </button>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </CompanyModal>\r\n    </div>\r\n  );\r\n};\r\nexport default ViewUnMarried;\r\n","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\LeftNav\\LeftNav.jsx",["1307","1308","1309","1310","1311","1312"],[],"import { useState } from \"react\";\r\nimport { BrowserRouter as Router, Route, Routes } from \"react-router-dom\";\r\nimport { BsArrowLeftShort, BsSearch, BsChevronDown } from \"react-icons/bs\";\r\nimport { AiFillEnvironment } from \"react-icons/ai\";\r\nimport { menu } from \"@material-tailwind/react\";\r\nimport { RiDashboardFill } from \"react-icons/ri\";\r\nimport { GrProjects } from \"react-icons/gr\";\r\nimport { GiProgression } from \"react-icons/gi\";\r\nimport { FcOrganization } from \"react-icons/fc\"\r\nimport Box from '@mui/material/Box';\r\n// import Tooltip from '@mui/material/Tooltip';\r\nimport Tooltips from \"../Tooltip/Tooltips\";\r\nimport Api from \"../API/Api\";\r\n// import Stepper from \"../Stepper/Stepper\";\r\nimport \"./style.css\";\r\n\r\nconst LeftNav = () => {\r\n    const [open, setOpen] = useState(true);\r\n    const [subMenuOpen, setSubMenuOpen] = useState(false);\r\n    const Menus = [\r\n        { title: \"Company\", icon: <RiDashboardFill /> },\r\n        { title: \"Stepper \", icon: <FcOrganization /> },\r\n        {\r\n            title: \"Loan Status\",\r\n            icon: <GiProgression />,\r\n            spacing: true\r\n        },\r\n        {\r\n            title: \"projects\",\r\n            icon: <GrProjects />,\r\n            submenu: true,\r\n            submenuItems: [\r\n                { title: \"submenu 1\" },\r\n                { title: \"submenu 2\" },\r\n                { title: \"submenu 3\" },\r\n            ],\r\n        },\r\n    ];\r\n    return (\r\n        <div className=\"flex \">\r\n            <div\r\n                className={`bg-purple-500 h-screen p-5 pt-8 ${open ? \"w-72\" : \"w-20\"\r\n                    } duration-300 relative   `}\r\n            >\r\n                <BsArrowLeftShort\r\n                    className={`bg-white text-dark-purple text-3xl rounded-full\r\n          absolute -right-3 top-9 border border-dark-purpule cursor-pointer ${!open && \"rotate-180 \"\r\n                        }`}\r\n                    onClick={() => setOpen(!open)}\r\n                />\r\n                <div className=\"inline-flex\">\r\n                    <AiFillEnvironment\r\n                        className={`bg-amber-300 text-4xl rounded cursor-pointer block float-left mr-2 duration-500 ${open && \"rotate-[360deg]  \"\r\n                            }`}\r\n                    />\r\n                    <h1\r\n                        className={`text-white origin-left font-medium text-2xl duration-300 ${!open && \"scale-0 \"\r\n                            }`}\r\n                    >\r\n                        Customer page\r\n                    </h1>\r\n                </div>\r\n                <div\r\n                    className={`flex items-center rounded-md bg-gray-500  mt-6 ${!open ? \"px-2.5\" : \"px-4 \"\r\n                        }  py-2 `}\r\n                >\r\n                    <BsSearch\r\n                        className={` text-white text-lg blco float-left cursor-pointer ${open && \" mr-2\"\r\n                            } `}\r\n                    />\r\n                    <input\r\n                        type={\"search\"}\r\n                        placeholder=\"search\"\r\n                        className={`text-base bg-transparent w-full text-white focus:outline-none ${!open && \"hidden\"\r\n                            }`}\r\n                    />\r\n                </div>\r\n                <ui className=\" \">\r\n                    {Menus.map((menu, index) => (\r\n                        <>\r\n                            <li\r\n                                key={index}\r\n                                className={`text-gray-300 text-sm flex items-center gap-4 cursor-pointer p-2 hover:bg-white\r\n                   tooltip  dark:bg-gray-700 rounded-md  ${menu.spacing ? \"mt-9\" : \"mt-2\"\r\n                                    }`}\r\n                            >\r\n                                {/* <div>\r\n                                <Tooltips text=\"Hello, world!\">\r\n                                    <button>Hover me</button>\r\n                                </Tooltips>\r\n                                </div> */}\r\n                                {\r\n                                    open && (\r\n                                        <span className=\"text-2xl block float-left\">\r\n                                            {\r\n                                                menu.icon\r\n                                            }\r\n                                        </span>\r\n                                    )\r\n                                }\r\n\r\n                                {\r\n                                    !open && (\r\n                                        <span className=\"text-2xl block float-left mb-4\" data-toggle=\"tooltip\" title={`${menu.title}`}>\r\n                                            <Tooltips text={`${menu.title}`}>\r\n                                                {\r\n                                                    menu.icon\r\n                                                }\r\n                                            </Tooltips>\r\n\r\n                                        </span>\r\n                                    )\r\n\r\n                                }\r\n                                <span\r\n                                    className={`text-base font-medium flex-1 duration-200  ${!open && \"hidden\"\r\n                                        }`}\r\n                                >\r\n                                    {menu.title}\r\n                                    {/* <button>add company</button> */}\r\n                                </span>\r\n                                {menu.submenu && open && (\r\n                                    <BsChevronDown\r\n                                        className={`${subMenuOpen && \"rotate-180\"}`}\r\n                                        onClick={() => setSubMenuOpen(!subMenuOpen)}\r\n                                    />\r\n                                )}\r\n                            </li>\r\n                            {menu.submenu && open && subMenuOpen && (\r\n                                <ul>\r\n                                    {menu.submenuItems.map((submenuItem, index) => (\r\n                                        <li\r\n                                            key={index}\r\n                                            className=\"text-gray-300 text-sm flex items-center gap-4 cursor-pointer p-2 px-5 hover:bg-white rounded-md\"\r\n                                        >\r\n                                            {submenuItem.title}\r\n                                        </li>\r\n                                    ))}\r\n                                </ul>\r\n                            )}\r\n                        </>\r\n                    ))}\r\n                </ui>\r\n            </div>\r\n            <div className=\"p-7\">\r\n                <h1>Customer 2</h1>\r\n\r\n\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default LeftNav;","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\Account\\AccountPage.jsx",["1313","1314","1315","1316","1317","1318","1319","1320","1321","1322"],[],"import { useState, useEffect } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport CompanyNavigation from \"../../Common/CompanyNavigation\";\r\nimport LoanIconButton from \"../../Common/LoanIconButton\";\r\nimport AddAccountForCompany from \"./AddAccountForCompany\";\r\nimport EditAccountPage from \"./EditAccountPage\";\r\nimport { MdModeEdit } from \"react-icons/md\";\r\nimport { toast } from \"react-toastify\";\r\nimport accountApi from \"./account\";\r\n\r\nfunction AccountPage() {\r\n  const { companyId } = useParams();\r\n\r\n  const [submitted, setSubmitted] = useState(false);\r\n\r\n  const [holdId, setHoldId] = useState([]);\r\n\r\n  const handleInputChangeAccountInfo = (event) => {\r\n    const { name, value } = event.target;\r\n    setAccountInfo({ ...accountInfo, [name]: value });\r\n  };\r\n\r\n  const [getAccountInfo, setGetAccountInfo] = useState();\r\n  const [getAccountInformation, setGetAccountInformation] = useState();\r\n\r\n  const saveAccountInfo = () => {\r\n    var data = {\r\n      AccountNo: accountInfo.AccountNo,\r\n      CustomerId: accountInfo.CustomerId,\r\n      Branch: accountInfo.Branch,\r\n      District: accountInfo.District,\r\n      Other: accountInfo.Other,\r\n    };\r\n    // loanDataService\r\n    accountApi\r\n      .addAccountInfo(data, companyId)\r\n      .then((response) => {\r\n        setAccountInfo({\r\n          Id: response.data.Id,\r\n          AccountNo: response.data.AccountNo,\r\n          CustomerId: response.data.CustomerId,\r\n          Branch: response.data.Branch,\r\n          District: response.data.District,\r\n          Other: response.data.Other,\r\n        });\r\n        setSubmitted(true);\r\n        console.log(response.data);\r\n        setHoldId(response.data.Result.Id);\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n\r\n  const newAccountInfo = () => {\r\n    setAccountInfo(initialAccountInfoState);\r\n    setSubmitted(false);\r\n  };\r\n\r\n  const handleSkip = () => {\r\n    // alert(\"Handle Skip\");\r\n  };\r\n  const initialAccountInfoState = {\r\n    Id: null,\r\n    AccountNo: \"\",\r\n    CustomerId: \"\",\r\n    Branch: \"\",\r\n    District: \"\",\r\n    Other: \"\",\r\n  };\r\n\r\n  const [accountData, setAccountData] = useState([]);\r\n\r\n  const getCompanyAccountInformation = useEffect(() => {\r\n    // loanDataService\r\n    accountApi\r\n      .getCompanyAccountInformation(companyId)\r\n      .then((response) => {\r\n        setAccountData(response.data.Result);\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n  }, [companyId]);\r\n\r\n  const handlePrevious = () => {\r\n    alert(\"Handle previous\");\r\n  };\r\n\r\n  const [accountInfo, setAccountInfo] = useState(initialAccountInfoState);\r\n  //\r\n  const [isCompanyAccountEditModalOpen, setIsCompanyAccountEditModalOpen] =\r\n    useState(false);\r\n  //\r\n  function handleCompanyAccountEditModal() {\r\n    setIsCompanyAccountEditModalOpen(true);\r\n  }\r\n  function handleCompanyAccountEditCloseModal() {\r\n    setIsCompanyAccountEditModalOpen(false);\r\n  }\r\n\r\n  const [selectedContactId, setSelectedContactId] = useState(null);\r\n  const [isEditModalOpen, setIsEditModalOpen] = useState(false);\r\n\r\n  const handleEditButtonClick = (contactId) => {\r\n    setSelectedContactId(contactId);\r\n    setIsEditModalOpen(true);\r\n  };\r\n\r\n  const [accountInfoId, setAccountInfoId] = useState();\r\n\r\n  const [editAccountInfo, setEditAccountInfo] = useState({\r\n    Id: accountInfoId,\r\n    AccountNo: \"\",\r\n    CustomerId: \"\",\r\n    Branch: \"\",\r\n    District: \"\",\r\n    Other: \"\",\r\n  });\r\n\r\n  const getAccountInformationBy = (accountInfoId) => {\r\n    // loanDataService\r\n    accountApi\r\n      .getAccountInformationById(accountInfoId)\r\n      .then((res) => {\r\n        setEditAccountInfo({\r\n          ...editAccountInfo,\r\n          Id: accountInfoId,\r\n          AccountNo: res.data.Result.AccountNo,\r\n          CustomerId: res.data.Result.CustomerId,\r\n          Branch: res.data.Result.Branch,\r\n          District: res.data.Result.District,\r\n          Other: res.data.Result.Other,\r\n        });\r\n        //\r\n      })\r\n      .catch((err) => {\r\n        if (err.response.data.StatusCode === 404) {\r\n          console.log(err.response.data.Message);\r\n        }\r\n      });\r\n  };\r\n\r\n  const updateCompanyAccountInformationById = (e) => {\r\n    e.preventDefault();\r\n    // loanDataService\r\n    accountApi\r\n      .updateCompanyAccountInformation(accountInfoId, editAccountInfo)\r\n      .then((response) => {\r\n        if (response.data.Code === 200) {\r\n          // getCompanyAccountInformation();\r\n          toast.success(\"Added successfully\", {\r\n            position: toast.POSITION.TOP_RIGHT,\r\n            toastId: \"updateCompanyAddressSuccess\",\r\n          });\r\n        }\r\n      })\r\n      .catch((e) => {\r\n        toast.error(\"Something went wrong\", {\r\n          position: toast.POSITION.TOP_RIGHT,\r\n          toastId: \"updateCompanyAddressError\",\r\n        });\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div className=\"flex\">\r\n      <CompanyNavigation />\r\n      <div className=\"px-4 py-3\">\r\n        <div className=\"flex flex-wrap\">\r\n          <div className=\"w-full\">\r\n            <div>\r\n              <p>Company ID: {companyId} </p>\r\n              <h4 className=\"text-lg font-semibold eading-tight p-2\">\r\n                Account Information\r\n              </h4>\r\n              <AddAccountForCompany\r\n                handleSkip={handleSkip}\r\n                accountInfo={accountInfo}\r\n                handleInputChangeAccountInfo={handleInputChangeAccountInfo}\r\n                saveAccountInfo={saveAccountInfo}\r\n                handlePrevious={handlePrevious}\r\n              />\r\n              {/* edit not finished */}\r\n\r\n              <EditAccountPage\r\n                isCompanyAccountEditModalOpen={isCompanyAccountEditModalOpen}\r\n                handleCompanyAccountEditCloseModal={\r\n                  handleCompanyAccountEditCloseModal\r\n                }\r\n                updateCompanyAccountInformationById={\r\n                  updateCompanyAccountInformationById\r\n                }\r\n                editAccountInfo={editAccountInfo}\r\n                setEditAccountInfo={setEditAccountInfo}\r\n              />\r\n\r\n              <div className=\"rounded-lg overflow-hidden\">\r\n                <table className=\"border-purple-300 bg-white hover:bg-purple-300\">\r\n                  <thead className=\"bg-purple-100\">\r\n                    <tr className=\"border border-purple-300\">\r\n                      <th className=\"px-2 py-4 text-base\"> ID </th>\r\n                      <th className=\"px-2 py-4 text-base\"> AccountNo </th>\r\n                      <th className=\"px-2 py-4 text-base\"> CustomerId </th>\r\n                      <th className=\"px-2 py-4 text-base\"> Branch </th>\r\n                      <th className=\"px-2 py-4 text-base\"> District </th>\r\n                      <th className=\"px-2 py-4 text-base\"> Other </th>\r\n                      <th className=\"px-2 py-4 text-base\"> Action </th>\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                    {accountData.map((account, index) => (\r\n                      <tr\r\n                        key={account.Id}\r\n                        className=\"bg-white\r\n                      border-b border-purple-200\"\r\n                      >\r\n                        <td className=\"px-2 py-4\">{account.Id}</td>\r\n                        <td className=\"px-2 py-4\">{account.AccountNo}</td>\r\n                        <td className=\"px-2 py-4\">{account.CustomerId}</td>\r\n                        <td className=\"px-2 py-4\">{account.Branch}</td>\r\n                        <td className=\"px-2 py-4\">{account.District}</td>\r\n                        <td className=\"px-2 py-4\">{account.Other}</td>\r\n                        <td>\r\n                          <button\r\n                            onClick={() => handleEditButtonClick(account.Id)}\r\n                          >\r\n                            <LoanIconButton\r\n                              style={{ color: \"green\" }}\r\n                              icon={<MdModeEdit />}\r\n                              text=\"Edit\"\r\n                              onClick={() => {\r\n                                handleCompanyAccountEditModal();\r\n                                setAccountInfoId(account.Id);\r\n                                getAccountInformationBy(account.Id);\r\n                              }}\r\n                            />\r\n                          </button>\r\n                        </td>\r\n                      </tr>\r\n                    ))}\r\n                  </tbody>\r\n                </table>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AccountPage;\r\n",["1323"],"C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\Trade\\TradePage.jsx",["1324","1325","1326","1327","1328","1329","1330","1331","1332","1333","1334","1335","1336","1337","1338","1339","1340"],[],"import { useState, useEffect } from \"react\";\r\nimport {\r\n  TextField,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n} from \"@mui/material\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport CompanyNavigation from \"../../Common/CompanyNavigation\";\r\nimport LoanIconButton from \"../../Common/LoanIconButton\";\r\nimport LoanTextField from \"../../Common/LoanTextField\";\r\nimport AddTradeForCompany from \"./AddTradeForCompany\";\r\nimport { MdModeEdit } from \"react-icons/md\";\r\nimport CompanyModal from \"../Common/CompanyModal\";\r\nimport tradeApi from \"./trade\";\r\n\r\n//\r\nfunction TradePage() {\r\n  const { companyId } = useParams();\r\n\r\n  const [submitted, setSubmitted] = useState(false);\r\n\r\n  const [holdId, setHoldId] = useState([]);\r\n\r\n  const handleSkip = () => {\r\n    // alert(\"Handle Skip\");\r\n  };\r\n  const handlePrevious = () => {\r\n    alert(\"Handle previous\");\r\n  };\r\n\r\n  const [tradeBusinessType, setTradeBusinessType] = useState([]);\r\n  const [getTradeInformation, setGetTradeInformation] = useState();\r\n  const [tradeInformationId, setTradeInformationId] = useState();\r\n  const [tradeInfoIdForLocal, setTradeInfoIdForLocal] = useState();\r\n  const [selectedPathCertficateEdit, setselectedPathCertficateEdit] = useState(\r\n    []\r\n  );\r\n  const selectFile1Edit = (event) => {\r\n    setSelectedFiles(event.target.files);\r\n  };\r\n  const upload1Edit = () => {\r\n    let currentFile = selectedFiles[0];\r\n    setProgress(0);\r\n    setCurrentFile(currentFile);\r\n    // loanDataService\r\n    tradeApi\r\n      .uploadTradeInfo(currentFile, (event) => {\r\n        setProgress(Math.round((100 * event.loaded) / event.total));\r\n      })\r\n      .then((response) => {\r\n        setMessage(response.data.message);\r\n        setselectedPathCertficateEdit(response.data.Result);\r\n      })\r\n      .then((files) => {\r\n        setFileInfos(files.data);\r\n      })\r\n      .catch((error) => {\r\n        // setMessage(\"Could not upload the file!\");\r\n        setProgress(0);\r\n        // setMessage(\"Error uploading the file: \" + error.message);\r\n        setCurrentFile(undefined);\r\n      });\r\n    setSelectedFiles(undefined);\r\n  };\r\n\r\n  const [selectedPathLicenseEdit, setselectedPathLicenseEdit] = useState();\r\n\r\n  const selectFileEdit = (event) => {\r\n    setSelectedFiles(event.target.files);\r\n  };\r\n  const uploadEdit = () => {\r\n    let currentFile = selectedFiles[0];\r\n    setProgress(0);\r\n    setCurrentFile(currentFile);\r\n    // loanDataService\r\n    tradeApi\r\n      .uploadTradeInfo(currentFile, (event) => {\r\n        setProgress(Math.round((100 * event.loaded) / event.total));\r\n      })\r\n      .then((response) => {\r\n        setMessage(response.data.message);\r\n        setselectedPathLicenseEdit(response.data.Result);\r\n      })\r\n      .then((files) => {\r\n        setFileInfos(files.data);\r\n      })\r\n      .catch(() => {\r\n        setProgress(0);\r\n        // setMessage(\"Could not upload the file!\");\r\n        setCurrentFile(undefined);\r\n      });\r\n    setSelectedFiles(undefined);\r\n  };\r\n\r\n  const [editTradeInfo, setEditTradeInfo] = useState({\r\n    Id: tradeInformationId,\r\n    TradeRegistrationNo: \"\",\r\n    Certficate: \"\",\r\n    TradeLicenseNo: \"\",\r\n    IssueDate: \"\",\r\n    RenewedDate: \"\",\r\n    SectorTypeId: \"\",\r\n    IndustryTypeId: \"\",\r\n    ValidityDate: \"\",\r\n    BusinessTypeId: \"\",\r\n    UploadTradeLicense: \"\",\r\n  });\r\n\r\n  const getTradeInformationBy = (tradeInformationId) => {\r\n    // loanDataService\r\n    tradeApi\r\n      .getTradeInformationById(tradeInformationId)\r\n      .then((res) => {\r\n        setEditTradeInfo({\r\n          ...editTradeInfo,\r\n          Id: tradeInformationId,\r\n          TradeRegistrationNo: res.data.Result.TradeRegistrationNo,\r\n          Certficate: res.data.Result.Certficate,\r\n          TradeLicenseNo: res.data.Result.TradeLicenseNo,\r\n          IssueDate: res.data.Result.IssueDate,\r\n          RenewedDate: res.data.Result.RenewedDate,\r\n          ValidityDate: res.data.Result.ValidityDate,\r\n          SectorTypeId: res.data.Result.SectorTypeId,\r\n          IndustryTypeId: res.data.Result.IndustryTypeId,\r\n          BusinessTypeId: res.data.Result.BusinessTypeId,\r\n          UploadTradeLicense: res.data.Result.UploadTradeLicense,\r\n        });\r\n        setTradeInfoIdForLocal(tradeInformationId);\r\n      })\r\n      .catch((err) => console.log(err));\r\n  };\r\n  useEffect(() => {\r\n    getTradeInformationBy();\r\n  }, []);\r\n\r\n  const updateCompanyTradeInformationById = () => {\r\n    // loanDataService\r\n    tradeApi\r\n      .updateCompanyTradeInformation(tradeInfoIdForLocal, editTradeInfo)\r\n      .then((response) => {\r\n        console.log(response);\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n  useEffect(() => {\r\n    updateCompanyTradeInformationById();\r\n  }, []);\r\n\r\n  const initialTradeInfoState = {\r\n    Id: null,\r\n    TradeRegistrationNo: \"\",\r\n    Certficate: \"\",\r\n    TradeLicenseNo: \"\",\r\n    IssueDate: \"\",\r\n    RenewedDate: \"\",\r\n    ValidityDate: \"\",\r\n    BusinessTypeId: \"\",\r\n    SectorTypeId: \"\",\r\n    IndustryTypeId: \"\",\r\n    UploadTradeLicense: \"\",\r\n  };\r\n\r\n  const [selectedFiles, setSelectedFiles] = useState(undefined);\r\n\r\n  const [tradeInfo, setTradeInfo] = useState(initialTradeInfoState);\r\n  const [currentFile, setCurrentFile] = useState(undefined);\r\n  const [progress, setProgress] = useState(0);\r\n  const [message, setMessage] = useState(\"\");\r\n  const [fileInfos, setFileInfos] = useState([]);\r\n\r\n  const [\r\n    isCompanyTradeInformationEditModalOpen,\r\n    setIsCompanyTradeInformationEditModalOpen,\r\n  ] = useState(false);\r\n\r\n  function handleCompanyTradeInformationEditOpenModal() {\r\n    setIsCompanyTradeInformationEditModalOpen(true);\r\n  }\r\n  function handleCompanyTradeInformationEditCloseModal() {\r\n    setIsCompanyTradeInformationEditModalOpen(false);\r\n  }\r\n\r\n  const handleTradeBusinessType = (tradeIndustryTypeId) => {\r\n    setIsLoading(true);\r\n    // loanDataService\r\n    tradeApi\r\n      .getTradeBusinessTypeId(tradeIndustryTypeId)\r\n      .then((response) => {\r\n        // console.log(response.data.Result);\r\n        setTradeBusinessType(response.data.Result);\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n    setIsLoading(false);\r\n  };\r\n  useEffect(() => {\r\n    handleTradeBusinessType();\r\n  }, []);\r\n  //trade Info\r\n  const handleInputChangeTradeInfo = (event) => {\r\n    const { name, value } = event.target;\r\n    setTradeInfo({ ...tradeInfo, [name]: value });\r\n  };\r\n\r\n  const newTradeInfo = () => {\r\n    setTradeInfo(initialTradeInfoState);\r\n    setSubmitted(false);\r\n  };\r\n  //end tradeInfo\r\n\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [tradeIndustryType, setTradeIndustryType] = useState([]);\r\n  const [holdTradeSectorId, setHoldTradeSectorId] = useState([]);\r\n  const [tradeSector, setTradeSector] = useState([]);\r\n  const [tradeIndustryTypeId, setTradeIndustryTypeId] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const getCompanyTradeInformationById = () => {\r\n      setIsLoading(true);\r\n      // loanDataService\r\n      tradeApi\r\n        .getCompanyTradeInformation(companyId)\r\n        .then((response) => {\r\n          setGetTradeInformation(response.data.Result);\r\n          console.log(response.data.Result);\r\n          setTradeInformationId(response.data.Result.Id);\r\n        })\r\n        .catch((e) => {\r\n          console.log(e);\r\n        });\r\n      setIsLoading(false);\r\n    };\r\n    getCompanyTradeInformationById();\r\n  }, []);\r\n\r\n  const handleTradeIndustryType = (holdTradeSectorId) => {\r\n    setIsLoading(true);\r\n    // loanDataService\r\n    tradeApi\r\n      .getTradeIndustryType(holdTradeSectorId)\r\n      .then((response) => {\r\n        // console.log(response.data.Result);\r\n        setTradeIndustryType(response.data.Result);\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n    setIsLoading(false);\r\n  };\r\n  useEffect(() => {\r\n    handleTradeIndustryType();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const getTradeSector = () => {\r\n      setIsLoading(true);\r\n      // loanDataService\r\n      tradeApi\r\n        .getTradeSectorId()\r\n        .then((response) => {\r\n          setTradeSector(response.data.Result);\r\n        })\r\n        .catch((e) => {\r\n          console.log(e);\r\n        });\r\n      setIsLoading(false);\r\n    };\r\n    getTradeSector();\r\n  }, []);\r\n\r\n  const [selectedContactId, setSelectedContactId] = useState(null);\r\n  const [isEditModalOpen, setIsEditModalOpen] = useState(false);\r\n\r\n  const handleEditButtonClick = (contactId) => {\r\n    setSelectedContactId(contactId);\r\n    setIsEditModalOpen(true);\r\n  };\r\n\r\n  const [isCompanyTradeEditModalOpen, setIsCompanyTradeEditModalOpen] =\r\n    useState(false);\r\n  //\r\n  function handleCompanyTradeEditModal() {\r\n    setIsCompanyTradeEditModalOpen(true);\r\n  }\r\n  function handleCompanyTradeEditCloseModal() {\r\n    setIsCompanyTradeEditModalOpen(false);\r\n  }\r\n\r\n  return (\r\n    <div className=\"flex\">\r\n      <CompanyNavigation />\r\n      <div className=\"px-4 py-3\">\r\n        <div className=\"flex flex-wrap\">\r\n          <div className=\"w-full\">\r\n            <div>\r\n              {/* <p>Company ID: {companyId} </p> */}\r\n              <h4 className=\"text-lg font-semibold eading-tight p-2\">\r\n                Trade Information\r\n              </h4>\r\n              <AddTradeForCompany\r\n                handleSkip={handleSkip}\r\n                handlePrevious={handlePrevious}\r\n                tradeBusinessType={tradeBusinessType}\r\n                handleTradeIndustryType={handleTradeIndustryType}\r\n                setHoldTradeSectorId={setHoldTradeSectorId}\r\n                tradeSector={tradeSector}\r\n                setTradeIndustryTypeId={setTradeIndustryTypeId}\r\n                tradeIndustryType={tradeIndustryType}\r\n                currentFile={currentFile}\r\n                progress={progress}\r\n                message={message}\r\n              />\r\n\r\n              <div className=\"rounded-lg overflow-hidden\">\r\n                <table className=\"border-purple-300 bg-white hover:bg-purple-300\">\r\n                  <thead className=\"bg-purple-100\">\r\n                    <tr className=\"border border-purple-300\">\r\n                      {/* <th className=\"px-2 py-4\"> ID</th> */}\r\n                      <th className=\"px-2 py-4\"> Trade Registration No </th>\r\n                      <th className=\"px-2 py-4\"> Certificate</th>\r\n                      <th className=\"px-2 py-4\"> TradeLicenseNo</th>\r\n                      <th className=\"px-2 py-4\"> IssueDate </th>\r\n                      <th className=\"px-2 py-4\"> Renewed Date </th>\r\n                      <th className=\"px-2 py-4\"> Validity Date </th>\r\n                      <th className=\"px-2 py-4\"> SectorType</th>\r\n                      <th className=\"px-2 py-4\"> IndustryType</th>\r\n                      <th className=\"px-2 py-4\"> BusinessType</th>\r\n                      <th className=\"px-2 py-4\"> License</th>\r\n                      <th className=\"px-2 py-4\"> Action </th>\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                    {getTradeInformation &&\r\n                      getTradeInformation.map((tradeInformation, index) => (\r\n                        // <tr key={index}>\r\n                        <tr\r\n                          key={tradeInformation.Id}\r\n                          className=\"bg-white\r\n                      border-b border-purple-200\"\r\n                        >\r\n                          {/* <td>{tradeInformation.Id}</td> */}\r\n                          <td>{tradeInformation.TradeRegistrationNo}</td>\r\n                          <td>{tradeInformation.Certficate}</td>\r\n                          <td>{tradeInformation.TradeLicenseNo}</td>\r\n                          <td>{tradeInformation.IssueDate}</td>\r\n                          <td>{tradeInformation.RenewedDate}</td>\r\n                          <td>{tradeInformation.ValidityDate}</td>\r\n                          <td>{tradeInformation.SectorType}</td>\r\n                          <td>{tradeInformation.IndustryType}</td>\r\n                          <td>{tradeInformation.BusinessType}</td>\r\n                          <td>{tradeInformation.UploadTradeLicense}</td>\r\n                          <td>\r\n                            <button\r\n                              onClick={() =>\r\n                                handleEditButtonClick(tradeInformation.Id)\r\n                              }\r\n                            >\r\n                              <LoanIconButton\r\n                                style={{ color: \"green\" }}\r\n                                icon={<MdModeEdit />}\r\n                                text=\"Edit\"\r\n                                onClick={() => {\r\n                                  handleCompanyTradeEditModal();\r\n                                  setTradeInformationId(tradeInformation.Id);\r\n                                  getTradeInformationBy(tradeInformation.Id);\r\n                                }}\r\n                              />\r\n                            </button>\r\n                          </td>\r\n                        </tr>\r\n                      ))}\r\n                  </tbody>\r\n                </table>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <CompanyModal\r\n        isOpen={isCompanyTradeEditModalOpen}\r\n        onClose={handleCompanyTradeEditCloseModal}\r\n        title=\"Modify company Trade information\"\r\n      >\r\n        <div>\r\n          <form onSubmit={updateCompanyTradeInformationById}>\r\n            <div className=\"grid grid-cols-1 gap-4 submit-form\">\r\n              <div className=\"submit-form \">\r\n                <div className=\"relative center justify-center flex-1 w-full max-w-full grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\">\r\n                  <TextField\r\n                    id=\"TradeRegistrationNo\"\r\n                    label=\"Trade Registration Nnumber\"\r\n                    variant=\"standard\"\r\n                    color=\"secondary\"\r\n                    size=\"\"\r\n                    required\r\n                    value={editTradeInfo.TradeRegistrationNo}\r\n                    onChange={(e) =>\r\n                      setEditTradeInfo({\r\n                        ...editTradeInfo,\r\n                        TradeRegistrationNo: e.target.value,\r\n                      })\r\n                    }\r\n                    name=\"TradeRegistrationNo\"\r\n                  />\r\n\r\n                  <div>\r\n                    {currentFile && (\r\n                      <div className=\"progress\">\r\n                        <div\r\n                          className=\"progress-bar progress-bar-info progress-bar-striped\"\r\n                          role=\"progressbar\"\r\n                          aria-valuenow={progress}\r\n                          aria-valuemin=\"0\"\r\n                          aria-valuemax=\"100\"\r\n                          style={{ width: progress + \"%\" }}\r\n                        >\r\n                          {progress}%\r\n                        </div>\r\n                      </div>\r\n                    )}\r\n                    <label className=\"btn btn-default\">\r\n                      <input type=\"file\" onChange={selectFile1Edit} />\r\n                    </label>\r\n\r\n                    <button\r\n                      className=\"btn btn-success\"\r\n                      disabled={!selectedFiles}\r\n                      onChange={\r\n                        (editTradeInfo.Certficate = selectedPathCertficateEdit)\r\n                      }\r\n                      onClick={upload1Edit}\r\n                    >\r\n                      Upload Certficate\r\n                    </button>\r\n                    <div className=\"alert alert-light\" role=\"alert\">\r\n                      {message}\r\n                    </div>\r\n                  </div>\r\n\r\n                  <LoanTextField\r\n                    id=\"TradeLicenseNo\"\r\n                    label=\"Trade License Number\"\r\n                    value={editTradeInfo.TradeLicenseNo}\r\n                    onChange={(e) =>\r\n                      setEditTradeInfo({\r\n                        ...editTradeInfo,\r\n                        TradeLicenseNo: e.target.value,\r\n                      })\r\n                    }\r\n                    name=\"TradeLicenseNo\"\r\n                  />\r\n                  <LoanTextField\r\n                    id=\"IssueDate\"\r\n                    label=\"IssueDate\"\r\n                    value={editTradeInfo.IssueDate}\r\n                    onChange={(e) =>\r\n                      setEditTradeInfo({\r\n                        ...editTradeInfo,\r\n                        IssueDate: e.target.value,\r\n                      })\r\n                    }\r\n                    name=\"IssueDate\"\r\n                  />\r\n\r\n                  <LoanTextField\r\n                    id=\"RenewedDate\"\r\n                    label=\"Renewed Date\"\r\n                    value={editTradeInfo.RenewedDate}\r\n                    onChange={(e) =>\r\n                      setEditTradeInfo({\r\n                        ...editTradeInfo,\r\n                        RenewedDate: e.target.value,\r\n                      })\r\n                    }\r\n                    name=\"RenewedDate\"\r\n                  />\r\n                  <LoanTextField\r\n                    id=\"ValidityDate\"\r\n                    label=\"Validity Date\"\r\n                    value={editTradeInfo.ValidityDate}\r\n                    onChange={(e) =>\r\n                      setEditTradeInfo({\r\n                        ...editTradeInfo,\r\n                        ValidityDate: e.target.value,\r\n                      })\r\n                    }\r\n                    name=\"ValidityDate\"\r\n                  />\r\n                  <FormControl variant=\"standard\" sx={{ minWidth: 120 }}>\r\n                    <InputLabel id=\"countrylbl\" color=\"secondary\">\r\n                      {\" \"}\r\n                      TradeSector{\" \"}\r\n                    </InputLabel>\r\n                    <Select\r\n                      color=\"secondary\"\r\n                      onChange={(event) => {\r\n                        handleTradeIndustryType(event.target.value);\r\n                        // setHoldTradeSectorId(event.target.value);\r\n                        setEditTradeInfo({\r\n                          ...editTradeInfo,\r\n                          SectorTypeId: event.target.value,\r\n                        });\r\n                      }}\r\n                      labelId=\"countrylbl\"\r\n                      id=\"countrySelect\"\r\n                      label=\"Country\"\r\n                    >\r\n                      <MenuItem value=\"\">\r\n                        <em>None</em>\r\n                      </MenuItem>\r\n                      {tradeSector.map((newTradeSector) => (\r\n                        <MenuItem\r\n                          key={newTradeSector.Id}\r\n                          value={newTradeSector.Id}\r\n                        >\r\n                          {newTradeSector.Name}\r\n                        </MenuItem>\r\n                      ))}\r\n                    </Select>\r\n                  </FormControl>\r\n                  <FormControl variant=\"standard\" sx={{ minWidth: 120 }}>\r\n                    <InputLabel id=\"countrylbl\" color=\"secondary\">\r\n                      {\" \"}\r\n                      Trade Industry type{\" \"}\r\n                    </InputLabel>\r\n                    <Select\r\n                      color=\"secondary\"\r\n                      onChange={(event) => {\r\n                        handleTradeBusinessType(event.target.value);\r\n                        setEditTradeInfo({\r\n                          ...editTradeInfo,\r\n                          IndustryTypeId: event.target.value,\r\n                        });\r\n                      }}\r\n                      labelId=\"countrylbl\"\r\n                      id=\"countrySelect\"\r\n                      label=\"Country\"\r\n                    >\r\n                      <MenuItem value=\"\">\r\n                        <em>None</em>\r\n                      </MenuItem>\r\n                      {tradeIndustryType.map((newTradeIndustrayType) => (\r\n                        <MenuItem\r\n                          key={newTradeIndustrayType.Id}\r\n                          value={newTradeIndustrayType.Id}\r\n                        >\r\n                          {newTradeIndustrayType.Name}\r\n                        </MenuItem>\r\n                      ))}\r\n                    </Select>\r\n                  </FormControl>\r\n\r\n                  <FormControl variant=\"standard\" sx={{ minWidth: 120 }}>\r\n                    <InputLabel id=\"countrylbl\" color=\"secondary\">\r\n                      {\" \"}\r\n                      Trade Business type{\" \"}\r\n                    </InputLabel>\r\n                    <Select\r\n                      color=\"secondary\"\r\n                      onChange={(event) =>\r\n                        (editTradeInfo.BusinessTypeId = event.target.value)\r\n                      }\r\n                      labelId=\"countrylbl\"\r\n                      id=\"countrySelect\"\r\n                      label=\"Country\"\r\n                    >\r\n                      <MenuItem value=\"\">\r\n                        <em>None</em>\r\n                      </MenuItem>\r\n                      {tradeBusinessType.map((newTradeIndustrayType) => (\r\n                        <MenuItem\r\n                          key={newTradeIndustrayType.Id}\r\n                          TradeBusinessTypeID={newTradeIndustrayType.Id}\r\n                          value={newTradeIndustrayType.Id}\r\n                        >\r\n                          {newTradeIndustrayType.Name}\r\n                        </MenuItem>\r\n                      ))}\r\n                    </Select>\r\n                  </FormControl>\r\n                  <div>\r\n                    {currentFile && (\r\n                      <div className=\"progress\">\r\n                        <div\r\n                          className=\"progress-bar progress-bar-info progress-bar-striped\"\r\n                          role=\"progressbar\"\r\n                          aria-valuenow={progress}\r\n                          aria-valuemin=\"0\"\r\n                          aria-valuemax=\"100\"\r\n                          style={{ width: progress + \"%\" }}\r\n                        >\r\n                          {progress}%\r\n                        </div>\r\n                      </div>\r\n                    )}\r\n\r\n                    <label className=\"btn btn-default\">\r\n                      <input type=\"file\" onChange={selectFileEdit} />\r\n                    </label>\r\n\r\n                    <button\r\n                      className=\"btn btn-success\"\r\n                      disabled={!selectedFiles}\r\n                      onChange={\r\n                        (editTradeInfo.UploadTradeLicense =\r\n                          selectedPathLicenseEdit)\r\n                      }\r\n                      onClick={uploadEdit}\r\n                    >\r\n                      Upload License\r\n                    </button>\r\n                    <div className=\"alert alert-light\" role=\"alert\">\r\n                      {message}\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div className=\"flex justify-center items-center\">\r\n                <button\r\n                  type=\"submit\"\r\n                  className=\"bg-[purple] hover:bg-purple-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline \"\r\n                >\r\n                  Update\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </CompanyModal>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TradePage;\r\n","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\Contact\\ContactPage.jsx",["1341","1342","1343","1344","1345","1346","1347","1348","1349"],[],"import { useState, useEffect } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport LeftNav from \"../../LeftNav/LeftNav\";\r\nimport CompanyNavigation from \"../../Common/CompanyNavigation\";\r\nimport LoanIconButton from \"../../Common/LoanIconButton\";\r\nimport LoanTextField from \"../../Common/LoanTextField\";\r\nimport AddContactForCompany from \"./AddContactForCompany\";\r\nimport EditContactPage from \"./EditContactPage\";\r\nimport { MdModeEdit } from \"react-icons/md\";\r\nimport loanDataService from \"../Service\";\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\nimport ContactApi from \"./contact\";\r\n\r\nfunction ContactPage() {\r\n  const { companyId } = useParams();\r\n\r\n  const [submitted, setSubmitted] = useState(false);\r\n\r\n  const [holdId, setHoldId] = useState([]);\r\n\r\n  const handleInputChangeContactInfo = (event) => {\r\n    const { name, value } = event.target;\r\n    setContactInfo({ ...contactInfo, [name]: value });\r\n  };\r\n\r\n  const saveContactInfo = () => {\r\n    var data = {\r\n      DesignatedPersonFName: contactInfo.DesignatedPersonFName,\r\n      DesignatedPersonMName: contactInfo.DesignatedPersonMName,\r\n      DesignatedPersonLName: contactInfo.DesignatedPersonLName,\r\n      Position: contactInfo.Position,\r\n      MobileNo: contactInfo.MobileNo,\r\n      Telephone: contactInfo.Telephone,\r\n      Email: contactInfo.Email,\r\n    };\r\n    // loanDataService\r\n    ContactApi.addContactInfo(data, companyId)\r\n      .then((response) => {\r\n        setContactInfo({\r\n          Id: response.data.Id,\r\n          DesignatedPersonFName: response.data.DesignatedPersonFName,\r\n          DesignatedPersonMName: response.data.DesignatedPersonMName,\r\n          DesignatedPersonLName: response.data.DesignatedPersonLName,\r\n          Position: response.data.Position,\r\n          MobileNo: response.data.MobileNo,\r\n          Telephone: response.data.Telephone,\r\n          Email: response.data.Email,\r\n        });\r\n        setSubmitted(true);\r\n        console.log(response.data);\r\n        setHoldId(response.data.Result.Id);\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n  const newContactInfo = () => {\r\n    setContactInfo(initialContactInfoState);\r\n    setSubmitted(false);\r\n  };\r\n\r\n  const handleSkip = () => {\r\n    // alert(\"Handle Skip\");\r\n  };\r\n  const initialContactInfoState = {\r\n    Id: null,\r\n    DesignatedPersonFName: \"\",\r\n    DesignatedPersonMName: \"\",\r\n    DesignatedPersonLName: \"\",\r\n    Position: \"\",\r\n    MobileNo: \"\",\r\n    Telephone: \"\",\r\n    Email: \"\",\r\n  };\r\n  const [contactInfo, setContactInfo] = useState(initialContactInfoState);\r\n\r\n  const [contactData, setContactData] = useState([]);\r\n\r\n  const getCompanyContactInformation = useEffect(() => {\r\n    // loanDataService\r\n    ContactApi.getCompanyContactInformation(companyId)\r\n      .then((response) => {\r\n        setContactData(response.data.Result);\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n  }, [companyId]);\r\n\r\n  const handlePrevious = () => {\r\n    // alert(\"Handle previous\");\r\n  };\r\n\r\n  //\r\n  const [isCompanyContactEditModalOpen, setIsCompanyContactEditModalOpen] =\r\n    useState(false);\r\n  //\r\n  function handleCompanyContactEditModal() {\r\n    setIsCompanyContactEditModalOpen(true);\r\n  }\r\n  function handleCompanyContactEditCloseModal() {\r\n    setIsCompanyContactEditModalOpen(false);\r\n  }\r\n\r\n  const [selectedContactId, setSelectedContactId] = useState(null);\r\n  const [isEditModalOpen, setIsEditModalOpen] = useState(false);\r\n\r\n  const handleEditButtonClick = (contactId) => {\r\n    setSelectedContactId(contactId);\r\n    setIsEditModalOpen(true);\r\n  };\r\n\r\n  const [companyContactId, setCompanyContactId] = useState();\r\n\r\n  const [editContactInformation, setEditContactInformation] = useState({\r\n    Id: companyContactId,\r\n    DesignatedPersonFName: \"\",\r\n    DesignatedPersonMName: \"\",\r\n    DesignatedPersonLName: \"\",\r\n    Position: \"\",\r\n    MobileNo: \"\",\r\n    Telephone: \"\",\r\n    Email: \"\",\r\n  });\r\n  const getContactByContactId = (contactId) => {\r\n    // loanDataService\r\n    ContactApi.getContactInformationById(contactId)\r\n      .then((res) => {\r\n        setEditContactInformation({\r\n          ...editContactInformation,\r\n          Id: contactId,\r\n          DesignatedPersonFName: res.data.Result.DesignatedPersonFName,\r\n          DesignatedPersonMName: res.data.Result.DesignatedPersonMName,\r\n          DesignatedPersonLName: res.data.Result.DesignatedPersonLName,\r\n          Position: res.data.Result.Position,\r\n          MobileNo: res.data.Result.MobileNo,\r\n          Telephone: res.data.Result.Telephone,\r\n          Email: res.data.Result.Email,\r\n        });\r\n      })\r\n      .catch((err) => {\r\n        if (err.response.data.StatusCode === 404) {\r\n          console.log(err.response.data.Message);\r\n        }\r\n      });\r\n  };\r\n\r\n  const updateCompanyContactInformationById = (e) => {\r\n    e.preventDefault();\r\n    // loanDataService\r\n    ContactApi.updateCompanyContactInformation(\r\n      companyContactId,\r\n      editContactInformation\r\n    )\r\n      .then((response) => {\r\n        if (response.data.Code === 200) {\r\n          getCompanyContactInformation();\r\n          toast.success(\"Added successfully\", {\r\n            position: toast.POSITION.TOP_RIGHT,\r\n            toastId: \"updateCompanyAddressSuccess\",\r\n          });\r\n        }\r\n      })\r\n      .catch((e) => {\r\n        toast.error(\"Something went wrong\", {\r\n          position: toast.POSITION.TOP_RIGHT,\r\n          toastId: \"updateCompanyAddressError\",\r\n        });\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div className=\"flex\">\r\n      <CompanyNavigation />\r\n      <div className=\"px-4 py-3\">\r\n        <div className=\"flex flex-wrap\">\r\n          <div className=\"w-full\">\r\n            <div>\r\n              {/* <p>Company ID: {companyId} </p> */}\r\n              <h4 className=\"text-lg font-semibold eading-tight p-2\">\r\n                Contact Information\r\n              </h4>\r\n              <AddContactForCompany\r\n                handleSkip={handleSkip}\r\n                contactInfo={contactInfo}\r\n                handleInputChangeContactInfo={handleInputChangeContactInfo}\r\n                saveContactInfo={saveContactInfo}\r\n                handlePrevious={handlePrevious}\r\n              />\r\n              {/* edit not finished */}\r\n              <EditContactPage\r\n                isCompanyContactEditModalOpen={isCompanyContactEditModalOpen}\r\n                handleCompanyContactEditCloseModal={\r\n                  handleCompanyContactEditCloseModal\r\n                }\r\n                updateCompanyContactInformationById={\r\n                  updateCompanyContactInformationById\r\n                }\r\n                editContactInformation={editContactInformation}\r\n                // country={country}\r\n                // region={region}\r\n                // setEditAddress={setEditAddress}\r\n                setEditContactInformation={setEditContactInformation}\r\n              />\r\n              <div className=\"rounded-lg overflow-hidden\">\r\n                <table className=\"border-purple-300 bg-white hover:bg-purple-300\">\r\n                  <thead className=\"bg-purple-100\">\r\n                    <tr className=\"border border-purple-300\">\r\n                      {/* <th className=\"px-2 py-4\"> ID </th> */}\r\n                      <th className=\"px-2 py-4\"> Name </th>\r\n                      <th className=\"px-2 py-4\"> Middle Name </th>\r\n                      <th className=\"px-2 py-4\"> Last Name </th>\r\n                      <th className=\"px-2 py-4\"> Position </th>\r\n                      <th className=\"px-2 py-4\"> Mobile No </th>\r\n                      <th className=\"px-2 py-4\"> Telephone </th>\r\n                      <th className=\"px-2 py-4\"> Email </th>\r\n                      <th className=\"px-2 py-4\"> Action </th>\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                    {contactData.map((contact, index) => (\r\n                      <tr\r\n                        key={contact.Id}\r\n                        className=\"bg-white\r\n                      border-b border-purple-200\"\r\n                      >\r\n                        {/* <td className=\"px-2 py-4\">{contact.Id}</td> */}\r\n                        <td className=\"px-2 py-4\">\r\n                          {contact.DesignatedPersonFName}\r\n                        </td>\r\n                        <td className=\"px-2 py-4\">\r\n                          {contact.DesignatedPersonMName}\r\n                        </td>\r\n                        <td className=\"px-2 py-4\">\r\n                          {contact.DesignatedPersonLName}\r\n                        </td>\r\n                        <td className=\"px-2 py-4\">{contact.Position}</td>\r\n                        <td className=\"px-2 py-4\">{contact.MobileNo}</td>\r\n                        <td className=\"px-2 py-4\">{contact.Telephone}</td>\r\n                        <td className=\"px-2 py-4\">{contact.Email}</td>\r\n                        <td>\r\n                          <button\r\n                            onClick={() => handleEditButtonClick(contact.Id)}\r\n                          >\r\n                            <LoanIconButton\r\n                              style={{ color: \"green\" }}\r\n                              icon={<MdModeEdit />}\r\n                              text=\"Edit\"\r\n                              onClick={() => {\r\n                                handleCompanyContactEditModal();\r\n                                setCompanyContactId(contact.Id);\r\n                                getContactByContactId(contact.Id);\r\n                              }}\r\n                            />\r\n                          </button>\r\n                        </td>\r\n                      </tr>\r\n                    ))}\r\n                  </tbody>\r\n                </table>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          {/* <div className=\"w-full sm:w-1/2 md:w-1/3 lg:w-1/4 xl:w-1/6 mb-4 bg-purple-500\">\r\n            View Company Basic Information\r\n          </div> */}\r\n          {/* {isEditModalOpen && (\r\n            <EditContactPage\r\n              contactId={selectedContactId}\r\n              closeModal={() => setIsEditModalOpen(false)}\r\n              contactData={contactData}\r\n            />\r\n          )} */}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ContactPage;\r\n","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\Account\\account.js",["1350"],[],"import api from \"../../API/Api\";\r\n\r\nlet CompanyId = localStorage.getItem(\"CompanyId\");\r\n\r\nconst apiHeaders = {\r\n  Authorization: `bearer ${localStorage.getItem(\"token\")}`,\r\n  \"Content-Type\": \"application/json\",\r\n};\r\n\r\nconst addAccountInfo = (data, companyId) => {\r\n  return api.post(`/company/${companyId}/AccountInfo`, data, {\r\n    headers: apiHeaders,\r\n  });\r\n};\r\n\r\nconst getCompanyAccountInformation = (CompanyId) => {\r\n  return api.get(`/company/${CompanyId}/AccountInfo`, {\r\n    headers: apiHeaders,\r\n  });\r\n};\r\n\r\nconst getAccountInformationById = (Id) => {\r\n  return api.get(`/company/AccountInfo/${Id}`, {\r\n    headers: apiHeaders,\r\n  });\r\n};\r\nconst updateCompanyAccountInformation = (Id, data) => {\r\n  debugger;\r\n  return api.put(`/company/accountInfo/${Id}`, data, {\r\n    headers: apiHeaders,\r\n  });\r\n};\r\nconst accountApi = {\r\n  addAccountInfo,\r\n  getCompanyAccountInformation,\r\n  getAccountInformationById,\r\n  updateCompanyAccountInformation,\r\n};\r\nexport default accountApi;\r\n","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\Trade\\trade.js",["1351"],[],"import api from \"../../API/Api\";\r\nlet CompanyId = localStorage.getItem(\"CompanyId\");\r\n\r\nconst apiHeaders = {\r\n  Authorization: `bearer ${localStorage.getItem(\"token\")}`,\r\n  \"Content-Type\": \"application/json\",\r\n};\r\n\r\n//upload related\r\nconst uploadTradeInfo = (file, onUploadProgress) => {\r\n    debugger\r\n    let formData = new FormData();\r\n    formData.append(\"file\", file);\r\n    //\r\n    return api.post(\"/FileUpload?foldername=TradeFile\", formData, {\r\n      headers: {\r\n        \"Content-Type\": \"multipart/form-data\",\r\n      },\r\n      onUploadProgress,\r\n    });\r\n  };\r\n\r\n  const addATradeInfo = (data, companyId) => {\r\n    debugger\r\n    return api.post(`/company/${companyId}/TradeRegistration`, data, {\r\n      // return api.post(`/company/${holdId}/tradeInformation`, data, {\r\n      headers: apiHeaders,\r\n    });\r\n  };\r\n\r\n  const getTradeSectorId = () => {\r\n    return api.get(\"/SectorType/Active\");\r\n  };\r\n  \r\n  //Check the api !!!!\r\n  \r\n  \r\n  const sectorTypeName = (holdTradeSectorId) => {\r\n    return api.get(\r\n      `/SectorType/${holdTradeSectorId}`,\r\n    {\r\n      headers:apiHeaders,\r\n    })\r\n  }\r\n  const getTradeIndustryType = (holdTradeSectorId) => {\r\n    return api.get(\r\n      `/IndustryType/${holdTradeSectorId}/Active`,\r\n      {\r\n        headers: apiHeaders,\r\n      }\r\n    );\r\n  };\r\n  const getTradeBusinessTypeId = (tradeIndustryTypeId) => {\r\n    return api.get(\r\n      `/BusinessType/Active/${tradeIndustryTypeId}`,\r\n      {\r\n        headers: apiHeaders,\r\n      }\r\n    );\r\n  };\r\n\r\n  const getCompanyTradeInformation = (CompanyId) => {\r\n    return api.get(`/company/${CompanyId}/TradRegistration`, {\r\n      headers: apiHeaders,\r\n    });\r\n  };\r\n  const getTradeInformationById = (Id) => {\r\n    return api.get(`/company/TradRegistration/${Id}`, {\r\n      headers: apiHeaders,\r\n    });\r\n  };\r\n  const updateCompanyTradeInformation = (Id, data) => {\r\n    debugger\r\n    return api.put(`/company/TradRegistration/${Id}`, data, {\r\n      headers: apiHeaders,\r\n    });\r\n  };\r\n\r\n  const tradeApi = {\r\n    uploadTradeInfo,\r\n    addATradeInfo,\r\n    getTradeSectorId,\r\n    sectorTypeName,\r\n    getTradeIndustryType,\r\n    getTradeBusinessTypeId,\r\n    getCompanyTradeInformation,\r\n    getTradeInformationById,\r\n    updateCompanyTradeInformation\r\n\r\n  };\r\n  export default tradeApi;","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\Contact\\contact.js",["1352"],[],"import api from \"../../API/Api\";\r\n\r\nlet CompanyId = localStorage.getItem(\"CompanyId\");\r\n\r\nconst apiHeaders = {\r\n  Authorization: `bearer ${localStorage.getItem(\"token\")}`,\r\n  \"Content-Type\": \"application/json\",\r\n};\r\n\r\nconst addContactInfo = (data, companyId) => {\r\n  return api.post(`/company/${companyId}/ContactInfo`, data, {\r\n    headers: apiHeaders,\r\n  });\r\n};\r\n\r\nconst getCompanyContactInformation = (companyId) => {\r\n  return api.get(`/company/${companyId}/ContactInfo`, {\r\n    headers: apiHeaders,\r\n  });\r\n};\r\n\r\nconst getContactInfo = (companyId) => {\r\n  return api.get(`/company/${companyId}/ContactInfo`, {\r\n    headers: apiHeaders,\r\n  });\r\n};\r\n\r\nconst getContactInformationById = (contactId) => {\r\n  return api.get(`/company/ContactInfo/${contactId}`, {\r\n    headers: apiHeaders,\r\n  });\r\n};\r\n\r\nconst updateCompanyContactInformation = (Id, data) => {\r\n  //\r\n  debugger;\r\n  return api.put(`/company/contactInfo/${Id}`, data, {\r\n    headers: apiHeaders,\r\n  });\r\n};\r\n\r\nconst ContactApi = {\r\n  addContactInfo,\r\n  getCompanyContactInformation,\r\n  getContactInfo,\r\n  getContactInformationById,\r\n  updateCompanyContactInformation,\r\n};\r\nexport default ContactApi;\r\n","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\Account\\AddAccountForCompany.jsx",["1353","1354","1355","1356","1357","1358","1359","1360"],[],"import {\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  IconButton,\r\n} from \"@mui/material\";\r\n\r\nimport { BiSkipNext, BiSkipPrevious } from \"react-icons/bi\";\r\nimport CompanyModal from \"../Common/CompanyModal\";\r\nimport { useState } from \"react\";\r\nimport LoanTextField from \"../../Common/LoanTextField\";\r\nimport LoanIconButton from \"../../Common/LoanIconButton\";\r\nimport { IoRefresh } from \"react-icons/io5\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useParams } from \"react-router-dom\";\r\n\r\nconst AddAccountForCompany = ({\r\n  handleSkip,\r\n  accountInfo,\r\n  handleInputChangeAccountInfo,\r\n  saveAccountInfo,\r\n  handlePrevios,\r\n}) => {\r\n  const { companyId } = useParams();\r\n  const [isCompanyAccountModalOpen, setIsCompanyAccountModalOpen] =\r\n    useState(false);\r\n\r\n  function handleGeneralCloseModal() {\r\n    setIsCompanyAccountModalOpen(false);\r\n  }\r\n\r\n  function handleGeneralOpenModal() {\r\n    setIsCompanyAccountModalOpen(true);\r\n  }\r\n\r\n  const [selectedCompanyAccount, setSelectedCompanyAccount] = useState();\r\n\r\n  const onChangeselectedCompanyAccount = (e) => {\r\n    setSelectedCompanyAccount(e.target.value);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"flex\">\r\n        <Link to={`/contact/${companyId}`}>\r\n          <LoanIconButton\r\n            style={{ color: \"purple\" }}\r\n            icon={<BiSkipPrevious />}\r\n            text=\"Contact Information\"\r\n            onClick={handlePrevios}\r\n          />\r\n        </Link>\r\n        <LoanIconButton\r\n          style={{ color: \"purple\" }}\r\n          //   icon={<FiPlus />}\r\n          text=\"Add\"\r\n          onClick={handleGeneralOpenModal}\r\n        />\r\n         <Link to={`/enterprise/account-detail/${companyId}`}>\r\n          <LoanIconButton\r\n            style={{ color: \"purple\" }}\r\n            icon={<BiSkipNext />}\r\n            text=\"Account Detail\"\r\n            onClick={handleSkip}\r\n          />\r\n        </Link>\r\n        {/* <Link to={`/trade/${companyId}`}>\r\n          <LoanIconButton\r\n            style={{ color: \"purple\" }}\r\n            icon={<BiSkipNext />}\r\n            text=\"Trade Registration\"\r\n            onClick={handleSkip}\r\n          />\r\n        </Link> */}\r\n        {/* path=\"/enterprise/account-detail/:companyId\" */}\r\n      </div>\r\n      <CompanyModal\r\n        isOpen={isCompanyAccountModalOpen}\r\n        onClose={handleGeneralCloseModal}\r\n        title=\"Add company Account information\"\r\n      >\r\n        <div className=\"grid grid-cols-1 gap-4 submit-form\">\r\n          <div className=\"submit-form \">\r\n            <div\r\n              className=\"relative center justify-center\r\nflex-1 w-full max-w-full grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\"\r\n            >\r\n              {/* <LoanTextField\r\n                id=\"DesignatedPersonFName\"\r\n                label=\"Designated Person First Name\"\r\n                value={contactInfo.DesignatedPersonFName}\r\n                onChange={handleInputChangeContactInfo}\r\n                name=\"DesignatedPersonFName\"\r\n              /> */}\r\n              <LoanTextField\r\n                id=\"AccountNo\"\r\n                label=\"Account Number\"\r\n                value={accountInfo.AccountNo}\r\n                onChange={handleInputChangeAccountInfo}\r\n                name=\"AccountNo\"\r\n              />\r\n              <LoanTextField\r\n                id=\"CustomerId\"\r\n                label=\"Customer Id\"\r\n                value={accountInfo.CustomerId}\r\n                onChange={handleInputChangeAccountInfo}\r\n                name=\"CustomerId\"\r\n              />\r\n              <LoanTextField\r\n                id=\"Branch\"\r\n                label=\"Branch\"\r\n                value={accountInfo.Branch}\r\n                onChange={handleInputChangeAccountInfo}\r\n                name=\"Branch\"\r\n              />\r\n              <LoanTextField\r\n                id=\"District\"\r\n                label=\"District\"\r\n                value={accountInfo.District}\r\n                onChange={handleInputChangeAccountInfo}\r\n                name=\"District\"\r\n              />\r\n              <LoanTextField\r\n                id=\"Other\"\r\n                label=\"Other\"\r\n                value={accountInfo.Other}\r\n                onChange={handleInputChangeAccountInfo}\r\n                name=\"Other\"\r\n              />\r\n            </div>\r\n          </div>\r\n          <div className=\"flex justify-between\">\r\n            <button\r\n              className=\"bg-gray-300 hover:bg-gray-400 text-gray-800 font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\"\r\n              onClick={handleSkip}\r\n            >\r\n              Skip\r\n            </button>\r\n\r\n            <button\r\n              className=\"bg-[purple] hover:bg-purple-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\"\r\n              onClick={() => {\r\n                saveAccountInfo();\r\n              }}\r\n            >\r\n              Save\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </CompanyModal>\r\n    </>\r\n  );\r\n};\r\nexport default AddAccountForCompany;\r\n","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\Trade\\AddTradeForCompany.jsx",["1361","1362","1363","1364","1365"],[],"import { useState, useEffect } from \"react\";\r\nimport { FormControl, InputLabel, Select, MenuItem } from \"@mui/material\";\r\nimport { BiSkipNext, BiSkipPrevious } from \"react-icons/bi\";\r\nimport CompanyModal from \"../Common/CompanyModal\";\r\nimport LoanTextField from \"../../Common/LoanTextField\";\r\nimport LoanIconButton from \"../../Common/LoanIconButton\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport loanDataService from \"../Service\";\r\n// import EditTradePage from \"./EditTradePage\";\r\nimport tradeApi from \"./trade\";\r\n\r\nconst AddTradeForCompany = ({\r\n  handleSkip,\r\n  accountInfo,\r\n\r\n  handlePrevios,\r\n\r\n  uploadTradeCertificate,\r\n}) => {\r\n  const { companyId } = useParams();\r\n  const [isCompanyAccountModalOpen, setIsCompanyAccountModalOpen] =\r\n    useState(false);\r\n\r\n  //related to upload file\r\n\r\n  const [selectedPathCertficate, setSelectedPathCertficate] = useState(null);\r\n\r\n  const [selectedPathLicense, setSelectedPathLicense] = useState(null);\r\n\r\n  const [selectedFiles, setSelectedFiles] = useState(undefined);\r\n\r\n  const [currentFile, setCurrentFile] = useState(undefined);\r\n\r\n  const [fileInfos, setFileInfos] = useState([]);\r\n\r\n  const [progress, setProgress] = useState(0);\r\n\r\n  const [message, setMessage] = useState(\"\");\r\n\r\n  const selectFile = (event) => {\r\n    setSelectedFiles(event.target.files);\r\n  };\r\n\r\n  const uploadCertficate = () => {\r\n    let currentFile = selectedFiles[0];\r\n    setProgress(0);\r\n    setCurrentFile(currentFile);\r\n    // loanDataService\r\n    tradeApi\r\n      .uploadTradeInfo(currentFile, (event) => {\r\n        setProgress(Math.round((100 * event.loaded) / event.total));\r\n      })\r\n      .then((response) => {\r\n        setMessage(response.data.message);\r\n        setSelectedPathCertficate(response.data.Result);\r\n        // debugger\r\n        // saveTradeInfo(response.data.Result);\r\n      })\r\n      .then((files) => {\r\n        setFileInfos(files.data);\r\n      })\r\n      .catch(() => {\r\n        setProgress(0);\r\n        // debugger\r\n        // console.log();\r\n        setCurrentFile(undefined);\r\n      });\r\n    setSelectedFiles(undefined);\r\n  };\r\n\r\n  // releted to trade licence\r\n\r\n  const uploadLicense = () => {\r\n    let currentFile = selectedFiles[0];\r\n\r\n    setProgress(0);\r\n    setCurrentFile(currentFile);\r\n    // loanDataService\r\n    tradeApi\r\n      .uploadTradeInfo(currentFile, (event) => {\r\n        setProgress(Math.round((100 * event.loaded) / event.total));\r\n      })\r\n      .then((response) => {\r\n        setMessage(response.data.message);\r\n        setSelectedPathLicense(response.data.Result);\r\n        // saveTradeInfo(response.data.Result);\r\n        // debugger;\r\n        console.log(response);\r\n        console.log(\"new path\");\r\n        console.log(response.data.Result);\r\n      })\r\n\r\n      .then((files) => {\r\n        setFileInfos(files.data);\r\n      })\r\n\r\n      .catch(() => {\r\n        setProgress(0);\r\n        setCurrentFile(undefined);\r\n      });\r\n    setSelectedFiles(undefined);\r\n  };\r\n\r\n  function handleGeneralCloseModal() {\r\n    setIsCompanyAccountModalOpen(false);\r\n  }\r\n\r\n  function handleGeneralOpenModal() {\r\n    setIsCompanyAccountModalOpen(true);\r\n  }\r\n\r\n  //\r\n  //\r\n  //\r\n\r\n  const [holdTradeSectorId, setHoldTradeSectorId] = useState([]);\r\n  const [tradeIndustryType, setTradeIndustryType] = useState([]);\r\n  const [tradeSector, setTradeSector] = useState([]);\r\n  const [IndustryTypeId, setTradeIndustryTypeId] = useState([]);\r\n\r\n  const handleTradeIndustryType = (holdTradeSectorId) => {\r\n    setIsLoading(true);\r\n    // loanDataService\r\n    tradeApi\r\n      .getTradeIndustryType(holdTradeSectorId)\r\n      .then((response) => {\r\n        //  debugger\r\n        // console.log(resptradeIndustryTypeIdonse.data.Result);\r\n        setTradeIndustryType(response.data.Result);\r\n        console.log(response.data.Result);\r\n        debugger;\r\n        console.log(holdTradeSectorId);\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n    setIsLoading(false);\r\n  };\r\n  useEffect(() => {\r\n    handleTradeIndustryType();\r\n  }, []);\r\n  useEffect(() => {\r\n    const getTradeSector = () => {\r\n      setIsLoading(true);\r\n      // loanDataService\r\n      tradeApi\r\n        .getTradeSectorId()\r\n        .then((response) => {\r\n          setTradeSector(response.data.Result);\r\n        })\r\n        .catch((e) => {\r\n          console.log(e);\r\n        });\r\n      setIsLoading(false);\r\n    };\r\n    getTradeSector();\r\n  }, []);\r\n\r\n  const [submitted, setSubmitted] = useState(false);\r\n\r\n  const newTradeInfo = () => {\r\n    setTradeInfo(initialTradeInfoState);\r\n    setSubmitted(false);\r\n  };\r\n\r\n  const initialTradeInfoState = {\r\n    Id: null,\r\n    CompanyId: \"\",\r\n    TradeRegistrationNo: \"\",\r\n    Certficate: \"\",\r\n    TradeLicenseNo: \"\",\r\n    IssueDate: \"\",\r\n    RenewedDate: \"\",\r\n    ValidityDate: \"\",\r\n    SectorTypeId: \"\",\r\n    IndustryTypeId: \"\",\r\n    BusinessTypeId: \"\",\r\n    UploadTradeLicense: \"\",\r\n  };\r\n  const [tradeInfo, setTradeInfo] = useState(initialTradeInfoState);\r\n\r\n  const handleInputChangeTradeInfo = (event) => {\r\n    const { name, value } = event.target;\r\n    setTradeInfo({ ...tradeInfo, [name]: value });\r\n  };\r\n\r\n  const saveTradeInfo = () => {\r\n    const data = {\r\n      TradeRegistrationNo: tradeInfo.TradeRegistrationNo,\r\n      Certficate: selectedPathCertficate,\r\n      TradeLicenseNo: tradeInfo.TradeLicenseNo,\r\n      IssueDate: tradeInfo.IssueDate,\r\n      RenewedDate: tradeInfo.RenewedDate,\r\n      ValidityDate: tradeInfo.ValidityDate,\r\n      SectorTypeId: holdTradeSectorId,\r\n      IndustryTypeId: IndustryTypeId,\r\n      BusinessTypeId: tradeInfo.BusinessTypeId,\r\n      UploadTradeLicense: selectedPathLicense,\r\n    };\r\n    setIsLoading(true);\r\n    // loanDataService\r\n    tradeApi\r\n      .addATradeInfo(data, companyId)\r\n      .then((response) => {\r\n        setTradeInfo({\r\n          Id: response.data.Id,\r\n          TradeRegistrationNo: response.data.TradeRegistrationNo,\r\n          Certficate: response.data.Certficate,\r\n          TradeLicenseNo: response.data.TradeLicenseNo,\r\n          IssueDate: response.data.IssueDate,\r\n          RenewedDate: response.data.RenewedDate,\r\n          ValidityDate: response.data.ValidityDate,\r\n          SectorTypeId: response.data.SectorTypeId,\r\n          IndustryTypeId: response.data.IndustryTypeId,\r\n          BusinessTypeId: response.data.BusinessTypeId,\r\n          UploadTradeLicense: response.data.UploadTradeLicense,\r\n        });\r\n\r\n        setSubmitted(true);\r\n        console.log(response.data);\r\n        // setHoldId(response.data.Result.Id);\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [tradeBusinessType, setTradeBusinessType] = useState([]);\r\n\r\n  const handleTradeBusinessType = (tradeIndustryTypeId) => {\r\n    setIsLoading(true);\r\n    // loanDataService\r\n    tradeApi\r\n      .getTradeBusinessTypeId(tradeIndustryTypeId)\r\n      .then((response) => {\r\n        debugger;\r\n        console.log(response.data.Result);\r\n        setTradeBusinessType(response.data.Result);\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n    setIsLoading(false);\r\n  };\r\n  useEffect(() => {\r\n    handleTradeBusinessType();\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <div className=\"flex\">\r\n        \r\n     \r\n        <Link to={`/enterprise/account-detail/${companyId}`}>\r\n          <LoanIconButton\r\n            style={{ color: \"purple\" }}\r\n            icon={<BiSkipPrevious />}\r\n            text=\"Account Details\"\r\n            onClick={handlePrevios}\r\n          />\r\n        </Link>\r\n        <LoanIconButton\r\n          style={{ color: \"purple\" }}\r\n          //   icon={<FiPlus />}\r\n          text=\"Add\"\r\n          onClick={handleGeneralOpenModal}\r\n        />\r\n        {/* <Link to={`/Union/${companyId}`}> */}\r\n        <Link to={`/enterprise/employee/${companyId}`}>\r\n        <LoanIconButton\r\n          style={{ color: \"purple\" }}\r\n          icon={<BiSkipNext />}\r\n          text=\"Employee\"\r\n          onClick={handleSkip}\r\n        />\r\n        </Link>\r\n      </div>\r\n      <CompanyModal\r\n        isOpen={isCompanyAccountModalOpen}\r\n        onClose={handleGeneralCloseModal}\r\n        title=\"Add company Trade information\"\r\n      >\r\n        <div className=\"grid grid-cols-1 gap-4 submit-form\">\r\n          <div className=\"submit-form \">\r\n            <div\r\n              className=\"relative center justify-center\r\nflex-1 w-full max-w-full grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\"\r\n            >\r\n              <LoanTextField\r\n                id=\"TradeRegistrationNo\"\r\n                label=\"Trade Registration Nnumber\"\r\n                value={tradeInfo.TradeRegistrationNo}\r\n                onChange={handleInputChangeTradeInfo}\r\n                name=\"TradeRegistrationNo\"\r\n              />\r\n\r\n              {/* ------------ Upload ----------- */}\r\n              <div>\r\n                {currentFile && (\r\n                  <div className=\"progress\">\r\n                    <div\r\n                      className=\"progress-bar progress-bar-info progress-bar-striped\"\r\n                      role=\"progressbar\"\r\n                      aria-valuenow={progress}\r\n                      aria-valuemin=\"0\"\r\n                      aria-valuemax=\"100\"\r\n                      style={{ width: progress + \"%\" }}\r\n                    >\r\n                      {progress}%\r\n                    </div>\r\n                  </div>\r\n                )}\r\n\r\n                <label className=\"btn btn-default\">\r\n                  <input type=\"file\" onChange={selectFile} />\r\n                </label>\r\n\r\n                <button\r\n                  className=\"btn btn-success\"\r\n                  disabled={!selectedFiles}\r\n                  onClick={uploadCertficate}\r\n                >\r\n                  Upload the Certficate\r\n                </button>\r\n                <div className=\"alert alert-light\" role=\"alert\">\r\n                  {message}\r\n                </div>\r\n                <div>{selectedPathCertficate}</div>\r\n              </div>\r\n\r\n              <LoanTextField\r\n                id=\"TradeLicenseNo\"\r\n                label=\"Trade License Number\"\r\n                value={tradeInfo.TradeLicenseNo}\r\n                onChange={handleInputChangeTradeInfo}\r\n                name=\"TradeLicenseNo\"\r\n              />\r\n              <LoanTextField\r\n                id=\"IssueDate\"\r\n                label=\"IssueDate\"\r\n                value={tradeInfo.IssueDate}\r\n                onChange={handleInputChangeTradeInfo}\r\n                name=\"IssueDate\"\r\n              />\r\n              <LoanTextField\r\n                id=\"RenewedDate\"\r\n                label=\"Renewed Date\"\r\n                value={tradeInfo.RenewedDate}\r\n                onChange={handleInputChangeTradeInfo}\r\n                name=\"RenewedDate\"\r\n              />\r\n              <LoanTextField\r\n                id=\"ValidityDate\"\r\n                label=\"Validity Date\"\r\n                value={tradeInfo.ValidityDate}\r\n                onChange={handleInputChangeTradeInfo}\r\n                name=\"ValidityDate\"\r\n              />\r\n              <FormControl variant=\"standard\" sx={{ minWidth: 120 }}>\r\n                <InputLabel id=\"countrylbl\" color=\"secondary\">\r\n                  {\" \"}\r\n                  TradeSector{\" \"}\r\n                </InputLabel>\r\n                <Select\r\n                  color=\"secondary\"\r\n                  onChange={(event) => {\r\n                    handleTradeIndustryType(event.target.value);\r\n                    setHoldTradeSectorId(event.target.value);\r\n                    // handleSectorType(event.target.value);\r\n                  }}\r\n                  // SectorId= {holdTradeSectorId}\r\n                  labelId=\"countrylbl\"\r\n                  id=\"countrySelect\"\r\n                  label=\"Country\"\r\n                  // value={tradeInfo.SectorTypeId}\r\n                >\r\n                  <MenuItem value=\"\">\r\n                    <em>None</em>\r\n                  </MenuItem>\r\n                  {tradeSector.map((newTradeSector) => (\r\n                    <MenuItem\r\n                      key={newTradeSector.Id}\r\n                      // CountryID={newTradeSector.Id}\r\n                      value={newTradeSector.Id}\r\n                    >\r\n                      {newTradeSector.Name}\r\n                    </MenuItem>\r\n                  ))}\r\n                </Select>\r\n              </FormControl>\r\n              <FormControl variant=\"standard\" sx={{ minWidth: 120 }}>\r\n                <InputLabel id=\"countrylbl\" color=\"secondary\">\r\n                  {\" \"}\r\n                  Trade Industry type{\" \"}\r\n                </InputLabel>\r\n                <Select\r\n                  color=\"secondary\"\r\n                  onChange={(event) => {\r\n                    handleTradeBusinessType(event.target.value);\r\n                    setTradeIndustryTypeId(event.target.value);\r\n                  }}\r\n                  labelId=\"countrylbl\"\r\n                  id=\"countrySelect\"\r\n                  label=\"Country\"\r\n                  // value={tradeInfo.IndustryType}\r\n                >\r\n                  <MenuItem value=\"\">\r\n                    <em>None</em>\r\n                  </MenuItem>\r\n                  {tradeIndustryType.map((newTradeIndustrayType) => (\r\n                    <MenuItem\r\n                      key={newTradeIndustrayType.Id}\r\n                      // CountryID={newTradeIndustrayType.Id}\r\n                      value={newTradeIndustrayType.Id}\r\n                    >\r\n                      {newTradeIndustrayType.Name}\r\n                    </MenuItem>\r\n                  ))}\r\n                </Select>\r\n              </FormControl>\r\n\r\n              <FormControl variant=\"standard\" sx={{ minWidth: 120 }}>\r\n                <InputLabel id=\"countrylbl\" color=\"secondary\">\r\n                  {\" \"}\r\n                  Trade Business type{\" \"}\r\n                </InputLabel>\r\n                <Select\r\n                  color=\"secondary\"\r\n                  onChange={(event) =>\r\n                    (tradeInfo.BusinessTypeId = event.target.value)\r\n                  }\r\n                  labelId=\"countrylbl\"\r\n                  id=\"countrySelect\"\r\n                  label=\"Trade Business Type\"\r\n                  // value={tradeInfo.BusinessType}\r\n                >\r\n                  <MenuItem value=\"\">\r\n                    <em>None</em>\r\n                  </MenuItem>\r\n                  {tradeBusinessType.map((newTradeIndustrayType) => (\r\n                    <MenuItem\r\n                      key={newTradeIndustrayType.Id}\r\n                      TradeBusinessTypeID={newTradeIndustrayType.Id}\r\n                      value={newTradeIndustrayType.Id}\r\n                    >\r\n                      {newTradeIndustrayType.Name}\r\n                    </MenuItem>\r\n                  ))}\r\n                </Select>\r\n              </FormControl>\r\n\r\n              {/* ------------ Upload ----------- */}\r\n              <div>\r\n                {currentFile && (\r\n                  <div className=\"progress\">\r\n                    <div\r\n                      className=\"progress-bar progress-bar-info progress-bar-striped\"\r\n                      role=\"progressbar\"\r\n                      aria-valuenow={progress}\r\n                      aria-valuemin=\"0\"\r\n                      aria-valuemax=\"100\"\r\n                      style={{ width: progress + \"%\" }}\r\n                    >\r\n                      {progress}%\r\n                    </div>\r\n                  </div>\r\n                )}\r\n\r\n                <label className=\"btn btn-default\">\r\n                  <input type=\"file\" onChange={selectFile} />\r\n                </label>\r\n\r\n                <button\r\n                  className=\"btn btn-success\"\r\n                  disabled={!selectedFiles}\r\n                  onClick={uploadLicense}\r\n                >\r\n                  Upload License\r\n                </button>\r\n                <div className=\"alert alert-light\" role=\"alert\">\r\n                  {message}\r\n                </div>\r\n                <div>{selectedPathLicense}</div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"flex justify-between\">\r\n            <button\r\n              className=\"bg-gray-300 hover:bg-gray-400 text-gray-800 font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\"\r\n              onClick={handleSkip}\r\n            >\r\n              Skip\r\n            </button>\r\n\r\n            <button\r\n              className=\"bg-[purple] hover:bg-purple-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\"\r\n              onClick={() => {\r\n                saveTradeInfo();\r\n              }}\r\n            >\r\n              Save\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </CompanyModal>\r\n    </>\r\n  );\r\n};\r\nexport default AddTradeForCompany;\r\n","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\Contact\\EditContactPage.jsx",["1366","1367","1368","1369","1370","1371"],[],"import {\r\n  TextField,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n} from \"@mui/material\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport LoanTextField from \"../../Common/LoanTextField\";\r\nimport CompanyModal from \"../Common/CompanyModal\";\r\n\r\nconst EditContactPage = ({\r\n  isCompanyContactEditModalOpen,\r\n  handleCompanyContactEditCloseModal,\r\n  updateCompanyContactInformationById,\r\n  editContactInformation,\r\n  setEditContactInformation,\r\n}) => {\r\n  return (\r\n    <CompanyModal\r\n      isOpen={isCompanyContactEditModalOpen}\r\n      onClose={handleCompanyContactEditCloseModal}\r\n      title=\"Modify company contact information\"\r\n    >\r\n      <div>\r\n        <form onSubmit={updateCompanyContactInformationById}>\r\n          <div className=\"grid grid-cols-1 gap-4 submit-form\">\r\n            <div className=\"submit-form \">\r\n              <div className=\"relative center justify-center flex-1 w-full max-w-full grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\">\r\n                {/* ... your modal/popup content ... */}\r\n\r\n                <TextField\r\n                  id=\"DesignatedPersonFName\"\r\n                  label=\"Designated Person First Name\"\r\n                  variant=\"standard\"\r\n                  color=\"secondary\"\r\n                  size=\"\"\r\n                  required\r\n                  value={editContactInformation.DesignatedPersonFName}\r\n                  onChange={(e) =>\r\n                    setEditContactInformation({\r\n                      ...editContactInformation,\r\n                      DesignatedPersonFName: e.target.value,\r\n                    })\r\n                  }\r\n                  name=\"DesignatedPersonFName\"\r\n                />\r\n\r\n                <LoanTextField\r\n                  id=\"DesignatedPersonMName\"\r\n                  label=\"Designated Person Middle Name\"\r\n                  value={editContactInformation.DesignatedPersonMName}\r\n                  onChange={(e) =>\r\n                    setEditContactInformation({\r\n                      ...editContactInformation,\r\n                      DesignatedPersonMName: e.target.value,\r\n                    })\r\n                  }\r\n                  name=\"DesignatedPersonMName\"\r\n                />\r\n\r\n                <LoanTextField\r\n                  id=\"DesignatedPersonLName\"\r\n                  label=\"Designated Person Last Name\"\r\n                  value={editContactInformation.DesignatedPersonLName}\r\n                  onChange={(e) =>\r\n                    setEditContactInformation({\r\n                      ...editContactInformation,\r\n                      DesignatedPersonLName: e.target.value,\r\n                    })\r\n                  }\r\n                  name=\"DesignatedPersonLName\"\r\n                />\r\n                <LoanTextField\r\n                  id=\"Position\"\r\n                  label=\"Position\"\r\n                  value={editContactInformation.Position}\r\n                  onChange={(e) =>\r\n                    setEditContactInformation({\r\n                      ...editContactInformation,\r\n                      Position: e.target.value,\r\n                    })\r\n                  }\r\n                  name=\"Position\"\r\n                />\r\n                <LoanTextField\r\n                  id=\"MobileNo\"\r\n                  label=\"Mobile Number\"\r\n                  value={editContactInformation.MobileNo}\r\n                  onChange={(e) =>\r\n                    setEditContactInformation({\r\n                      ...editContactInformation,\r\n                      MobileNo: e.target.value,\r\n                    })\r\n                  }\r\n                  name=\"MobileNo\"\r\n                />\r\n                <LoanTextField\r\n                  id=\"Telephone\"\r\n                  label=\"Telephone\"\r\n                  value={editContactInformation.Telephone}\r\n                  onChange={(e) =>\r\n                    setEditContactInformation({\r\n                      ...editContactInformation,\r\n                      Telephone: e.target.value,\r\n                    })\r\n                  }\r\n                  name=\"Telephone\"\r\n                />\r\n                <LoanTextField\r\n                  id=\"Email\"\r\n                  label=\"Email\"\r\n                  value={editContactInformation.Email}\r\n                  onChange={(e) =>\r\n                    setEditContactInformation({\r\n                      ...editContactInformation,\r\n                      Email: e.target.value,\r\n                    })\r\n                  }\r\n                  name=\"Email\"\r\n                />\r\n\r\n                {/* <button type=\"submit\">Update</button> */}\r\n                {/* <button\r\n                  onClick={closeModal}\r\n                  className=\"mt-5 px-4 py-2 text-sm rounded-md font-medium text-gray-700 bg-gray-100 hover:bg-gray-200 focus:outline-none focus-visible:ring-2 focus-visible:ring-white focus-visible:ring-opacity-75\"\r\n                >\r\n                  Cancel\r\n                </button> */}\r\n              </div>\r\n              <div className=\"flex justify-center items-center\">\r\n                <button\r\n                  type=\"submit\"\r\n                  className=\"bg-[purple] hover:bg-purple-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline \"\r\n                >\r\n                  Update\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </CompanyModal>\r\n  );\r\n};\r\n\r\nexport default EditContactPage;\r\n","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\Contact\\AddContactForCompany.jsx",["1372","1373","1374","1375","1376","1377","1378","1379"],[],"import {\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  IconButton,\r\n} from \"@mui/material\";\r\n\r\nimport { BiSkipNext, BiSkipPrevious } from \"react-icons/bi\";\r\nimport CompanyModal from \"../Common/CompanyModal\";\r\nimport { useState } from \"react\";\r\nimport LoanTextField from \"../../Common/LoanTextField\";\r\nimport LoanIconButton from \"../../Common/LoanIconButton\";\r\nimport { IoRefresh } from \"react-icons/io5\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useParams } from \"react-router-dom\";\r\n\r\nconst AddContactForCompany = ({\r\n  handleSkip,\r\n\r\n  contactInfo,\r\n  handleInputChangeContactInfo,\r\n  saveContactInfo,\r\n  handlePrevios,\r\n}) => {\r\n  const [isCompanyContactModalOpen, setIsCompanyContactModalOpen] =\r\n    useState(false);\r\n\r\n  function handleGeneralCloseModal() {\r\n    setIsCompanyContactModalOpen(false);\r\n  }\r\n\r\n  function handleGeneralOpenModal() {\r\n    setIsCompanyContactModalOpen(true);\r\n  }\r\n\r\n  const [selectedCompanyContact, setSelectedCompanyContact] = useState();\r\n\r\n  const onChangeselectedCompanyContact = (e) => {\r\n    setSelectedCompanyContact(e.target.value);\r\n  };\r\n  const { companyId } = useParams();\r\n\r\n  return (\r\n    <>\r\n      <div className=\"flex\">\r\n        <Link to={`/enterprise/${companyId}`}>\r\n          <LoanIconButton\r\n            style={{ color: \"purple\" }}\r\n            icon={<BiSkipPrevious />}\r\n            text=\"Address\"\r\n            onClick={handlePrevios}\r\n          />\r\n        </Link>\r\n        <LoanIconButton\r\n          style={{ color: \"purple\" }}\r\n          //   icon={<FiPlus />}\r\n          text=\"Add\"\r\n          onClick={handleGeneralOpenModal}\r\n        />\r\n        <Link to={`/Account/${companyId}`}>\r\n          <LoanIconButton\r\n            style={{ color: \"purple\" }}\r\n            icon={<BiSkipNext />}\r\n            text=\"Account Information\"\r\n            onClick={handleSkip}\r\n          />\r\n        </Link>\r\n      </div>\r\n      <CompanyModal\r\n        isOpen={isCompanyContactModalOpen}\r\n        onClose={handleGeneralCloseModal}\r\n        title=\"Add company information\"\r\n      >\r\n        <div className=\"grid grid-cols-1 gap-4 submit-form\">\r\n          <div className=\"submit-form \">\r\n            <div\r\n              className=\"relative center justify-center\r\nflex-1 w-full max-w-full grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\"\r\n            >\r\n              <LoanTextField\r\n                id=\"DesignatedPersonFName\"\r\n                label=\"Designated Person First Name\"\r\n                value={contactInfo.DesignatedPersonFName}\r\n                onChange={handleInputChangeContactInfo}\r\n                name=\"DesignatedPersonFName\"\r\n              />\r\n              <LoanTextField\r\n                id=\"DesignatedPersonMName\"\r\n                label=\"Designated Person Middle Name\"\r\n                value={contactInfo.DesignatedPersonMName}\r\n                onChange={handleInputChangeContactInfo}\r\n                name=\"DesignatedPersonMName\"\r\n              />\r\n              <LoanTextField\r\n                id=\"DesignatedPersonLName\"\r\n                label=\"Designated Person Last Name\"\r\n                value={contactInfo.DesignatedPersonLName}\r\n                onChange={handleInputChangeContactInfo}\r\n                name=\"DesignatedPersonLName\"\r\n              />\r\n              <LoanTextField\r\n                id=\"Position\"\r\n                label=\"Position\"\r\n                value={contactInfo.Position}\r\n                onChange={handleInputChangeContactInfo}\r\n                name=\"Position\"\r\n              />\r\n              <LoanTextField\r\n                id=\"MobileNo\"\r\n                label=\"Mobile Number\"\r\n                value={contactInfo.MobileNo}\r\n                onChange={handleInputChangeContactInfo}\r\n                name=\"MobileNo\"\r\n              />\r\n              <LoanTextField\r\n                id=\"Telephone\"\r\n                label=\"Telephone\"\r\n                value={contactInfo.Telephone}\r\n                onChange={handleInputChangeContactInfo}\r\n                name=\"Telephone\"\r\n              />\r\n              <LoanTextField\r\n                id=\"Email\"\r\n                label=\"Email\"\r\n                value={contactInfo.Email}\r\n                onChange={handleInputChangeContactInfo}\r\n                name=\"Email\"\r\n              />\r\n            </div>\r\n          </div>\r\n          <div className=\"flex justify-between\">\r\n            <button\r\n              className=\"bg-gray-300 hover:bg-gray-400 text-gray-800 font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\"\r\n              onClick={handleSkip}\r\n            >\r\n              Skip\r\n            </button>\r\n\r\n            <button\r\n              className=\"bg-[purple] hover:bg-purple-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\"\r\n              onClick={() => {\r\n                saveContactInfo();\r\n              }}\r\n            >\r\n              Save\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </CompanyModal>\r\n    </>\r\n  );\r\n};\r\nexport default AddContactForCompany;\r\n","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\Account\\EditAccountPage.jsx",["1380","1381","1382","1383","1384","1385"],[],"import {\r\n  TextField,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n} from \"@mui/material\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport LoanTextField from \"../../Common/LoanTextField\";\r\nimport CompanyModal from \"../Common/CompanyModal\";\r\n\r\nconst EditAccountPage = ({\r\n  isCompanyAccountEditModalOpen,\r\n  handleCompanyAccountEditCloseModal,\r\n  updateCompanyAccountInformationById,\r\n  editAccountInfo,\r\n  setEditAccountInfo,\r\n}) => {\r\n  return (\r\n    <CompanyModal\r\n      isOpen={isCompanyAccountEditModalOpen}\r\n      onClose={handleCompanyAccountEditCloseModal}\r\n      title=\"Modify company contact information\"\r\n    >\r\n      <div>\r\n        <form onSubmit={updateCompanyAccountInformationById}>\r\n          <div className=\"grid grid-cols-1 gap-4 submit-form\">\r\n            <div className=\"submit-form \">\r\n              <div className=\"relative center justify-center flex-1 w-full max-w-full grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\">\r\n                {/* ... your modal/popup content ... */}\r\n\r\n                <TextField\r\n                  id=\"AccountNo\"\r\n                  label=\"Account Number\"\r\n                  variant=\"standard\"\r\n                  color=\"secondary\"\r\n                  size=\"\"\r\n                  required\r\n                  value={editAccountInfo.AccountNo}\r\n                  onChange={(e) =>\r\n                    setEditAccountInfo({\r\n                      ...editAccountInfo,\r\n                      AccountNo: e.target.value,\r\n                    })\r\n                  }\r\n                  name=\"AccountNo\"\r\n                />\r\n\r\n                <LoanTextField\r\n                  id=\"CustomerId\"\r\n                  label=\"Customer Id\"\r\n                  value={editAccountInfo.CustomerId}\r\n                  onChange={(e) =>\r\n                    setEditAccountInfo({\r\n                      ...editAccountInfo,\r\n                      CustomerId: e.target.value,\r\n                    })\r\n                  }\r\n                  name=\"CustomerId\"\r\n                />\r\n                <LoanTextField\r\n                  id=\"Branch\"\r\n                  label=\"Branch\"\r\n                  value={editAccountInfo.Branch}\r\n                  onChange={(e) =>\r\n                    setEditAccountInfo({\r\n                      ...editAccountInfo,\r\n                      Branch: e.target.value,\r\n                    })\r\n                  }\r\n                  name=\"Branch\"\r\n                />\r\n\r\n                <LoanTextField\r\n                  id=\"District\"\r\n                  label=\"District\"\r\n                  value={editAccountInfo.District}\r\n                  onChange={(e) =>\r\n                    setEditAccountInfo({\r\n                      ...editAccountInfo,\r\n                      District: e.target.value,\r\n                    })\r\n                  }\r\n                  name=\"CustomerId\"\r\n                />\r\n                <LoanTextField\r\n                  id=\"Other\"\r\n                  label=\"Other\"\r\n                  value={editAccountInfo.Other}\r\n                  onChange={(e) =>\r\n                    setEditAccountInfo({\r\n                      ...editAccountInfo,\r\n                      Other: e.target.value,\r\n                    })\r\n                  }\r\n                  name=\"Other\"\r\n                />\r\n              </div>\r\n              <div className=\"flex justify-center items-center\">\r\n                <button\r\n                  type=\"submit\"\r\n                  className=\"bg-[purple] hover:bg-purple-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline \"\r\n                >\r\n                  Update\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </CompanyModal>\r\n  );\r\n};\r\n\r\nexport default EditAccountPage;\r\n","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\accountDetail\\AddAccountDetail.jsx",["1386","1387","1388","1389","1390","1391","1392"],[],"import {\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  IconButton,\r\n} from \"@mui/material\";\r\nimport LoanIconButton from \"../../Common/LoanIconButton\";\r\nimport CompanyModal from \"../Common/CompanyModal\";\r\nimport { RiSkipBackMiniFill } from \"react-icons/ri\";\r\nimport { BsPlus } from \"react-icons/bs\";\r\nimport { BiSkipNext, BiSkipPrevious } from \"react-icons/bi\";\r\nimport { useState } from \"react\";\r\nimport { IoRefresh } from \"react-icons/io5\";\r\nimport { Link } from \"react-router-dom\";\r\nimport LoanTextField from \"../../Common/LoanTextField\";\r\nimport { useParams } from \"react-router-dom\";\r\nconst AddAccountDetail = ({\r\n  accountDetial,\r\n  handleInputChangeAccountDetial,\r\n  handleBack,\r\n  handleSkip,\r\n  handleNext,\r\n  saveAccountDetials,\r\n  handlePrevios,\r\n}) => {\r\n  const [isAccountDetailModalOpen, setIsAccountDetailModalOpen] =\r\n    useState(false);\r\n  function handleAccountDetailOpenModal() {\r\n    setIsAccountDetailModalOpen(true);\r\n  }\r\n  function handleAccountDetailCloseModal() {\r\n    setIsAccountDetailModalOpen(false);\r\n  }\r\n  const { companyId } = useParams();\r\n  return (\r\n    <>\r\n      <div className=\"flex\">\r\n        <Link to={`/Account/${companyId}`}>\r\n          <LoanIconButton\r\n            style={{ color: \"purple\" }}\r\n            icon={<BiSkipPrevious />}\r\n            text=\"Account Information\"\r\n            onClick={handlePrevios}\r\n          />\r\n        </Link>\r\n        <LoanIconButton\r\n          style={{ color: \"purple\" }}\r\n          icon={<BsPlus />}\r\n          text=\"Add\"\r\n          onClick={handleAccountDetailOpenModal}\r\n        />\r\n        <Link to={`/trade/${companyId}`}>\r\n          <LoanIconButton\r\n            style={{ color: \"purple\" }}\r\n            icon={<BiSkipNext />}\r\n            text=\"Trade Registration\"\r\n            onClick={handleSkip}\r\n          />\r\n        </Link>\r\n      </div>\r\n      <CompanyModal\r\n        isOpen={isAccountDetailModalOpen}\r\n        onClose={handleAccountDetailCloseModal}\r\n        title=\"Add account detail information\"\r\n      >\r\n        <div>\r\n          <div className=\"relative center justify-center flex-1 w-full max-w-full grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\">\r\n            <LoanTextField\r\n              id=\"CustomerId\"\r\n              label=\"Customer Id\"\r\n              value={accountDetial.CustomerId}\r\n              onChange={handleInputChangeAccountDetial}\r\n              name=\"CustomerId\"\r\n            />\r\n            <LoanTextField\r\n              id=\"DepositAccount\"\r\n              label=\"DepositAccount\"\r\n              value={accountDetial.DepositAccount}\r\n              onChange={handleInputChangeAccountDetial}\r\n              name=\"DepositAccount\"\r\n            />\r\n            <LoanTextField\r\n              id=\"DepositBalance\"\r\n              label=\"DepositBalance\"\r\n              value={accountDetial.DepositBalance}\r\n              onChange={handleInputChangeAccountDetial}\r\n              name=\"DepositBalance\"\r\n            />\r\n          </div>\r\n          <div className=\"flex justify-center p-2 pt-5\">\r\n            <button\r\n              className=\"bg-[purple] hover:bg-purple-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\"\r\n              onClick={() => {\r\n                saveAccountDetials();\r\n              }}\r\n            >\r\n              Save\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </CompanyModal>\r\n    </>\r\n  );\r\n};\r\nexport default AddAccountDetail;\r\n","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\accountDetail\\FetchAccountDetial.jsx",["1393","1394","1395","1396","1397","1398","1399","1400","1401","1402","1403","1404","1405","1406","1407"],[],"import { useState, useEffect } from \"react\";\r\nimport { FaSpinner } from \"react-icons/fa\";\r\nimport { BiSkipNext } from \"react-icons/bi\";\r\nimport { MdModeEdit } from \"react-icons/md\";\r\nimport { IoTrashOutline } from \"react-icons/io5\";\r\nimport { useParams, useNavigate } from \"react-router-dom\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { MdOutlineViewList } from \"react-icons/md\";\r\nimport CompanyNavigation from \"../../Common/CompanyNavigation\";\r\nimport LoanIconButton from \"../../Common/LoanIconButton\";\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\nimport AddAccountDetail from \"./AddAccountDetail\";\r\nimport EditAccountDetail from \"./EditAccountDetail\";\r\nimport AccountDetailSrvice from \"./AccountDetailSrvice\";\r\nimport ViewCreditFacilityUtilizition from \"./creditFacilityUtilizition/ViewCreditFacilityUtilizition\";\r\nimport ViewCreditPerformance from \"./creditPerformance/ViewCreditPefrormance\";\r\nimport CreditFacilityUtilizitionService from \"./creditFacilityUtilizition/CreditFacilityUtilizitionService\";\r\nimport CreditPerformanceService from \"./creditPerformance/CreditPerformanceService\";\r\n// import DepositPerformanceService from \"./depositPerformance/DepositPerformanceService\";\r\nimport DepositPerformanceService from \"./depositPerformance/DepositPerformanceService\";\r\n\r\nimport FcyInflowPerformanceService from \"./fcyInflowPerformance/FcyInflowPerformanceService\";\r\nimport ViewFCYInflowPefrormance from \"./fcyInflowPerformance/ViewFcyInflowPerformance\";\r\nimport ViewDepositPefrormance from \"./depositPerformance/ViewDepositPefrormance\";\r\nconst FetchAccountDetial = () => {\r\n  const { companyId } = useParams();\r\n  const navigate = useNavigate();\r\n  const [accountDetial, setAccountDetial] = useState([]);\r\n  const [accountDetialId, setAccountDetialId] = useState([]);\r\n  const [deleteLoading, setDeleteLoading] = useState(false);\r\n  const [deleteAccountDetailError, setAccountDetailDeleteError] =\r\n    useState(null);\r\n  const [error, setError] = useState(null);\r\n  const [AccountDetialErrorLoading, setAccountDetialErrorLoading] =\r\n    useState(false);\r\n  const [isAccountDetialEditModalOpen, setIsAccountDetialEditModalOpen] =\r\n    useState(false);\r\n  function handleAccountDetialEditOpenModal() {\r\n    setIsAccountDetialEditModalOpen(true);\r\n  }\r\n  function handleAccountDetialEditCloseModal() {\r\n    setIsAccountDetialEditModalOpen(false);\r\n  }\r\n  const [isAccountDetailsEditModalOpen, setIsAccountDetailsEditModalOpen] =\r\n    useState(false);\r\n  function handleAccountDetailsEditOpenModal() {\r\n    setIsAccountDetailsEditModalOpen(true);\r\n  }\r\n  function handleAccountDetailsEditCloseModal() {\r\n    setIsAccountDetailsEditModalOpen(false);\r\n  }\r\n  //credit utilizition\r\n  const [\r\n    isCreditFacilityUtilizitionModalOpen,\r\n    setIsCreditFacilityUtilizitionModalOpen,\r\n  ] = useState(false);\r\n  function handleCreditFacilityUtilizitionOpenModal() {\r\n    setIsCreditFacilityUtilizitionModalOpen(true);\r\n  }\r\n  function handleCreditFacilityUtilizitionCloseModal() {\r\n    setIsCreditFacilityUtilizitionModalOpen(false);\r\n  }\r\n  //credit Performance\r\n  const [isCreditPerformanceModalOpen, setIsCreditPerformanceModalOpen] =\r\n    useState(false);\r\n  function handleCreditPerformanceOpenModal() {\r\n    setIsCreditPerformanceModalOpen(true);\r\n  }\r\n  function handleCreditPerformanceCloseModal() {\r\n    setIsCreditPerformanceModalOpen(false);\r\n  }\r\n  //end credit performance\r\n  //deposite performance\r\n  const [isDepositePerformanceModalOpen, setIsDepositePerformanceModalOpen] =\r\n    useState(false);\r\n  function handleDepositePerformanceOpenModal() {\r\n    setIsDepositePerformanceModalOpen(true);\r\n  }\r\n  function handleDepositePerformanceCloseModal() {\r\n    setIsDepositePerformanceModalOpen(false);\r\n  }\r\n  //end deposite performance\r\n\r\n  const [isFCYInflowPerformanceModalOpen, setIsFCYInflowPerformanceModalOpen] =\r\n    useState(false);\r\n  function handleFCYInflowPerformanceOpenModal() {\r\n    setIsFCYInflowPerformanceModalOpen(true);\r\n  }\r\n  function handleFCYInflowPerformanceCloseModal() {\r\n    setIsFCYInflowPerformanceModalOpen(false);\r\n  }\r\n  const getAccountDetial = () => {\r\n    setAccountDetialErrorLoading(true);\r\n    setTimeout(() => {\r\n      AccountDetailSrvice.getAccountDetial(companyId)\r\n        .then((response) => {\r\n          if (\r\n            response.data.Code === 200 ||\r\n            response.data.Message === \"Success\"\r\n          ) {\r\n            setAccountDetial(response.data.Result);\r\n            setAccountDetialErrorLoading(false);\r\n          } else {\r\n            setAccountDetialErrorLoading(false);\r\n            setError(\"Something went wrong\");\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          if (error.response.data.StatusCode === 404) {\r\n            setError(\"Account detial not found\");\r\n            setAccountDetialErrorLoading(false);\r\n          } else if (error.response.data.StatusCode === 400) {\r\n            setError(\"Something went wrong\");\r\n            setAccountDetialErrorLoading(false);\r\n          } else if (error.response.data.StatusCode === 401) {\r\n            navigate(\"/login\");\r\n          } else if (error.response.data.StatusCode === 403) {\r\n            navigate(\"/login\");\r\n          }\r\n        });\r\n    }, 1000);\r\n  };\r\n  useEffect(() => {\r\n    getAccountDetial();\r\n  }, []);\r\n  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n  const handleInputChangeAccountDetial = (event) => {\r\n    const { name, value } = event.target;\r\n    setAccountDetials({ ...accountDetials, [name]: value });\r\n  };\r\n  const initialAccountDetialsState = {\r\n    Id: null,\r\n    CompanyId: \"\",\r\n    CustomerId: \"\",\r\n    DepositAccount: \"\",\r\n    DepositBalance: \"\",\r\n  };\r\n  const [accountDetials, setAccountDetials] = useState(\r\n    initialAccountDetialsState\r\n  );\r\n  const newAccountDetials = () => {\r\n    setAccountDetials(initialAccountDetialsState);\r\n    // setSubmitted(false);\r\n  };\r\n  const saveAccountDetials = () => {\r\n    var data = {\r\n      CompanyId: companyId,\r\n      CustomerId: accountDetials.CustomerId,\r\n      DepositAccount: accountDetials.DepositAccount,\r\n      DepositBalance: accountDetials.DepositBalance,\r\n    };\r\n    AccountDetailSrvice.addAccountDetials(data, companyId)\r\n      .then((response) => {\r\n        setAccountDetials({\r\n          Id: response.data.Id,\r\n          CompanyId: response.data.CompanyId,\r\n          CustomerId: response.data.CustomerId,\r\n          DepositAccount: response.data.DepositAccount,\r\n          DepositBalance: response.data.DepositBalance,\r\n        });\r\n        if (response.data.Code === 200) {\r\n          setAccountDetials(initialAccountDetialsState);\r\n          console.log(response.data);\r\n          // setHoldId(response.data.Result.Id);\r\n          // getAccountDetial();\r\n          toast.success(\"Added successfully\", {\r\n            position: toast.POSITION.TOP_RIGHT,\r\n            toastId: \"addAccountDetails\",\r\n          });\r\n        }\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n  const handleDelete = (accountDetials) => {\r\n    setDeleteLoading(true);\r\n    const confirm = window.confirm(\r\n      `Are you sure you want to delete ${accountDetials.DepositAccount}?`\r\n    );\r\n    if (confirm) {\r\n      toast.success(\"Deleting\", {\r\n        position: toast.POSITION.TOP_RIGHT,\r\n        toastId: \"deleteAccount\",\r\n      });\r\n      AccountDetailSrvice.deleteAccountDetailsById(accountDetials.Id)\r\n        .then(() => {})\r\n        .catch((e) => {\r\n          setAccountDetailDeleteError(e);\r\n          setDeleteLoading(false);\r\n        });\r\n    }\r\n  };\r\n  ///////////////////////////////////////////////////////////////////////////////\r\n  const [editAccountDetail, setEditAccountDetail] = useState({\r\n    //  Id: editAddresAccountDetailId,\r\n    CustomerId: \"\",\r\n    CompanyId: companyId,\r\n    DepositAccount: \"\",\r\n    DepositBalance: \"\",\r\n  });\r\n  const getAccountDetailId = (editAddresAccountDetailId) => {\r\n    AccountDetailSrvice.getAccountDetailById(editAddresAccountDetailId)\r\n      .then((res) => {\r\n        setEditAccountDetail({\r\n          ...editAccountDetail,\r\n          Id: editAddresAccountDetailId,\r\n          CompanyId: res.data.Result.CompanyId,\r\n          CustomerId: res.data.Result.CustomerId,\r\n          DepositAccount: res.data.Result.DepositAccount,\r\n          DepositBalance: res.data.Result.DepositBalance,\r\n        });\r\n      })\r\n      .catch((err) => {\r\n        if (err.response.data.StatusCode === 404) {\r\n          console.log(err.response.data.Message);\r\n        }\r\n      });\r\n  };\r\n  const updateAccountDetailById = (e) => {\r\n    e.preventDefault();\r\n    AccountDetailSrvice.updateAccountDetailById(\r\n      accountDetialId,\r\n      editAccountDetail\r\n    )\r\n      .then((response) => {\r\n        if (response.data.Code === 200) {\r\n          // getAccountDetial();\r\n          toast.success(\"Edited successfully\", {\r\n            position: toast.POSITION.TOP_RIGHT,\r\n            toastId: \"updateAccountDetailSuccess\",\r\n          });\r\n        }\r\n      })\r\n      .catch((e) => {\r\n        toast.error(\"Something went wrong\", {\r\n          position: toast.POSITION.TOP_RIGHT,\r\n          toastId: \"updateAccountDetailSuccess\",\r\n        });\r\n      });\r\n  };\r\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n  const [creditFacilityUtilizition, setCreditFacilityUtilizition] = useState(\r\n    []\r\n  );\r\n  const [creditPerformance, setCreditPerformance] = useState([]);\r\n  const [fCYInflowPerformance, setFCYInflowPerformance] = useState([]);\r\n  const [depositePerformance, SetDepositePerformance] = useState([]);\r\n  const [\r\n    deleteCreditFacilityUtilizitionError,\r\n    setCreditFacilityUtilizitionDeleteError,\r\n  ] = useState(null);\r\n  const [\r\n    CreditFacilityUtilizitionErrorLoading,\r\n    setCreditFacilityUtilizitionErrorLoading,\r\n  ] = useState(false);\r\n  const getCreditFacilityUtilizition1 = (accountDetialId) => {\r\n    setCreditFacilityUtilizitionErrorLoading(true);\r\n    setTimeout(() => {\r\n      CreditFacilityUtilizitionService.getCreditFacilityUtilizition(\r\n        accountDetialId\r\n      )\r\n        .then((response) => {\r\n          if (\r\n            response.data.Code === 200 ||\r\n            response.data.Message === \"Success\"\r\n          ) {\r\n            setCreditFacilityUtilizition(response.data.Result);\r\n            setCreditFacilityUtilizitionErrorLoading(false);\r\n          } else {\r\n            setCreditFacilityUtilizitionErrorLoading(false);\r\n            setError(\"Something went wrong\");\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          if (error.response.data.StatusCode === 404) {\r\n            setError(\"Credit Facility Utilizition not found\");\r\n            setCreditFacilityUtilizitionErrorLoading(false);\r\n          } else if (error.response.data.StatusCode === 400) {\r\n            setError(\"Something went wrong\");\r\n            setCreditFacilityUtilizitionErrorLoading(false);\r\n          } else if (error.response.data.StatusCode === 401) {\r\n            navigate(\"/login\");\r\n          } else if (error.response.data.StatusCode === 403) {\r\n            navigate(\"/login\");\r\n          }\r\n        });\r\n    }, 1000);\r\n  };\r\n  // useEffect(() => {\r\n  //   getCreditFacilityUtilizition();\r\n  // }, []);\r\n  ////////////////////////////////////////////////////////////////////////////////////////////////\r\n  const handleBack = () => {\r\n    alert(\"Handle Back\");\r\n  };\r\n  const handleSkip = () => {\r\n    alert(\"Handle Back\");\r\n  };\r\n  const handleNext = () => {\r\n    alert(\"Handle Next\");\r\n  };\r\n  const getCreditPerformance = (accountDetialId) => {\r\n    setCreditFacilityUtilizitionErrorLoading(true);\r\n    setTimeout(() => {\r\n      CreditPerformanceService.getCreditPerformance(accountDetialId)\r\n        .then((response) => {\r\n          if (\r\n            response.data.Code === 200 ||\r\n            response.data.Message === \"Success\"\r\n          ) {\r\n            setCreditPerformance(response.data.Result);\r\n            debugger;\r\n            setCreditFacilityUtilizitionErrorLoading(false);\r\n          } else {\r\n            setCreditFacilityUtilizitionErrorLoading(false);\r\n            setError(\"Something went wrong\");\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          if (error.response.data.StatusCode === 404) {\r\n            setError(\"Credit Performance not found\");\r\n            setCreditFacilityUtilizitionErrorLoading(false);\r\n          } else if (error.response.data.StatusCode === 400) {\r\n            setError(\"Something went wrong\");\r\n            setCreditFacilityUtilizitionErrorLoading(false);\r\n          } else if (error.response.data.StatusCode === 401) {\r\n            navigate(\"/login\");\r\n          } else if (error.response.data.StatusCode === 403) {\r\n            navigate(\"/login\");\r\n          }\r\n        });\r\n    }, 1000);\r\n  };\r\n  // useEffect(() => {\r\n  //   getCreditPerformance();\r\n  // }, []);\r\n  const getDepositePerformance = (accountDetialId) => {\r\n    setTimeout(() => {\r\n      DepositPerformanceService.getDepositePerformance(accountDetialId)\r\n        .then((response) => {\r\n          if (\r\n            response.data.Code === 200 ||\r\n            response.data.Message === \"Success\"\r\n          ) {\r\n            SetDepositePerformance(response.data.Result);\r\n          } else {\r\n            setError(\"Something went wrong\");\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          if (error.response.data.StatusCode === 404) {\r\n            setError(\"deposite Performance not found\");\r\n          } else if (error.response.data.StatusCode === 400) {\r\n            setError(\"Something went wrong\");\r\n          } else if (error.response.data.StatusCode === 401) {\r\n            navigate(\"/login\");\r\n          } else if (error.response.data.StatusCode === 403) {\r\n            navigate(\"/login\");\r\n          }\r\n        });\r\n    }, 1000);\r\n  };\r\n  // useEffect(() => {\r\n  //   getDepositePerformance();\r\n  // }, []);\r\n  const getFCYInflowPerformance = (accountDetialId) => {\r\n    setTimeout(() => {\r\n      FcyInflowPerformanceService.getFCYInflowPerformance(accountDetialId)\r\n        .then((response) => {\r\n          if (\r\n            response.data.Code === 200 ||\r\n            response.data.Message === \"Success\"\r\n          ) {\r\n            setFCYInflowPerformance(response.data.Result);\r\n          } else {\r\n            setError(\"Something went wrong\");\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          if (error.response.data.StatusCode === 404) {\r\n            setError(\"deposite Performance not found\");\r\n          } else if (error.response.data.StatusCode === 400) {\r\n            setError(\"Something went wrong\");\r\n          } else if (error.response.data.StatusCode === 401) {\r\n            navigate(\"/login\");\r\n          } else if (error.response.data.StatusCode === 403) {\r\n            navigate(\"/login\");\r\n          }\r\n        });\r\n    }, 1000);\r\n  };\r\n  useEffect(() => {\r\n    getFCYInflowPerformance();\r\n  }, []);\r\n  return (\r\n    <div className=\"flex\">\r\n      <CompanyNavigation />\r\n      <div className=\"px-4 py-3\">\r\n        <div className=\"flex flex-wrap\">\r\n          <div className=\"w-full\">\r\n            <div>\r\n              <h4 className=\"text-lg font-semibold eading-tight p-2\">\r\n                Account Details\r\n              </h4>\r\n              <EditAccountDetail\r\n                isAccountDetailsEditModalOpen={isAccountDetailsEditModalOpen}\r\n                handleAccountDetailsEditCloseModal={\r\n                  handleAccountDetailsEditCloseModal\r\n                }\r\n                updateAccountDetailsById={updateAccountDetailById}\r\n                editAccountDetail={editAccountDetail}\r\n                setEditAccountDetail={setEditAccountDetail}\r\n              />\r\n              <AddAccountDetail\r\n                newAccountDetials={newAccountDetials}\r\n                accountDetial={accountDetial}\r\n                handleInputChangeAccountDetial={handleInputChangeAccountDetial}\r\n                handleBack={handleBack}\r\n                handleSkip={handleSkip}\r\n                handleNext={handleNext}\r\n                saveAccountDetials={saveAccountDetials}\r\n              />\r\n              <ViewCreditFacilityUtilizition\r\n                isCompanySoleOtherBankModalOpen={\r\n                  isCreditFacilityUtilizitionModalOpen\r\n                }\r\n                handleCompanySoleOtherBankCloseModal={\r\n                  handleCreditFacilityUtilizitionCloseModal\r\n                }\r\n                handleCompanySoleOtherBankOpenModal={\r\n                  handleCreditFacilityUtilizitionOpenModal\r\n                }\r\n                creditFacilityUtilizition={creditFacilityUtilizition}\r\n                // soleID={taxId}\r\n                companyId={companyId}\r\n                accountDetialId={accountDetialId}\r\n              />\r\n              <ViewCreditPerformance\r\n                isCreditPerformanceModalOpen={isCreditPerformanceModalOpen}\r\n                handleCreditPerformanceCloseModal={\r\n                  handleCreditPerformanceCloseModal\r\n                }\r\n                setIsCreditPerformanceModalOpen={\r\n                  setIsCreditPerformanceModalOpen\r\n                }\r\n                accountDetialId={accountDetialId}\r\n                creditPerformance={creditPerformance}\r\n              />\r\n              <ViewDepositPefrormance\r\n                isDepositePerformanceModalOpen={isDepositePerformanceModalOpen}\r\n                handleDepositePerformanceCloseModal={\r\n                  handleDepositePerformanceCloseModal\r\n                }\r\n                setIDepositePerformanceModalOpen={\r\n                  setIsDepositePerformanceModalOpen\r\n                }\r\n                accountDetialId={accountDetialId}\r\n                depositePerformance={depositePerformance}\r\n              />\r\n              <ViewFCYInflowPefrormance\r\n                isFCYInflowPerformanceModalOpen={\r\n                  isFCYInflowPerformanceModalOpen\r\n                }\r\n                handleFCYInflowPerformanceCloseModal={\r\n                  handleFCYInflowPerformanceCloseModal\r\n                }\r\n                setIFCYInflowPerformanceModalOpen={\r\n                  setIsFCYInflowPerformanceModalOpen\r\n                }\r\n                accountDetialId={accountDetialId}\r\n                fCYInflowPerformance={fCYInflowPerformance}\r\n              />\r\n              <ToastContainer />\r\n              <div>\r\n                {error && <p className=\"text-red-500\">{error}</p>}\r\n                {!error && AccountDetialErrorLoading ? (\r\n                  <span>\r\n                    <FaSpinner\r\n                      className=\"animate-spin rounded-full h-6 w-6 text-purple-600\"\r\n                      fontSize=\"small\"\r\n                      data-toggle=\"tooltip\"\r\n                      title=\"Click it to sign in\"\r\n                    />\r\n                    Loading...\r\n                  </span>\r\n                ) : (\r\n                  !error &&\r\n                  !AccountDetialErrorLoading && (\r\n                    <div className=\"overflow-x-auto\">\r\n                      <table className=\"min-w-full table table-bordered table-striped bg-purple-100\">\r\n                        <thead>\r\n                          <tr className=\"bg-purple-200\">\r\n                            <th className=\"px-2 py-4 text-base\"> Customer Id </th>\r\n                            <th className=\"px-2 py-4 text-base\"> Deposit Account </th>\r\n                            <th className=\"px-2 py-4 text-base\"> Deposit Balance </th>\r\n                            <th className=\"px-2 py-4 text-base\"> Action </th>\r\n                          </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                          {accountDetial.length === 0 ? (\r\n                            <p className=\"text-red-600 p-4 text-base\">Data not found</p>\r\n                          ) : (\r\n                            accountDetial.map((details, index) => (\r\n                              <tr\r\n                                key={index}\r\n                                className=\"bg-white\r\n                    border-b border-purple-200\"\r\n                              >\r\n                                {/* <td className=\"p-2\">{details.Id}</td> */}\r\n                                <td className=\"p-2\">{details.CustomerId}</td>\r\n                                <td className=\"p-2\">\r\n                                  {details.DepositAccount}\r\n                                </td>\r\n                                <td className=\"p-2\">\r\n                                  {details.DepositBalance}\r\n                                </td>\r\n                                <td className=\"p-2\">\r\n                                  <>\r\n                                    <LoanIconButton\r\n                                      style={{ color: \"green\" }}\r\n                                      text=\" Credit Facility Utilization\"\r\n                                      onClick={() => {\r\n                                        handleCreditFacilityUtilizitionOpenModal();\r\n                                        getCreditFacilityUtilizition1(\r\n                                          details.Id\r\n                                        );\r\n                                        setAccountDetialId(details.Id);\r\n                                      }}\r\n                                    >\r\n                                      <ToastContainer />\r\n                                    </LoanIconButton>\r\n                                  </>\r\n                                </td>\r\n                                <td>\r\n                                  <>\r\n                                    <LoanIconButton\r\n                                      style={{ color: \"green\" }}\r\n                                      text=\"Credit performance\"\r\n                                      onClick={() => {\r\n                                        handleCreditPerformanceOpenModal();\r\n                                        getCreditPerformance(details.Id);\r\n                                        setAccountDetialId(details.Id);\r\n                                      }}\r\n                                    >\r\n                                      <ToastContainer />\r\n                                    </LoanIconButton>\r\n                                  </>\r\n                                </td>\r\n                                <td>\r\n                                  <>\r\n                                    <LoanIconButton\r\n                                      style={{ color: \"green\" }}\r\n                                      text=\"   FCY Inflow Pefrormance\"\r\n                                      onClick={() => {\r\n                                        handleFCYInflowPerformanceOpenModal();\r\n                                        getFCYInflowPerformance(details.Id);\r\n                                        setAccountDetialId(details.Id);\r\n                                      }}\r\n                                    >\r\n                                      <ToastContainer />\r\n                                    </LoanIconButton>\r\n                                  </>\r\n                                </td>\r\n                                <td>\r\n                                  <>\r\n                                    <LoanIconButton\r\n                                      style={{ color: \"green\" }}\r\n                                      text=\" Deposite performance\"\r\n                                      onClick={() => {\r\n                                        handleDepositePerformanceOpenModal();\r\n                                        getDepositePerformance(details.Id);\r\n                                        setAccountDetialId(details.Id);\r\n                                      }}\r\n                                    >\r\n                                      <ToastContainer />\r\n                                    </LoanIconButton>\r\n                                  </>\r\n                                </td>\r\n                                <td>\r\n                                  <>\r\n                                    <LoanIconButton\r\n                                      style={{ color: \"green\" }}\r\n                                      icon={<MdModeEdit />}\r\n                                      text=\"Edit\"\r\n                                      onClick={() => {\r\n                                        handleAccountDetailsEditOpenModal();\r\n                                        getAccountDetailId(details.Id);\r\n                                        setAccountDetialId(details.Id);\r\n                                      }}\r\n                                    />\r\n                                  </>\r\n                                </td>\r\n                              </tr>\r\n                            ))\r\n                          )}\r\n                        </tbody>\r\n                      </table>\r\n                    </div>\r\n                  )\r\n                )}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default FetchAccountDetial;\r\n","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\accountDetail\\AccountDetailSrvice.js",[],[],"C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\accountDetail\\creditPerformance\\CreditPerformanceService.js",[],[],"C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\accountDetail\\EditAccountDetail.jsx",["1408","1409","1410","1411"],[],"import {\r\n    TextField,\r\n    FormControl,\r\n    InputLabel,\r\n    Select,\r\n    MenuItem,\r\n  } from \"@mui/material\";\r\n  import CompanyModal from \"../Common/CompanyModal\";\r\n  const EditAccountDetail = ({\r\n    isAccountDetailsEditModalOpen,\r\n    handleAccountDetailsEditCloseModal,\r\n    updateAccountDetailsById,\r\n    editAccountDetail,\r\n    setEditAccountDetail\r\n  }) => {\r\n    return (\r\n      <CompanyModal\r\n        isOpen={isAccountDetailsEditModalOpen}\r\n        onClose={handleAccountDetailsEditCloseModal}\r\n        title=\"Modify account detail information\"\r\n      >\r\n        <div>\r\n          <form onSubmit={updateAccountDetailsById}>\r\n            <div className=\"grid grid-cols-1 gap-4 submit-form\">\r\n              <div className=\"submit-form \">\r\n                <div className=\"relative center justify-center flex-1 w-full max-w-full grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\">\r\n                    <TextField\r\n                    id=\"CustomerId\"\r\n                    label=\"CustomerId\"\r\n                    variant=\"standard\"\r\n                    color=\"secondary\"\r\n                    size=\"\"\r\n                    required\r\n                    value={editAccountDetail.CustomerId}\r\n                    onChange={(e) =>\r\n                        setEditAccountDetail({\r\n                        ...editAccountDetail,\r\n                        CustomerId: e.target.value,\r\n                      })\r\n                    }\r\n                    name=\"CustomerId\"\r\n                  />\r\n                  <TextField\r\n                    id=\"DepositAccount\"\r\n                    label=\"DepositAccount\"\r\n                    variant=\"standard\"\r\n                    color=\"secondary\"\r\n                    size=\"\"\r\n                    required\r\n                    value={editAccountDetail.DepositAccount}\r\n                    onChange={(e) =>\r\n                        setEditAccountDetail({\r\n                        ...editAccountDetail,\r\n                        DepositAccount: e.target.value,\r\n                      })\r\n                    }\r\n                    name=\"DepositAccount\"\r\n                  />\r\n                   <TextField\r\n                    id=\"DepositBalance\"\r\n                    label=\"DepositBalance\"\r\n                    variant=\"standard\"\r\n                    color=\"secondary\"\r\n                    size=\"\"\r\n                    required\r\n                    value={editAccountDetail.DepositBalance}\r\n                    onChange={(e) =>\r\n                        setEditAccountDetail({\r\n                        ...editAccountDetail,\r\n                        DepositBalance: e.target.value,\r\n                      })\r\n                    }\r\n                    name=\"DepositBalance\"\r\n                  />\r\n                </div>\r\n                <div className=\"flex justify-center items-center\">\r\n                  <button\r\n                    type=\"submit\"\r\n                    className=\"bg-[purple] hover:bg-purple-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline \"\r\n                  >\r\n                    Update\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </CompanyModal>\r\n    );\r\n  };  \r\n  export default EditAccountDetail;\r\n  ","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\accountDetail\\creditFacilityUtilizition\\CreditFacilityUtilizitionService.js",[],[],"C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\accountDetail\\fcyInflowPerformance\\FcyInflowPerformanceService.js",[],[],"C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\accountDetail\\depositPerformance\\DepositPerformanceService.js",[],[],"C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\accountDetail\\creditFacilityUtilizition\\ViewCreditFacilityUtilizition.jsx",["1412","1413","1414","1415","1416","1417","1418","1419","1420","1421","1422","1423","1424","1425"],[],"import {\r\n  TextField,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n} from \"@mui/material\";\r\nimport { IconName } from \"react-icons/fa\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { FaSpinner } from \"react-icons/fa\";\r\nimport { BiSkipNext } from \"react-icons/bi\";\r\nimport { MdModeEdit } from \"react-icons/md\";\r\nimport { IoTrashOutline } from \"react-icons/io5\";\r\nimport { useParams, useNavigate } from \"react-router-dom\";\r\nimport CompanyNavigation from \"../../../Common/CompanyNavigation\";\r\nimport LoanIconButton from \"../../../Common/LoanIconButton\";\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\nimport CompanyModal from \"../../Common/CompanyModal\";\r\nimport { Link } from \"react-router-dom\";\r\nimport CommonServices from \"../../Common/CommonServices\";\r\nimport AddCreditFacilityUtilizition from \"./AddCreditFacilityUtilizition\";\r\nimport ViewPreshipmentFacility from \"./preshipmentFacility/ViewPreshipmentFacility\";\r\nimport CreditFacilityUtilizitionService from \"./CreditFacilityUtilizitionService\";\r\nimport PreshipmentFacilityService from \"./preshipmentFacility/PreshipmentFacilityService\";\r\nimport OverDraftFacilityService from \"./overDraftFacility/OverDraftFacilityService\";\r\nimport ViewOverDraftFacility from \"./overDraftFacility/ViewOverDraftFacility\";\r\nimport LCFacilityService from \"./LCFacility/LCFacilityService\";\r\nimport ViewLCFacility from \"./LCFacility/ViewLCFacility\";\r\nimport LGFacilityService from \"./LGFacility/LGFacilityService\";\r\nimport ViewLGFacility from \"./LGFacility/ViewLGFacility\";\r\nimport TermLoanService from \"./TermLoan/TermLoanService\";\r\nimport ViewTermLoan from \"./TermLoan/ViewTermLoan\";\r\nimport MerchandiseFacilityService from \"./merchandiseFacility/MerchandiseFacilityService\";\r\nimport ViewMerchandiseFacility from \"./merchandiseFacility/ViewMerchandiseFacility\";\r\nconst ViewCreditFacilityUtilizition = ({\r\n  isCompanySoleOtherBankModalOpen,\r\n  handleCompanySoleOtherBankCloseModal,\r\n  creditFacilityUtilizition,\r\n  accountDetialId,\r\n}) => {\r\n  const [soleAndPartnershipErrorLoading, setSoleAndPartnershipErrorLoading] =\r\n    useState(false);\r\n  const [\r\n    CreditFacilityUtilizitionErrorLoading,\r\n    setCreditFacilityUtilizitionErrorLoading,\r\n  ] = useState(false);\r\n  const navigate = useNavigate();\r\n  const { companyId } = useParams();\r\n  const [loanTypeId, setLoanTypeId] = useState([]);\r\n  const [creditFacilityUtilizitionId, setCreditFacilityUtilizitionId] =\r\n    useState([]);\r\n  const [deleteLoading, setDeleteLoading] = useState(false);\r\n  const [\r\n    deleteCreditFacilityUtilizitionError,\r\n    setCreditFacilityUtilizitionDeleteError,\r\n  ] = useState(null);\r\n  const [error, setError] = useState(null);\r\n\r\n  const [\r\n    isCreditFacilityUtilizitionEditModalOpen,\r\n    setIsCreditFacilityUtilizitionEditModalOpen,\r\n  ] = useState(false);\r\n  function handleCreditFacilityUtilizitionEditOpenModal() {\r\n    setIsCreditFacilityUtilizitionEditModalOpen(true);\r\n  }\r\n  function handleCreditFacilityUtilizitionEditCloseModal() {\r\n    setIsCreditFacilityUtilizitionEditModalOpen(false);\r\n  }\r\n  // function handleCreditFacilityUtilizitionCloseModal() {\r\n  //   setIsCreditFacilityUtilizitionModalOpen(false);\r\n  // }\r\n  // function handleCreditFacilityUtilizitionOpenModal() {\r\n  //   setIsCreditFacilityUtilizitionModalOpen(true);\r\n  // }\r\n  function handleCreditFacilityUtilizitionEditCloseModal() {\r\n    setIsCreditFacilityUtilizitionEditModalOpen(false);\r\n  }\r\n  const handleInputChangeCreditFacilityUtilizition = (event) => {\r\n    const { name, value } = event.target;\r\n    setCreditFacilityUtilizitions({\r\n      ...creditFacilityUtilizitions,\r\n      [name]: value,\r\n    });\r\n  };\r\n  const initialCreditFacilityUtilizitionState = {\r\n    Id: null,\r\n    LoanTypeId: \"\",\r\n    LoanAccount: \"\",\r\n    BorrowingRshipLength: \"\",\r\n  };\r\n  const [creditFacilityUtilizitions, setCreditFacilityUtilizitions] = useState(\r\n    initialCreditFacilityUtilizitionState\r\n  );\r\n  const newCreditFacilityUtilizition = () => {\r\n    setCreditFacilityUtilizitions(initialCreditFacilityUtilizitionState);\r\n    // setSubmitted(false);\r\n  };\r\n  const saveCreditFacilityUtilizition = () => {\r\n    var data = {\r\n      LoanTypeId: loanTypeId,\r\n      LoanAccount: creditFacilityUtilizitions.LoanAccount,\r\n      BorrowingRshipLength: creditFacilityUtilizitions.BorrowingRshipLength,\r\n    };\r\n    CreditFacilityUtilizitionService.addCreditFacilityUtilizition(\r\n      data,\r\n      accountDetialId\r\n    )\r\n      .then((response) => {\r\n        setCreditFacilityUtilizitions({\r\n          Id: response.data.Id,\r\n          LoanTypeId: response.data.LoanTypeId,\r\n          LoanAccount: response.data.LoanAccount,\r\n          BorrowingRshipLength: response.data.BorrowingRshipLength,\r\n        });\r\n        if (response.data.Code === 200) {\r\n          setCreditFacilityUtilizitions(initialCreditFacilityUtilizitionState);\r\n          console.log(response.data);\r\n          // setHoldId(response.data.Result.Id);\r\n          creditFacilityUtilizition();\r\n          toast.success(\"Added successfully\", {\r\n            position: toast.POSITION.TOP_RIGHT,\r\n            toastId: \"CreditFacilityUtilizition\",\r\n          });\r\n        }\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n  const handleDelete = (creditFacilityUtilizitions) => {\r\n    setDeleteLoading(true);\r\n    const confirm = window.confirm(\r\n      `Are you sure you want to delete ${creditFacilityUtilizitions.LoanAccount}?`\r\n    );\r\n    if (confirm) {\r\n      toast.success(\"Deleting\", {\r\n        position: toast.POSITION.TOP_RIGHT,\r\n        toastId: \"deleteCreditFacilityUtilizition\",\r\n      });\r\n      CreditFacilityUtilizitionService.deleteCreditFacilityUtilizitionsById(\r\n        creditFacilityUtilizitions.Id\r\n      )\r\n        .then(() => {\r\n          creditFacilityUtilizition((previousData) =>\r\n            previousData.filter(\r\n              (comp) => comp.Id !== creditFacilityUtilizitions.Id\r\n            )\r\n          );\r\n        })\r\n        .catch((e) => {\r\n          setCreditFacilityUtilizitionDeleteError(e);\r\n          setDeleteLoading(false);\r\n        });\r\n    }\r\n  };\r\n  const [editCreditFacilityUtilizition, setEditCreditFacilityUtilizition] =\r\n    useState({\r\n      //  Id: editAddresAccountDetailId,\r\n      LoanTypeId: \"\",\r\n      LoanAccount: \"\",\r\n      BorrowingRshipLength: \"\",\r\n    });\r\n  const getCreditFacilityUtilizitionId = (editCreditFacilityUtilizitionId) => {\r\n    CreditFacilityUtilizitionService.getCreditFacilityUtilizitionById(\r\n      editCreditFacilityUtilizitionId\r\n    )\r\n      .then((res) => {\r\n        setEditCreditFacilityUtilizition({\r\n          ...editCreditFacilityUtilizition,\r\n          Id: editCreditFacilityUtilizitionId,\r\n          LoanTypeId: res.data.Result.LoanTypeId,\r\n          LoanAccount: res.data.Result.LoanAccount,\r\n          BorrowingRshipLength: res.data.Result.BorrowingRshipLength,\r\n        });\r\n      })\r\n      .catch((err) => {\r\n        if (err.response.data.StatusCode === 404) {\r\n          console.log(err.response.data.Message);\r\n        }\r\n      });\r\n  };\r\n  const updateCreditFacilityUtilizitionById = (e) => {\r\n    e.preventDefault();\r\n    CreditFacilityUtilizitionService.updateCreditFacilityUtilizitionById(\r\n      creditFacilityUtilizitionId,\r\n      editCreditFacilityUtilizition\r\n    )\r\n      .then((response) => {\r\n        if (response.data.Code === 200) {\r\n          creditFacilityUtilizition();\r\n          toast.success(\"Edited successfully\", {\r\n            position: toast.POSITION.TOP_RIGHT,\r\n            toastId: \"updateCreditFacilityUtilizitionSuccess\",\r\n          });\r\n        }\r\n      })\r\n      .catch((e) => {\r\n        toast.error(\"Something went wrong\", {\r\n          position: toast.POSITION.TOP_RIGHT,\r\n          toastId: \"updateCreditFacilityUtilizitionSuccess\",\r\n        });\r\n      });\r\n  };\r\n\r\n  const [loanTypeIdForCreditUtilization, setLoanTypeIdForCreditUtilization] =\r\n    useState([]);\r\n  const getLoanType = () => {\r\n    setTimeout(() => {\r\n      CommonServices.getLoanType()\r\n        .then((response) => {\r\n          if (\r\n            response.data.Code === 200 ||\r\n            response.data.Message === \"Success\"\r\n          ) {\r\n            setLoanTypeIdForCreditUtilization(response.data.Result);\r\n            setCreditFacilityUtilizitionErrorLoading(false);\r\n          } else {\r\n            setCreditFacilityUtilizitionErrorLoading(false);\r\n            setError(\"Something went wrong\");\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          if (error.response.data.StatusCode === 404) {\r\n            setError(\"Credit Facility Utilizition not found\");\r\n            setCreditFacilityUtilizitionErrorLoading(false);\r\n          } else if (error.response.data.StatusCode === 400) {\r\n            setError(\"Something went wrong\");\r\n            setCreditFacilityUtilizitionErrorLoading(false);\r\n          } else if (error.response.data.StatusCode === 401) {\r\n            navigate(\"/login\");\r\n          } else if (error.response.data.StatusCode === 403) {\r\n            navigate(\"/login\");\r\n          }\r\n        });\r\n    }, 1000);\r\n  };\r\n  useEffect(() => {\r\n    getLoanType();\r\n  }, []);\r\n\r\n  const [isPreshipmentFacilityModalOpen, setIsPreshipmentFacilityModalOpen] =\r\n    useState(false);\r\n  function handlePreshipmentFacilityOpenModal() {\r\n    setIsPreshipmentFacilityModalOpen(true);\r\n  }\r\n  function handlePreshipmentFacilityCloseModal() {\r\n    setIsPreshipmentFacilityModalOpen(false);\r\n  }\r\n  const [preshipmentFacility, setPreshipmentFacility] = useState([]);\r\n  const getPreshipmentFacility = (Id) => {\r\n    setTimeout(() => {\r\n      PreshipmentFacilityService.getAllPreshipmentByUtilizationId(Id)\r\n        .then((response) => {\r\n          if (\r\n            response.data.Code === 200 ||\r\n            response.data.Message === \"Success\"\r\n          ) {\r\n            setPreshipmentFacility(response.data.Result);\r\n            setCreditFacilityUtilizitionErrorLoading(false);\r\n          } else {\r\n            setCreditFacilityUtilizitionErrorLoading(false);\r\n            setError(\"Something went wrong\");\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          if (error.response.data.StatusCode === 404) {\r\n            setError(\"Credit Facility Utilizition not found\");\r\n            setCreditFacilityUtilizitionErrorLoading(false);\r\n          } else if (error.response.data.StatusCode === 400) {\r\n            setError(\"Something went wrong\");\r\n            setCreditFacilityUtilizitionErrorLoading(false);\r\n          } else if (error.response.data.StatusCode === 401) {\r\n            navigate(\"/login\");\r\n          } else if (error.response.data.StatusCode === 403) {\r\n            navigate(\"/login\");\r\n          }\r\n        });\r\n    }, 1000);\r\n  };\r\n  //over draft start\r\n  const [isOverDraftFacilityModalOpen, setIsOverDraftFacilityModalOpen] =\r\n    useState(false);\r\n  function handleOverDraftFacilityOpenModal() {\r\n    setIsOverDraftFacilityModalOpen(true);\r\n  }\r\n  function handleOverDraftFacilityCloseModal() {\r\n    setIsOverDraftFacilityModalOpen(false);\r\n  }\r\n  const [overDraftFacility, setOverDraftFacility] = useState([]);\r\n  const getOverDraftFacility = (Id) => {\r\n    setTimeout(() => {\r\n      OverDraftFacilityService.getAllOverDraftByUtilizationId(Id)\r\n        .then((response) => {\r\n          if (\r\n            response.data.Code === 200 ||\r\n            response.data.Message === \"Success\"\r\n          ) {\r\n            setOverDraftFacility(response.data.Result);\r\n            setCreditFacilityUtilizitionErrorLoading(false);\r\n          } else {\r\n            setCreditFacilityUtilizitionErrorLoading(false);\r\n            setError(\"Something went wrong\");\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          if (error.response.data.StatusCode === 404) {\r\n            setError(\"Credit Facility Utilizition not found\");\r\n            setCreditFacilityUtilizitionErrorLoading(false);\r\n          } else if (error.response.data.StatusCode === 400) {\r\n            setError(\"Something went wrong\");\r\n            setCreditFacilityUtilizitionErrorLoading(false);\r\n          } else if (error.response.data.StatusCode === 401) {\r\n            navigate(\"/login\");\r\n          } else if (error.response.data.StatusCode === 403) {\r\n            navigate(\"/login\");\r\n          }\r\n        });\r\n    }, 1000);\r\n  };\r\n  //LC Facility\r\n  const [isLCFacilityModalOpen, setIsLCFacilityModalOpen] = useState(false);\r\n  function handleLCFacilityOpenModal() {\r\n    setIsLCFacilityModalOpen(true);\r\n  }\r\n  function handleLCFacilityCloseModal() {\r\n    setIsLCFacilityModalOpen(false);\r\n  }\r\n  const [LCFacility, setLCFacility] = useState([]);\r\n  const getLCFacility = (Id) => {\r\n    setTimeout(() => {\r\n      LCFacilityService.getAllLCByUtilizationId(Id)\r\n        .then((response) => {\r\n          if (\r\n            response.data.Code === 200 ||\r\n            response.data.Message === \"Success\"\r\n          ) {\r\n            setLCFacility(response.data.Result);\r\n            setCreditFacilityUtilizitionErrorLoading(false);\r\n          } else {\r\n            setCreditFacilityUtilizitionErrorLoading(false);\r\n            setError(\"Something went wrong\");\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          if (error.response.data.StatusCode === 404) {\r\n            setError(\"Credit Facility Utilizition not found\");\r\n            setCreditFacilityUtilizitionErrorLoading(false);\r\n          } else if (error.response.data.StatusCode === 400) {\r\n            setError(\"Something went wrong\");\r\n            setCreditFacilityUtilizitionErrorLoading(false);\r\n          } else if (error.response.data.StatusCode === 401) {\r\n            navigate(\"/login\");\r\n          } else if (error.response.data.StatusCode === 403) {\r\n            navigate(\"/login\");\r\n          }\r\n        });\r\n    }, 1000);\r\n  };\r\n  //LG Facility\r\n  const [isLGFacilityModalOpen, setIsLGFacilityModalOpen] = useState(false);\r\n  function handleLGFacilityOpenModal() {\r\n    setIsLGFacilityModalOpen(true);\r\n  }\r\n  function handleLGFacilityCloseModal() {\r\n    setIsLGFacilityModalOpen(false);\r\n  }\r\n  const [LGFacility, setLGFacility] = useState([]);\r\n  const getLGFacility = (Id) => {\r\n    setTimeout(() => {\r\n      LGFacilityService.getAllLGByUtilizationId(Id)\r\n        .then((response) => {\r\n          if (\r\n            response.data.Code === 200 ||\r\n            response.data.Message === \"Success\"\r\n          ) {\r\n            setLGFacility(response.data.Result);\r\n            setCreditFacilityUtilizitionErrorLoading(false);\r\n          } else {\r\n            setCreditFacilityUtilizitionErrorLoading(false);\r\n            setError(\"Something went wrong\");\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          if (error.response.data.StatusCode === 404) {\r\n            setError(\"Credit Facility Utilizition not found\");\r\n            setCreditFacilityUtilizitionErrorLoading(false);\r\n          } else if (error.response.data.StatusCode === 400) {\r\n            setError(\"Something went wrong\");\r\n            setCreditFacilityUtilizitionErrorLoading(false);\r\n          } else if (error.response.data.StatusCode === 401) {\r\n            navigate(\"/login\");\r\n          } else if (error.response.data.StatusCode === 403) {\r\n            navigate(\"/login\");\r\n          }\r\n        });\r\n    }, 1000);\r\n  };\r\n  //Term loan\r\n  const [isTermLoanModalOpen, setIsTermLoanModalOpen] = useState(false);\r\n  function handleTermLoanOpenModal() {\r\n    setIsTermLoanModalOpen(true);\r\n  }\r\n  function handleTermLoanCloseModal() {\r\n    setIsTermLoanModalOpen(false);\r\n  }\r\n  const [termLoan, setTermLoan] = useState([]);\r\n  const getTermLoan = (Id) => {\r\n    setTimeout(() => {\r\n      TermLoanService.getAllTermLoanByUtilizationId(Id)\r\n        .then((response) => {\r\n          if (\r\n            response.data.Code === 200 ||\r\n            response.data.Message === \"Success\"\r\n          ) {\r\n            setTermLoan(response.data.Result);\r\n            setCreditFacilityUtilizitionErrorLoading(false);\r\n          } else {\r\n            setCreditFacilityUtilizitionErrorLoading(false);\r\n            setError(\"Something went wrong\");\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          if (error.response.data.StatusCode === 404) {\r\n            setError(\"Credit Facility Utilizition not found\");\r\n            setCreditFacilityUtilizitionErrorLoading(false);\r\n          } else if (error.response.data.StatusCode === 400) {\r\n            setError(\"Something went wrong\");\r\n            setCreditFacilityUtilizitionErrorLoading(false);\r\n          } else if (error.response.data.StatusCode === 401) {\r\n            navigate(\"/login\");\r\n          } else if (error.response.data.StatusCode === 403) {\r\n            navigate(\"/login\");\r\n          }\r\n        });\r\n    }, 1000);\r\n  };\r\n  //merchandise\r\n  const [isMerchandiseFacilityModalOpen, setIsMerchandiseFacilityModalOpen] =\r\n    useState(false);\r\n  function handleMerchandiseFacilityOpenModal() {\r\n    setIsMerchandiseFacilityModalOpen(true);\r\n  }\r\n  function handleMerchandiseFacilityCloseModal() {\r\n    setIsMerchandiseFacilityModalOpen(false);\r\n  }\r\n  const [MerchandiseFacility, setMerchandiseFacility] = useState([]);\r\n  const getMerchandiseFacility = (Id) => {\r\n    setTimeout(() => {\r\n      MerchandiseFacilityService.getAllMerchandiseByUtilizationId(Id)\r\n        .then((response) => {\r\n          if (\r\n            response.data.Code === 200 ||\r\n            response.data.Message === \"Success\"\r\n          ) {\r\n            setMerchandiseFacility(response.data.Result);\r\n            setCreditFacilityUtilizitionErrorLoading(false);\r\n          } else {\r\n            setCreditFacilityUtilizitionErrorLoading(false);\r\n            setError(\"Something went wrong\");\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          if (error.response.data.StatusCode === 404) {\r\n            setError(\"Credit Facility Utilizition not found\");\r\n            setCreditFacilityUtilizitionErrorLoading(false);\r\n          } else if (error.response.data.StatusCode === 400) {\r\n            setError(\"Something went wrong\");\r\n            setCreditFacilityUtilizitionErrorLoading(false);\r\n          } else if (error.response.data.StatusCode === 401) {\r\n            navigate(\"/login\");\r\n          } else if (error.response.data.StatusCode === 403) {\r\n            navigate(\"/login\");\r\n          }\r\n        });\r\n    }, 1000);\r\n  };\r\n  return (\r\n    <div>\r\n      <CompanyModal\r\n        isOpen={isCompanySoleOtherBankModalOpen}\r\n        onClose={handleCompanySoleOtherBankCloseModal}\r\n        title=\" Credit Utilazition\"\r\n      >\r\n        {/* <div className=\"px-4 py-3\"> */}\r\n        <div className=\"flex items-top justify-top h-screen\">\r\n          {/* <div className=\"bg-gray-100 flex items-center justify-center h-screen\"> */}\r\n          <div>\r\n            <div>\r\n              <h4 className=\"text-lg font-semibold eading-tight p-2\"></h4>\r\n              <ViewMerchandiseFacility\r\n                isMerchandiseFacilityModalOpen={isMerchandiseFacilityModalOpen}\r\n                handleMerchandiseFacilityOpenModal={\r\n                  handleMerchandiseFacilityOpenModal\r\n                }\r\n                handleMerchandiseFacilityCloseModal={\r\n                  handleMerchandiseFacilityCloseModal\r\n                }\r\n                MerchandiseFacility={MerchandiseFacility}\r\n                creditFacilityUtilizitionId={creditFacilityUtilizitionId}\r\n              />\r\n              <ViewTermLoan\r\n                isTermLoanModalOpen={isTermLoanModalOpen}\r\n                handleTermLoanOpenModal={handleTermLoanOpenModal}\r\n                handleTermLoanCloseModal={handleTermLoanCloseModal}\r\n                termLoan={termLoan}\r\n                creditFacilityUtilizitionId={creditFacilityUtilizitionId}\r\n              />\r\n              <ViewLGFacility\r\n                isLGFacilityModalOpen={isLGFacilityModalOpen}\r\n                handleLGFacilityOpenModal={handleLGFacilityOpenModal}\r\n                handleLGFacilityCloseModal={handleLGFacilityCloseModal}\r\n                LGFacility={LGFacility}\r\n                creditFacilityUtilizitionId={creditFacilityUtilizitionId}\r\n              />\r\n              <ViewLCFacility\r\n                isLCFacilityModalOpen={isLCFacilityModalOpen}\r\n                handleLCFacilityOpenModal={handleLCFacilityOpenModal}\r\n                handleLCFacilityCloseModal={handleLCFacilityCloseModal}\r\n                LCFacility={LCFacility}\r\n                creditFacilityUtilizitionId={creditFacilityUtilizitionId}\r\n              />\r\n              <ViewOverDraftFacility\r\n                isOverDraftFacilityModalOpen={isOverDraftFacilityModalOpen}\r\n                handleOverDraftFacilityOpenModal={\r\n                  handleOverDraftFacilityOpenModal\r\n                }\r\n                handleOverDraftFacilityCloseModal={\r\n                  handleOverDraftFacilityCloseModal\r\n                }\r\n                overDraftFacility={overDraftFacility}\r\n                creditFacilityUtilizitionId={creditFacilityUtilizitionId}\r\n              />\r\n              <ViewPreshipmentFacility\r\n                isPreshipmentFacilityModalOpen={isPreshipmentFacilityModalOpen}\r\n                handlePreshipmentFacilityCloseModal={\r\n                  handlePreshipmentFacilityCloseModal\r\n                }\r\n                setIsPreshipmentFacilityModalOpen={\r\n                  setIsPreshipmentFacilityModalOpen\r\n                }\r\n                creditFacilityUtilizitionId={creditFacilityUtilizitionId}\r\n                preshipmentFacility={preshipmentFacility}\r\n              />\r\n              <AddCreditFacilityUtilizition\r\n                newAccountDetials={newCreditFacilityUtilizition}\r\n                creditFacilityUtilizition={creditFacilityUtilizition}\r\n                handleInputChangeCreditFacilityUtilizition={\r\n                  handleInputChangeCreditFacilityUtilizition\r\n                }\r\n                setLoanTypeId={setLoanTypeId}\r\n                loanTypeIdForCreditUtilization={loanTypeIdForCreditUtilization}\r\n                saveCreditFacilityUtilizition={saveCreditFacilityUtilizition}\r\n              />\r\n              <div>\r\n                {error && <p className=\"text-red-500\">{error}</p>}\r\n                {!error && soleAndPartnershipErrorLoading ? (\r\n                  <span>\r\n                    <FaSpinner\r\n                      className=\"animate-spin rounded-full h-6 w-6 text-purple-600\"\r\n                      fontSize=\"small\"\r\n                      data-toggle=\"tooltip\"\r\n                      title=\"Click it to sign in\"\r\n                    />\r\n                    Loading...\r\n                  </span>\r\n                ) : (\r\n                  !error &&\r\n                  !soleAndPartnershipErrorLoading && (\r\n                    <div className=\"overflow-x-auto\">\r\n                      <table className=\"min-w-full table table-bordered table-striped bg-purple-100\">\r\n                        <thead>\r\n                          <tr className=\"bg-purple-200\">\r\n                            <th className=\"px-2 py-4 text-base\"> Loan Type </th>\r\n                            <th className=\"px-2 py-4 text-base\">\r\n                              {\" \"}\r\n                              Loan Account{\" \"}\r\n                            </th>\r\n                            <th className=\"px-2 py-4 text-base\">\r\n                              {\" \"}\r\n                              Borrowing Rship Length{\" \"}\r\n                            </th>\r\n                            <th className=\"px-2 py-4 text-base\"> Action </th>\r\n                          </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                          {creditFacilityUtilizition.length === 0 ? (\r\n                            <p className=\"text-red-600 p-4\">Data not found</p>\r\n                          ) : (\r\n                            creditFacilityUtilizition.map(\r\n                              (FacilityUtilizitions, index) => (\r\n                                <tr\r\n                                  key={index}\r\n                                  className=\"bg-white\r\n                    border-b border-purple-200\"\r\n                                >\r\n                                  {/* <td className=\"p-2\">\r\n                                      {FacilityUtilizitions.Id}\r\n                                    </td> */}\r\n                                  <td className=\"p-2\">\r\n                                    {FacilityUtilizitions.LoanType}\r\n                                  </td>\r\n                                  <td className=\"p-2\">\r\n                                    {FacilityUtilizitions.LoanAccount}\r\n                                  </td>\r\n                                  <td className=\"p-2\">\r\n                                    {FacilityUtilizitions.BorrowingRshipLength}\r\n                                  </td>\r\n\r\n                                  <td className=\"p-2\">\r\n                                    <>\r\n                                      <LoanIconButton\r\n                                        style={{ color: \"green\" }}\r\n                                        text=\" Merchandise facility\"\r\n                                        onClick={() => {\r\n                                          handleMerchandiseFacilityOpenModal();\r\n                                          setCreditFacilityUtilizitionId(\r\n                                            FacilityUtilizitions.Id\r\n                                          );\r\n                                          getMerchandiseFacility(\r\n                                            FacilityUtilizitions.Id\r\n                                          );\r\n                                        }}\r\n                                      >\r\n                                        <ToastContainer />\r\n                                      </LoanIconButton>\r\n                                    </>\r\n                                  </td>\r\n                                  <td>\r\n                                    <>\r\n                                      <LoanIconButton\r\n                                        style={{ color: \"green\" }}\r\n                                        text=\" Term Loan\"\r\n                                        onClick={() => {\r\n                                          handleTermLoanOpenModal();\r\n                                          setCreditFacilityUtilizitionId(\r\n                                            FacilityUtilizitions.Id\r\n                                          );\r\n                                          getTermLoan(FacilityUtilizitions.Id);\r\n                                        }}\r\n                                      >\r\n                                        <ToastContainer />\r\n                                      </LoanIconButton>\r\n                                    </>\r\n                                  </td>\r\n                                  <td>\r\n                                    <>\r\n                                      <LoanIconButton\r\n                                        style={{ color: \"green\" }}\r\n                                        text=\" LG Facility\"\r\n                                        onClick={() => {\r\n                                          handleLGFacilityOpenModal();\r\n                                          setCreditFacilityUtilizitionId(\r\n                                            FacilityUtilizitions.Id\r\n                                          );\r\n                                          getLGFacility(\r\n                                            FacilityUtilizitions.Id\r\n                                          );\r\n                                        }}\r\n                                      >\r\n                                        <ToastContainer />\r\n                                      </LoanIconButton>\r\n                                    </>\r\n                                  </td>\r\n                                  <td>\r\n                                    <>\r\n                                      <LoanIconButton\r\n                                        style={{ color: \"green\" }}\r\n                                        text=\" LC Facility\"\r\n                                        onClick={() => {\r\n                                          handleLCFacilityOpenModal();\r\n                                          setCreditFacilityUtilizitionId(\r\n                                            FacilityUtilizitions.Id\r\n                                          );\r\n                                          getLCFacility(\r\n                                            FacilityUtilizitions.Id\r\n                                          );\r\n                                        }}\r\n                                      >\r\n                                        <ToastContainer />\r\n                                      </LoanIconButton>\r\n                                    </>\r\n                                  </td>\r\n                                  <td>\r\n                                    <>\r\n                                      <LoanIconButton\r\n                                        style={{ color: \"green\" }}\r\n                                        text=\" Over draft Facility\"\r\n                                        onClick={() => {\r\n                                          handleOverDraftFacilityOpenModal();\r\n                                          setCreditFacilityUtilizitionId(\r\n                                            FacilityUtilizitions.Id\r\n                                          );\r\n                                          getOverDraftFacility(\r\n                                            FacilityUtilizitions.Id\r\n                                          );\r\n                                        }}\r\n                                      >\r\n                                        <ToastContainer />\r\n                                      </LoanIconButton>\r\n                                    </>\r\n                                  </td>\r\n                                  <td>\r\n                                    <>\r\n                                      <LoanIconButton\r\n                                        style={{ color: \"green\" }}\r\n                                        text=\" preshipment Facility\"\r\n                                        onClick={() => {\r\n                                          handlePreshipmentFacilityOpenModal();\r\n                                          setCreditFacilityUtilizitionId(\r\n                                            FacilityUtilizitions.Id\r\n                                          );\r\n                                          getPreshipmentFacility(\r\n                                            FacilityUtilizitions.Id\r\n                                          );\r\n                                        }}\r\n                                      >\r\n                                        <ToastContainer />\r\n                                      </LoanIconButton>\r\n                                    </>\r\n                                  </td>\r\n                                  <td>\r\n                                    <LoanIconButton\r\n                                      style={{ color: \"green\" }}\r\n                                      icon={<MdModeEdit />}\r\n                                      text=\"Edit\"\r\n                                      onClick={() => {\r\n                                        handleCreditFacilityUtilizitionEditOpenModal();\r\n                                        getCreditFacilityUtilizitionId(\r\n                                          FacilityUtilizitions.Id\r\n                                        );\r\n                                        setCreditFacilityUtilizitionId(\r\n                                          FacilityUtilizitions.Id\r\n                                        );\r\n                                      }}\r\n                                    />\r\n                                  </td>\r\n                                </tr>\r\n                              )\r\n                            )\r\n                          )}\r\n                        </tbody>\r\n                      </table>\r\n                    </div>\r\n                  )\r\n                )}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        {/* </div> */}\r\n      </CompanyModal>\r\n      <CompanyModal\r\n        isOpen={isCreditFacilityUtilizitionEditModalOpen}\r\n        onClose={handleCreditFacilityUtilizitionEditCloseModal}\r\n        title=\"Modify account detail information\"\r\n      >\r\n        <div>\r\n          <form onSubmit={updateCreditFacilityUtilizitionById}>\r\n            <div className=\"grid grid-cols-1 gap-4 submit-form\">\r\n              <div className=\"submit-form \">\r\n                <div className=\"relative center justify-center flex-1 w-full max-w-full grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\">\r\n                  <FormControl variant=\"standard\" sx={{ minWidth: 120 }}>\r\n                    <InputLabel id=\"countrylbl\" color=\"secondary\">\r\n                      Loan Type{\" \"}\r\n                    </InputLabel>\r\n                    <Select\r\n                      color=\"secondary\"\r\n                      onChange={(event) => {\r\n                        editCreditFacilityUtilizition.LoanTypeId =\r\n                          event.target.value;\r\n                        setLoanTypeId(event.target.value);\r\n                      }}\r\n                      labelId=\"countrylbl\"\r\n                      id=\"countrySelect\"\r\n                      label=\"Country\"\r\n                    >\r\n                      <MenuItem value=\"\">\r\n                        <em>None</em>\r\n                      </MenuItem>\r\n                      {loanTypeIdForCreditUtilization.map((yourLoan) => (\r\n                        <MenuItem\r\n                          key={yourLoan.Id}\r\n                          LoanTypeId={yourLoan.Id}\r\n                          value={yourLoan.Id}\r\n                        >\r\n                          {yourLoan.Name}\r\n                        </MenuItem>\r\n                      ))}\r\n                    </Select>\r\n                  </FormControl>\r\n                  <TextField\r\n                    id=\"LoanAccount\"\r\n                    label=\"LoanAccount\"\r\n                    variant=\"standard\"\r\n                    color=\"secondary\"\r\n                    size=\"\"\r\n                    required\r\n                    value={editCreditFacilityUtilizition.LoanAccount}\r\n                    onChange={(e) =>\r\n                      setEditCreditFacilityUtilizition({\r\n                        ...editCreditFacilityUtilizition,\r\n                        LoanAccount: e.target.value,\r\n                      })\r\n                    }\r\n                    name=\"CustomerId\"\r\n                  />\r\n                  <TextField\r\n                    id=\"BorrowingRshipLength\"\r\n                    label=\"BorrowingRshipLength\"\r\n                    variant=\"standard\"\r\n                    color=\"secondary\"\r\n                    size=\"\"\r\n                    required\r\n                    value={editCreditFacilityUtilizition.BorrowingRshipLength}\r\n                    onChange={(e) =>\r\n                      setEditCreditFacilityUtilizition({\r\n                        ...editCreditFacilityUtilizition,\r\n                        BorrowingRshipLength: e.target.value,\r\n                      })\r\n                    }\r\n                    name=\"CustomerId\"\r\n                  />\r\n                </div>\r\n                <div className=\"flex justify-center items-center\">\r\n                  <button\r\n                    type=\"submit\"\r\n                    className=\"bg-[purple] hover:bg-purple-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline \"\r\n                  >\r\n                    Update\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </CompanyModal>\r\n    </div>\r\n  );\r\n};\r\nexport default ViewCreditFacilityUtilizition;\r\n","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\accountDetail\\creditPerformance\\ViewCreditPefrormance.jsx",["1426","1427","1428","1429","1430","1431","1432","1433","1434","1435","1436","1437","1438","1439","1440","1441","1442","1443","1444","1445","1446","1447","1448","1449"],[],"import {\r\n  TextField,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n} from \"@mui/material\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { FaSpinner } from \"react-icons/fa\";\r\nimport { BiSkipNext } from \"react-icons/bi\";\r\nimport { MdModeEdit } from \"react-icons/md\";\r\nimport { IoTrashOutline } from \"react-icons/io5\";\r\nimport { useParams, useNavigate } from \"react-router-dom\";\r\nimport CompanyNavigation from \"../../../Common/CompanyNavigation\";\r\nimport LoanIconButton from \"../../../Common/LoanIconButton\";\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\nimport CompanyModal from \"../../Common/CompanyModal\";\r\nimport { Link } from \"react-router-dom\";\r\nimport CommonServices from \"../../Common/CommonServices\";\r\nimport AddCreditFacilityUtilizition from \"./AddCreditPerformance\";\r\nimport CreditPerformanceService from \"./CreditPerformanceService\";\r\nimport AddCreditPerformance from \"./AddCreditPerformance\";\r\nimport LoanTextField from \"../../../Common/LoanTextField\";\r\nconst ViewCreditPefrormance = ({\r\n  isCreditPerformanceModalOpen,\r\n  handleCreditPerformanceCloseModal,\r\n  setIsCreditPerformanceModalOpen,\r\n  accountDetialId,\r\n  creditPerformance,\r\n}) => {\r\n  const [CreditPerformanceErrorLoading, setCreditPerformanceErrorLoading] =\r\n    useState(false);\r\n  const navigate = useNavigate();\r\n  // const { companyId } = useParams();\r\n  const [loanTypeId, setLoanTypeId] = useState([]);\r\n  const [currencyId, setCurrencyId] = useState([]);\r\n  const [creditPerformanceId, setCreditPerformanceId] = useState([]);\r\n  const [deleteLoading, setDeleteLoading] = useState(false);\r\n  const [approvalDate, setApprovalDate] = useState(new Date());\r\n  const [startDate, setStartDate] = useState(new Date());\r\n  const [maturityDate, setMaturityDate] = useState(new Date());\r\n  const [scheduledPayment, setScheduledPayment] = useState(new Date());\r\n  const [adjustmentMaturityDate, setAdjustmentMaturityDate] = useState(\r\n    new Date()\r\n  );\r\n  const [\r\n    systemAdjustmentDate4WaiverAndExtension,\r\n    setSystemAdjustmentDate4WaiverAndExtension,\r\n  ] = useState(new Date());\r\n  const [deleteCreditPerformanceError, setCreditPerformanceDeleteError] =\r\n    useState(null);\r\n  const [error, setError] = useState(null);\r\n  const [\r\n    isCreditPerformanceEditModalOpen,\r\n    setIsCreditPerformanceEditModalOpen,\r\n  ] = useState(false);\r\n  function handleCreditPerformanceEditOpenModal() {\r\n    setIsCreditPerformanceEditModalOpen(true);\r\n  }\r\n  function handleCreditPerformanceEditCloseModal() {\r\n    setIsCreditPerformanceEditModalOpen(false);\r\n  }\r\n  function handleCreditPerformanceEditOpenModal() {\r\n    setIsCreditPerformanceEditModalOpen(true);\r\n  }\r\n  function handleCreditPerformanceEditCloseModal() {\r\n    setIsCreditPerformanceEditModalOpen(false);\r\n  }\r\n  const handleInputChangeCreditPerformance = (event) => {\r\n    const { name, value } = event.target;\r\n    setCreditPerformances({\r\n      ...creditPerformances,\r\n      [name]: value,\r\n    });\r\n  };\r\n  const initialCreditPerformanceState = {\r\n    Id: null,\r\n    LoanAccount: \"\",\r\n    LoanTypeId: \"\",\r\n    ApprovedAmount: \"\",\r\n    ApprovalDate: \"\",\r\n    TotalCommitment: \"\",\r\n    CurrencyId: \"\",\r\n    StartDate: \"\",\r\n    MaturityDate: \"\",\r\n    RepaymentFrequency: \"\",\r\n    ScheduledPayment: \"\",\r\n    LoanStatus: \"\",\r\n    Restructuring: \"\",\r\n    LoanAccountRestructured: \"\",\r\n    SystemAdjustmentDate4WaiverAndExtension: \"\",\r\n    NoOfScheduledPrincipalPaymentWaived: \"\",\r\n    NoOfScheduledRepaymentWaived: \"\",\r\n    AdjustmentMaturityDate: \"\",\r\n    PrincipalOutstandingAmount: \"\",\r\n    InterestOutstandingAmount: \"\",\r\n    TotalOutstandingAmountPerLoanType: \"\",\r\n    PrincipalArrears: \"\",\r\n    InterestArrears: \"\",\r\n    TotalArrears: \"\",\r\n    TotalApprovedLoanAmount: \"\",\r\n    TotalOutstandingAmount: \"\",\r\n    CrossSelling: \"\",\r\n    NPLStatus: \"\",\r\n  };\r\n  const [creditPerformances, setCreditPerformances] = useState(\r\n    initialCreditPerformanceState\r\n  );\r\n  const newCreditPerformance = () => {\r\n    setCreditPerformances(initialCreditPerformanceState);\r\n    // setSubmitted(false);\r\n  };\r\n  const saveCreditPerformance = () => {\r\n    var data = {\r\n      LoanAccount: creditPerformances.LoanAccount,\r\n      LoanTypeId: loanTypeId,\r\n      ApprovedAmount: creditPerformances.ApprovedAmount,\r\n      ApprovalDate: creditPerformances.ApprovalDate,\r\n      TotalCommitment: creditPerformances.TotalCommitment,\r\n      CurrencyId: creditPerformances.CurrencyId,\r\n      StartDate: creditPerformances.StartDate,\r\n      MaturityDate: creditPerformances.MaturityDate,\r\n      RepaymentFrequency: creditPerformances.RepaymentFrequency,\r\n      ScheduledPayment: creditPerformances.ScheduledPayment,\r\n      LoanStatus: creditPerformances.LoanStatus,\r\n      Restructuring: creditPerformances.Restructuring,\r\n      LoanAccountRestructured: creditPerformances.LoanAccountRestructured,\r\n      SystemAdjustmentDate4WaiverAndExtension:\r\n        creditPerformances.SystemAdjustmentDate4WaiverAndExtension,\r\n      NoOfScheduledPrincipalPaymentWaived:\r\n        creditPerformances.NoOfScheduledPrincipalPaymentWaived,\r\n      NoOfScheduledRepaymentWaived:\r\n        creditPerformances.NoOfScheduledRepaymentWaived,\r\n      AdjustmentMaturityDate: creditPerformances.AdjustmentMaturityDate,\r\n      PrincipalOutstandingAmount: creditPerformances.PrincipalOutstandingAmount,\r\n      InterestOutstandingAmount: creditPerformances.InterestOutstandingAmount,\r\n      TotalOutstandingAmountPerLoanType:\r\n        creditPerformances.TotalOutstandingAmountPerLoanType,\r\n      PrincipalArrears: creditPerformances.PrincipalArrears,\r\n      InterestArrears: creditPerformances.InterestArrears,\r\n      TotalArrears: creditPerformances.TotalArrears,\r\n      TotalApprovedLoanAmount: creditPerformances.TotalApprovedLoanAmount,\r\n      TotalOutstandingAmount: creditPerformances.TotalOutstandingAmount,\r\n      CrossSelling: creditPerformances.CrossSelling,\r\n      NPLStatus: creditPerformances.NPLStatus,\r\n    };\r\n    CreditPerformanceService.addCreditPerformance(data, accountDetialId)\r\n      .then((response) => {\r\n        setCreditPerformances({\r\n          Id: response.data.Id,\r\n          LoanAccount: response.data.LoanAccount,\r\n          LoanTypeId: response.data.LoanTypeId,\r\n          ApprovedAmount: response.data.ApprovedAmount,\r\n          ApprovalDate: response.data.ApprovalDate,\r\n          TotalCommitment: response.data.TotalCommitment,\r\n          CurrencyId: response.data.CurrencyId,\r\n          StartDate: response.data.StartDate,\r\n          MaturityDate: response.data.MaturityDate,\r\n          RepaymentFrequency: response.data.RepaymentFrequency,\r\n          ScheduledPayment: response.data.ScheduledPayment,\r\n          LoanStatus: response.data.LoanStatus,\r\n          Restructuring: response.data.Restructuring,\r\n          LoanAccountRestructured: response.data.LoanAccountRestructured,\r\n          SystemAdjustmentDate4WaiverAndExtension:\r\n            response.data.SystemAdjustmentDate4WaiverAndExtension,\r\n          NoOfScheduledPrincipalPaymentWaived:\r\n            response.data.NoOfScheduledPrincipalPaymentWaived,\r\n          NoOfScheduledRepaymentWaived:\r\n            response.data.NoOfScheduledRepaymentWaived,\r\n          AdjustmentMaturityDate: response.data.AdjustmentMaturityDate,\r\n          PrincipalOutstandingAmount: response.data.PrincipalOutstandingAmount,\r\n          InterestOutstandingAmount: response.data.InterestOutstandingAmount,\r\n          TotalOutstandingAmountPerLoanType:\r\n            response.data.TotalOutstandingAmountPerLoanType,\r\n          PrincipalArrears: response.data.PrincipalArrears,\r\n          InterestArrears: response.data.InterestArrears,\r\n          TotalArrears: response.data.TotalArrears,\r\n          TotalApprovedLoanAmount: response.data.TotalApprovedLoanAmount,\r\n          TotalOutstandingAmount: response.data.TotalOutstandingAmount,\r\n          CrossSelling: response.data.CrossSelling,\r\n          NPLStatus: response.data.NPLStatus,\r\n        });\r\n        if (response.data.Code === 200) {\r\n          setCreditPerformances(initialCreditPerformanceState);\r\n          console.log(response.data);\r\n          // setHoldId(response.data.Result.Id);\r\n          creditPerformances();\r\n          toast.success(\"Added successfully\", {\r\n            position: toast.POSITION.TOP_RIGHT,\r\n            toastId: \"CreditPerformance\",\r\n          });\r\n        }\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n  const handleDelete = (creditPerformance) => {\r\n    setDeleteLoading(true);\r\n    const confirm = window.confirm(\r\n      `Are you sure you want to delete ${creditPerformance.LoanAccount}?`\r\n    );\r\n    if (confirm) {\r\n      toast.success(\"Deleting\", {\r\n        position: toast.POSITION.TOP_RIGHT,\r\n        toastId: \"deleteCreditPerformance\",\r\n      });\r\n      CreditPerformanceService.deleteCreditPerformanceById(creditPerformance.Id)\r\n        .then(() => {\r\n          creditPerformance((previousData) =>\r\n            previousData.filter((comp) => comp.Id !== creditPerformance.Id)\r\n          );\r\n        })\r\n        .catch((e) => {\r\n          setCreditPerformanceDeleteError(e);\r\n          setDeleteLoading(false);\r\n        });\r\n    }\r\n  };\r\n  const [editCreditPerformance, setEditCreditPerformance] = useState({\r\n    //  Id: editAddresAccountDetailId,\r\n    LoanAccount: \"\",\r\n    LoanTypeId: \"\",\r\n    ApprovedAmount: \"\",\r\n    ApprovalDate: \"\",\r\n    TotalCommitment: \"\",\r\n    CurrencyId: \"\",\r\n    StartDate: \"\",\r\n    MaturityDate: \"\",\r\n    RepaymentFrequency: \"\",\r\n    ScheduledPayment: \"\",\r\n    LoanStatus: \"\",\r\n    Restructuring: \"\",\r\n    LoanAccountRestructured: \"\",\r\n    SystemAdjustmentDate4WaiverAndExtension: \"\",\r\n    NoOfScheduledPrincipalPaymentWaived: \"\",\r\n    NoOfScheduledRepaymentWaived: \"\",\r\n    AdjustmentMaturityDate: \"\",\r\n    PrincipalOutstandingAmount: \"\",\r\n    InterestOutstandingAmount: \"\",\r\n    TotalOutstandingAmountPerLoanType: \"\",\r\n    PrincipalArrears: \"\",\r\n    InterestArrears: \"\",\r\n    TotalArrears: \"\",\r\n    TotalApprovedLoanAmount: \"\",\r\n    TotalOutstandingAmount: \"\",\r\n    CrossSelling: \"\",\r\n    NPLStatus: \"\",\r\n  });\r\n\r\n  const handleInputChangeEditCreditPerformance = (event) => {\r\n    const { name, value } = event.target;\r\n    setEditCreditPerformance({\r\n      ...editCreditPerformance,\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  const getCreditPerformanceId = (editCreditPerformanceId) => {\r\n    CreditPerformanceService.getCreditPerformanceById(editCreditPerformanceId)\r\n      .then((res) => {\r\n        setEditCreditPerformance({\r\n          ...editCreditPerformance,\r\n          Id: editCreditPerformanceId,\r\n          LoanAccount: res.data.Result.LoanAccount,\r\n          LoanTypeId: res.data.Result.LoanTypeId,\r\n          ApprovedAmount: res.data.Result.ApprovedAmount,\r\n          ApprovalDate: res.data.Result.ApprovalDate,\r\n          TotalCommitment: res.data.Result.TotalCommitment,\r\n          CurrencyId: res.data.Result.CurrencyId,\r\n          StartDate: res.data.Result.StartDate,\r\n          MaturityDate: res.data.Result.MaturityDate,\r\n          RepaymentFrequency: res.data.Result.RepaymentFrequency,\r\n          ScheduledPayment: res.data.Result.ScheduledPayment,\r\n          LoanStatus: res.data.Result.LoanStatus,\r\n          Restructuring: res.data.Result.Restructuring,\r\n          LoanAccountRestructured: res.data.Result.LoanAccountRestructured,\r\n          SystemAdjustmentDate4WaiverAndExtension:\r\n            res.data.Result.SystemAdjustmentDate4WaiverAndExtension,\r\n          NoOfScheduledPrincipalPaymentWaived:\r\n            res.data.Result.NoOfScheduledPrincipalPaymentWaived,\r\n          NoOfScheduledRepaymentWaived:\r\n            res.data.Result.NoOfScheduledRepaymentWaived,\r\n          AdjustmentMaturityDate: res.data.Result.AdjustmentMaturityDate,\r\n          PrincipalOutstandingAmount:\r\n            res.data.Result.PrincipalOutstandingAmount,\r\n          InterestOutstandingAmount: res.data.Result.InterestOutstandingAmount,\r\n          TotalOutstandingAmountPerLoanType:\r\n            res.data.Result.TotalOutstandingAmountPerLoanType,\r\n          PrincipalArrears: res.data.Result.PrincipalArrears,\r\n          InterestArrears: res.data.Result.InterestArrears,\r\n          TotalArrears: res.data.Result.TotalArrears,\r\n          TotalApprovedLoanAmount: res.data.Result.TotalApprovedLoanAmount,\r\n          TotalOutstandingAmount: res.data.Result.TotalOutstandingAmount,\r\n          CrossSelling: res.data.Result.CrossSelling,\r\n          NPLStatus: res.data.Result.NPLStatus,\r\n        });\r\n      })\r\n      .catch((err) => {\r\n        if (err.response.data.StatusCode === 404) {\r\n          console.log(err.response.data.Message);\r\n        }\r\n      });\r\n  };\r\n  const updateCreditFacilityUtilizitionById = (e) => {\r\n    e.preventDefault();\r\n    CreditPerformanceService.updateCreditPerformanceById(\r\n      creditPerformanceId,\r\n      editCreditPerformance\r\n    )\r\n      .then((response) => {\r\n        if (response.data.Code === 200) {\r\n          creditPerformance();\r\n          toast.success(\"Updated successfully\", {\r\n            position: toast.POSITION.TOP_RIGHT,\r\n            toastId: \"updateCompany\",\r\n          });\r\n        }\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n\r\n  const [loanTypeIdForPerformance, setLoanTypeIdForPerformance] = useState([]);\r\n  const getLoanType = () => {\r\n    setTimeout(() => {\r\n      CommonServices.getLoanType()\r\n        .then((response) => {\r\n          if (\r\n            response.data.Code === 200 ||\r\n            response.data.Message === \"Success\"\r\n          ) {\r\n            setLoanTypeIdForPerformance(response.data.Result);\r\n            setCreditPerformanceErrorLoading(false);\r\n          } else {\r\n            setCreditPerformanceErrorLoading(false);\r\n            setError(\"Something went wrong\");\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          if (error.response.data.StatusCode === 404) {\r\n            setError(\"Credit performance not found\");\r\n            setCreditPerformanceErrorLoading(false);\r\n          } else if (error.response.data.StatusCode === 400) {\r\n            setError(\"Something went wrong\");\r\n            setCreditPerformanceErrorLoading(false);\r\n          } else if (error.response.data.StatusCode === 401) {\r\n            navigate(\"/login\");\r\n          } else if (error.response.data.StatusCode === 403) {\r\n            navigate(\"/login\");\r\n          }\r\n        });\r\n    }, 1000);\r\n  };\r\n  useEffect(() => {\r\n    getLoanType();\r\n  }, []);\r\n  const [currency, setCurrency] = useState([]);\r\n  const getCurrency = () => {\r\n    setTimeout(() => {\r\n      CommonServices.getCurrency()\r\n        .then((response) => {\r\n          if (\r\n            response.data.Code === 200 ||\r\n            response.data.Message === \"Success\"\r\n          ) {\r\n            setCurrency(response.data.Result);\r\n          } else {\r\n            setCreditPerformanceErrorLoading(false);\r\n            setError(\"Something went wrong\");\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          if (error.response.data.StatusCode === 404) {\r\n            setError(\"Credit performance not found\");\r\n            setCreditPerformanceErrorLoading(false);\r\n          } else if (error.response.data.StatusCode === 400) {\r\n            setError(\"Something went wrong\");\r\n            setCreditPerformanceErrorLoading(false);\r\n          } else if (error.response.data.StatusCode === 401) {\r\n            navigate(\"/login\");\r\n          } else if (error.response.data.StatusCode === 403) {\r\n            navigate(\"/login\");\r\n          }\r\n        });\r\n    }, 1000);\r\n  };\r\n  useEffect(() => {\r\n    getCurrency();\r\n  }, []);\r\n  const handleBack = () => {\r\n    alert(\"Handle Back\");\r\n  };\r\n  const handleSkip = () => {\r\n    alert(\"Handle Back\");\r\n  };\r\n  const handleNext = () => {\r\n    alert(\"Handle Next\");\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <CompanyModal\r\n        isOpen={isCreditPerformanceModalOpen}\r\n        onClose={handleCreditPerformanceCloseModal}\r\n        title=\" Credit utilazition\"\r\n      >\r\n        <div className=\"flex items-top justify-top h-screen\">\r\n          <div>\r\n            <div className=\"rounded-lg overflow-hidden overflow-x-scroll overflow-y-scroll\">\r\n              <div>\r\n                <h4 className=\"text-lg font-semibold eading-tight p-2\"></h4>\r\n                <AddCreditFacilityUtilizition\r\n                  handleSkip={handleSkip}\r\n                  creditPerformances={creditPerformances}\r\n                  handleInputChangeCreditPerformance={\r\n                    handleInputChangeCreditPerformance\r\n                  }\r\n                  saveCreditPerformance={saveCreditPerformance}\r\n                  loanTypeIdForPerformance={loanTypeIdForPerformance}\r\n                  setLoanTypeId={setLoanTypeId}\r\n                  currency={currency}\r\n                  setCurrencyId={setCurrencyId}\r\n                />\r\n                <ToastContainer />\r\n                <div>\r\n                  {/* {error && <p className=\"text-red-500\">{error}</p>}\r\n                  {!error && setCreditPerformanceErrorLoading ? (\r\n                   <span>\r\n                   <FaSpinner\r\n                     className=\"animate-spin rounded-full h-6 w-6 text-purple-600\"\r\n                     fontSize=\"small\"\r\n                     data-toggle=\"tooltip\"\r\n                     title=\"Click it to sign in\"\r\n                   />\r\n                   Loading...\r\n                 </span>\r\n                  ) : (\r\n                    !error &&\r\n                    !setCreditPerformanceErrorLoading && ( */}\r\n                  <div className=\"overflow-x-auto\">\r\n                    <table className=\"min-w-full table table-bordered table-striped bg-purple-100\">\r\n                      <thead>\r\n                        <tr className=\"bg-purple-200\">\r\n                          <th className=\"px-2 py-4\"> Loan Account</th>\r\n                          <th className=\"px-2 py-4\"> Loan Type </th>\r\n                          <th className=\"px-2 py-4\"> Approved Amount </th>\r\n                          <th className=\"px-2 py-4\"> Approval Date </th>\r\n                          <th className=\"px-2 py-4\"> Total Commitment </th>\r\n                          <th className=\"px-2 py-4\"> Currency </th>\r\n                          <th className=\"px-2 py-4\"> Start Date </th>\r\n                          <th className=\"px-2 py-4\"> Maturity Date </th>\r\n                          <th className=\"px-2 py-4\"> Repayment Frequency </th>\r\n                          <th className=\"px-2 py-4\"> Scheduled Payment </th>\r\n                          <th className=\"px-2 py-4\"> Loan Status </th>\r\n                          <th className=\"px-2 py-4\"> Restructuring </th>\r\n                          <th className=\"px-2 py-4\">\r\n                            {\" \"}\r\n                            Loan Account Restructured{\" \"}\r\n                          </th>\r\n                          <th className=\"px-2 py-4\">\r\n                            {\" \"}\r\n                            System Adjustment Date Waiver And Extension{\" \"}\r\n                          </th>\r\n                          <th className=\"px-2 py-4\">\r\n                            {\" \"}\r\n                            No Of Scheduled Principal Payment Waived{\" \"}\r\n                          </th>\r\n                          <th className=\"px-2 py-4\">\r\n                            {\" \"}\r\n                            No Of Scheduled Repayment Waived{\" \"}\r\n                          </th>\r\n                          <th className=\"px-2 py-4\">\r\n                            {\" \"}\r\n                            Adjustment Maturity Date{\" \"}\r\n                          </th>\r\n                          <th className=\"px-2 py-4\">\r\n                            {\" \"}\r\n                            Principal Outstanding Amount{\" \"}\r\n                          </th>\r\n                          <th className=\"px-2 py-4\">\r\n                            {\" \"}\r\n                            Interest Outstanding Amount{\" \"}\r\n                          </th>\r\n                          <th className=\"px-2 py-4\">\r\n                            {\" \"}\r\n                            Total Outstanding Amount Per Loan Type{\" \"}\r\n                          </th>\r\n                          <th className=\"px-2 py-4\"> Principal Arrears </th>\r\n                          <th className=\"px-2 py-4\"> Interest Arrears </th>\r\n                          <th className=\"px-2 py-4\"> Total Arrears </th>\r\n                          <th className=\"px-2 py-4\">\r\n                            {\" \"}\r\n                            Total Approved Loan Amount{\" \"}\r\n                          </th>\r\n                          <th className=\"px-2 py-4\">\r\n                            {\" \"}\r\n                            Total Outstanding Amount{\" \"}\r\n                          </th>\r\n                          <th className=\"px-2 py-4\"> Cross Selling </th>\r\n                          <th className=\"px-2 py-4\"> NPL Status </th>\r\n                          <th className=\"px-2 py-4\"> Action </th>\r\n                        </tr>\r\n                      </thead>\r\n                      <tbody>\r\n                        {creditPerformance.length === 0 ? (\r\n                          <p className=\"text-red-600 p-4\">Data not found</p>\r\n                        ) : (\r\n                          creditPerformance.map(\r\n                            (FacilityUtilizition, index) => (\r\n                              <tr\r\n                                key={index}\r\n                                className=\"bg-white border-b border-purple-200\"\r\n                              >\r\n                                <td className=\"p-2\">\r\n                                  {FacilityUtilizition.LoanAccount}\r\n                                </td>\r\n                                <td className=\"p-2\">\r\n                                  {FacilityUtilizition.LoanTypeId}\r\n                                </td>\r\n                                <td className=\"p-2\">\r\n                                  {FacilityUtilizition.ApprovedAmount}\r\n                                </td>\r\n                                <td className=\"p-2\">\r\n                                  {FacilityUtilizition.ApprovalDate}\r\n                                </td>\r\n                                <td className=\"p-2\">\r\n                                  {FacilityUtilizition.TotalCommitment}\r\n                                </td>\r\n                                <td className=\"p-2\">\r\n                                  {FacilityUtilizition.CurrencyId}\r\n                                </td>\r\n                                <td className=\"p-2\">\r\n                                  {FacilityUtilizition.StartDate}\r\n                                </td>\r\n                                <td className=\"p-2\">\r\n                                  {FacilityUtilizition.MaturityDate}\r\n                                </td>\r\n                                <td className=\"p-2\">\r\n                                  {FacilityUtilizition.RepaymentFrequency}\r\n                                </td>\r\n                                <td className=\"p-2\">\r\n                                  {FacilityUtilizition.ScheduledPayment}\r\n                                </td>\r\n                                <td className=\"p-2\">\r\n                                  {FacilityUtilizition.LoanStatus}\r\n                                </td>\r\n                                <td className=\"p-2\">\r\n                                  {FacilityUtilizition.Restructuring}\r\n                                </td>\r\n                                <td className=\"p-2\">\r\n                                  {FacilityUtilizition.LoanAccountRestructured}\r\n                                </td>\r\n                                <td className=\"p-2\">\r\n                                  {\r\n                                    FacilityUtilizition.SystemAdjustmentDate4WaiverAndExtension\r\n                                  }\r\n                                </td>\r\n                                <td className=\"p-2\">\r\n                                  {\r\n                                    FacilityUtilizition.NoOfScheduledPrincipalPaymentWaived\r\n                                  }\r\n                                </td>\r\n                                <td className=\"p-2\">\r\n                                  {\r\n                                    FacilityUtilizition.NoOfScheduledRepaymentWaived\r\n                                  }\r\n                                </td>\r\n                                <td className=\"p-2\">\r\n                                  {FacilityUtilizition.AdjustmentMaturityDate}\r\n                                </td>\r\n                                <td className=\"p-2\">\r\n                                  {\r\n                                    FacilityUtilizition.PrincipalOutstandingAmount\r\n                                  }\r\n                                </td>\r\n                                <td className=\"p-2\">\r\n                                  {\r\n                                    FacilityUtilizition.InterestOutstandingAmount\r\n                                  }\r\n                                </td>\r\n                                <td className=\"p-2\">\r\n                                  {\r\n                                    FacilityUtilizition.TotalOutstandingAmountPerLoanType\r\n                                  }\r\n                                </td>\r\n                                <td className=\"p-2\">\r\n                                  {FacilityUtilizition.PrincipalArrears}\r\n                                </td>\r\n                                <td className=\"p-2\">\r\n                                  {FacilityUtilizition.InterestArrears}\r\n                                </td>\r\n                                <td className=\"p-2\">\r\n                                  {FacilityUtilizition.TotalArrears}\r\n                                </td>\r\n                                <td className=\"p-2\">\r\n                                  {FacilityUtilizition.TotalApprovedLoanAmount}\r\n                                </td>\r\n                                <td className=\"p-2\">\r\n                                  {FacilityUtilizition.TotalOutstandingAmount}\r\n                                </td>\r\n                                <td className=\"p-2\">\r\n                                  {FacilityUtilizition.CrossSelling}\r\n                                </td>\r\n                                <td className=\"p-2\">\r\n                                  {FacilityUtilizition.NPLStatus}\r\n                                </td>\r\n                                <td>\r\n                                  <button\r\n                                    type=\"submit\"\r\n                                    onClick={() => {\r\n                                      handleCreditPerformanceEditOpenModal();\r\n                                      getCreditPerformanceId(\r\n                                        FacilityUtilizition.Id\r\n                                      );\r\n                                      setCreditPerformanceId(\r\n                                        FacilityUtilizition.Id\r\n                                      );\r\n                                    }}\r\n                                    className=\"text-purple-600 rounded-md font-semibold \"\r\n                                  >\r\n                                    Edit\r\n                                  </button>\r\n                                </td>\r\n                                <td>\r\n                                  <button\r\n                                    type=\"submit\"\r\n                                    onClick={() => {\r\n                                      handleDelete(FacilityUtilizition);\r\n                                    }}\r\n                                    className=\"text-purple-600 rounded-md font-semibold \"\r\n                                  >\r\n                                    Delete\r\n                                  </button>\r\n                                </td>\r\n                              </tr>\r\n                            )\r\n                          )\r\n                        )}\r\n                      </tbody>\r\n                    </table>\r\n                  </div>\r\n                  {/* //   )\r\n                  // )} */}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </CompanyModal>\r\n      <CompanyModal\r\n        isOpen={isCreditPerformanceEditModalOpen}\r\n        onClose={handleCreditPerformanceEditCloseModal}\r\n        title=\"Modify account detail information\"\r\n      >\r\n        <div>\r\n          <form onSubmit={updateCreditFacilityUtilizitionById}>\r\n            <div className=\"grid grid-cols-1 gap-4 submit-form\">\r\n              <div className=\"submit-form \">\r\n                <div className=\"relative center justify-center flex-1 w-full max-w-full grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\">\r\n                  <TextField\r\n                    id=\"LoanAccount\"\r\n                    label=\"LoanAccount\"\r\n                    variant=\"standard\"\r\n                    color=\"secondary\"\r\n                    size=\"\"\r\n                    required\r\n                    value={editCreditPerformance.LoanAccount}\r\n                    onChange={(e) =>\r\n                      setEditCreditPerformance({\r\n                        ...editCreditPerformance,\r\n                        LoanAccount: e.target.value,\r\n                      })\r\n                    }\r\n                    name=\"LoanAccount\"\r\n                  />\r\n                  <FormControl variant=\"standard\" sx={{ minWidth: 120 }}>\r\n                    <InputLabel id=\"LoanTypeId\" color=\"secondary\">\r\n                      Loan Type{\" \"}\r\n                    </InputLabel>\r\n                    <Select\r\n                      color=\"secondary\"\r\n                      onChange={(event) => {\r\n                        editCreditPerformance.LoanTypeId = event.target.value;\r\n                        setLoanTypeId(event.target.value);\r\n                      }}\r\n                      labelId=\"LoanTypeId\"\r\n                      id=\"LoanTypeId\"\r\n                      label=\"LoanTypeId\"\r\n                    >\r\n                      <MenuItem value=\"\">\r\n                        <em>None</em>\r\n                      </MenuItem>\r\n                      {loanTypeIdForPerformance.map((yourLoan) => (\r\n                        <MenuItem\r\n                          key={yourLoan.Id}\r\n                          LoanTypeId={yourLoan.Id}\r\n                          value={yourLoan.Id}\r\n                        >\r\n                          {yourLoan.Name}\r\n                        </MenuItem>\r\n                      ))}\r\n                    </Select>\r\n                  </FormControl>\r\n                  <TextField\r\n                    id=\"ApprovedAmount\"\r\n                    label=\"ApprovedAmount\"\r\n                    variant=\"standard\"\r\n                    color=\"secondary\"\r\n                    size=\"\"\r\n                    required\r\n                    value={editCreditPerformance.ApprovedAmount}\r\n                    onChange={(e) =>\r\n                      setEditCreditPerformance({\r\n                        ...editCreditPerformance,\r\n                        ApprovedAmount: e.target.value,\r\n                      })\r\n                    }\r\n                    name=\"ApprovedAmount\"\r\n                  />\r\n                  <p>\r\n                    Approval Date:\r\n                    <input\r\n                      id=\"ApprovalDate\"\r\n                      name=\"ApprovalDate\"\r\n                      label=\"ApprovalDate\"\r\n                      placeholder=\"ApprovalDate\"\r\n                      type=\"date\"                      \r\n                      onChange={(e) => {\r\n                        setApprovalDate(new Date(e.target.value));\r\n                        editCreditPerformance.ApprovalDate = approvalDate;\r\n                      }}\r\n                      value={\r\n                        approvalDate.getFullYear().toString() +\r\n                        \"-\" +\r\n                        (approvalDate.getMonth() + 1)\r\n                          .toString()\r\n                          .padStart(2, 0) +\r\n                        \"-\" +\r\n                        approvalDate.getDate().toString().padStart(2, 0)\r\n                      }\r\n                    />{\" \"}\r\n                  </p>\r\n                  <TextField\r\n                    id=\"TotalCommitment\"\r\n                    label=\"TotalCommitment\"\r\n                    variant=\"standard\"\r\n                    color=\"secondary\"\r\n                    size=\"\"\r\n                    required\r\n                    value={editCreditPerformance.TotalCommitment}\r\n                    onChange={(e) =>\r\n                      setEditCreditPerformance({\r\n                        ...editCreditPerformance,\r\n                        TotalCommitment: e.target.value,\r\n                      })\r\n                    }\r\n                    name=\"TotalCommitment\"\r\n                  />\r\n                  {/* CurrencyId*/}\r\n                  <FormControl variant=\"standard\" sx={{ minWidth: 120 }}>\r\n                    <InputLabel id=\"LoanTypeId\" color=\"secondary\">\r\n                      currency type{\" \"}\r\n                    </InputLabel>\r\n                    <Select\r\n                      color=\"secondary\"\r\n                      onChange={(event) => {\r\n                        editCreditPerformance.CurrencyId = event.target.value;\r\n                        // setCurrencyId(event.target.value);\r\n                      }}\r\n                      labelId=\"CurrencyId\"\r\n                      id=\"CurrencyId\"\r\n                      label=\"CurrencyId\"\r\n                    >\r\n                      <MenuItem value=\"\">\r\n                        <em>None</em>\r\n                      </MenuItem>\r\n                      {currency.map((yourCurrency) => (\r\n                        <MenuItem\r\n                          key={yourCurrency.Id}\r\n                          CurrencyId={yourCurrency.Id}\r\n                          value={yourCurrency.Id}\r\n                        >\r\n                          {yourCurrency.Name}\r\n                        </MenuItem>\r\n                      ))}\r\n                    </Select>\r\n                  </FormControl>\r\n                  <p>\r\n                    Start Date:\r\n                    <input\r\n                      id=\"StartDate\"\r\n                      name=\"StartDate\"\r\n                      label=\"StartDate\"\r\n                      placeholder=\"StartDate\"\r\n                      type=\"date\"\r\n                      value={\r\n                        startDate.getFullYear().toString() +\r\n                        \"-\" +\r\n                        (startDate.getMonth() + 1).toString().padStart(2, 0) +\r\n                        \"-\" +\r\n                        startDate.getDate().toString().padStart(2, 0)\r\n                      }\r\n                      onChange={(e) => {\r\n                        setStartDate(new Date(e.target.value));\r\n                        editCreditPerformance.StartDate = startDate;\r\n                      }}\r\n                    />{\" \"}\r\n                  </p>\r\n                  <p>\r\n                    Maturity Date:\r\n                    <input\r\n                      id=\"MaturityDate\"\r\n                      name=\"MaturityDate\"\r\n                      label=\"MaturityDate\"\r\n                      placeholder=\"MaturityDate\"\r\n                      type=\"date\"\r\n                      value={\r\n                        maturityDate.getFullYear().toString() +\r\n                        \"-\" +\r\n                        (maturityDate.getMonth() + 1)\r\n                          .toString()\r\n                          .padStart(2, 0) +\r\n                        \"-\" +\r\n                        maturityDate.getDate().toString().padStart(2, 0)\r\n                      }\r\n                      onChange={(e) => {\r\n                        setMaturityDate(new Date(e.target.value));\r\n                        editCreditPerformance.MaturityDate = maturityDate;\r\n                      }}\r\n                    />{\" \"}\r\n                  </p>\r\n                  <TextField\r\n                    id=\"RepaymentFrequency\"\r\n                    label=\"RepaymentFrequency\"\r\n                    variant=\"standard\"\r\n                    color=\"secondary\"\r\n                    size=\"\"\r\n                    required\r\n                    value={editCreditPerformance.RepaymentFrequency}\r\n                    onChange={(e) =>\r\n                      setEditCreditPerformance({\r\n                        ...editCreditPerformance,\r\n                        RepaymentFrequency: e.target.value,\r\n                      })\r\n                    }\r\n                    name=\"RepaymentFrequency\"\r\n                  />\r\n                  <p>\r\n                    Scheduled Payment:\r\n                    <input\r\n                      id=\"ScheduledPayment\"\r\n                      name=\"ScheduledPayment\"\r\n                      label=\"ScheduledPayment\"\r\n                      placeholder=\"ScheduledPayment\"\r\n                      type=\"date\"\r\n                      value={\r\n                        scheduledPayment.getFullYear().toString() +\r\n                        \"-\" +\r\n                        (scheduledPayment.getMonth() + 1)\r\n                          .toString()\r\n                          .padStart(2, 0) +\r\n                        \"-\" +\r\n                        scheduledPayment.getDate().toString().padStart(2, 0)\r\n                      }\r\n                      onChange={(e) => {\r\n                        setScheduledPayment(new Date(e.target.value));\r\n                        editCreditPerformance.ScheduledPayment =\r\n                          scheduledPayment;\r\n                      }}\r\n                    />{\" \"}\r\n                  </p>\r\n                  <TextField\r\n                    id=\"LoanStatus\"\r\n                    label=\"LoanStatus\"\r\n                    variant=\"standard\"\r\n                    color=\"secondary\"\r\n                    size=\"\"\r\n                    required\r\n                    value={editCreditPerformance.LoanStatus}\r\n                    onChange={(e) =>\r\n                      setEditCreditPerformance({\r\n                        ...editCreditPerformance,\r\n                        LoanStatus: e.target.value,\r\n                      })\r\n                    }\r\n                    name=\"LoanStatus\"\r\n                  />\r\n                  <TextField\r\n                    id=\"Restructuring\"\r\n                    label=\"Restructuring\"\r\n                    variant=\"standard\"\r\n                    color=\"secondary\"\r\n                    size=\"\"\r\n                    required\r\n                    value={editCreditPerformance.Restructuring}\r\n                    onChange={(e) =>\r\n                      setEditCreditPerformance({\r\n                        ...editCreditPerformance,\r\n                        Restructuring: e.target.value,\r\n                      })\r\n                    }\r\n                    name=\"Restructuring\"\r\n                  />\r\n                  <TextField\r\n                    id=\"LoanAccountRestructured\"\r\n                    label=\"LoanAccountRestructured\"\r\n                    variant=\"standard\"\r\n                    color=\"secondary\"\r\n                    size=\"\"\r\n                    required\r\n                    value={editCreditPerformance.LoanAccountRestructured}\r\n                    onChange={(e) =>\r\n                      setEditCreditPerformance({\r\n                        ...editCreditPerformance,\r\n                        LoanAccountRestructured: e.target.value,\r\n                      })\r\n                    }\r\n                    name=\"LoanAccountRestructured\"\r\n                  />\r\n                  <p>\r\n                    System Adjustment Date Waiver And Extension:\r\n                    <input\r\n                      id=\"SystemAdjustmentDate4WaiverAndExtension\"\r\n                      name=\"SystemAdjustmentDate4WaiverAndExtension\"\r\n                      label=\"SystemAdjustmentDate4WaiverAndExtension\"\r\n                      placeholder=\"SystemAdjustmentDate4WaiverAndExtension\"\r\n                      type=\"date\"\r\n                      value={\r\n                        systemAdjustmentDate4WaiverAndExtension\r\n                          .getFullYear()\r\n                          .toString() +\r\n                        \"-\" +\r\n                        (systemAdjustmentDate4WaiverAndExtension.getMonth() + 1)\r\n                          .toString()\r\n                          .padStart(2, 0) +\r\n                        \"-\" +\r\n                        systemAdjustmentDate4WaiverAndExtension\r\n                          .getDate()\r\n                          .toString()\r\n                          .padStart(2, 0)\r\n                      }\r\n                      onChange={(e) => {\r\n                        setSystemAdjustmentDate4WaiverAndExtension(\r\n                          new Date(e.target.value)\r\n                        );\r\n                        editCreditPerformance.SystemAdjustmentDate4WaiverAndExtension =\r\n                          systemAdjustmentDate4WaiverAndExtension;\r\n                      }}\r\n                    />{\" \"}\r\n                  </p>\r\n                  <TextField\r\n                    id=\"NoOfScheduledPrincipalPaymentWaived\"\r\n                    label=\"NoOfScheduledPrincipalPaymentWaived\"\r\n                    variant=\"standard\"\r\n                    color=\"secondary\"\r\n                    size=\"\"\r\n                    required\r\n                    value={\r\n                      editCreditPerformance.NoOfScheduledPrincipalPaymentWaived\r\n                    }\r\n                    onChange={(e) =>\r\n                      setEditCreditPerformance({\r\n                        ...editCreditPerformance,\r\n                        NoOfScheduledPrincipalPaymentWaived: e.target.value,\r\n                      })\r\n                    }\r\n                    name=\"NoOfScheduledPrincipalPaymentWaived\"\r\n                  />\r\n                  <TextField\r\n                    id=\"NoOfScheduledRepaymentWaived\"\r\n                    label=\"NoOfScheduledRepaymentWaived\"\r\n                    variant=\"standard\"\r\n                    color=\"secondary\"\r\n                    size=\"\"\r\n                    required\r\n                    value={editCreditPerformance.NoOfScheduledRepaymentWaived}\r\n                    onChange={(e) =>\r\n                      setEditCreditPerformance({\r\n                        ...editCreditPerformance,\r\n                        NoOfScheduledRepaymentWaived: e.target.value,\r\n                      })\r\n                    }\r\n                    name=\"NoOfScheduledRepaymentWaived\"\r\n                  />\r\n                  <p>\r\n                    System Adjustment Date Waiver And Extension:\r\n                    <input\r\n                      id=\"AdjustmentMaturityDate\"\r\n                      name=\"AdjustmentMaturityDate\"\r\n                      label=\"AdjustmentMaturityDate\"\r\n                      placeholder=\"AdjustmentMaturityDate\"\r\n                      type=\"date\"\r\n                      value={\r\n                        adjustmentMaturityDate.getFullYear().toString() +\r\n                        \"-\" +\r\n                        (adjustmentMaturityDate.getMonth() + 1)\r\n                          .toString()\r\n                          .padStart(2, 0) +\r\n                        \"-\" +\r\n                        adjustmentMaturityDate\r\n                          .getDate()\r\n                          .toString()\r\n                          .padStart(2, 0)\r\n                      }\r\n                      onChange={(e) => {\r\n                        setAdjustmentMaturityDate(new Date(e.target.value));\r\n                        editCreditPerformance.AdjustmentMaturityDate =\r\n                          adjustmentMaturityDate;\r\n                      }}\r\n                    />{\" \"}\r\n                  </p>\r\n                  <TextField\r\n                    id=\"PrincipalOutstandingAmount\"\r\n                    label=\"PrincipalOutstandingAmount\"\r\n                    variant=\"standard\"\r\n                    color=\"secondary\"\r\n                    size=\"\"\r\n                    required\r\n                    value={editCreditPerformance.PrincipalOutstandingAmount}\r\n                    onChange={(e) =>\r\n                      setEditCreditPerformance({\r\n                        ...editCreditPerformance,\r\n                        PrincipalOutstandingAmount: e.target.value,\r\n                      })\r\n                    }\r\n                    name=\"PrincipalOutstandingAmount\"\r\n                  />\r\n                  <TextField\r\n                    id=\"InterestOutstandingAmount\"\r\n                    label=\"InterestOutstandingAmount\"\r\n                    variant=\"standard\"\r\n                    color=\"secondary\"\r\n                    size=\"\"\r\n                    required\r\n                    value={editCreditPerformance.InterestOutstandingAmount}\r\n                    onChange={(e) =>\r\n                      setEditCreditPerformance({\r\n                        ...editCreditPerformance,\r\n                        InterestOutstandingAmount: e.target.value,\r\n                      })\r\n                    }\r\n                    name=\"InterestOutstandingAmount\"\r\n                  />\r\n                  <TextField\r\n                    id=\"TotalOutstandingAmountPerLoanType\"\r\n                    label=\"TotalOutstandingAmountPerLoanType\"\r\n                    variant=\"standard\"\r\n                    color=\"secondary\"\r\n                    size=\"\"\r\n                    required\r\n                    value={\r\n                      editCreditPerformance.TotalOutstandingAmountPerLoanType\r\n                    }\r\n                    onChange={(e) =>\r\n                      setEditCreditPerformance({\r\n                        ...editCreditPerformance,\r\n                        TotalOutstandingAmountPerLoanType: e.target.value,\r\n                      })\r\n                    }\r\n                    name=\"TotalOutstandingAmountPerLoanType\"\r\n                  />\r\n                  <TextField\r\n                    id=\"PrincipalArrears\"\r\n                    label=\"PrincipalArrears\"\r\n                    variant=\"standard\"\r\n                    color=\"secondary\"\r\n                    size=\"\"\r\n                    required\r\n                    value={editCreditPerformance.PrincipalArrears}\r\n                    onChange={(e) =>\r\n                      setEditCreditPerformance({\r\n                        ...editCreditPerformance,\r\n                        PrincipalArrears: e.target.value,\r\n                      })\r\n                    }\r\n                    name=\"PrincipalArrears\"\r\n                  />\r\n                  <TextField\r\n                    id=\"InterestArrears\"\r\n                    label=\"InterestArrears\"\r\n                    variant=\"standard\"\r\n                    color=\"secondary\"\r\n                    size=\"\"\r\n                    required\r\n                    value={editCreditPerformance.InterestArrears}\r\n                    onChange={(e) =>\r\n                      setEditCreditPerformance({\r\n                        ...editCreditPerformance,\r\n                        InterestArrears: e.target.value,\r\n                      })\r\n                    }\r\n                    name=\"InterestArrears\"\r\n                  />\r\n                  <TextField\r\n                    id=\"TotalArrears\"\r\n                    label=\"TotalArrears\"\r\n                    variant=\"standard\"\r\n                    color=\"secondary\"\r\n                    size=\"\"\r\n                    required\r\n                    value={editCreditPerformance.TotalArrears}\r\n                    onChange={(e) =>\r\n                      setEditCreditPerformance({\r\n                        ...editCreditPerformance,\r\n                        TotalArrears: e.target.value,\r\n                      })\r\n                    }\r\n                    name=\"TotalArrears\"\r\n                  />\r\n                  <TextField\r\n                    id=\"TotalApprovedLoanAmount\"\r\n                    label=\"TotalApprovedLoanAmount\"\r\n                    variant=\"standard\"\r\n                    color=\"secondary\"\r\n                    size=\"\"\r\n                    required\r\n                    value={editCreditPerformance.TotalApprovedLoanAmount}\r\n                    onChange={(e) =>\r\n                      setEditCreditPerformance({\r\n                        ...editCreditPerformance,\r\n                        TotalApprovedLoanAmount: e.target.value,\r\n                      })\r\n                    }\r\n                    name=\"TotalApprovedLoanAmount\"\r\n                  />\r\n                  <TextField\r\n                    id=\"TotalOutstandingAmount\"\r\n                    label=\"TotalOutstandingAmount\"\r\n                    variant=\"standard\"\r\n                    color=\"secondary\"\r\n                    size=\"\"\r\n                    required\r\n                    value={editCreditPerformance.TotalOutstandingAmount}\r\n                    onChange={(e) =>\r\n                      setEditCreditPerformance({\r\n                        ...editCreditPerformance,\r\n                        TotalOutstandingAmount: e.target.value,\r\n                      })\r\n                    }\r\n                    name=\"TotalOutstandingAmount\"\r\n                  />\r\n                  <TextField\r\n                    id=\"CrossSelling\"\r\n                    label=\"CrossSelling\"\r\n                    variant=\"standard\"\r\n                    color=\"secondary\"\r\n                    size=\"\"\r\n                    required\r\n                    value={editCreditPerformance.CrossSelling}\r\n                    onChange={(e) =>\r\n                      setEditCreditPerformance({\r\n                        ...editCreditPerformance,\r\n                        CrossSelling: e.target.value,\r\n                      })\r\n                    }\r\n                    name=\"CrossSelling\"\r\n                  />\r\n                  <TextField\r\n                    id=\"NPLStatus\"\r\n                    label=\"NPLStatus\"\r\n                    variant=\"standard\"\r\n                    color=\"secondary\"\r\n                    size=\"\"\r\n                    required\r\n                    value={editCreditPerformance.NPLStatus}\r\n                    onChange={(e) =>\r\n                      setEditCreditPerformance({\r\n                        ...editCreditPerformance,\r\n                        NPLStatus: e.target.value,\r\n                      })\r\n                    }\r\n                    name=\"NPLStatus\"\r\n                  />\r\n                </div>\r\n                <div className=\"flex justify-center items-center\">\r\n                  <button\r\n                    type=\"submit\"\r\n                    className=\"bg-[purple] hover:bg-purple-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline \"\r\n                  >\r\n                    Update\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </CompanyModal>\r\n    </div>\r\n  );\r\n};\r\nexport default ViewCreditPefrormance;\r\n","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\accountDetail\\depositPerformance\\ViewDepositPefrormance.jsx",["1450","1451","1452","1453","1454","1455","1456","1457","1458","1459","1460","1461","1462","1463","1464","1465","1466","1467","1468","1469","1470","1471","1472","1473","1474","1475","1476","1477","1478","1479","1480","1481","1482","1483","1484","1485","1486","1487","1488","1489","1490","1491","1492","1493","1494","1495","1496","1497","1498","1499","1500","1501","1502","1503","1504","1505"],[],"import {\r\n  TextField,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n} from \"@mui/material\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { FaSpinner } from \"react-icons/fa\";\r\nimport { BiSkipNext } from \"react-icons/bi\";\r\nimport { MdModeEdit } from \"react-icons/md\";\r\nimport { IoTrashOutline } from \"react-icons/io5\";\r\nimport { useParams, useNavigate } from \"react-router-dom\";\r\nimport CompanyNavigation from \"../../../Common/CompanyNavigation\";\r\nimport LoanIconButton from \"../../../Common/LoanIconButton\";\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\nimport CompanyModal from \"../../Common/CompanyModal\";\r\nimport { Link } from \"react-router-dom\";\r\nimport CommonServices from \"../../Common/CommonServices\";\r\n// import AddCreditFacilityUtilizition from \"./AddCreditPerformance\";\r\nimport AddCreditPerformance from \"./AddDepositPerformance\";\r\nimport LoanTextField from \"../../../Common/LoanTextField\";\r\nimport DepositPerformanceService from \"./DepositPerformanceService\";\r\nimport AddDepositPerformance from \"./AddDepositPerformance\";\r\nconst ViewDepositPefrormance = ({\r\n  isDepositePerformanceModalOpen,\r\n  handleDepositePerformanceCloseModal,\r\n  accountDetialId,\r\n  depositePerformance,\r\n}) => {\r\n  const [DepositePerformanceErrorLoading, setDepositePerformanceErrorLoading] =\r\n    useState(false);\r\n  const navigate = useNavigate();\r\n  // const { companyId } = useParams();\r\n  const [loanTypeId, setLoanTypeId] = useState([]);\r\n  const [currencyId, setCurrencyId] = useState([]);\r\n  const [depositePerformanceId, setDepositePerformanceId] = useState([]);\r\n  const [deleteLoading, setDeleteLoading] = useState(false);\r\n  const [approvalDate, setApprovalDate] = useState(new Date());\r\n  const [startDate, setStartDate] = useState(new Date());\r\n  const [maturityDate, setMaturityDate] = useState(new Date());\r\n  const [scheduledPayment, setScheduledPayment] = useState(new Date());\r\n  const [adjustmentMaturityDate, setAdjustmentMaturityDate] = useState(\r\n    new Date()\r\n  );\r\n  const [\r\n    systemAdjustmentDate4WaiverAndExtension,\r\n    setSystemAdjustmentDate4WaiverAndExtension,\r\n  ] = useState(new Date());\r\n  const [deleteCreditPerformanceError, setCreditPerformanceDeleteError] =\r\n    useState(null);\r\n  const [error, setError] = useState(null);\r\n  const [\r\n    isDepositePerformanceEditModalOpen,\r\n    setIsDepositePerformanceEditModalOpen,\r\n  ] = useState(false);\r\n  function handleDepositePerformanceEditOpenModal() {\r\n    setIsDepositePerformanceEditModalOpen(true);\r\n  }\r\n  function handleDepositePerformanceEditCloseModal() {\r\n    setIsDepositePerformanceEditModalOpen(false);\r\n  }\r\n  function handleDepositePerformanceEditOpenModal() {\r\n    setIsDepositePerformanceEditModalOpen(true);\r\n  }\r\n  function handleDepositePerformanceEditCloseModal() {\r\n    setIsDepositePerformanceEditModalOpen(false);\r\n  }\r\n  const handleInputChangeDepositePerformance = (event) => {\r\n    const { name, value } = event.target;\r\n    setDepositePerformances({\r\n      ...depositePerformances,\r\n      [name]: value,\r\n    });\r\n  };\r\n  const initialDepositePerformanceState = {\r\n    Id: null,\r\n    BudgetYear: \"\",\r\n    StartDate: \"\",\r\n    EndDate: \"\",\r\n    CurrencyId: \"\",\r\n    DepositeAccount: \"\",\r\n    DepositBalance: \"\",\r\n    AverageMonthlyDepositPerAnnum: \"\",\r\n    TotalCreditTransactionAmountPerAnnum: \"\",\r\n    AccountOpeningDate: \"\",\r\n    TotalCreditTransactionNumberPerAnnum: \"\",\r\n    DepositSalesRatio: \"\",\r\n  };\r\n  const [depositePerformances, setDepositePerformances] = useState(\r\n    initialDepositePerformanceState\r\n  );\r\n  const newDepositePerformance = () => {\r\n    setDepositePerformances(initialDepositePerformanceState);\r\n    // setSubmitted(false);\r\n  };\r\n  const saveDepositePerformance = () => {\r\n    var data = {\r\n      BudgetYear: depositePerformances.BudgetYear,\r\n      StartDate: depositePerformances.StartDate,\r\n      EndDate: depositePerformances.EndDate,\r\n      CurrencyId: currencyId,\r\n      DepositeAccount: depositePerformances.DepositeAccount,\r\n      DepositBalance: depositePerformances.DepositBalance,\r\n      AverageMonthlyDepositPerAnnum:\r\n        depositePerformances.AverageMonthlyDepositPerAnnum,\r\n      TotalCreditTransactionAmountPerAnnum:\r\n        depositePerformances.TotalCreditTransactionAmountPerAnnum,\r\n      AccountOpeningDate: depositePerformances.AccountOpeningDate,\r\n      TotalCreditTransactionNumberPerAnnum:\r\n        depositePerformances.TotalCreditTransactionNumberPerAnnum,\r\n      DepositSalesRatio: depositePerformances.DepositSalesRatio,\r\n    };\r\n    DepositPerformanceService.addDepositePerformance(data, accountDetialId)\r\n      .then((response) => {\r\n        setDepositePerformances({\r\n          Id: response.data.Id,\r\n          BudgetYear: response.data.BudgetYear,\r\n          StartDate: response.data.StartDate,\r\n          EndDate: response.data.EndDate,\r\n          CurrencyId: response.data.CurrencyId,\r\n          DepositeAccount: response.data.DepositeAccount,\r\n          DepositBalance: response.data.DepositBalance,\r\n          AverageMonthlyDepositPerAnnum:\r\n            response.data.AverageMonthlyDepositPerAnnum,\r\n          TotalCreditTransactionAmountPerAnnum:\r\n            response.data.TotalCreditTransactionAmountPerAnnum,\r\n          AccountOpeningDate: response.data.AccountOpeningDate,\r\n          TotalCreditTransactionNumberPerAnnum:\r\n            response.data.TotalCreditTransactionNumberPerAnnum,\r\n          DepositSalesRatio: response.data.DepositSalesRatio,\r\n        });\r\n        if (response.data.Code === 200) {\r\n          setDepositePerformances(initialDepositePerformanceState);\r\n          console.log(response.data);\r\n          // setHoldId(response.data.Result.Id);\r\n          depositePerformance();\r\n          toast.success(\"Added successfully\", {\r\n            position: toast.POSITION.TOP_RIGHT,\r\n            toastId: \"DepositePerformance\",\r\n          });\r\n        }\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n  const handleDelete = (depositePerformance) => {\r\n    setDeleteLoading(true);\r\n    const confirm = window.confirm(\r\n      `Are you sure you want to delete ${depositePerformance.LoanAccount}?`\r\n    );\r\n    if (confirm) {\r\n      toast.success(\"Deleting\", {\r\n        position: toast.POSITION.TOP_RIGHT,\r\n        toastId: \"deleteCreditPerformance\",\r\n      });\r\n      DepositPerformanceService.deleteDepositePerformanceById(\r\n        depositePerformance.Id\r\n      )\r\n        .then(() => {\r\n          depositePerformance((previousData) =>\r\n            previousData.filter((comp) => comp.Id !== depositePerformance.Id)\r\n          );\r\n        })\r\n        .catch((e) => {\r\n          setDeleteLoading(false);\r\n        });\r\n    }\r\n  };\r\n  const [editDepositePerformance, setEditDepositePerformance] = useState({\r\n    //  Id: editAddresAccountDetailId,\r\n    BudgetYear: \"\",\r\n    StartDate: \"\",\r\n    EndDate: \"\",\r\n    CurrencyId: \"\",\r\n    DepositeAccount: \"\",\r\n    DepositBalance: \"\",\r\n    AverageMonthlyDepositPerAnnum: \"\",\r\n    TotalCreditTransactionAmountPerAnnum: \"\",\r\n    AccountOpeningDate: \"\",\r\n    TotalCreditTransactionNumberPerAnnum: \"\",\r\n    DepositSalesRatio: \"\",\r\n  });\r\n\r\n  const handleInputChangeEditDepositePerformance = (event) => {\r\n    const { name, value } = event.target;\r\n    setEditDepositePerformance({\r\n      ...editDepositePerformance,\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  const getDepositePerformanceId = (editDepositePerformanceId) => {\r\n    DepositPerformanceService.getDepositePerformanceById(\r\n      editDepositePerformanceId\r\n    )\r\n      .then((res) => {\r\n        setEditDepositePerformance({\r\n          ...editDepositePerformance,\r\n          Id: editDepositePerformanceId,\r\n          BudgetYear: res.data.Result.BudgetYear,\r\n          StartDate: res.data.Result.StartDate,\r\n          EndDate: res.data.Result.EndDate,\r\n          CurrencyId: res.data.Result.CurrencyId,\r\n          DepositeAccount: res.data.Result.DepositeAccount,\r\n          DepositBalance: res.data.Result.DepositBalance,\r\n          AverageMonthlyDepositPerAnnum:\r\n            res.data.Result.AverageMonthlyDepositPerAnnum,\r\n          TotalCreditTransactionAmountPerAnnum:\r\n            res.data.Result.TotalCreditTransactionAmountPerAnnum,\r\n          AccountOpeningDate: res.data.Result.AccountOpeningDate,\r\n          TotalCreditTransactionNumberPerAnnum:\r\n            res.data.Result.TotalCreditTransactionNumberPerAnnum,\r\n          DepositSalesRatio: res.data.Result.DepositSalesRatio,\r\n        });\r\n      })\r\n      .catch((err) => {\r\n        if (err.response.data.StatusCode === 404) {\r\n          console.log(err.response.data.Message);\r\n        }\r\n      });\r\n  };\r\n  const updateDepositeFacilityUtilizitionById = (e) => {\r\n    e.preventDefault();\r\n    DepositPerformanceService.updateDepositePerformanceById(\r\n      depositePerformanceId,\r\n      editDepositePerformance\r\n    )\r\n      .then((response) => {\r\n        if (response.data.Code === 200) {\r\n          depositePerformance();\r\n          toast.success(\"Updated successfully\", {\r\n            position: toast.POSITION.TOP_RIGHT,\r\n            toastId: \"updateCompany\",\r\n          });\r\n        }\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n  const [loanTypeIdForPerformance, setLoanTypeIdForPerformance] = useState([]);\r\n  const getLoanType = () => {\r\n    setTimeout(() => {\r\n      CommonServices.getLoanType()\r\n        .then((response) => {\r\n          if (\r\n            response.data.Code === 200 ||\r\n            response.data.Message === \"Success\"\r\n          ) {\r\n            setLoanTypeIdForPerformance(response.data.Result);\r\n          } else {\r\n            setError(\"Something went wrong\");\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          if (error.response.data.StatusCode === 404) {\r\n            setError(\"Credit performance not found\");\r\n          } else if (error.response.data.StatusCode === 400) {\r\n            setError(\"Something went wrong\");\r\n          } else if (error.response.data.StatusCode === 401) {\r\n            navigate(\"/login\");\r\n          } else if (error.response.data.StatusCode === 403) {\r\n            navigate(\"/login\");\r\n          }\r\n        });\r\n    }, 1000);\r\n  };\r\n  useEffect(() => {\r\n    getLoanType();\r\n  }, []);\r\n  const [currency, setCurrency] = useState([]);\r\n  const getCurrency = () => {\r\n    setTimeout(() => {\r\n      CommonServices.getCurrency()\r\n        .then((response) => {\r\n          if (\r\n            response.data.Code === 200 ||\r\n            response.data.Message === \"Success\"\r\n          ) {\r\n            setCurrency(response.data.Result);\r\n          } else {\r\n            setError(\"Something went wrong\");\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          if (error.response.data.StatusCode === 404) {\r\n            setError(\"Credit performance not found\");\r\n          } else if (error.response.data.StatusCode === 400) {\r\n            setError(\"Something went wrong\");\r\n          } else if (error.response.data.StatusCode === 401) {\r\n            navigate(\"/login\");\r\n          } else if (error.response.data.StatusCode === 403) {\r\n            navigate(\"/login\");\r\n          }\r\n        });\r\n    }, 1000);\r\n  };\r\n  useEffect(() => {\r\n    getCurrency();\r\n  }, []);\r\n  return (\r\n    <div>\r\n      <CompanyModal\r\n        isOpen={isDepositePerformanceModalOpen}\r\n        onClose={handleDepositePerformanceCloseModal}\r\n        title=\" Deposite performance\"\r\n      >\r\n        <div className=\"px-4 py-3\">\r\n          <div className=\"flex flex-wrap\">\r\n            <div className=\"w-full\">\r\n              <div>\r\n                <h4 className=\"text-lg font-semibold eading-tight p-2\"></h4>\r\n                <div>  \r\n                  <AddDepositPerformance\r\n                  setDepositePerformances = {setDepositePerformances}\r\n                  depositePerformances = {depositePerformances}\r\n                  handleInputChangeDepositePerformance ={handleInputChangeDepositePerformance}\r\n                  currency = {currency}\r\n                  setCurrencyId ={setCurrencyId}\r\n                  saveDepositePerformance ={saveDepositePerformance}\r\n                  />           \r\n                  <div className=\"overflow-x-auto\">\r\n                    <table className=\"min-w-full table table-bordered table-striped bg-purple-100\">\r\n                      <thead>\r\n                        <tr className=\"bg-purple-200\">\r\n                          <th className=\"px-2 py-4\"> Budget Year</th>\r\n                          <th className=\"px-2 py-4\"> Start Date </th>\r\n                          <th className=\"px-2 py-4\"> End Date </th>\r\n                          <th className=\"px-2 py-4\"> Currency </th>\r\n                          <th className=\"px-2 py-4\"> Deposite Account </th>\r\n                          <th className=\"px-2 py-4\"> Deposit Balance </th>\r\n                          <th className=\"px-2 py-4\">\r\n                            {\" \"}\r\n                            Average Monthly Deposit Per Annum{\" \"}\r\n                          </th>\r\n                          <th className=\"px-2 py-4\">\r\n                            {\" \"}\r\n                            Total Credit Transaction Amount Per Annum{\" \"}\r\n                          </th>\r\n                          <th className=\"px-2 py-4\"> Account Opening Date </th>\r\n                          <th className=\"px-2 py-4\">\r\n                            {\" \"}\r\n                            Total Credit Transaction Number Per Annum{\" \"}\r\n                          </th>\r\n                          <th className=\"px-2 py-4\"> Deposit Sales Ratio </th>\r\n                          <th className=\"px-2 py-4\"> Action </th>\r\n                        </tr>\r\n                      </thead>\r\n                      <tbody>\r\n                        {depositePerformance.length === 0 ? (\r\n                          <p className=\"text-red-600 p-4\">Data not found</p>\r\n                        ) : (\r\n                          depositePerformance.map(\r\n                            (FacilityUtilizition, index) => (\r\n                              <tr\r\n                                key={index}\r\n                                className=\"bg-white border-b border-purple-200\"\r\n                              >\r\n                                <td className=\"p-2\">\r\n                                  {FacilityUtilizition.BudgetYear}\r\n                                </td>\r\n                                <td className=\"p-2\">\r\n                                  {FacilityUtilizition.StartDate}\r\n                                </td>\r\n                                <td className=\"p-2\">\r\n                                  {FacilityUtilizition.EndDate}\r\n                                </td>\r\n                                <td className=\"p-2\">\r\n                                  {FacilityUtilizition.CurrencyId}\r\n                                </td>\r\n                                <td className=\"p-2\">\r\n                                  {FacilityUtilizition.DepositeAccount}\r\n                                </td>\r\n                                <td className=\"p-2\">\r\n                                  {FacilityUtilizition.DepositBalance}\r\n                                </td>\r\n                                <td className=\"p-2\">\r\n                                  {\r\n                                    FacilityUtilizition.AverageMonthlyDepositPerAnnum\r\n                                  }\r\n                                </td>\r\n                                <td className=\"p-2\">\r\n                                  {\r\n                                    FacilityUtilizition.TotalCreditTransactionAmountPerAnnum\r\n                                  }\r\n                                </td>\r\n                                <td className=\"p-2\">\r\n                                  {FacilityUtilizition.AccountOpeningDate}\r\n                                </td>\r\n                                <td className=\"p-2\">\r\n                                  {\r\n                                    FacilityUtilizition.TotalCreditTransactionNumberPerAnnum\r\n                                  }\r\n                                </td>\r\n                                <td className=\"p-2\">\r\n                                  {FacilityUtilizition.DepositSalesRatio}\r\n                                </td>\r\n                              </tr>\r\n                            )\r\n                          )\r\n                        )}\r\n                      </tbody>\r\n                    </table>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </CompanyModal>\r\n    </div>\r\n  );\r\n};\r\nexport default ViewDepositPefrormance;\r\n","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\accountDetail\\fcyInflowPerformance\\ViewFcyInflowPerformance.jsx",["1506","1507","1508","1509","1510","1511","1512","1513","1514","1515","1516","1517","1518","1519","1520","1521","1522","1523","1524","1525","1526","1527","1528","1529","1530","1531","1532","1533","1534","1535","1536","1537","1538","1539","1540","1541","1542","1543","1544","1545","1546","1547","1548","1549","1550","1551","1552"],[],"import {\r\n  TextField,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n} from \"@mui/material\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { FaSpinner } from \"react-icons/fa\";\r\nimport { BiSkipNext } from \"react-icons/bi\";\r\nimport { MdModeEdit } from \"react-icons/md\";\r\nimport { IoTrashOutline } from \"react-icons/io5\";\r\nimport { useParams, useNavigate } from \"react-router-dom\";\r\nimport CompanyNavigation from \"../../../Common/CompanyNavigation\";\r\nimport LoanIconButton from \"../../../Common/LoanIconButton\";\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\nimport CompanyModal from \"../../Common/CompanyModal\";\r\nimport { Link } from \"react-router-dom\";\r\nimport CommonServices from \"../../Common/CommonServices\";\r\n// import AddCreditFacilityUtilizition from \"./AddCreditPerformance\";\r\n// import AddCreditPerformance from \"./AddFcyInflowPerformance\";\r\nimport LoanTextField from \"../../../Common/LoanTextField\";\r\nimport FcyInflowPerformanceService from \"./FcyInflowPerformanceService\";\r\nimport AddFcyInflowPerformance from \"./AddFcyInflowPerformance\";\r\nconst ViewFcyInflowPerformance = ({\r\n  isFCYInflowPerformanceModalOpen,\r\n  handleFCYInflowPerformanceCloseModal,\r\n  setIFCYInflowPerformanceModalOpen,\r\n  accountDetialId,\r\n  fCYInflowPerformance,\r\n}) => {\r\n  const [\r\n    FCYInflowPerformanceErrorLoading,\r\n    setFCYInflowePerformanceErrorLoading,\r\n  ] = useState(false);\r\n  const navigate = useNavigate();\r\n  // const { companyId } = useParams();\r\n  const [loanTypeId, setLoanTypeId] = useState([]);\r\n  const [currencyId, setCurrencyId] = useState([]);\r\n  const [fCYInflowPerformanceId, setFCYInflowPerformanceId] = useState([]);\r\n  const [deleteLoading, setDeleteLoading] = useState(false);\r\n  const [approvalDate, setApprovalDate] = useState(new Date());\r\n  const [startDate, setStartDate] = useState(new Date());\r\n  const [maturityDate, setMaturityDate] = useState(new Date());\r\n  const [scheduledPayment, setScheduledPayment] = useState(new Date());\r\n  const [adjustmentMaturityDate, setAdjustmentMaturityDate] = useState(\r\n    new Date()\r\n  );\r\n  const [\r\n    systemAdjustmentDate4WaiverAndExtension,\r\n    setSystemAdjustmentDate4WaiverAndExtension,\r\n  ] = useState(new Date());\r\n  const [\r\n    deleteFCYInflowFCYInflowPerformanceError,\r\n    setFCYInflowFCYInflowPerformanceDeleteError,\r\n  ] = useState(null);\r\n  const [error, setError] = useState(null);\r\n  const [\r\n    isFCYInflowPerformanceEditModalOpen,\r\n    setIsFCYInflowPerformanceEditModalOpen,\r\n  ] = useState(false);\r\n  function handleFCYInflowPerformanceEditOpenModal() {\r\n    setIsFCYInflowPerformanceEditModalOpen(true);\r\n  }\r\n  function handleFCYInflowPerformanceEditCloseModal() {\r\n    setIsFCYInflowPerformanceEditModalOpen(false);\r\n  }\r\n  function handleFCYInflowPerformanceEditOpenModal() {\r\n    setIsFCYInflowPerformanceEditModalOpen(true);\r\n  }\r\n  function handleFCYInflowPerformanceEditCloseModal() {\r\n    setIsFCYInflowPerformanceEditModalOpen(false);\r\n  }\r\n  const handleInputChangeFCYInflowPerformance = (event) => {\r\n    const { name, value } = event.target;\r\n    setFCYInflowPerformances({\r\n      ...fCYInflowPerformances,\r\n      [name]: value,\r\n    });\r\n  };\r\n  const initialFCYInflowPerformanceState = {\r\n    Id: null,\r\n    BudgetYear: \"\",\r\n    StartDate: \"\",\r\n    EndDate: \"\",\r\n    CurrencyId: \"\",\r\n    FCYAccount: \"\",\r\n    DepositBalance: \"\",\r\n    PreShipmentLoanAccount: \"\",\r\n    PreShipmentFacilityLimit: \"\",\r\n    ExportOverdraftAccount: \"\",\r\n    ExportTermLoanAccount: \"\",\r\n    TotalExportCreditFacility: \"\",\r\n    TotalFCYInflowTransactionAmountPerYear: \"\",\r\n  };\r\n  const [fCYInflowPerformances, setFCYInflowPerformances] = useState(\r\n    initialFCYInflowPerformanceState\r\n  );\r\n  const newFCYInflowPerformance = () => {\r\n    setFCYInflowPerformances(initialFCYInflowPerformanceState);\r\n    // setSubmitted(false);\r\n  };\r\n  const saveFCYInflowPerformance = () => {\r\n    var data = {\r\n      BudgetYear: fCYInflowPerformances.BudgetYear,\r\n      StartDate: fCYInflowPerformances.StartDate,\r\n      EndDate: fCYInflowPerformances.EndDate,\r\n      CurrencyId: currencyId,\r\n      FCYAccount: fCYInflowPerformances.FCYAccount,\r\n      DepositBalance: fCYInflowPerformances.DepositBalance,\r\n      PreShipmentLoanAccount: fCYInflowPerformances.PreShipmentLoanAccount,\r\n      PreShipmentFacilityLimit: fCYInflowPerformances.PreShipmentFacilityLimit,\r\n      ExportOverdraftAccount: fCYInflowPerformances.ExportOverdraftAccount,\r\n      ExportTermLoanAccount: fCYInflowPerformances.ExportTermLoanAccount,\r\n      TotalExportCreditFacility:\r\n        fCYInflowPerformances.TotalExportCreditFacility,\r\n      TotalFCYInflowTransactionAmountPerYear:\r\n        fCYInflowPerformances.TotalFCYInflowTransactionAmountPerYear,\r\n    };\r\n    FcyInflowPerformanceService.addFcyInflowPerformance(data, accountDetialId)\r\n      .then((response) => {\r\n        setFCYInflowPerformances({\r\n          Id: response.data.Id,\r\n          BudgetYear: response.data.BudgetYear,\r\n          StartDate: response.data.StartDate,\r\n          EndDate: response.data.EndDate,\r\n          CurrencyId: response.data.CurrencyId,\r\n          FCYAccount: response.data.FCYAccount,\r\n          DepositBalance: response.data.DepositBalance,\r\n          PreShipmentLoanAccount: response.data.PreShipmentLoanAccount,\r\n          PreShipmentFacilityLimit: response.data.PreShipmentFacilityLimit,\r\n          ExportOverdraftAccount: response.data.ExportOverdraftAccount,\r\n          ExportTermLoanAccount: response.data.ExportTermLoanAccount,\r\n          TotalExportCreditFacility: response.data.TotalExportCreditFacility,\r\n          TotalFCYInflowTransactionAmountPerYear:\r\n            response.data.TotalFCYInflowTransactionAmountPerYear,\r\n        });\r\n        if (response.data.Code === 200) {\r\n          setFCYInflowPerformances(initialFCYInflowPerformanceState);\r\n          console.log(response.data);\r\n          toast.success(\"Added successfully\", {\r\n            position: toast.POSITION.TOP_RIGHT,\r\n            toastId: \"DepositePerformance\",\r\n          });\r\n        }\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n  const handleDelete = (fCYInflowPerformance) => {\r\n    setDeleteLoading(true);\r\n    const confirm = window.confirm(\r\n      `Are you sure you want to delete ${fCYInflowPerformance.FCYAccount}?`\r\n    );\r\n    if (confirm) {\r\n      toast.success(\"Deleting\", {\r\n        position: toast.POSITION.TOP_RIGHT,\r\n        toastId: \"deleteFCYInflowPerformance\",\r\n      });\r\n      FcyInflowPerformanceService.deleteFCYInflowPerformanceById(\r\n        fCYInflowPerformance.Id\r\n      )\r\n        .then(() => {\r\n          fCYInflowPerformance((previousData) =>\r\n            previousData.filter((comp) => comp.Id !== fCYInflowPerformance.Id)\r\n          );\r\n        })\r\n        .catch((e) => {\r\n          setDeleteLoading(false);\r\n        });\r\n    }\r\n  };\r\n  const [editFCYInflowPerformance, setEditFCYInflowPerformance] = useState({\r\n    //  Id: editAddresAccountDetailId,\r\n    BudgetYear: \"\",\r\n    StartDate: \"\",\r\n    EndDate: \"\",\r\n    CurrencyId: \"\",\r\n    FCYAccount: \"\",\r\n    DepositBalance: \"\",\r\n    PreShipmentLoanAccount: \"\",\r\n    PreShipmentFacilityLimit: \"\",\r\n    ExportOverdraftAccount: \"\",\r\n    ExportTermLoanAccount: \"\",\r\n    TotalExportCreditFacility: \"\",\r\n    TotalFCYInflowTransactionAmountPerYear: \"\",\r\n  });\r\n\r\n  const handleInputChangeEditFCYInflowPerformance = (event) => {\r\n    const { name, value } = event.target;\r\n    setEditFCYInflowPerformance({\r\n      ...editFCYInflowPerformance,\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  const getFCYInflowPerformanceId = (editFCYInflowPerformanceId) => {\r\n    FcyInflowPerformanceService.getFCYInflowPerformanceById(\r\n      editFCYInflowPerformanceId\r\n    )\r\n      .then((res) => {\r\n        setEditFCYInflowPerformance({\r\n          ...editFCYInflowPerformance,\r\n          Id: editFCYInflowPerformanceId,\r\n          BudgetYear: res.data.Result.BudgetYear,\r\n          StartDate: res.data.Result.StartDate,\r\n          EndDate: res.data.Result.EndDate,\r\n          CurrencyId: res.data.Result.CurrencyId,\r\n          FCYAccount: res.data.Result.FCYAccount,\r\n          DepositBalance: res.data.Result.DepositBalance,\r\n          PreShipmentLoanAccount: res.data.Result.PreShipmentLoanAccount,\r\n          PreShipmentFacilityLimit: res.data.Result.PreShipmentFacilityLimit,\r\n          ExportOverdraftAccount: res.data.Result.ExportOverdraftAccount,\r\n          ExportTermLoanAccount: res.data.Result.ExportTermLoanAccount,\r\n          TotalExportCreditFacility: res.data.Result.TotalExportCreditFacility,\r\n          TotalFCYInflowTransactionAmountPerYear:\r\n            res.data.Result.TotalFCYInflowTransactionAmountPerYear,\r\n        });\r\n      })\r\n      .catch((err) => {\r\n        if (err.response.data.StatusCode === 404) {\r\n          console.log(err.response.data.Message);\r\n        }\r\n      });\r\n  };\r\n  const updateFCYInflowPerformanceById = (e) => {\r\n    e.preventDefault();\r\n    FcyInflowPerformanceService.updateDepositePerformanceById(\r\n      fCYInflowPerformanceId,\r\n      editFCYInflowPerformance\r\n    )\r\n      .then((response) => {\r\n        if (response.data.Code === 200) {\r\n          toast.success(\"Updated successfully\", {\r\n            position: toast.POSITION.TOP_RIGHT,\r\n            toastId: \"updateCompany\",\r\n          });\r\n        }\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n  const [currency, setCurrency] = useState([]);\r\n  const getCurrency = () => {\r\n    setTimeout(() => {\r\n      CommonServices.getCurrency()\r\n        .then((response) => {\r\n          if (\r\n            response.data.Code === 200 ||\r\n            response.data.Message === \"Success\"\r\n          ) {\r\n            setCurrency(response.data.Result);\r\n          } else {\r\n            setError(\"Something went wrong\");\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          if (error.response.data.StatusCode === 404) {\r\n            setError(\"Credit performance not found\");\r\n          } else if (error.response.data.StatusCode === 400) {\r\n            setError(\"Something went wrong\");\r\n          } else if (error.response.data.StatusCode === 401) {\r\n            navigate(\"/login\");\r\n          } else if (error.response.data.StatusCode === 403) {\r\n            navigate(\"/login\");\r\n          }\r\n        });\r\n    }, 1000);\r\n  };\r\n  useEffect(() => {\r\n    getCurrency();\r\n  }, []);\r\n  return (\r\n    <div>\r\n      <CompanyModal\r\n        isOpen={isFCYInflowPerformanceModalOpen}\r\n        onClose={handleFCYInflowPerformanceCloseModal}\r\n        title=\" FCY Inflow performance\"\r\n      >\r\n        <div className=\"px-4 py-3\">\r\n          <div className=\"flex flex-wrap\">\r\n            <div className=\"w-full\">\r\n              <div>\r\n                <h4 className=\"text-lg font-semibold eading-tight p-2\"></h4>\r\n                <div>\r\n                  <AddFcyInflowPerformance\r\n                    // submitted={submitted}\r\n                    // newAccountDetials={newCreditFacilityUtilizition}\r\n                    fCYInflowPerformances={fCYInflowPerformances}\r\n                    handleInputChangeFCYInflowPerformance={\r\n                      handleInputChangeFCYInflowPerformance\r\n                    }\r\n                    setLoanTypeId={setLoanTypeId}\r\n                    // handleBack={handleBack}\r\n                    // handleSkip={handleSkip}\r\n                    // handleNext={handleNext}\r\n                    // loanTypeIdForPerformance={loanTypeIdForPerformance}\r\n                    currency={currency}\r\n                    saveFCYInflowPerformance={saveFCYInflowPerformance}\r\n                    setCurrencyId={setCurrencyId}\r\n                  />\r\n                  <div className=\"overflow-x-auto\">\r\n                    <table className=\"min-w-full table table-bordered table-striped bg-purple-100\">\r\n                      <thead>\r\n                        <tr className=\"bg-purple-200\">\r\n                          <th className=\"px-2 py-4\"> Budget Year</th>\r\n                          <th className=\"px-2 py-4\"> Start Date </th>\r\n                          <th className=\"px-2 py-4\"> End Date </th>\r\n                          <th className=\"px-2 py-4\"> Currency</th>\r\n                          <th className=\"px-2 py-4\"> FCY Account </th>\r\n                          <th className=\"px-2 py-4\"> Deposit Balance </th>\r\n                          <th className=\"px-2 py-4\">\r\n                            {\" \"}\r\n                            Pre ShipmentLoan Account{\" \"}\r\n                          </th>\r\n                          <th className=\"px-2 py-4\">\r\n                            {\" \"}\r\n                            Pre-Shipment Facility Limit{\" \"}\r\n                          </th>\r\n                          <th className=\"px-2 py-4\">\r\n                            {\" \"}\r\n                            Export Over draft Account\r\n                          </th>\r\n                          <th className=\"px-2 py-4\">\r\n                            {\" \"}\r\n                            Export Term Loan Account{\" \"}\r\n                          </th>\r\n                          <th className=\"px-2 py-4\">\r\n                            {\" \"}\r\n                            Total Export Credit Facility\r\n                          </th>\r\n                          <th className=\"px-2 py-4\">\r\n                            {\" \"}\r\n                            Total FCYInflow Transaction Amount Per Year{\" \"}\r\n                          </th>\r\n                          <th className=\"px-2 py-4\"> Action </th>\r\n                        </tr>\r\n                      </thead>\r\n                      <tbody>\r\n                        {fCYInflowPerformance.length === 0 ? (\r\n                          <p className=\"text-red-600 p-4\">Data not found</p>\r\n                        ) : (\r\n                          fCYInflowPerformance.map(\r\n                            (FacilityUtilizition, index) => (\r\n                              <tr\r\n                                key={index}\r\n                                className=\"bg-white border-b border-purple-200\"\r\n                              >\r\n                                <td className=\"p-2\">\r\n                                  {FacilityUtilizition.BudgetYear}\r\n                                </td>\r\n                                <td className=\"p-2\">\r\n                                  {FacilityUtilizition.StartDate}\r\n                                </td>\r\n                                <td className=\"p-2\">\r\n                                  {FacilityUtilizition.EndDate}\r\n                                </td>\r\n                                <td className=\"p-2\">\r\n                                  {FacilityUtilizition.Currency}\r\n                                </td>\r\n                                <td className=\"p-2\">\r\n                                  {FacilityUtilizition.FCYAccount}\r\n                                </td>\r\n                                <td className=\"p-2\">\r\n                                  {FacilityUtilizition.DepositBalance}\r\n                                </td>\r\n                                <td className=\"p-2\">\r\n                                  {FacilityUtilizition.PreShipmentLoanAccount}\r\n                                </td>\r\n                                <td className=\"p-2\">\r\n                                  {FacilityUtilizition.PreShipmentFacilityLimit}\r\n                                </td>\r\n                                <td className=\"p-2\">\r\n                                  {FacilityUtilizition.ExportOverdraftAccount}\r\n                                </td>\r\n                                <td className=\"p-2\">\r\n                                  {FacilityUtilizition.ExportTermLoanAccount}\r\n                                </td>\r\n                                <td className=\"p-2\">\r\n                                  {\r\n                                    FacilityUtilizition.TotalExportCreditFacility\r\n                                  }\r\n                                </td>\r\n                                <td className=\"p-2\">\r\n                                  {\r\n                                    FacilityUtilizition.TotalFCYInflowTransactionAmountPerYear\r\n                                  }\r\n                                </td>\r\n                              </tr>\r\n                            )\r\n                          )\r\n                        )}\r\n                      </tbody>\r\n                    </table>\r\n                  </div>\r\n                  {/* //   )\r\n              // )} */}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </CompanyModal>\r\n    </div>\r\n  );\r\n};\r\nexport default ViewFcyInflowPerformance;\r\n","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\accountDetail\\creditFacilityUtilizition\\preshipmentFacility\\PreshipmentFacilityService.js",[],[],"C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\accountDetail\\depositPerformance\\AddDepositPerformance.jsx",["1553","1554","1555","1556","1557","1558","1559","1560","1561","1562","1563","1564","1565"],[],"import {\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  IconButton,\r\n} from \"@mui/material\";\r\nimport LoanIconButton from \"../../../Common/LoanIconButton\";\r\nimport CompanyModal from \"../../Common/CompanyModal\";\r\nimport { RiSkipBackMiniFill } from \"react-icons/ri\";\r\nimport { BsPlus } from \"react-icons/bs\";\r\nimport { BiSkipNext, BiSkipPrevious } from \"react-icons/bi\";\r\nimport { useState } from \"react\";\r\nimport { IoRefresh } from \"react-icons/io5\";\r\nimport LoanTextField from \"../../../Common/LoanTextField\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport CommonServices from \"../../Common/CommonServices\";\r\nconst AddDepositPerformance = ({\r\n  // submitted,\r\n  // handleBack,\r\n  handleSkip,\r\n  // handleNext,\r\n  // newAccountDetials,\r\n  setDepositePerformances,\r\n  depositePerformances,\r\n  handleInputChangeDepositePerformance,\r\n  currency,\r\n  saveDepositePerformance,\r\n  setCurrencyId,\r\n}) => {\r\n  const [isDepositePerformanceModalOpen, setIsDepositePerformanceModalOpen] =\r\n    useState(false);\r\n  function handleDepositePerformanceOpenModal() {\r\n    setIsDepositePerformanceModalOpen(true);\r\n  }\r\n  function handlDepositePerformanceCloseModal() {\r\n    setIsDepositePerformanceModalOpen(false);\r\n  }\r\n  const [approvalDate, setApprovalDate] = useState(new Date());\r\n  const [startDate, setStartDate] = useState(new Date());\r\n  const [maturityDate, setMaturityDate] = useState(new Date());\r\n  const [scheduledPayment, setScheduledPayment] = useState(new Date());\r\n  const [\r\n    systemAdjustmentDate4WaiverAndExtension,\r\n    setSystemAdjustmentDate4WaiverAndExtension,\r\n  ] = useState(new Date());\r\n  const [adjustmentMaturityDate, setAdjustmentMaturityDate] = useState(\r\n    new Date()\r\n  );\r\n  return (\r\n    <>\r\n      <div className=\"flex\">\r\n        <LoanIconButton\r\n          style={{ color: \"purple\" }}\r\n          icon={<BiSkipPrevious />}\r\n          text=\"Back\"\r\n          onClick={handleSkip}\r\n        />\r\n        <LoanIconButton\r\n          style={{ color: \"purple\" }}\r\n          icon={<BsPlus />}\r\n          text=\"Add\"\r\n          onClick={handleDepositePerformanceOpenModal}\r\n        />\r\n        <LoanIconButton\r\n          style={{ color: \"purple\" }}\r\n          icon={<BiSkipNext />}\r\n          text=\"Skip\"\r\n          onClick={handleSkip}\r\n        />\r\n      </div>\r\n      <CompanyModal\r\n        isOpen={isDepositePerformanceModalOpen}\r\n        onClose={handlDepositePerformanceCloseModal}\r\n        title=\"Add other bank  \"\r\n      >\r\n        <div>\r\n          <div className=\"relative center justify-center flex-1 w-full max-w-full grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\">\r\n            <LoanTextField\r\n              id=\"BudgetYear\"\r\n              label=\"BudgetYear\"\r\n              value={depositePerformances.BudgetYear}\r\n              onChange={handleInputChangeDepositePerformance}\r\n              name=\"BudgetYear\"\r\n            />\r\n            <p>\r\n              Approval Date:\r\n              <input\r\n                id=\"StartDate\"\r\n                name=\"StartDate\"\r\n                label=\"StartDate\"\r\n                placeholder=\"StartDate\"\r\n                type=\"date\"\r\n                value={\r\n                  approvalDate.getFullYear().toString() +\r\n                  \"-\" +\r\n                  (approvalDate.getMonth() + 1).toString().padStart(2, 0) +\r\n                  \"-\" +\r\n                  approvalDate.getDate().toString().padStart(2, 0)\r\n                }\r\n                onChange={(e) => {\r\n                  setApprovalDate(new Date(e.target.value));\r\n                  depositePerformances.StartDate = approvalDate;\r\n                }}\r\n              />{\" \"}\r\n            </p>\r\n            <p>\r\n              End Date:\r\n              <input\r\n                id=\"EndDate\"\r\n                name=\"EndDate\"\r\n                label=\"EndDate\"\r\n                placeholder=\"EndDate\"\r\n                type=\"date\"\r\n                value={\r\n                  approvalDate.getFullYear().toString() +\r\n                  \"-\" +\r\n                  (approvalDate.getMonth() + 1).toString().padStart(2, 0) +\r\n                  \"-\" +\r\n                  approvalDate.getDate().toString().padStart(2, 0)\r\n                }\r\n                onChange={(e) => {\r\n                  setApprovalDate(new Date(e.target.value));\r\n                  depositePerformances.EndDate = approvalDate;\r\n                }}\r\n              />{\" \"}\r\n            </p>\r\n            <FormControl variant=\"standard\" sx={{ minWidth: 120 }}>\r\n              <InputLabel id=\"CurrencyId\" color=\"secondary\">\r\n                Currency{\" \"}\r\n              </InputLabel>\r\n              <Select\r\n                color=\"secondary\"\r\n                onChange={(event) => {\r\n                  depositePerformances.CurrencyId = event.target.value;\r\n                  setCurrencyId(event.target.value);\r\n                }}\r\n                labelId=\"CurrencyId\"\r\n                id=\"CurrencyId\"\r\n                label=\"CurrencyId\"\r\n              >\r\n                <MenuItem value=\"\">\r\n                  <em>None</em>\r\n                </MenuItem>\r\n                {currency.map((yourLoan) => (\r\n                  <MenuItem\r\n                    key={yourLoan.Id}\r\n                    CurrencyId={yourLoan.Id}\r\n                    value={yourLoan.Id}\r\n                  >\r\n                    {yourLoan.Name}\r\n                  </MenuItem>\r\n                ))}\r\n              </Select>\r\n            </FormControl>\r\n            <LoanTextField\r\n              id=\"DepositeAccount\"\r\n              label=\"DepositeAccount\"\r\n              value={depositePerformances.DepositeAccount}\r\n              onChange={handleInputChangeDepositePerformance}\r\n              name=\"DepositeAccount\"\r\n            />\r\n            <LoanTextField\r\n              id=\"DepositBalance\"\r\n              label=\"DepositBalance\"\r\n              value={depositePerformances.DepositBalance}\r\n              onChange={handleInputChangeDepositePerformance}\r\n              name=\"DepositBalance\"\r\n            />\r\n            <LoanTextField\r\n              id=\"AverageMonthlyDepositPerAnnum\"\r\n              label=\"AverageMonthlyDepositPerAnnum\"\r\n              value={depositePerformances.AverageMonthlyDepositPerAnnum}\r\n              onChange={handleInputChangeDepositePerformance}\r\n              name=\"AverageMonthlyDepositPerAnnum\"\r\n            />\r\n            <LoanTextField\r\n              id=\"TotalCreditTransactionAmountPerAnnum\"\r\n              label=\"TotalCreditTransactionAmountPerAnnum\"\r\n              value={depositePerformances.TotalCreditTransactionAmountPerAnnum}\r\n              onChange={handleInputChangeDepositePerformance}\r\n              name=\"TotalCreditTransactionAmountPerAnnum\"\r\n            />\r\n            {/* ApprovalDate */}\r\n            <p>\r\n              AccountOpeningDate:\r\n              <input\r\n                id=\"AccountOpeningDate\"\r\n                name=\"AccountOpeningDate\"\r\n                label=\"AccountOpeningDate\"\r\n                placeholder=\"AccountOpeningDate\"\r\n                type=\"date\"\r\n                value={\r\n                  approvalDate.getFullYear().toString() +\r\n                  \"-\" +\r\n                  (approvalDate.getMonth() + 1).toString().padStart(2, 0) +\r\n                  \"-\" +\r\n                  approvalDate.getDate().toString().padStart(2, 0)\r\n                }\r\n                onChange={(e) => {\r\n                  setApprovalDate(new Date(e.target.value));\r\n                  depositePerformances.AccountOpeningDate = approvalDate;\r\n                }}\r\n              />{\" \"}\r\n            </p>\r\n            <LoanTextField\r\n              id=\"TotalCreditTransactionNumberPerAnnum\"\r\n              label=\"TotalCreditTransactionNumberPerAnnum\"\r\n              value={depositePerformances.TotalCreditTransactionNumberPerAnnum}\r\n              onChange={handleInputChangeDepositePerformance}\r\n              name=\"TotalCreditTransactionNumberPerAnnum\"\r\n            />\r\n            <LoanTextField\r\n              id=\"DepositSalesRatio\"\r\n              label=\"DepositSalesRatio\"\r\n              value={depositePerformances.DepositSalesRatio}\r\n              onChange={handleInputChangeDepositePerformance}\r\n              name=\"DepositSalesRatio\"\r\n            />\r\n          </div>\r\n          <div className=\"flex justify-center p-2 pt-5\">\r\n            <button\r\n              className=\"bg-[purple] hover:bg-purple-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\"\r\n              onClick={() => {\r\n                saveDepositePerformance();\r\n              }}\r\n            >\r\n              Save\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </CompanyModal>\r\n    </>\r\n  );\r\n};\r\nexport default AddDepositPerformance;\r\n","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\accountDetail\\creditFacilityUtilizition\\preshipmentFacility\\ViewPreshipmentFacility.jsx",["1566","1567","1568","1569","1570","1571","1572","1573","1574","1575","1576","1577","1578","1579","1580","1581","1582","1583","1584","1585","1586","1587","1588","1589","1590","1591","1592","1593","1594","1595","1596"],[],"import {\r\n  TextField,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n} from \"@mui/material\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { FaSpinner } from \"react-icons/fa\";\r\nimport { BiSkipNext } from \"react-icons/bi\";\r\nimport { MdModeEdit } from \"react-icons/md\";\r\nimport { IoTrashOutline } from \"react-icons/io5\";\r\nimport { useParams, useNavigate } from \"react-router-dom\";\r\nimport CompanyNavigation from \"../../../../Common/CompanyNavigation\";\r\nimport LoanIconButton from \"../../../../Common/LoanIconButton\";\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\nimport CompanyModal from \"../../../Common/CompanyModal\";\r\nimport { Link } from \"react-router-dom\";\r\nimport CommonServices from \"../../../Common/CommonServices\";\r\n// import AddCreditFacilityUtilizition from \"./AddCreditPerformance\";\r\nimport preshipmentFacilityServivice from \"./PreshipmentFacilityService\";\r\nimport AddPreshipmentFacility from \"./AddPreshipmentFacility\";\r\nimport LoanTextField from \"../../../../Common/LoanTextField\";\r\nconst ViewPreshipmentFacility = ({\r\n  isPreshipmentFacilityModalOpen,\r\n  handlePreshipmentFacilityCloseModal,\r\n  setIsPreshipmentFacilityModalOpen,\r\n  creditFacilityUtilizitionId,\r\n  preshipmentFacility,\r\n}) => {\r\n  const [CreditPerformanceErrorLoading, setCreditPerformanceErrorLoading] =\r\n    useState(false);\r\n  const [PreshipmentErrorLoading, setPreshipmentErrorLoading] = useState(false);\r\n  const navigate = useNavigate();\r\n  // const { companyId } = useParams();\r\n  const [loanTypeId, setLoanTypeId] = useState([]);\r\n  const [currencyId, setCurrencyId] = useState([]);\r\n  const [preshipmentFacilityId, setPreshipmentFacilityId] = useState([]);\r\n  const [deleteLoading, setDeleteLoading] = useState(false);\r\n  const [approvalDate, setApprovalDate] = useState(new Date());\r\n  const [startDate, setStartDate] = useState(new Date());\r\n  const [maturityDate, setMaturityDate] = useState(new Date());\r\n  const [scheduledPayment, setScheduledPayment] = useState(new Date());\r\n  const [salesContractDate, setSalesContractDate] = useState(new Date());\r\n  const [lOT1ShipmentDate, setLOT1ShipmentDate] = useState(new Date());\r\n  const [lOT1DisbursementDate, setLOT1DisbursementDate] = useState(new Date());\r\n  const [lOT1IncomingDate, setLOT1IncomingDate] = useState(new Date());\r\n  const [shipmentDate, setShipmentDate] = useState(new Date());\r\n  const [adjustmentMaturityDate, setAdjustmentMaturityDate] = useState(\r\n    new Date()\r\n  );\r\n  const [\r\n    systemAdjustmentDate4WaiverAndExtension,\r\n    setSystemAdjustmentDate4WaiverAndExtension,\r\n  ] = useState(new Date());\r\n  const [deletePreshipmentFacilityError, setPreshipmentFacilityDeleteError] =\r\n    useState(null);\r\n  const [error, setError] = useState(null);\r\n  const [\r\n    isPreshipmentFacilityEditModalOpen,\r\n    setIsPreshipmentFacilityEditModalOpen,\r\n  ] = useState(false);\r\n  function handlePreshipmentFacilityEditOpenModal() {\r\n    setIsPreshipmentFacilityEditModalOpen(true);\r\n  }\r\n  function handlePreshipmentFacilityEditCloseModal() {\r\n    setIsPreshipmentFacilityEditModalOpen(false);\r\n  }\r\n  function handlePreshipmentFacilityEditOpenModal() {\r\n    setIsPreshipmentFacilityEditModalOpen(true);\r\n  }\r\n  function handlePreshipmentFacilityEditCloseModal() {\r\n    setIsPreshipmentFacilityEditModalOpen(false);\r\n  }\r\n  const handleInputChangePreshipmentFacility = (event) => {\r\n    const { name, value } = event.target;\r\n    setPreshipmentFacilitys({\r\n      ...preshipmentFacilitys,\r\n      [name]: value,\r\n    });\r\n  };\r\n  const initialPreshipmentFacilityState = {\r\n    Id: null,\r\n    ApprovedFacilityLimit: \"\",\r\n    TypesOfGoods: \"\",\r\n    StartDate: \"\",\r\n    MaturityDate: \"\",\r\n    SalesContractVersion: \"\",\r\n    SalesContractDocument: \"\",\r\n    SalesContractDate: \"\",\r\n    SectorTypeId: \"\",\r\n    CurrencyId: \"\",\r\n    ContractValue: \"\",\r\n    ShipmentDate: \"\",\r\n    CountryId: \"\",\r\n    IsPartialShipmentAllowed: \"\",\r\n    IsLOTDefined: \"\",\r\n    LOT1Value: \"\",\r\n    LOT1ShipmentDate: \"\",\r\n    LOT1DisbursementDate: \"\",\r\n    LOT1DisbursementAmount: \"\",\r\n    IsLOT1ShipmentMade: \"\",\r\n    LOT1IncomingDate: \"\",\r\n    LOT1ProceedValue: \"\",\r\n    LOT1CurrencyId: \"\",\r\n    LOT1ExchangeRate: \"\",\r\n    LOT1LocalCurrencyAmount: \"\",\r\n    IsProceedSettledDisbursementAmount: \"\",\r\n    IsThereProceedRemainedToBeCollected: \"\",\r\n    IsCustomerPresentedNewContractForAmendment: \"\",\r\n    TurnOver: \"\",\r\n    NextAction: \"\",\r\n  };\r\n  const [preshipmentFacilitys, setPreshipmentFacilitys] = useState(\r\n    initialPreshipmentFacilityState\r\n  );\r\n  const newPreshipmentFacility = () => {\r\n    setPreshipmentFacilitys(initialPreshipmentFacilityState);\r\n    // setSubmitted(false);\r\n  };\r\n  const savePreshipmentFacility = () => {\r\n    var data = {\r\n      ApprovedFacilityLimit: preshipmentFacilitys.ApprovedFacilityLimit,\r\n      TypesOfGoods: preshipmentFacilitys.TypesOfGoods,\r\n      StartDate: preshipmentFacilitys.StartDate,\r\n      MaturityDate: preshipmentFacilitys.MaturityDate,\r\n      SalesContractVersion: preshipmentFacilitys.SalesContractVersion,\r\n      SalesContractDocument: preshipmentFacilitys.SalesContractDocument,\r\n      SalesContractDate: preshipmentFacilitys.SalesContractDate,\r\n      SectorTypeId: preshipmentFacilitys.SectorTypeId,\r\n      CurrencyId: preshipmentFacilitys.CurrencyId,\r\n      ContractValue: preshipmentFacilitys.ContractValue,\r\n      ShipmentDate: preshipmentFacilitys.ShipmentDate,\r\n      CountryId: preshipmentFacilitys.CountryId,\r\n      IsPartialShipmentAllowed: preshipmentFacilitys.IsPartialShipmentAllowed,\r\n      IsLOTDefined: preshipmentFacilitys.IsLOTDefined,\r\n      LOT1Value: preshipmentFacilitys.LOT1Value,\r\n      LOT1ShipmentDate: preshipmentFacilitys.LOT1ShipmentDate,\r\n      LOT1DisbursementDate: preshipmentFacilitys.LOT1DisbursementDate,\r\n      LOT1DisbursementAmount: preshipmentFacilitys.LOT1DisbursementAmount,\r\n      IsLOT1ShipmentMade: preshipmentFacilitys.IsLOT1ShipmentMade,\r\n      LOT1IncomingDate: preshipmentFacilitys.LOT1IncomingDate,\r\n      LOT1ProceedValue: preshipmentFacilitys.LOT1ProceedValue,\r\n      LOT1CurrencyId: preshipmentFacilitys.LOT1CurrencyId,\r\n      LOT1ExchangeRate: preshipmentFacilitys.LOT1ExchangeRate,\r\n      LOT1LocalCurrencyAmount: preshipmentFacilitys.LOT1LocalCurrencyAmount,\r\n      IsProceedSettledDisbursementAmount:\r\n        preshipmentFacilitys.IsProceedSettledDisbursementAmount,\r\n      IsThereProceedRemainedToBeCollected:\r\n        preshipmentFacilitys.IsThereProceedRemainedToBeCollected,\r\n      IsCustomerPresentedNewContractForAmendment:\r\n        preshipmentFacilitys.IsCustomerPresentedNewContractForAmendment,\r\n      TurnOver: preshipmentFacilitys.TurnOver,\r\n      NextAction: preshipmentFacilitys.NextAction,\r\n    };\r\n    preshipmentFacilityServivice\r\n      .addPreshipmentFacility(data, creditFacilityUtilizitionId)\r\n      .then((response) => {\r\n        setPreshipmentFacilitys({\r\n          Id: response.data.Id,\r\n          ApprovedFacilityLimit: response.data.ApprovedFacilityLimit,\r\n          TypesOfGoods: response.data.TypesOfGoods,\r\n          StartDate: response.data.StartDate,\r\n          MaturityDate: response.data.MaturityDate,\r\n          SalesContractVersion: response.data.SalesContractVersion,\r\n          SalesContractDate: response.data.SalesContractDate,\r\n          SectorTypeId: response.data.SectorTypeId,\r\n          CurrencyId: response.data.CurrencyId,\r\n          ContractValue: response.data.ContractValue,\r\n          ShipmentDate: response.data.ShipmentDate,\r\n          CountryId: response.data.CountryId,\r\n          IsPartialShipmentAllowed: response.data.IsPartialShipmentAllowed,\r\n          IsLOTDefined: response.data.IsLOTDefined,\r\n          LOT1Value: response.data.LOT1Value,\r\n          LOT1ShipmentDate: response.data.LOT1ShipmentDate,\r\n          LOT1DisbursementDate: response.data.LOT1DisbursementDate,\r\n          LOT1DisbursementAmount: response.data.LOT1DisbursementAmount,\r\n          IsLOT1ShipmentMade: response.data.IsLOT1ShipmentMade,\r\n          LOT1IncomingDate: response.data.LOT1IncomingDate,\r\n          LOT1ProceedValue: response.data.LOT1ProceedValue,\r\n          LOT1CurrencyId: response.data.LOT1CurrencyId,\r\n          LOT1ExchangeRate: response.data.LOT1ExchangeRate,\r\n          LOT1LocalCurrencyAmount: response.data.LOT1LocalCurrencyAmount,\r\n          IsProceedSettledDisbursementAmount:\r\n            response.data.IsProceedSettledDisbursementAmount,\r\n          IsThereProceedRemainedToBeCollected:\r\n            response.data.IsThereProceedRemainedToBeCollected,\r\n          IsCustomerPresentedNewContractForAmendment:\r\n            response.data.IsCustomerPresentedNewContractForAmendment,\r\n          TurnOver: response.data.TurnOver,\r\n          NextAction: response.data.NextAction,\r\n        });\r\n        if (response.data.Code === 200) {\r\n          setPreshipmentFacilitys(initialPreshipmentFacilityState);\r\n          console.log(response.data);\r\n          // setHoldId(response.data.Result.Id);\r\n          preshipmentFacility();\r\n          toast.success(\"Added successfully\", {\r\n            position: toast.POSITION.TOP_RIGHT,\r\n            toastId: \"PreshipmentFacility\",\r\n          });\r\n        }\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n  const handleDelete = (preshipmentFacility) => {\r\n    setDeleteLoading(true);\r\n    const confirm = window.confirm(\r\n      `Are you sure you want to delete ${preshipmentFacility.LoanAccount}?`\r\n    );\r\n    if (confirm) {\r\n      toast.success(\"Deleting\", {\r\n        position: toast.POSITION.TOP_RIGHT,\r\n        toastId: \"deletePreshipmentFacility\",\r\n      });\r\n      preshipmentFacilityServivice\r\n        .deletepreshipmentFacilityById(preshipmentFacility.Id)\r\n        .then(() => {\r\n          preshipmentFacility((previousData) =>\r\n            previousData.filter((comp) => comp.Id !== preshipmentFacility.Id)\r\n          );\r\n        })\r\n        .catch((e) => {\r\n          setPreshipmentFacilityDeleteError(e);\r\n          setDeleteLoading(false);\r\n        });\r\n    }\r\n  };\r\n  const [editPreshipmentFacility, setEditPreshipmentFacility] = useState({\r\n    //  Id: editAddresAccountDetailId,\r\n    ApprovedFacilityLimit: \"\",\r\n    TypesOfGoods: \"\",\r\n    StartDate: \"\",\r\n    MaturityDate: \"\",\r\n    SalesContractVersion: \"\",\r\n    SalesContractDocument: \"\",\r\n    SalesContractDate: \"\",\r\n    SectorTypeId: \"\",\r\n    CurrencyId: \"\",\r\n    ContractValue: \"\",\r\n    ShipmentDate: \"\",\r\n    CountryId: \"\",\r\n    IsPartialShipmentAllowed: \"\",\r\n    IsLOTDefined: \"\",\r\n    LOT1Value: \"\",\r\n    LOT1ShipmentDate: \"\",\r\n    LOT1DisbursementDate: \"\",\r\n    LOT1DisbursementAmount: \"\",\r\n    IsLOT1ShipmentMade: \"\",\r\n    LOT1IncomingDate: \"\",\r\n    LOT1ProceedValue: \"\",\r\n    LOT1CurrencyId: \"\",\r\n    LOT1ExchangeRate: \"\",\r\n    LOT1LocalCurrencyAmount: \"\",\r\n    IsProceedSettledDisbursementAmount: \"\",\r\n    IsThereProceedRemainedToBeCollected: \"\",\r\n    IsCustomerPresentedNewContractForAmendment: \"\",\r\n    TurnOver: \"\",\r\n    NextAction: \"\",\r\n  });\r\n\r\n  const handleInputChangeEditPreshipmentFacility = (event) => {\r\n    const { name, value } = event.target;\r\n    setEditPreshipmentFacility({\r\n      ...editPreshipmentFacility,\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  const getPreshipmentFacilityId = (editPreshipmentFacilityId) => {\r\n    preshipmentFacilityServivice\r\n      .getpreshipmentFacilityById(editPreshipmentFacilityId)\r\n      .then((res) => {\r\n        setEditPreshipmentFacility({\r\n          ...editPreshipmentFacility,\r\n          Id: editPreshipmentFacilityId,\r\n          ApprovedFacilityLimit: res.data.Result.ApprovedFacilityLimit,\r\n          TypesOfGoods: res.data.Result.TypesOfGoods,\r\n          StartDate: res.data.Result.StartDate,\r\n          MaturityDate: res.data.Result.MaturityDate,\r\n          SalesContractVersion: res.data.Result.SalesContractVersion,\r\n          SalesContractDocument: res.data.Result.SalesContractDocument,\r\n          SalesContractDate: res.data.Result.SalesContractDate,\r\n          SectorTypeId: res.data.Result.SectorTypeId,\r\n          CurrencyId: res.data.Result.CurrencyId,\r\n          ContractValue: res.data.Result.ContractValue,\r\n          ShipmentDate: res.data.Result.ShipmentDate,\r\n          CountryId: res.data.Result.CountryId,\r\n          IsPartialShipmentAllowed: res.data.Result.IsPartialShipmentAllowed,\r\n          IsLOTDefined: res.data.Result.IsLOTDefined,\r\n          LOT1Value: res.data.Result.LOT1Value,\r\n          LOT1ShipmentDate: res.data.Result.LOT1ShipmentDate,\r\n          LOT1DisbursementDate: res.data.Result.LOT1DisbursementDate,\r\n          LOT1DisbursementAmount: res.data.Result.LOT1DisbursementAmount,\r\n          IsLOT1ShipmentMade: res.data.Result.IsLOT1ShipmentMade,\r\n          LOT1IncomingDate: res.data.Result.LOT1IncomingDate,\r\n          LOT1ProceedValue: res.data.Result.LOT1ProceedValue,\r\n          LOT1CurrencyId: res.data.Result.LOT1CurrencyId,\r\n          LOT1ExchangeRate: res.data.Result.LOT1ExchangeRate,\r\n          LOT1LocalCurrencyAmount: res.data.Result.LOT1LocalCurrencyAmount,\r\n          IsProceedSettledDisbursementAmount:\r\n            res.data.Result.IsProceedSettledDisbursementAmount,\r\n          IsThereProceedRemainedToBeCollected:\r\n            res.data.Result.IsThereProceedRemainedToBeCollected,\r\n          IsCustomerPresentedNewContractForAmendment:\r\n            res.data.Result.IsCustomerPresentedNewContractForAmendment,\r\n          TurnOver: res.data.Result.TurnOver,\r\n          NextAction: res.data.Result.NextAction,\r\n        });\r\n      })\r\n      .catch((err) => {\r\n        if (err.response.data.StatusCode === 404) {\r\n          console.log(err.response.data.Message);\r\n        }\r\n      });\r\n  };\r\n  const updatePreshipmentFacilityById = (e) => {\r\n    e.preventDefault();\r\n    preshipmentFacilityServivice\r\n      .updatePreshipmentFacilityById(\r\n        preshipmentFacilityId,\r\n        editPreshipmentFacility\r\n      )\r\n      .then((response) => {\r\n        if (response.data.Code === 200) {\r\n          preshipmentFacility();\r\n          toast.success(\"Updated successfully\", {\r\n            position: toast.POSITION.TOP_RIGHT,\r\n            toastId: \"updateCompany\",\r\n          });\r\n        }\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n  const [currency, setCurrency] = useState([]);\r\n  const getCurrency = () => {\r\n    setTimeout(() => {\r\n      CommonServices.getCurrency()\r\n        .then((response) => {\r\n          if (\r\n            response.data.Code === 200 ||\r\n            response.data.Message === \"Success\"\r\n          ) {\r\n            setCurrency(response.data.Result);\r\n          } else {\r\n            setCreditPerformanceErrorLoading(false);\r\n            setError(\"Something went wrong\");\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          if (error.response.data.StatusCode === 404) {\r\n            setError(\"Credit performance not found\");\r\n            setCreditPerformanceErrorLoading(false);\r\n          } else if (error.response.data.StatusCode === 400) {\r\n            setError(\"Something went wrong\");\r\n            setCreditPerformanceErrorLoading(false);\r\n          } else if (error.response.data.StatusCode === 401) {\r\n            navigate(\"/login\");\r\n          } else if (error.response.data.StatusCode === 403) {\r\n            navigate(\"/login\");\r\n          }\r\n        });\r\n    }, 1000);\r\n  };\r\n  useEffect(() => {\r\n    getCurrency();\r\n  }, []);\r\n  return (\r\n    <div>\r\n      <CompanyModal\r\n        isOpen={isPreshipmentFacilityModalOpen}\r\n        onClose={handlePreshipmentFacilityCloseModal}\r\n        title=\" preshipment information\"\r\n      >\r\n        <div className=\"flex items-top justify-top h-screen overflow-x-scroll overflow-y-scroll\">\r\n          <div>\r\n            <div className=\"rounded-lg overflow-hidden overflow-x-scroll overflow-y-scroll\">\r\n              {/* <div className=\"bg-gray-100 flex items-center justify-center h-screen\"> */}\r\n              <div>\r\n                <h4 className=\"text-lg font-semibold eading-tight p-2\"></h4>\r\n                <AddPreshipmentFacility\r\n                  handleInputChangePreshipmentFacility={\r\n                    handleInputChangePreshipmentFacility\r\n                  }\r\n                  savePreshipmentFacility={savePreshipmentFacility}\r\n                  preshipmentFacilitys={preshipmentFacilitys}\r\n                  setPreshipmentFacilitys={setPreshipmentFacilitys}\r\n                />\r\n                <div>\r\n                  {error && <p className=\"text-red-500\">{error}</p>}\r\n                  {!error && PreshipmentErrorLoading ? (\r\n                    <span>\r\n                      <FaSpinner\r\n                        className=\"animate-spin rounded-full h-6 w-6 text-purple-600\"\r\n                        fontSize=\"small\"\r\n                        data-toggle=\"tooltip\"\r\n                        title=\"Click it to sign in\"\r\n                      />\r\n                      Loading...\r\n                    </span>\r\n                  ) : (\r\n                    !error &&\r\n                    !PreshipmentErrorLoading && (\r\n                      <div className=\"overflow-x-auto\">\r\n                        <table className=\"min-w-full table table-bordered table-striped bg-purple-100\">\r\n                          <thead>\r\n                            <tr className=\"bg-purple-200\">\r\n                              <th className=\"px-2 py-4\">\r\n                                {\" \"}\r\n                                Approved Facility Limit\r\n                              </th>\r\n                              <th className=\"px-2 py-4\"> Types Of Goods </th>\r\n                              <th className=\"px-2 py-4\"> Start Date </th>\r\n                              <th className=\"px-2 py-4\"> Maturity Date </th>\r\n                              <th className=\"px-2 py-4\">\r\n                                {\" \"}\r\n                                Sales Contract Version{\" \"}\r\n                              </th>\r\n                              <th className=\"px-2 py-4\">\r\n                                {\" \"}\r\n                                Sales Contract Date{\" \"}\r\n                              </th>\r\n                              <th className=\"px-2 py-4\"> Sector Type </th>\r\n                              <th className=\"px-2 py-4\"> Currency </th>\r\n                              <th className=\"px-2 py-4\"> Contract Value </th>\r\n                              <th className=\"px-2 py-4\"> Shipment Date </th>\r\n                              <th className=\"px-2 py-4\"> Country </th>\r\n                              <th className=\"px-2 py-4\">\r\n                                {\" \"}\r\n                                Partial Shipment Allowed{\" \"}\r\n                              </th>\r\n                              <th className=\"px-2 py-4\"> LOT Defined </th>\r\n                              <th className=\"px-2 py-4\"> LOT Value </th>\r\n                              <th className=\"px-2 py-4\"> LOT Shipment Date </th>\r\n                              <th className=\"px-2 py-4\">\r\n                                {\" \"}\r\n                                LOT Disbursement Date{\" \"}\r\n                              </th>\r\n                              <th className=\"px-2 py-4\">\r\n                                {\" \"}\r\n                                LOT Disbursement Amount{\" \"}\r\n                              </th>\r\n                              <th className=\"px-2 py-4\"> LOT Shipment Made </th>\r\n                              <th className=\"px-2 py-4\"> LOT Incoming Date </th>\r\n                              <th className=\"px-2 py-4\"> LOT Proceed Value </th>\r\n                              <th className=\"px-2 py-4\"> LOT Currency </th>\r\n                              <th className=\"px-2 py-4\"> LOT Exchange Rate </th>\r\n                              <th className=\"px-2 py-4\">\r\n                                {\" \"}\r\n                                LOT Local Currency Amount{\" \"}\r\n                              </th>\r\n                              <th className=\"px-2 py-4\">\r\n                                {\" \"}\r\n                                Proceed Settled Disbursement Amount{\" \"}\r\n                              </th>\r\n                              <th className=\"px-2 py-4\">\r\n                                {\" \"}\r\n                                Proceed Remained To Be Collected{\" \"}\r\n                              </th>\r\n                              <th className=\"px-2 py-4\">\r\n                                {\" \"}\r\n                                Customer Presented New Contract For Amendment{\" \"}\r\n                              </th>\r\n                              <th className=\"px-2 py-4\"> Turn Over </th>\r\n                              <th className=\"px-2 py-4\"> Next Action</th>\r\n                              <th className=\"px-2 py-4\"> Action </th>\r\n                            </tr>\r\n                          </thead>\r\n                          <tbody>\r\n                            {preshipmentFacility.length === 0 ? (\r\n                              <p className=\"text-red-600 p-4\">Data not found</p>\r\n                            ) : (\r\n                              preshipmentFacility.map(\r\n                                (preshipmentFacilitys, index) => (\r\n                                  <tr\r\n                                    key={index}\r\n                                    className=\"bg-white\r\n                    border-b border-purple-200\"\r\n                                  >\r\n                                    <td className=\"p-2\">\r\n                                      {\r\n                                        preshipmentFacilitys.ApprovedFacilityLimit\r\n                                      }\r\n                                    </td>\r\n                                    <td className=\"p-2\">\r\n                                      {preshipmentFacilitys.TypesOfGoods}\r\n                                    </td>\r\n                                    <td className=\"p-2\">\r\n                                      {preshipmentFacilitys.StartDate}\r\n                                    </td>\r\n                                    <td className=\"p-2\">\r\n                                      {preshipmentFacilitys.MaturityDate}\r\n                                    </td>\r\n                                    <td className=\"p-2\">\r\n                                      {\r\n                                        preshipmentFacilitys.SalesContractVersion\r\n                                      }\r\n                                    </td>\r\n                                    <td className=\"p-2\">\r\n                                      {preshipmentFacilitys.SalesContractDate}\r\n                                    </td>\r\n                                    <td className=\"p-2\">\r\n                                      {preshipmentFacilitys.SectorTypeId}\r\n                                    </td>\r\n                                    <td className=\"p-2\">\r\n                                      {preshipmentFacilitys.CurrencyId}\r\n                                    </td>\r\n                                    <td className=\"p-2\">\r\n                                      {preshipmentFacilitys.ContractValue}\r\n                                    </td>\r\n                                    <td className=\"p-2\">\r\n                                      {preshipmentFacilitys.ShipmentDate}\r\n                                    </td>\r\n                                    <td className=\"p-2\">\r\n                                      {preshipmentFacilitys.CountryId}\r\n                                    </td>\r\n                                    <td className=\"p-2\">\r\n                                      {\r\n                                        preshipmentFacilitys.IsPartialShipmentAllowed\r\n                                      }\r\n                                    </td>\r\n                                    <td className=\"p-2\">\r\n                                      {preshipmentFacilitys.IsLOTDefined}\r\n                                    </td>\r\n                                    <td className=\"p-2\">\r\n                                      {preshipmentFacilitys.LOT1Value}\r\n                                    </td>\r\n                                    <td className=\"p-2\">\r\n                                      {preshipmentFacilitys.LOT1ShipmentDate}\r\n                                    </td>\r\n                                    <td className=\"p-2\">\r\n                                      {\r\n                                        preshipmentFacilitys.LOT1DisbursementDate\r\n                                      }\r\n                                    </td>\r\n                                    <td className=\"p-2\">\r\n                                      {\r\n                                        preshipmentFacilitys.LOT1DisbursementAmount\r\n                                      }\r\n                                    </td>\r\n                                    <td className=\"p-2\">\r\n                                      {preshipmentFacilitys.IsLOT1ShipmentMade}\r\n                                    </td>\r\n                                    <td className=\"p-2\">\r\n                                      {preshipmentFacilitys.LOT1IncomingDate}\r\n                                    </td>\r\n                                    <td className=\"p-2\">\r\n                                      {preshipmentFacilitys.LOT1ProceedValue}\r\n                                    </td>\r\n                                    <td className=\"p-2\">\r\n                                      {preshipmentFacilitys.LOT1CurrencyId}\r\n                                    </td>\r\n                                    <td className=\"p-2\">\r\n                                      {preshipmentFacilitys.LOT1ExchangeRate}\r\n                                    </td>\r\n                                    <td className=\"p-2\">\r\n                                      {\r\n                                        preshipmentFacilitys.LOT1LocalCurrencyAmount\r\n                                      }\r\n                                    </td>\r\n                                    <td className=\"p-2\">\r\n                                      {\r\n                                        preshipmentFacilitys.IsProceedSettledDisbursementAmount\r\n                                      }\r\n                                    </td>\r\n                                    <td className=\"p-2\">\r\n                                      {\r\n                                        preshipmentFacilitys.IsThereProceedRemainedToBeCollected\r\n                                      }\r\n                                    </td>\r\n                                    <td className=\"p-2\">\r\n                                      {\r\n                                        preshipmentFacilitys.IsCustomerPresentedNewContractForAmendment\r\n                                      }\r\n                                    </td>\r\n                                    <td className=\"p-2\">\r\n                                      {preshipmentFacilitys.TurnOver}\r\n                                    </td>\r\n                                    <td className=\"p-2\">\r\n                                      {preshipmentFacilitys.NextAction}\r\n                                    </td>\r\n                                    <td>\r\n                                      <button\r\n                                        delete\r\n                                        type=\"submit\"\r\n                                        onClick={() => {\r\n                                          handleDelete(preshipmentFacilitys);\r\n                                        }}\r\n                                        className=\"text-red-600 rounded-md font-semibold \"\r\n                                      >\r\n                                        delete\r\n                                      </button>\r\n                                    </td>\r\n                                    <td>\r\n                                      <button\r\n                                        edit\r\n                                        type=\"submit\"\r\n                                        onClick={() => {\r\n                                          handlePreshipmentFacilityEditOpenModal();\r\n                                          getPreshipmentFacilityId(\r\n                                            preshipmentFacilitys.Id\r\n                                          );\r\n                                          setPreshipmentFacilityId(\r\n                                            preshipmentFacilitys.Id\r\n                                          );\r\n                                        }}\r\n                                        className=\"text-red-600 rounded-md font-semibold \"\r\n                                      >\r\n                                        Edit\r\n                                      </button>\r\n                                    </td>\r\n                                  </tr>\r\n                                )\r\n                              )\r\n                            )}\r\n                          </tbody>\r\n                        </table>\r\n                      </div>\r\n                    )\r\n                  )}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </CompanyModal>\r\n      <CompanyModal\r\n        isOpen={isPreshipmentFacilityEditModalOpen}\r\n        onClose={handlePreshipmentFacilityEditCloseModal}\r\n        title=\"Modify account detail information\"\r\n      >\r\n        <div>\r\n          <form onSubmit={updatePreshipmentFacilityById}>\r\n            <div className=\"grid grid-cols-1 gap-4 submit-form\">\r\n              <div className=\"submit-form \">\r\n                <div className=\"relative center justify-center flex-1 w-full max-w-full grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\">\r\n                  <TextField\r\n                    id=\"ApprovedFacilityLimit\"\r\n                    label=\"ApprovedFacilityLimit\"\r\n                    variant=\"standard\"\r\n                    color=\"secondary\"\r\n                    size=\"\"\r\n                    required\r\n                    value={editPreshipmentFacility.ApprovedFacilityLimit}\r\n                    onChange={(e) =>\r\n                      setEditPreshipmentFacility({\r\n                        ...editPreshipmentFacility,\r\n                        ApprovedFacilityLimit: e.target.value,\r\n                      })\r\n                    }\r\n                    name=\"LoanAccount\"\r\n                  />\r\n                  <TextField\r\n                    id=\"TypesOfGoods\"\r\n                    label=\"TypesOfGoods\"\r\n                    variant=\"standard\"\r\n                    color=\"secondary\"\r\n                    size=\"\"\r\n                    required\r\n                    value={editPreshipmentFacility.TypesOfGoods}\r\n                    onChange={(e) =>\r\n                      setEditPreshipmentFacility({\r\n                        ...editPreshipmentFacility,\r\n                        TypesOfGoods: e.target.value,\r\n                      })\r\n                    }\r\n                    name=\"LoanAccount\"\r\n                  />\r\n                  <p>\r\n                    Start Date:\r\n                    <input\r\n                      id=\"StartDate\"\r\n                      name=\"StartDate\"\r\n                      label=\"StartDate\"\r\n                      placeholder=\"StartDate\"\r\n                      type=\"date\"\r\n                      value={\r\n                        startDate.getFullYear().toString() +\r\n                        \"-\" +\r\n                        (startDate.getMonth() + 1).toString().padStart(2, 0) +\r\n                        \"-\" +\r\n                        startDate.getDate().toString().padStart(2, 0)\r\n                      }\r\n                      onChange={(e) => {\r\n                        setStartDate(new Date(e.target.value));\r\n                        editPreshipmentFacility.StartDate = startDate;\r\n                      }}\r\n                    />{\" \"}\r\n                  </p>\r\n                  <p>\r\n                    Maturity Date:\r\n                    <input\r\n                      id=\"MaturityDate\"\r\n                      name=\"MaturityDate\"\r\n                      label=\"MaturityDate\"\r\n                      placeholder=\"MaturityDate\"\r\n                      type=\"date\"\r\n                      value={\r\n                        maturityDate.getFullYear().toString() +\r\n                        \"-\" +\r\n                        (maturityDate.getMonth() + 1)\r\n                          .toString()\r\n                          .padStart(2, 0) +\r\n                        \"-\" +\r\n                        maturityDate.getDate().toString().padStart(2, 0)\r\n                      }\r\n                      onChange={(e) => {\r\n                        setMaturityDate(new Date(e.target.value));\r\n                        editPreshipmentFacility.MaturityDate = maturityDate;\r\n                      }}\r\n                    />{\" \"}\r\n                  </p>\r\n                  <TextField\r\n                    id=\"SalesContractVersion\"\r\n                    label=\"SalesContractVersion\"\r\n                    variant=\"standard\"\r\n                    color=\"secondary\"\r\n                    size=\"\"\r\n                    required\r\n                    value={editPreshipmentFacility.SalesContractVersion}\r\n                    onChange={(e) =>\r\n                      setEditPreshipmentFacility({\r\n                        ...editPreshipmentFacility,\r\n                        SalesContractVersion: e.target.value,\r\n                      })\r\n                    }\r\n                    name=\"SalesContractVersion\"\r\n                  />\r\n                  <TextField\r\n                    id=\"SalesContractDocument\"\r\n                    label=\"SalesContractDocument\"\r\n                    variant=\"standard\"\r\n                    color=\"secondary\"\r\n                    size=\"\"\r\n                    required\r\n                    value={editPreshipmentFacility.SalesContractDocument}\r\n                    onChange={(e) =>\r\n                      setEditPreshipmentFacility({\r\n                        ...editPreshipmentFacility,\r\n                        SalesContractDocument: e.target.value,\r\n                      })\r\n                    }\r\n                    name=\"SalesContractDocument\"\r\n                  />\r\n                  <p>\r\n                    Sales Contract Date:\r\n                    <input\r\n                      id=\"SalesContractDate\"\r\n                      name=\"SalesContractDate\"\r\n                      label=\"SalesContractDate\"\r\n                      placeholder=\"SalesContractDate\"\r\n                      type=\"date\"\r\n                      value={\r\n                        salesContractDate.getFullYear().toString() +\r\n                        \"-\" +\r\n                        (salesContractDate.getMonth() + 1)\r\n                          .toString()\r\n                          .padStart(2, 0) +\r\n                        \"-\" +\r\n                        salesContractDate.getDate().toString().padStart(2, 0)\r\n                      }\r\n                      onChange={(e) => {\r\n                        setSalesContractDate(new Date(e.target.value));\r\n                        editPreshipmentFacility.SalesContractDate =\r\n                          salesContractDate;\r\n                      }}\r\n                    />{\" \"}\r\n                  </p>\r\n\r\n                  {/* SectorTypeId */}\r\n                  {/* CurrencyId*/}\r\n                  <FormControl variant=\"standard\" sx={{ minWidth: 120 }}>\r\n                    <InputLabel id=\"LoanTypeId\" color=\"secondary\">\r\n                      currency type{\" \"}\r\n                    </InputLabel>\r\n                    <Select\r\n                      color=\"secondary\"\r\n                      onChange={(event) => {\r\n                        editPreshipmentFacility.CurrencyId = event.target.value;\r\n                        // setCurrencyId(event.target.value);\r\n                      }}\r\n                      labelId=\"CurrencyId\"\r\n                      id=\"CurrencyId\"\r\n                      label=\"CurrencyId\"\r\n                    >\r\n                      <MenuItem value=\"\">\r\n                        <em>None</em>\r\n                      </MenuItem>\r\n                      {currency.map((yourCurrency) => (\r\n                        <MenuItem\r\n                          key={yourCurrency.Id}\r\n                          CurrencyId={yourCurrency.Id}\r\n                          value={yourCurrency.Id}\r\n                        >\r\n                          {yourCurrency.Name}\r\n                        </MenuItem>\r\n                      ))}\r\n                    </Select>\r\n                  </FormControl>\r\n                  <TextField\r\n                    id=\"ContractValue\"\r\n                    label=\"ContractValue\"\r\n                    variant=\"standard\"\r\n                    color=\"secondary\"\r\n                    size=\"\"\r\n                    required\r\n                    value={editPreshipmentFacility.ContractValue}\r\n                    onChange={(e) =>\r\n                      setEditPreshipmentFacility({\r\n                        ...editPreshipmentFacility,\r\n                        ContractValue: e.target.value,\r\n                      })\r\n                    }\r\n                    name=\"ContractValue\"\r\n                  />\r\n                  <p>\r\n                    Shipment Date:\r\n                    <input\r\n                      id=\"ShipmentDate\"\r\n                      name=\"ShipmentDate\"\r\n                      label=\"ShipmentDate\"\r\n                      placeholder=\"ShipmentDate\"\r\n                      type=\"date\"\r\n                      value={\r\n                        shipmentDate.getFullYear().toString() +\r\n                        \"-\" +\r\n                        (shipmentDate.getMonth() + 1)\r\n                          .toString()\r\n                          .padStart(2, 0) +\r\n                        \"-\" +\r\n                        shipmentDate.getDate().toString().padStart(2, 0)\r\n                      }\r\n                      onChange={(e) => {\r\n                        setShipmentDate(new Date(e.target.value));\r\n                        editPreshipmentFacility.ShipmentDate = shipmentDate;\r\n                      }}\r\n                    />{\" \"}\r\n                  </p>\r\n                  {/* CountryId */}\r\n\r\n                  <FormControl variant=\"standard\" sx={{ minWidth: 120 }}>\r\n                    <InputLabel id=\"IsPartialShipmentAllowed\" color=\"secondary\">\r\n                      Is Partial Shipment Allowed?{\" \"}\r\n                    </InputLabel>\r\n                    <Select\r\n                      color=\"secondary\"\r\n                      onChange={(event) => {\r\n                        editPreshipmentFacility.IsPartialShipmentAllowed =\r\n                          event.target.value;\r\n                        // setLoanTypeId(event.target.value);\r\n                      }}\r\n                      labelId=\"IsPartialShipmentAllowed\"\r\n                      id=\"IsPartialShipmentAllowed\"\r\n                      label=\"IsPartialShipmentAllowed\"\r\n                    >\r\n                      <MenuItem value=\"1\">\r\n                        <em>True</em>\r\n                      </MenuItem>\r\n                      <MenuItem value=\"0\">\r\n                        <em>False</em>\r\n                      </MenuItem>\r\n                    </Select>\r\n                  </FormControl>\r\n                  <FormControl variant=\"standard\" sx={{ minWidth: 120 }}>\r\n                    <InputLabel id=\"IsLOTDefined\" color=\"secondary\">\r\n                      IsLOTDefined?{\" \"}\r\n                    </InputLabel>\r\n                    <Select\r\n                      color=\"secondary\"\r\n                      onChange={(event) => {\r\n                        editPreshipmentFacility.IsLOTDefined =\r\n                          event.target.value;\r\n                        // setLoanTypeId(event.target.value);\r\n                      }}\r\n                      labelId=\"IsLOTDefined\"\r\n                      id=\"IsLOTDefined\"\r\n                      label=\"IsLOTDefined\"\r\n                    >\r\n                      <MenuItem value=\"1\">\r\n                        <em>True</em>\r\n                      </MenuItem>\r\n                      <MenuItem value=\"0\">\r\n                        <em>False</em>\r\n                      </MenuItem>\r\n                    </Select>\r\n                  </FormControl>\r\n                  <TextField\r\n                    id=\"LOT1Value\"\r\n                    label=\"LOT1Value\"\r\n                    variant=\"standard\"\r\n                    color=\"secondary\"\r\n                    size=\"\"\r\n                    required\r\n                    value={editPreshipmentFacility.LOT1Value}\r\n                    onChange={(e) =>\r\n                      setEditPreshipmentFacility({\r\n                        ...editPreshipmentFacility,\r\n                        LOT1Value: e.target.value,\r\n                      })\r\n                    }\r\n                    name=\"LOT1Value\"\r\n                  />\r\n                  <p>\r\n                    LOT1 Shipment Date:\r\n                    <input\r\n                      id=\"LOT1ShipmentDate\"\r\n                      name=\"LOT1ShipmentDate\"\r\n                      label=\"LOT1ShipmentDate\"\r\n                      placeholder=\"LOT1ShipmentDate\"\r\n                      type=\"date\"\r\n                      value={\r\n                        lOT1ShipmentDate.getFullYear().toString() +\r\n                        \"-\" +\r\n                        (lOT1ShipmentDate.getMonth() + 1)\r\n                          .toString()\r\n                          .padStart(2, 0) +\r\n                        \"-\" +\r\n                        lOT1ShipmentDate.getDate().toString().padStart(2, 0)\r\n                      }\r\n                      onChange={(e) => {\r\n                        setLOT1ShipmentDate(new Date(e.target.value));\r\n                        editPreshipmentFacility.LOT1ShipmentDate =\r\n                          lOT1ShipmentDate;\r\n                      }}\r\n                    />{\" \"}\r\n                  </p>\r\n                  <p>\r\n                    LOT1 Disbursement Date:\r\n                    <input\r\n                      id=\"LOT1DisbursementDate\"\r\n                      name=\"LOT1DisbursementDate\"\r\n                      label=\"LOT1DisbursementDate\"\r\n                      placeholder=\"LOT1DisbursementDate\"\r\n                      type=\"date\"\r\n                      value={\r\n                        lOT1DisbursementDate.getFullYear().toString() +\r\n                        \"-\" +\r\n                        (lOT1DisbursementDate.getMonth() + 1)\r\n                          .toString()\r\n                          .padStart(2, 0) +\r\n                        \"-\" +\r\n                        lOT1DisbursementDate.getDate().toString().padStart(2, 0)\r\n                      }\r\n                      onChange={(e) => {\r\n                        setLOT1DisbursementDate(new Date(e.target.value));\r\n                        editPreshipmentFacility.LOT1DisbursementDate =\r\n                          lOT1DisbursementDate;\r\n                      }}\r\n                    />{\" \"}\r\n                  </p>\r\n                  <TextField\r\n                    id=\"LOT1DisbursementAmount\"\r\n                    label=\"LOT1DisbursementAmount\"\r\n                    variant=\"standard\"\r\n                    color=\"secondary\"\r\n                    size=\"\"\r\n                    required\r\n                    value={editPreshipmentFacility.LOT1DisbursementAmount}\r\n                    onChange={(e) =>\r\n                      setEditPreshipmentFacility({\r\n                        ...editPreshipmentFacility,\r\n                        LOT1DisbursementAmount: e.target.value,\r\n                      })\r\n                    }\r\n                    name=\"LOT1DisbursementAmount\"\r\n                  />\r\n                  <FormControl variant=\"standard\" sx={{ minWidth: 120 }}>\r\n                    <InputLabel id=\"IsLOT1ShipmentMade\" color=\"secondary\">\r\n                      IsLOT1ShipmentMade?{\" \"}\r\n                    </InputLabel>\r\n                    <Select\r\n                      color=\"secondary\"\r\n                      onChange={(event) => {\r\n                        editPreshipmentFacility.IsLOT1ShipmentMade =\r\n                          event.target.value;\r\n                        // setLoanTypeId(event.target.value);\r\n                      }}\r\n                      labelId=\"IsLOT1ShipmentMade\"\r\n                      id=\"IsLOT1ShipmentMade\"\r\n                      label=\"IsLOT1ShipmentMade\"\r\n                    >\r\n                      <MenuItem value=\"1\">\r\n                        <em>True</em>\r\n                      </MenuItem>\r\n                      <MenuItem value=\"0\">\r\n                        <em>False</em>\r\n                      </MenuItem>\r\n                    </Select>\r\n                  </FormControl>\r\n                  <p>\r\n                    LOT1 Incoming Date:\r\n                    <input\r\n                      id=\"LOT1IncomingDate\"\r\n                      name=\"LOT1IncomingDate\"\r\n                      label=\"LOT1IncomingDate\"\r\n                      placeholder=\"LOT1IncomingDate\"\r\n                      type=\"date\"\r\n                      value={\r\n                        lOT1IncomingDate.getFullYear().toString() +\r\n                        \"-\" +\r\n                        (lOT1IncomingDate.getMonth() + 1)\r\n                          .toString()\r\n                          .padStart(2, 0) +\r\n                        \"-\" +\r\n                        lOT1IncomingDate.getDate().toString().padStart(2, 0)\r\n                      }\r\n                      onChange={(e) => {\r\n                        setLOT1IncomingDate(new Date(e.target.value));\r\n                        editPreshipmentFacility.LOT1IncomingDate =\r\n                          lOT1IncomingDate;\r\n                      }}\r\n                    />{\" \"}\r\n                  </p>\r\n                  <TextField\r\n                    id=\"LOT1ProceedValue\"\r\n                    label=\"LOT1ProceedValue\"\r\n                    variant=\"standard\"\r\n                    color=\"secondary\"\r\n                    size=\"\"\r\n                    required\r\n                    value={editPreshipmentFacility.LOT1ProceedValue}\r\n                    onChange={(e) =>\r\n                      setEditPreshipmentFacility({\r\n                        ...editPreshipmentFacility,\r\n                        LOT1ProceedValue: e.target.value,\r\n                      })\r\n                    }\r\n                    name=\"LOT1ProceedValue\"\r\n                  />\r\n                  {/* LOT1CurrencyId */}\r\n                  <TextField\r\n                    id=\"LOT1ExchangeRate\"\r\n                    label=\"LOT1ExchangeRate\"\r\n                    variant=\"standard\"\r\n                    color=\"secondary\"\r\n                    size=\"\"\r\n                    required\r\n                    value={editPreshipmentFacility.LOT1ExchangeRate}\r\n                    onChange={(e) =>\r\n                      setEditPreshipmentFacility({\r\n                        ...editPreshipmentFacility,\r\n                        LOT1ExchangeRate: e.target.value,\r\n                      })\r\n                    }\r\n                    name=\"LOT1ExchangeRate\"\r\n                  />\r\n                  <TextField\r\n                    id=\"LOT1LocalCurrencyAmount\"\r\n                    label=\"LOT1LocalCurrencyAmount\"\r\n                    variant=\"standard\"\r\n                    color=\"secondary\"\r\n                    size=\"\"\r\n                    required\r\n                    value={editPreshipmentFacility.LOT1LocalCurrencyAmount}\r\n                    onChange={(e) =>\r\n                      setEditPreshipmentFacility({\r\n                        ...editPreshipmentFacility,\r\n                        LOT1LocalCurrencyAmount: e.target.value,\r\n                      })\r\n                    }\r\n                    name=\"LOT1LocalCurrencyAmount\"\r\n                  />\r\n                  <FormControl variant=\"standard\" sx={{ minWidth: 120 }}>\r\n                    <InputLabel\r\n                      id=\"IsProceedSettledDisbursementAmount\"\r\n                      color=\"secondary\"\r\n                    >\r\n                      IsProceed Settled Disbursement Amount?{\" \"}\r\n                    </InputLabel>\r\n                    <Select\r\n                      color=\"secondary\"\r\n                      onChange={(event) => {\r\n                        editPreshipmentFacility.IsProceedSettledDisbursementAmount =\r\n                          event.target.value;\r\n                        // setLoanTypeId(event.target.value);\r\n                      }}\r\n                      labelId=\"IsProceedSettledDisbursementAmount\"\r\n                      id=\"IsProceedSettledDisbursementAmount\"\r\n                      label=\"IsProceedSettledDisbursementAmount\"\r\n                    >\r\n                      <MenuItem value=\"1\">\r\n                        <em>True</em>\r\n                      </MenuItem>\r\n                      <MenuItem value=\"0\">\r\n                        <em>False</em>\r\n                      </MenuItem>\r\n                    </Select>\r\n                  </FormControl>\r\n                  <FormControl variant=\"standard\" sx={{ minWidth: 120 }}>\r\n                    <InputLabel\r\n                      id=\"IsThereProceedRemainedToBeCollected\"\r\n                      color=\"secondary\"\r\n                    >\r\n                      Is There Proceed Remained To Be Collected?{\" \"}\r\n                    </InputLabel>\r\n                    <Select\r\n                      color=\"secondary\"\r\n                      onChange={(event) => {\r\n                        editPreshipmentFacility.IsThereProceedRemainedToBeCollected =\r\n                          event.target.value;\r\n                        // setLoanTypeId(event.target.value);\r\n                      }}\r\n                      labelId=\"IsThereProceedRemainedToBeCollected\"\r\n                      id=\"IsThereProceedRemainedToBeCollected\"\r\n                      label=\"IsThereProceedRemainedToBeCollected\"\r\n                    >\r\n                      <MenuItem value=\"1\">\r\n                        <em>True</em>\r\n                      </MenuItem>\r\n                      <MenuItem value=\"0\">\r\n                        <em>False</em>\r\n                      </MenuItem>\r\n                    </Select>\r\n                  </FormControl>\r\n                  <FormControl variant=\"standard\" sx={{ minWidth: 120 }}>\r\n                    <InputLabel\r\n                      id=\"IsCustomerPresentedNewContractForAmendment\"\r\n                      color=\"secondary\"\r\n                    >\r\n                      Is Customer Presented New Contract For Amendment?{\" \"}\r\n                    </InputLabel>\r\n                    <Select\r\n                      color=\"secondary\"\r\n                      onChange={(event) => {\r\n                        editPreshipmentFacility.IsCustomerPresentedNewContractForAmendment =\r\n                          event.target.value;\r\n                        // setLoanTypeId(event.target.value);\r\n                      }}\r\n                      labelId=\"IsCustomerPresentedNewContractForAmendment\"\r\n                      id=\"IsCustomerPresentedNewContractForAmendment\"\r\n                      label=\"IsCustomerPresentedNewContractForAmendment\"\r\n                    >\r\n                      <MenuItem value=\"1\">\r\n                        <em>True</em>\r\n                      </MenuItem>\r\n                      <MenuItem value=\"0\">\r\n                        <em>False</em>\r\n                      </MenuItem>\r\n                    </Select>\r\n                  </FormControl>\r\n                  <TextField\r\n                    id=\"TurnOver\"\r\n                    label=\"TurnOver\"\r\n                    variant=\"standard\"\r\n                    color=\"secondary\"\r\n                    size=\"\"\r\n                    required\r\n                    value={editPreshipmentFacility.TurnOver}\r\n                    onChange={(e) =>\r\n                      setEditPreshipmentFacility({\r\n                        ...editPreshipmentFacility,\r\n                        TurnOver: e.target.value,\r\n                      })\r\n                    }\r\n                    name=\"TurnOver\"\r\n                  />\r\n                  <TextField\r\n                    id=\"NextAction\"\r\n                    label=\"NextAction\"\r\n                    variant=\"standard\"\r\n                    color=\"secondary\"\r\n                    size=\"\"\r\n                    required\r\n                    value={editPreshipmentFacility.NextAction}\r\n                    onChange={(e) =>\r\n                      setEditPreshipmentFacility({\r\n                        ...editPreshipmentFacility,\r\n                        NextAction: e.target.value,\r\n                      })\r\n                    }\r\n                    name=\"NextAction\"\r\n                  />\r\n                </div>\r\n                <div className=\"flex justify-center items-center\">\r\n                  <button\r\n                    type=\"submit\"\r\n                    className=\"bg-[purple] hover:bg-purple-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline \"\r\n                  >\r\n                    Update\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </CompanyModal>\r\n    </div>\r\n  );\r\n};\r\nexport default ViewPreshipmentFacility;\r\n","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\accountDetail\\creditFacilityUtilizition\\AddCreditFacilityUtilizition.jsx",["1597","1598","1599","1600","1601","1602","1603"],[],"import {\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  IconButton,\r\n} from \"@mui/material\";\r\nimport LoanIconButton from \"../../../Common/LoanIconButton\";\r\nimport CompanyModal from \"../../Common/CompanyModal\";\r\nimport { RiSkipBackMiniFill } from \"react-icons/ri\";\r\nimport { BsPlus } from \"react-icons/bs\";\r\nimport { BiSkipNext, BiSkipPrevious } from \"react-icons/bi\";\r\nimport { useState } from \"react\";\r\nimport { IoRefresh } from \"react-icons/io5\";\r\nimport LoanTextField from \"../../../Common/LoanTextField\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { Link } from \"react-router-dom\";\r\nconst AddCreditFacilityUtilizition = ({\r\n  // submitted,\r\n  // handleBack,\r\n  handleSkip,\r\n  // handleNext,\r\n  // newAccountDetials,\r\n  setLoanTypeId,\r\n  newAccountDetials,\r\n  loanTypeIdForCreditUtilization,\r\n  creditFacilityUtilizition,\r\n  handleInputChangeCreditFacilityUtilizition,\r\n  saveCreditFacilityUtilizition,\r\n  handlePrevios,\r\n}) => {\r\n  const { companyId } = useParams();\r\n\r\n  const [\r\n    isCreditFacilityUtilizitionModalOpen,\r\n    setIsCreditFacilityUtilizitionModalOpen,\r\n  ] = useState(false);\r\n  function handleCreditFacilityUtilizitionOpenModal() {\r\n    setIsCreditFacilityUtilizitionModalOpen(true);\r\n  }\r\n  function handlCreditFacilityUtilizitionCloseModal() {\r\n    setIsCreditFacilityUtilizitionModalOpen(false);\r\n  }\r\n  return (\r\n    <>\r\n      <div className=\"flex\">\r\n{/*         \r\n      <Link to={`/enterprise/account-detail/${companyId}`}>\r\n          <LoanIconButton\r\n            style={{ color: \"purple\" }}\r\n            icon={<BiSkipPrevious />}\r\n            text=\"Account Details\"\r\n            onClick={handlePrevios}\r\n          />   \r\n          </Link>    */}\r\n        <LoanIconButton\r\n          style={{ color: \"purple\" }}\r\n          icon={<BsPlus />}\r\n          text=\"Add\"\r\n          onClick={handleCreditFacilityUtilizitionOpenModal}\r\n        />\r\n        {/* <LoanIconButton\r\n          style={{ color: \"purple\" }}\r\n          icon={<BiSkipNext />}\r\n          text=\"Skip\"\r\n          onClick={handleSkip}\r\n        /> */}\r\n      </div>\r\n      <CompanyModal\r\n        isOpen={isCreditFacilityUtilizitionModalOpen}\r\n        onClose={handlCreditFacilityUtilizitionCloseModal}\r\n        title=\"Add handle Credit Facility Utilizition \"\r\n      >\r\n        <div>\r\n          <div className=\"relative center justify-center flex-1 w-full max-w-full grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\">\r\n            <FormControl variant=\"standard\" sx={{ minWidth: 120 }}>\r\n              <InputLabel id=\"LoanTypeId\" color=\"secondary\">\r\n                Loan Type{\" \"}\r\n              </InputLabel>\r\n              <Select\r\n                color=\"secondary\"\r\n                onChange={(event) => {\r\n                  creditFacilityUtilizition.LoanTypeId = event.target.value;\r\n                  setLoanTypeId(event.target.value);\r\n                }}\r\n                labelId=\"LoanTypeId\"\r\n                id=\"LoanTypeId\"\r\n                label=\"LoanTypeId\"\r\n              >\r\n                <MenuItem value=\"\">\r\n                  <em>None</em>\r\n                </MenuItem>\r\n                {loanTypeIdForCreditUtilization.map((yourLoan) => (\r\n                  <MenuItem\r\n                    key={yourLoan.Id}\r\n                    LoanTypeId={yourLoan.Id}\r\n                    value={yourLoan.Id}\r\n                  >\r\n                    {yourLoan.Name}\r\n                  </MenuItem>\r\n                ))}\r\n              </Select>\r\n            </FormControl>\r\n            <LoanTextField\r\n              id=\"LoanAccount\"\r\n              label=\"LoanAccount\"\r\n              value={creditFacilityUtilizition.LoanAccount}\r\n              onChange={handleInputChangeCreditFacilityUtilizition}\r\n              name=\"LoanAccount\"\r\n            />\r\n            <LoanTextField\r\n              id=\"BorrowingRshipLength\"\r\n              label=\"BorrowingRshipLength\"\r\n              value={creditFacilityUtilizition.BorrowingRshipLength}\r\n              onChange={handleInputChangeCreditFacilityUtilizition}\r\n              name=\"BorrowingRshipLength\"\r\n            />\r\n          </div>\r\n          <div className=\"flex justify-center p-2 pt-5\">\r\n            <button\r\n              className=\"bg-[purple] hover:bg-purple-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\"\r\n              onClick={() => {\r\n                saveCreditFacilityUtilizition();\r\n              }}\r\n            >\r\n              Save\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </CompanyModal>\r\n    </>\r\n  );\r\n};\r\nexport default AddCreditFacilityUtilizition;\r\n","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\accountDetail\\creditPerformance\\AddCreditPerformance.jsx",["1604","1605","1606"],[],"import {\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  IconButton,\r\n} from \"@mui/material\";\r\nimport LoanIconButton from \"../../../Common/LoanIconButton\";\r\nimport CompanyModal from \"../../Common/CompanyModal\";\r\nimport { RiSkipBackMiniFill } from \"react-icons/ri\";\r\nimport { BsPlus } from \"react-icons/bs\";\r\nimport { BiSkipNext, BiSkipPrevious } from \"react-icons/bi\";\r\nimport { useState } from \"react\";\r\nimport { IoRefresh } from \"react-icons/io5\";\r\nimport LoanTextField from \"../../../Common/LoanTextField\";\r\nconst AddCreditPerformance = ({\r\n  // submitted,\r\n  // handleBack,\r\n  handleSkip,\r\n  // handleNext,\r\n  // newAccountDetials,\r\n  creditPerformances,\r\n  handleInputChangeCreditPerformance,\r\n  saveCreditPerformance,\r\n  loanTypeIdForPerformance,\r\n  setLoanTypeId,\r\n  currency,\r\n  setCurrencyId,\r\n}) => {\r\n  const [isCreditPerformanceModalOpen, setIsCreditPerformanceModalOpen] =\r\n    useState(false);\r\n  function handleCreditPerformanceOpenModal() {\r\n    setIsCreditPerformanceModalOpen(true);\r\n  }\r\n  function handlCreditPerformanceCloseModal() {\r\n    setIsCreditPerformanceModalOpen(false);\r\n  }\r\n  const [approvalDate, setApprovalDate] = useState(new Date());\r\n  const [startDate, setStartDate] = useState(new Date());\r\n  const [maturityDate, setMaturityDate] = useState(new Date());\r\n  const [scheduledPayment, setScheduledPayment] = useState(new Date());\r\n  const [\r\n    systemAdjustmentDate4WaiverAndExtension,\r\n    setSystemAdjustmentDate4WaiverAndExtension,\r\n  ] = useState(new Date());\r\n  const [adjustmentMaturityDate, setAdjustmentMaturityDate] = useState(\r\n    new Date()\r\n  );\r\n\r\n  return (\r\n    <>\r\n      <div className=\"flex\">\r\n        <LoanIconButton\r\n          style={{ color: \"purple\" }}\r\n          icon={<BiSkipPrevious />}\r\n          text=\"Back\"\r\n          onClick={handleSkip}\r\n        />\r\n        <LoanIconButton\r\n          style={{ color: \"purple\" }}\r\n          icon={<BsPlus />}\r\n          text=\"Add\"\r\n          onClick={handleCreditPerformanceOpenModal}\r\n        />\r\n        <LoanIconButton\r\n          style={{ color: \"purple\" }}\r\n          icon={<BiSkipNext />}\r\n          text=\"Skip\"\r\n          onClick={handleSkip}\r\n        />\r\n      </div>\r\n      <CompanyModal\r\n        isOpen={isCreditPerformanceModalOpen}\r\n        onClose={handlCreditPerformanceCloseModal}\r\n        title=\"Add handle Credit Facility Utilizition \"\r\n      >\r\n        <div>\r\n          <div className=\"relative center justify-center flex-1 w-full max-w-full grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\">\r\n            <LoanTextField\r\n              id=\"LoanAccount\"\r\n              label=\"LoanAccount\"\r\n              value={creditPerformances.LoanAccount}\r\n              onChange={handleInputChangeCreditPerformance}\r\n              name=\"LoanAccount\"\r\n            />\r\n            <FormControl variant=\"standard\" sx={{ minWidth: 120 }}>\r\n              <InputLabel id=\"LoanTypeId\" color=\"secondary\">\r\n                Loan Type{\" \"}\r\n              </InputLabel>\r\n              <Select\r\n                color=\"secondary\"\r\n                onChange={(event) => {\r\n                  creditPerformances.LoanTypeId = event.target.value;\r\n                  setLoanTypeId(event.target.value);\r\n                }}\r\n                labelId=\"LoanTypeId\"\r\n                id=\"LoanTypeId\"\r\n                label=\"LoanTypeId\"\r\n              >\r\n                <MenuItem value=\"\">\r\n                  <em>None</em>\r\n                </MenuItem>\r\n                {loanTypeIdForPerformance.map((yourLoan) => (\r\n                  <MenuItem\r\n                    key={yourLoan.Id}\r\n                    LoanTypeId={yourLoan.Id}\r\n                    value={yourLoan.Id}\r\n                  >\r\n                    {yourLoan.Name}\r\n                  </MenuItem>\r\n                ))}\r\n              </Select>\r\n            </FormControl>\r\n            <LoanTextField\r\n              id=\"ApprovedAmount\"\r\n              label=\"ApprovedAmount\"\r\n              value={creditPerformances.ApprovedAmount}\r\n              onChange={handleInputChangeCreditPerformance}\r\n              name=\"ApprovedAmount\"\r\n            />\r\n            {/* ApprovalDate */}\r\n            <p>\r\n              Approval Date:\r\n              <input\r\n                id=\"ApprovalDate\"\r\n                name=\"ApprovalDate\"\r\n                label=\"ApprovalDate\"\r\n                placeholder=\"ApprovalDate\"\r\n                type=\"date\"\r\n                value={\r\n                  approvalDate.getFullYear().toString() +\r\n                  \"-\" +\r\n                  (approvalDate.getMonth() + 1).toString().padStart(2, 0) +\r\n                  \"-\" +\r\n                  approvalDate.getDate().toString().padStart(2, 0)\r\n                }\r\n                onChange={(e) => {\r\n                  setApprovalDate(new Date(e.target.value));\r\n                  creditPerformances.ApprovalDate = approvalDate;\r\n                }}\r\n              />{\" \"}\r\n            </p>\r\n            <LoanTextField\r\n              id=\"TotalCommitment\"\r\n              label=\"TotalCommitment\"\r\n              value={creditPerformances.TotalCommitment}\r\n              onChange={handleInputChangeCreditPerformance}\r\n              name=\"TotalCommitment\"\r\n            />\r\n            {/* CurrencyId*/}\r\n            <FormControl variant=\"standard\" sx={{ minWidth: 120 }}>\r\n              <InputLabel id=\"LoanTypeId\" color=\"secondary\">\r\n                currency type{\" \"}\r\n              </InputLabel>\r\n              <Select\r\n                color=\"secondary\"\r\n                onChange={(event) => {\r\n                  creditPerformances.CurrencyId = event.target.value;\r\n                  setCurrencyId(event.target.value);\r\n                }}\r\n                labelId=\"CurrencyId\"\r\n                id=\"CurrencyId\"\r\n                label=\"CurrencyId\"\r\n              >\r\n                <MenuItem value=\"\">\r\n                  <em>None</em>\r\n                </MenuItem>\r\n                {currency.map((yourCurrency) => (\r\n                  <MenuItem\r\n                    key={yourCurrency.Id}\r\n                    CurrencyId={yourCurrency.Id}\r\n                    value={yourCurrency.Id}\r\n                  >\r\n                    {yourCurrency.Name}\r\n                  </MenuItem>\r\n                ))}\r\n              </Select>\r\n            </FormControl>\r\n            <p>\r\n              Start Date:\r\n              <input\r\n                id=\"StartDate\"\r\n                name=\"StartDate\"\r\n                label=\"StartDate\"\r\n                placeholder=\"StartDate\"\r\n                type=\"date\"\r\n                value={\r\n                  startDate.getFullYear().toString() +\r\n                  \"-\" +\r\n                  (startDate.getMonth() + 1).toString().padStart(2, 0) +\r\n                  \"-\" +\r\n                  startDate.getDate().toString().padStart(2, 0)\r\n                }\r\n                onChange={(e) => {\r\n                  setStartDate(new Date(e.target.value));\r\n                  creditPerformances.StartDate = startDate;\r\n                }}\r\n              />{\" \"}\r\n            </p>\r\n            <p>\r\n              Maturity Date:\r\n              <input\r\n                id=\"MaturityDate\"\r\n                name=\"MaturityDate\"\r\n                label=\"MaturityDate\"\r\n                placeholder=\"MaturityDate\"\r\n                type=\"date\"\r\n                value={\r\n                  maturityDate.getFullYear().toString() +\r\n                  \"-\" +\r\n                  (maturityDate.getMonth() + 1).toString().padStart(2, 0) +\r\n                  \"-\" +\r\n                  maturityDate.getDate().toString().padStart(2, 0)\r\n                }\r\n                onChange={(e) => {\r\n                  setMaturityDate(new Date(e.target.value));\r\n                  creditPerformances.MaturityDate = maturityDate;\r\n                }}\r\n              />{\" \"}\r\n            </p>\r\n            <LoanTextField\r\n              id=\"RepaymentFrequency\"\r\n              label=\"RepaymentFrequency\"\r\n              value={creditPerformances.RepaymentFrequency}\r\n              onChange={handleInputChangeCreditPerformance}\r\n              name=\"RepaymentFrequency\"\r\n            />\r\n            {/* ScheduledPayment             */}\r\n            <p>\r\n              Scheduled Payment:\r\n              <input\r\n                id=\"ScheduledPayment\"\r\n                name=\"ScheduledPayment\"\r\n                label=\"ScheduledPayment\"\r\n                placeholder=\"ScheduledPayment\"\r\n                type=\"date\"\r\n                value={\r\n                  scheduledPayment.getFullYear().toString() +\r\n                  \"-\" +\r\n                  (scheduledPayment.getMonth() + 1).toString().padStart(2, 0) +\r\n                  \"-\" +\r\n                  scheduledPayment.getDate().toString().padStart(2, 0)\r\n                }\r\n                onChange={(e) => {\r\n                  setScheduledPayment(new Date(e.target.value));\r\n                  creditPerformances.ScheduledPayment = scheduledPayment;\r\n                }}\r\n              />{\" \"}\r\n            </p>\r\n            <LoanTextField\r\n              id=\"LoanStatus\"\r\n              label=\"LoanStatus\"\r\n              value={creditPerformances.LoanStatus}\r\n              onChange={handleInputChangeCreditPerformance}\r\n              name=\"LoanStatus\"\r\n            />\r\n            <LoanTextField\r\n              id=\"Restructuring\"\r\n              label=\"Restructuring\"\r\n              value={creditPerformances.Restructuring}\r\n              onChange={handleInputChangeCreditPerformance}\r\n              name=\"Restructuring\"\r\n            />\r\n            <LoanTextField\r\n              id=\"LoanAccountRestructured\"\r\n              label=\"LoanAccountRestructured\"\r\n              value={creditPerformances.LoanAccountRestructured}\r\n              onChange={handleInputChangeCreditPerformance}\r\n              name=\"LoanAccountRestructured\"\r\n            />\r\n            {/* SystemAdjustmentDate4WaiverAndExtension */}\r\n            <p>\r\n              System Adjustment Date Waiver And Extension:\r\n              <input\r\n                id=\"SystemAdjustmentDate4WaiverAndExtension\"\r\n                name=\"SystemAdjustmentDate4WaiverAndExtension\"\r\n                label=\"SystemAdjustmentDate4WaiverAndExtension\"\r\n                placeholder=\"SystemAdjustmentDate4WaiverAndExtension\"\r\n                type=\"date\"\r\n                value={\r\n                  systemAdjustmentDate4WaiverAndExtension\r\n                    .getFullYear()\r\n                    .toString() +\r\n                  \"-\" +\r\n                  (systemAdjustmentDate4WaiverAndExtension.getMonth() + 1)\r\n                    .toString()\r\n                    .padStart(2, 0) +\r\n                  \"-\" +\r\n                  systemAdjustmentDate4WaiverAndExtension\r\n                    .getDate()\r\n                    .toString()\r\n                    .padStart(2, 0)\r\n                }\r\n                onChange={(e) => {\r\n                  setSystemAdjustmentDate4WaiverAndExtension(\r\n                    new Date(e.target.value)\r\n                  );\r\n                  creditPerformances.SystemAdjustmentDate4WaiverAndExtension =\r\n                    systemAdjustmentDate4WaiverAndExtension;\r\n                }}\r\n              />{\" \"}\r\n            </p>\r\n            <LoanTextField\r\n              id=\"NoOfScheduledPrincipalPaymentWaived\"\r\n              label=\"NoOfScheduledPrincipalPaymentWaived\"\r\n              value={creditPerformances.NoOfScheduledPrincipalPaymentWaived}\r\n              onChange={handleInputChangeCreditPerformance}\r\n              name=\"NoOfScheduledPrincipalPaymentWaived\"\r\n            />\r\n            <LoanTextField\r\n              id=\"NoOfScheduledRepaymentWaived\"\r\n              label=\"NoOfScheduledRepaymentWaived\"\r\n              value={creditPerformances.NoOfScheduledRepaymentWaived}\r\n              onChange={handleInputChangeCreditPerformance}\r\n              name=\"NoOfScheduledRepaymentWaived\"\r\n            />\r\n            {/* AdjustmentMaturityDate */}\r\n            <p>\r\n              System Adjustment Date Waiver And Extension:\r\n              <input\r\n                id=\"AdjustmentMaturityDate\"\r\n                name=\"AdjustmentMaturityDate\"\r\n                label=\"AdjustmentMaturityDate\"\r\n                placeholder=\"AdjustmentMaturityDate\"\r\n                type=\"date\"\r\n                value={\r\n                  adjustmentMaturityDate.getFullYear().toString() +\r\n                  \"-\" +\r\n                  (adjustmentMaturityDate.getMonth() + 1)\r\n                    .toString()\r\n                    .padStart(2, 0) +\r\n                  \"-\" +\r\n                  adjustmentMaturityDate.getDate().toString().padStart(2, 0)\r\n                }\r\n                onChange={(e) => {\r\n                  setAdjustmentMaturityDate(new Date(e.target.value));\r\n                  creditPerformances.AdjustmentMaturityDate =\r\n                    adjustmentMaturityDate;\r\n                }}\r\n              />{\" \"}\r\n            </p>\r\n            <LoanTextField\r\n              id=\"PrincipalOutstandingAmount\"\r\n              label=\"PrincipalOutstandingAmount\"\r\n              value={creditPerformances.PrincipalOutstandingAmount}\r\n              onChange={handleInputChangeCreditPerformance}\r\n              name=\"PrincipalOutstandingAmount\"\r\n            />\r\n            <LoanTextField\r\n              id=\"InterestOutstandingAmount\"\r\n              label=\"InterestOutstandingAmount\"\r\n              value={creditPerformances.InterestOutstandingAmount}\r\n              onChange={handleInputChangeCreditPerformance}\r\n              name=\"InterestOutstandingAmount\"\r\n            />\r\n            <LoanTextField\r\n              id=\"TotalOutstandingAmountPerLoanType\"\r\n              label=\"TotalOutstandingAmountPerLoanType\"\r\n              value={creditPerformances.TotalOutstandingAmountPerLoanType}\r\n              onChange={handleInputChangeCreditPerformance}\r\n              name=\"TotalOutstandingAmountPerLoanType\"\r\n            />\r\n            <LoanTextField\r\n              id=\"PrincipalArrears\"\r\n              label=\"PrincipalArrears\"\r\n              value={creditPerformances.PrincipalArrears}\r\n              onChange={handleInputChangeCreditPerformance}\r\n              name=\"PrincipalArrears\"\r\n            />\r\n            <LoanTextField\r\n              id=\"InterestArrears\"\r\n              label=\"InterestArrears\"\r\n              value={creditPerformances.InterestArrears}\r\n              onChange={handleInputChangeCreditPerformance}\r\n              name=\"InterestArrears\"\r\n            />\r\n            <LoanTextField\r\n              id=\"TotalArrears\"\r\n              label=\"TotalArrears\"\r\n              value={creditPerformances.TotalArrears}\r\n              onChange={handleInputChangeCreditPerformance}\r\n              name=\"TotalArrears\"\r\n            />\r\n            <LoanTextField\r\n              id=\"TotalApprovedLoanAmount\"\r\n              label=\"TotalApprovedLoanAmount\"\r\n              value={creditPerformances.TotalApprovedLoanAmount}\r\n              onChange={handleInputChangeCreditPerformance}\r\n              name=\"TotalApprovedLoanAmount\"\r\n            />\r\n            <LoanTextField\r\n              id=\"TotalOutstandingAmount\"\r\n              label=\"TotalOutstandingAmount\"\r\n              value={creditPerformances.TotalOutstandingAmount}\r\n              onChange={handleInputChangeCreditPerformance}\r\n              name=\"TotalOutstandingAmount\"\r\n            />\r\n            <LoanTextField\r\n              id=\"CrossSelling\"\r\n              label=\"CrossSelling\"\r\n              value={creditPerformances.CrossSelling}\r\n              onChange={handleInputChangeCreditPerformance}\r\n              name=\"CrossSelling\"\r\n            />\r\n            <LoanTextField\r\n              id=\"NPLStatus\"\r\n              label=\"NPLStatus\"\r\n              value={creditPerformances.NPLStatus}\r\n              onChange={handleInputChangeCreditPerformance}\r\n              name=\"NPLStatus\"\r\n            />\r\n          </div>\r\n          <div className=\"flex justify-center p-2 pt-5\">\r\n            <button\r\n              className=\"bg-[purple] hover:bg-purple-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\"\r\n              onClick={() => {\r\n                saveCreditPerformance();\r\n              }}\r\n            >\r\n              Save\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </CompanyModal>\r\n    </>\r\n  );\r\n};\r\nexport default AddCreditPerformance;\r\n","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\accountDetail\\fcyInflowPerformance\\AddFcyInflowPerformance.jsx",["1607","1608","1609","1610","1611","1612","1613","1614","1615","1616","1617","1618"],[],"import {\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  IconButton,\r\n} from \"@mui/material\";\r\nimport LoanIconButton from \"../../../Common/LoanIconButton\";\r\nimport CompanyModal from \"../../Common/CompanyModal\";\r\nimport { RiSkipBackMiniFill } from \"react-icons/ri\";\r\nimport { BsPlus } from \"react-icons/bs\";\r\nimport { BiSkipNext, BiSkipPrevious } from \"react-icons/bi\";\r\nimport { useState } from \"react\";\r\nimport { IoRefresh } from \"react-icons/io5\";\r\nimport LoanTextField from \"../../../Common/LoanTextField\";\r\nconst AddDepositPerformance = ({\r\n  // submitted,\r\n  // handleBack,\r\n  handleSkip,\r\n  // handleNext,\r\n  // newAccountDetials,\r\n  fCYInflowPerformances,\r\n  handleInputChangeFCYInflowPerformance,\r\n  setLoanTypeId,\r\n  currency,\r\n  saveFCYInflowPerformance,\r\n  setCurrencyId,\r\n}) => {\r\n  const [isDepositPerformanceModalOpen, setIsDepositPerformanceModalOpen] =\r\n    useState(false);\r\n  function handleDepositPerformanceOpenModal() {\r\n    setIsDepositPerformanceModalOpen(true);\r\n  }\r\n  function handlDepositPerformanceCloseModal() {\r\n    setIsDepositPerformanceModalOpen(false);\r\n  }\r\n  const [approvalDate, setApprovalDate] = useState(new Date());\r\n  const [startDate, setStartDate] = useState(new Date());\r\n  const [maturityDate, setMaturityDate] = useState(new Date());\r\n  const [scheduledPayment, setScheduledPayment] = useState(new Date());\r\n  const [\r\n    systemAdjustmentDate4WaiverAndExtension,\r\n    setSystemAdjustmentDate4WaiverAndExtension,\r\n  ] = useState(new Date());\r\n  const [adjustmentMaturityDate, setAdjustmentMaturityDate] = useState(\r\n    new Date()\r\n  );\r\n\r\n  return (\r\n    <>\r\n      <div className=\"flex\">\r\n        <LoanIconButton\r\n          style={{ color: \"purple\" }}\r\n          icon={<BiSkipPrevious />}\r\n          text=\"Back\"\r\n          onClick={handleSkip}\r\n        />\r\n        <LoanIconButton\r\n          style={{ color: \"purple\" }}\r\n          icon={<BsPlus />}\r\n          text=\"Add\"\r\n          onClick={handleDepositPerformanceOpenModal}\r\n        />\r\n        <LoanIconButton\r\n          style={{ color: \"purple\" }}\r\n          icon={<BiSkipNext />}\r\n          text=\"Skip\"\r\n          onClick={handleSkip}\r\n        />\r\n      </div>\r\n      <CompanyModal\r\n        isOpen={isDepositPerformanceModalOpen}\r\n        onClose={handlDepositPerformanceCloseModal}\r\n        title=\"Add handle Deposit Facility Utilizition \"\r\n      >\r\n        <div>\r\n          <div className=\"relative center justify-center flex-1 w-full max-w-full grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\">\r\n            <LoanTextField\r\n              id=\"BudgetYear\"\r\n              label=\"BudgetYear\"\r\n              value={fCYInflowPerformances.BudgetYear}\r\n              onChange={handleInputChangeFCYInflowPerformance}\r\n              name=\"BudgetYear\"\r\n            />\r\n            <p>\r\n              Approval Date:\r\n              <input\r\n                id=\"StartDate\"\r\n                name=\"StartDate\"\r\n                label=\"StartDate\"\r\n                placeholder=\"StartDate\"\r\n                type=\"date\"\r\n                value={\r\n                  startDate.getFullYear().toString() +\r\n                  \"-\" +\r\n                  (startDate.getMonth() + 1).toString().padStart(2, 0) +\r\n                  \"-\" +\r\n                  startDate.getDate().toString().padStart(2, 0)\r\n                }\r\n                onChange={(e) => {\r\n                  setApprovalDate(new Date(e.target.value));\r\n                  fCYInflowPerformances.StartDate = startDate;\r\n                }}\r\n              />{\" \"}\r\n            </p>\r\n            <p>\r\n              End Date:\r\n              <input\r\n                id=\"EndDate\"\r\n                name=\"EndDate\"\r\n                label=\"EndDate\"\r\n                placeholder=\"EndDate\"\r\n                type=\"date\"\r\n                value={\r\n                  maturityDate.getFullYear().toString() +\r\n                  \"-\" +\r\n                  (maturityDate.getMonth() + 1).toString().padStart(2, 0) +\r\n                  \"-\" +\r\n                  maturityDate.getDate().toString().padStart(2, 0)\r\n                }\r\n                onChange={(e) => {\r\n                  setApprovalDate(new Date(e.target.value));\r\n                  fCYInflowPerformances.EndDate = maturityDate;\r\n                }}\r\n              />{\" \"}\r\n            </p>\r\n            <FormControl variant=\"standard\" sx={{ minWidth: 120 }}>\r\n              <InputLabel id=\"CurrencyId\" color=\"secondary\">\r\n                Currency{\" \"}\r\n              </InputLabel>\r\n              <Select\r\n                color=\"secondary\"\r\n                onChange={(event) => {\r\n                  fCYInflowPerformances.CurrencyId = event.target.value;\r\n                  setCurrencyId(event.target.value);\r\n                }}\r\n                labelId=\"CurrencyId\"\r\n                id=\"CurrencyId\"\r\n                label=\"CurrencyId\"\r\n              >\r\n                <MenuItem value=\"\">\r\n                  <em>None</em>\r\n                </MenuItem>\r\n                {currency.map((yourLoan) => (\r\n                  <MenuItem\r\n                    key={yourLoan.Id}\r\n                    CurrencyId={yourLoan.Id}\r\n                    value={yourLoan.Id}\r\n                  >\r\n                    {yourLoan.Name}\r\n                  </MenuItem>\r\n                ))}\r\n              </Select>\r\n            </FormControl>\r\n            <LoanTextField\r\n              id=\"FCYAccount\"\r\n              label=\"FCYAccount\"\r\n              value={fCYInflowPerformances.FCYAccount}\r\n              onChange={handleInputChangeFCYInflowPerformance}\r\n              name=\"FCYAccount\"\r\n            />\r\n            <LoanTextField\r\n              id=\"PreShipmentLoanAccount\"\r\n              label=\"PreShipmentLoanAccount\"\r\n              value={fCYInflowPerformances.PreShipmentLoanAccount}\r\n              onChange={handleInputChangeFCYInflowPerformance}\r\n              name=\"PreShipmentLoanAccount\"\r\n            />\r\n            <LoanTextField\r\n              id=\"PreShipmentFacilityLimit\"\r\n              label=\"PreShipmentFacilityLimit\"\r\n              value={fCYInflowPerformances.PreShipmentFacilityLimit}\r\n              onChange={handleInputChangeFCYInflowPerformance}\r\n              name=\"PreShipmentFacilityLimit\"\r\n            />\r\n            <LoanTextField\r\n              id=\"ExportOverdraftAccount\"\r\n              label=\"ExportOverdraftAccount\"\r\n              value={fCYInflowPerformances.ExportOverdraftAccount}\r\n              onChange={handleInputChangeFCYInflowPerformance}\r\n              name=\"ExportOverdraftAccount\"\r\n            />\r\n            <LoanTextField\r\n              id=\"ExportTermLoanAccount\"\r\n              label=\"ExportTermLoanAccount\"\r\n              value={fCYInflowPerformances.ExportTermLoanAccount}\r\n              onChange={handleInputChangeFCYInflowPerformance}\r\n              name=\"ExportTermLoanAccount\"\r\n            />\r\n            <LoanTextField\r\n              id=\"TotalExportCreditFacility\"\r\n              label=\"TotalExportCreditFacility\"\r\n              value={fCYInflowPerformances.TotalExportCreditFacility}\r\n              onChange={handleInputChangeFCYInflowPerformance}\r\n              name=\"TotalExportCreditFacility\"\r\n            />\r\n            <LoanTextField\r\n              id=\"TotalFCYInflowTransactionAmountPerYear\"\r\n              label=\"TotalFCYInflowTransactionAmountPerYear\"\r\n              value={\r\n                fCYInflowPerformances.TotalFCYInflowTransactionAmountPerYear\r\n              }\r\n              onChange={handleInputChangeFCYInflowPerformance}\r\n              name=\"TotalFCYInflowTransactionAmountPerYear\"\r\n            />\r\n          </div>\r\n          <div className=\"flex justify-center p-2 pt-5\">\r\n            <button\r\n              className=\"bg-[purple] hover:bg-purple-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\"\r\n              onClick={() => {\r\n                saveFCYInflowPerformance();\r\n              }}\r\n            >\r\n              Save\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </CompanyModal>\r\n    </>\r\n  );\r\n};\r\nexport default AddDepositPerformance;\r\n","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\accountDetail\\creditFacilityUtilizition\\preshipmentFacility\\AddPreshipmentFacility.jsx",["1619","1620","1621","1622","1623","1624","1625"],[],"import {\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  IconButton,\r\n} from \"@mui/material\";\r\nimport { useState, useEffect } from \"react\";\r\nimport LoanIconButton from \"../../../../Common/LoanIconButton\";\r\nimport CompanyModal from \"../../../Common/CompanyModal\";\r\n// import CompanyModal from \"../../../../Common/CompanyModal\";\r\nimport { RiSkipBackMiniFill } from \"react-icons/ri\";\r\nimport { BsPlus } from \"react-icons/bs\";\r\nimport { BiSkipNext, BiSkipPrevious } from \"react-icons/bi\";\r\nimport { IoRefresh } from \"react-icons/io5\";\r\n// import LoanTextField from \"../../../Common/LoanTextField\";\r\nimport CommonServices from \"../../../Common/CommonServices\";\r\nimport LoanTextField from \"../../../../Common/LoanTextField\";\r\nconst ViewPreshipmentFacility = ({\r\n  submitted,\r\n  handleBack,\r\n  handleSkip,\r\n  handleNext,\r\n  handleInputChangePreshipmentFacility,\r\n  savePreshipmentFacility,\r\n  preshipmentFacilitys,\r\n  setPreshipmentFacilitys,\r\n}) => {\r\n  const [isCreditPerformanceModalOpen, setIsCreditPerformanceModalOpen] =\r\n    useState(false);\r\n  function handleCreditPerformanceOpenModal() {\r\n    setIsCreditPerformanceModalOpen(true);\r\n  }\r\n  function handlCreditPerformanceCloseModal() {\r\n    setIsCreditPerformanceModalOpen(false);\r\n  }\r\n  const [approvalDate, setApprovalDate] = useState(new Date());\r\n  const [startDate, setStartDate] = useState(new Date());\r\n  const [maturityDate, setMaturityDate] = useState(new Date());\r\n  const [salesContractDate, setSalesContractDate] = useState(new Date());\r\n  const [shipmentDate, setShipmentDate] = useState(new Date());\r\n  const [lOT1ShipmentDate, setLOT1ShipmentDate] = useState(new Date());\r\n  const [LOT1IncomingDate, setLOT1IncomingDate] = useState(new Date());\r\n  const [LOT1DisbursementDate, setLOT1DisbursementDate] = useState(new Date());\r\n  const [currency, setCurrency] = useState([]);\r\n  const [country, setCountry] = useState([]);\r\n  const [sectorType, setSectorType] = useState([]);\r\n  const getCurrency = () => {\r\n    CommonServices.getCurrency()\r\n      .then((response) => {\r\n        setCurrency(response.data.Result);\r\n        console.log(response.data.Result);\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n  useEffect(() => {\r\n    getCurrency();\r\n  }, []);\r\n  const getCountry = () => {\r\n    CommonServices.getCountry()\r\n      .then((response) => {\r\n        setCountry(response.data.Result);\r\n        console.log(response.data.Result);\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n  useEffect(() => {\r\n    getCountry();\r\n  }, []);\r\n  const getSectorType = () => {\r\n    CommonServices.sector()\r\n      .then((response) => {\r\n        setSectorType(response.data.Result);\r\n        console.log(response.data.Result);\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n  useEffect(() => {\r\n    getSectorType();\r\n  }, []);\r\n  return (\r\n    <>\r\n      <div className=\"flex\">\r\n        {/* <LoanIconButton\r\n          style={{ color: \"purple\" }}\r\n          icon={<BiSkipPrevious />}\r\n          text=\"Back\"\r\n          onClick={handleSkip}\r\n        /> */}\r\n        <LoanIconButton\r\n          style={{ color: \"purple\" }}\r\n          icon={<BsPlus />}\r\n          text=\"Add\"\r\n          onClick={handleCreditPerformanceOpenModal}\r\n        />\r\n        {/* <LoanIconButton\r\n          style={{ color: \"purple\" }}\r\n          icon={<BiSkipNext />}\r\n          text=\"Skip\"\r\n          onClick={handleSkip}\r\n        /> */}\r\n      </div>\r\n      <CompanyModal\r\n        isOpen={isCreditPerformanceModalOpen}\r\n        onClose={handlCreditPerformanceCloseModal}\r\n        title=\"Add preshipment \"\r\n      >\r\n        <div>\r\n          <div className=\"relative center justify-center flex-1 w-full max-w-full grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\">\r\n            <LoanTextField\r\n              id=\"ApprovedFacilityLimit\"\r\n              label=\"ApprovedFacilityLimit\"\r\n              value={preshipmentFacilitys.ApprovedFacilityLimit}\r\n              onChange={handleInputChangePreshipmentFacility}\r\n              name=\"ApprovedFacilityLimit\"\r\n            />\r\n            <LoanTextField\r\n              id=\"TypesOfGoods\"\r\n              label=\"TypesOfGoods\"\r\n              value={preshipmentFacilitys.TypesOfGoods}\r\n              onChange={handleInputChangePreshipmentFacility}\r\n              name=\"TypesOfGoods\"\r\n            />\r\n            <p>\r\n              Start Date:\r\n              <input\r\n                id=\"StartDate\"\r\n                name=\"StartDate\"\r\n                label=\"StartDate\"\r\n                placeholder=\"StartDate\"\r\n                type=\"date\"\r\n                value={\r\n                  startDate.getFullYear().toString() +\r\n                  \"-\" +\r\n                  (startDate.getMonth() + 1).toString().padStart(2, 0) +\r\n                  \"-\" +\r\n                  startDate.getDate().toString().padStart(2, 0)\r\n                }\r\n                onChange={(e) => {\r\n                  setStartDate(new Date(e.target.value));\r\n                  preshipmentFacilitys.StartDate = startDate;\r\n                }}\r\n              />{\" \"}\r\n            </p>\r\n            <p>\r\n              Maturity Date:\r\n              <input\r\n                id=\"MaturityDate\"\r\n                name=\"MaturityDate\"\r\n                label=\"MaturityDate\"\r\n                placeholder=\"MaturityDate\"\r\n                type=\"date\"\r\n                value={\r\n                  maturityDate.getFullYear().toString() +\r\n                  \"-\" +\r\n                  (maturityDate.getMonth() + 1).toString().padStart(2, 0) +\r\n                  \"-\" +\r\n                  maturityDate.getDate().toString().padStart(2, 0)\r\n                }\r\n                onChange={(e) => {\r\n                  setMaturityDate(new Date(e.target.value));\r\n                  preshipmentFacilitys.MaturityDate = maturityDate;\r\n                }}\r\n              />{\" \"}\r\n            </p>\r\n            <LoanTextField\r\n              id=\"SalesContractVersion\"\r\n              label=\"SalesContractVersion\"\r\n              value={preshipmentFacilitys.SalesContractVersion}\r\n              onChange={handleInputChangePreshipmentFacility}\r\n              name=\"SalesContractVersion\"\r\n            />\r\n            <LoanTextField\r\n              id=\"SalesContractDocument\"\r\n              label=\"SalesContractDocument\"\r\n              value={preshipmentFacilitys.SalesContractDocument}\r\n              onChange={handleInputChangePreshipmentFacility}\r\n              name=\"SalesContractDocument\"\r\n            />\r\n            <p>\r\n              Sales Contract Date:\r\n              <input\r\n                id=\"SalesContractDate\"\r\n                name=\"SalesContractDate\"\r\n                label=\"SalesContractDate\"\r\n                placeholder=\"SalesContractDate\"\r\n                type=\"date\"\r\n                value={\r\n                  salesContractDate.getFullYear().toString() +\r\n                  \"-\" +\r\n                  (salesContractDate.getMonth() + 1).toString().padStart(2, 0) +\r\n                  \"-\" +\r\n                  salesContractDate.getDate().toString().padStart(2, 0)\r\n                }\r\n                onChange={(e) => {\r\n                  setSalesContractDate(new Date(e.target.value));\r\n                  preshipmentFacilitys.SalesContractDate = salesContractDate;\r\n                }}\r\n              />{\" \"}\r\n            </p>\r\n            {/* SectorTypeId sectorType */}\r\n             <FormControl variant=\"standard\" sx={{ minWidth: 120 }}>\r\n              <InputLabel id=\"SectorTypeId\" color=\"secondary\">\r\n              sector Type{\" \"}\r\n              </InputLabel>\r\n              <Select\r\n                color=\"secondary\"\r\n                onChange={(event) => {\r\n                  preshipmentFacilitys.SectorTypeId = event.target.value;\r\n                  // setCurrencyId(event.target.value);\r\n                }}\r\n                labelId=\"SectorTypeId\"\r\n                id=\"SectorTypeId\"\r\n                label=\"SectorTypeId\"\r\n              >\r\n                <MenuItem value=\"\">\r\n                  <em>None</em>\r\n                </MenuItem>\r\n                {sectorType.map((yourCurrency) => (\r\n                  <MenuItem\r\n                    key={yourCurrency.Id}\r\n                    SectorTypeId={yourCurrency.Id}\r\n                    value={yourCurrency.Id}\r\n                  >\r\n                    {yourCurrency.Name}\r\n                  </MenuItem>\r\n                ))}\r\n              </Select>\r\n            </FormControl>\r\n          \r\n            <FormControl variant=\"standard\" sx={{ minWidth: 120 }}>\r\n              <InputLabel id=\"CurrencyId\" color=\"secondary\">\r\n                Currency{\" \"}\r\n              </InputLabel>\r\n              <Select\r\n                color=\"secondary\"\r\n                onChange={(event) => {\r\n                  preshipmentFacilitys.CurrencyId = event.target.value;\r\n                  // setCurrencyId(event.target.value);\r\n                }}\r\n                labelId=\"CurrencyId\"\r\n                id=\"CurrencyId\"\r\n                label=\"CurrencyId\"\r\n              >\r\n                <MenuItem value=\"\">\r\n                  <em>None</em>\r\n                </MenuItem>\r\n                {currency.map((yourCurrency) => (\r\n                  <MenuItem\r\n                    key={yourCurrency.Id}\r\n                    CurrencyId={yourCurrency.Id}\r\n                    value={yourCurrency.Id}\r\n                  >\r\n                    {yourCurrency.Name}\r\n                  </MenuItem>\r\n                ))}\r\n              </Select>\r\n            </FormControl>\r\n            <LoanTextField\r\n              id=\"ContractValue\"\r\n              label=\"ContractValue\"\r\n              value={preshipmentFacilitys.ContractValue}\r\n              onChange={handleInputChangePreshipmentFacility}\r\n              name=\"ContractValue\"\r\n            />\r\n            <p>\r\n              Shipment Date:\r\n              <input\r\n                id=\"ShipmentDate\"\r\n                name=\"ShipmentDate\"\r\n                label=\"ShipmentDate\"\r\n                placeholder=\"ShipmentDate\"\r\n                type=\"date\"\r\n                value={\r\n                  shipmentDate.getFullYear().toString() +\r\n                  \"-\" +\r\n                  (shipmentDate.getMonth() + 1).toString().padStart(2, 0) +\r\n                  \"-\" +\r\n                  shipmentDate.getDate().toString().padStart(2, 0)\r\n                }\r\n                onChange={(e) => {\r\n                  setShipmentDate(new Date(e.target.value));\r\n                  preshipmentFacilitys.ShipmentDate = shipmentDate;\r\n                }}\r\n              />{\" \"}\r\n            </p>\r\n            {/* CountryId  here*/}\r\n            <FormControl variant=\"standard\" sx={{ minWidth: 120 }}>\r\n              <InputLabel id=\"CountryId\" color=\"secondary\">\r\n                country{\" \"}\r\n              </InputLabel>\r\n              <Select\r\n                color=\"secondary\"\r\n                onChange={(event) => {\r\n                  preshipmentFacilitys.CountryId = event.target.value;\r\n                  // setCurrencyId(event.target.value);\r\n                }}\r\n                labelId=\"CurrencyId\"\r\n                id=\"CurrencyId\"\r\n                label=\"CurrencyId\"\r\n              >\r\n                <MenuItem value=\"\">\r\n                  <em>None</em>\r\n                </MenuItem>\r\n                {country.map((yourCurrency) => (\r\n                  <MenuItem\r\n                    key={yourCurrency.Id}\r\n                    CurrencyId={yourCurrency.Id}\r\n                    value={yourCurrency.Id}\r\n                  >\r\n                    {yourCurrency.Name}\r\n                  </MenuItem>\r\n                ))}\r\n              </Select>\r\n            </FormControl>\r\n            {/* IsPartialShipmentAllowed */}\r\n            <FormControl variant=\"standard\" sx={{ minWidth: 120 }}>\r\n              <InputLabel id=\"IsPartialShipmentAllowed\" color=\"secondary\">\r\n                IsPartialShipmentAllowed{\" \"}\r\n              </InputLabel>\r\n              <Select\r\n                color=\"secondary\"\r\n                onChange={(event) => {\r\n                  preshipmentFacilitys.IsPartialShipmentAllowed =\r\n                    event.target.value;\r\n                  // setLoanTypeId(event.target.value);\r\n                }}\r\n                labelId=\"IsPartialShipmentAllowed\"\r\n                id=\"IsPartialShipmentAllowed\"\r\n                label=\"IsPartialShipmentAllowed\"\r\n              >\r\n                <MenuItem value=\"\">\r\n                  <em>None</em>\r\n                </MenuItem>\r\n                <MenuItem value=\"1\">\r\n                  <em>yes</em>\r\n                </MenuItem>\r\n                <MenuItem value=\"0\">\r\n                  <em>No</em>\r\n                </MenuItem>\r\n              </Select>\r\n            </FormControl>\r\n\r\n            {/* IsLOTDefined */}\r\n            <FormControl variant=\"standard\" sx={{ minWidth: 120 }}>\r\n              <InputLabel id=\"IsLOTDefined\" color=\"secondary\">\r\n                IsLOTDefined{\" \"}\r\n              </InputLabel>\r\n              <Select\r\n                color=\"secondary\"\r\n                onChange={(event) => {\r\n                  preshipmentFacilitys.IsLOTDefined = event.target.value;\r\n                  // setLoanTypeId(event.target.value);\r\n                }}\r\n                labelId=\"IsLOTDefined\"\r\n                id=\"IsLOTDefined\"\r\n                label=\"IsLOTDefined\"\r\n              >\r\n                <MenuItem value=\"\">\r\n                  <em>None</em>\r\n                </MenuItem>\r\n                <MenuItem value=\"1\">\r\n                  <em>yes</em>\r\n                </MenuItem>\r\n                <MenuItem value=\"0\">\r\n                  <em>No</em>\r\n                </MenuItem>\r\n              </Select>\r\n            </FormControl>\r\n            <LoanTextField\r\n              id=\"LOT1Value\"\r\n              label=\"LOT1Value\"\r\n              value={preshipmentFacilitys.LOT1Value}\r\n              onChange={handleInputChangePreshipmentFacility}\r\n              name=\"LOT1Value\"\r\n            />\r\n            <p>\r\n              LOT Shipment Date:\r\n              <input\r\n                id=\"LOT1ShipmentDate\"\r\n                name=\"LOT1ShipmentDate\"\r\n                label=\"LOT1ShipmentDate\"\r\n                placeholder=\"LOT1ShipmentDate\"\r\n                type=\"date\"\r\n                value={\r\n                  lOT1ShipmentDate.getFullYear().toString() +\r\n                  \"-\" +\r\n                  (lOT1ShipmentDate.getMonth() + 1).toString().padStart(2, 0) +\r\n                  \"-\" +\r\n                  lOT1ShipmentDate.getDate().toString().padStart(2, 0)\r\n                }\r\n                onChange={(e) => {\r\n                  setLOT1ShipmentDate(new Date(e.target.value));\r\n                  preshipmentFacilitys.LOT1ShipmentDate = lOT1ShipmentDate;\r\n                }}\r\n              />{\" \"}\r\n            </p>\r\n            <p>\r\n              LOT Disbursement Date:\r\n              <input\r\n                id=\"LOT1DisbursementDate\"\r\n                name=\"LOT1DisbursementDate\"\r\n                label=\"LOT1DisbursementDate\"\r\n                placeholder=\"LOT1DisbursementDate\"\r\n                type=\"date\"\r\n                value={\r\n                  LOT1DisbursementDate.getFullYear().toString() +\r\n                  \"-\" +\r\n                  (LOT1DisbursementDate.getMonth() + 1)\r\n                    .toString()\r\n                    .padStart(2, 0) +\r\n                  \"-\" +\r\n                  LOT1DisbursementDate.getDate().toString().padStart(2, 0)\r\n                }\r\n                onChange={(e) => {\r\n                  setLOT1DisbursementDate(new Date(e.target.value));\r\n                  preshipmentFacilitys.LOT1DisbursementDate =\r\n                    LOT1DisbursementDate;\r\n                }}\r\n              />{\" \"}\r\n            </p>\r\n            <LoanTextField\r\n              id=\"LOT1DisbursementAmount\"\r\n              label=\"LOT1DisbursementAmount\"\r\n              value={preshipmentFacilitys.LOT1DisbursementAmount}\r\n              onChange={handleInputChangePreshipmentFacility}\r\n              name=\"LOT1DisbursementAmount\"\r\n            />\r\n            {/* IsLOT1ShipmentMade */}\r\n            <FormControl variant=\"standard\" sx={{ minWidth: 120 }}>\r\n              <InputLabel id=\"IsLOT1ShipmentMade\" color=\"secondary\">\r\n                IsLOT1ShipmentMade{\" \"}\r\n              </InputLabel>\r\n              <Select\r\n                color=\"secondary\"\r\n                onChange={(event) => {\r\n                  preshipmentFacilitys.IsLOT1ShipmentMade = event.target.value;\r\n                  // setLoanTypeId(event.target.value);\r\n                }}\r\n                labelId=\"IsLOT1ShipmentMade\"\r\n                id=\"IsLOT1ShipmentMade\"\r\n                label=\"IsLOT1ShipmentMade\"\r\n              >\r\n                <MenuItem value=\"\">\r\n                  <em>None</em>\r\n                </MenuItem>\r\n                <MenuItem value=\"1\">\r\n                  <em>yes</em>\r\n                </MenuItem>\r\n                <MenuItem value=\"0\">\r\n                  <em>No</em>\r\n                </MenuItem>\r\n              </Select>\r\n            </FormControl>\r\n            <p>\r\n              LOT Incoming Date:\r\n              <input\r\n                id=\"LOT1IncomingDate\"\r\n                name=\"LOT1IncomingDate\"\r\n                label=\"LOT1IncomingDate\"\r\n                placeholder=\"LOT1IncomingDate\"\r\n                type=\"date\"\r\n                value={\r\n                  LOT1IncomingDate.getFullYear().toString() +\r\n                  \"-\" +\r\n                  (LOT1IncomingDate.getMonth() + 1).toString().padStart(2, 0) +\r\n                  \"-\" +\r\n                  LOT1IncomingDate.getDate().toString().padStart(2, 0)\r\n                }\r\n                onChange={(e) => {\r\n                  setLOT1IncomingDate(new Date(e.target.value));\r\n                  preshipmentFacilitys.LOT1IncomingDate = LOT1IncomingDate;\r\n                }}\r\n              />{\" \"}\r\n            </p>\r\n            <LoanTextField\r\n              id=\"LOT1ProceedValue\"\r\n              label=\"LOT1ProceedValue\"\r\n              value={preshipmentFacilitys.LOT1ProceedValue}\r\n              onChange={handleInputChangePreshipmentFacility}\r\n              name=\"LOT1ProceedValue\"\r\n            />\r\n            {/* LOT1CurrencyId */}\r\n            <FormControl variant=\"standard\" sx={{ minWidth: 120 }}>\r\n              <InputLabel id=\"LoanTypeId\" color=\"secondary\">\r\n                LOT Currency{\" \"}\r\n              </InputLabel>\r\n              <Select\r\n                color=\"secondary\"\r\n                onChange={(event) => {\r\n                  preshipmentFacilitys.LOT1CurrencyId = event.target.value;\r\n                  // setCurrencyId(event.target.value);\r\n                }}\r\n                labelId=\"CurrencyId\"\r\n                id=\"CurrencyId\"\r\n                label=\"CurrencyId\"\r\n              >\r\n                <MenuItem value=\"\">\r\n                  <em>None</em>\r\n                </MenuItem>\r\n                {currency.map((yourCurrency) => (\r\n                  <MenuItem\r\n                    key={yourCurrency.Id}\r\n                    CurrencyId={yourCurrency.Id}\r\n                    value={yourCurrency.Id}\r\n                  >\r\n                    {yourCurrency.Name}\r\n                  </MenuItem>\r\n                ))}\r\n              </Select>\r\n            </FormControl>\r\n\r\n            <LoanTextField\r\n              id=\"LOT1ExchangeRate\"\r\n              label=\"LOT1ExchangeRate\"\r\n              value={preshipmentFacilitys.LOT1ExchangeRate}\r\n              onChange={handleInputChangePreshipmentFacility}\r\n              name=\"LOT1ExchangeRate\"\r\n            />\r\n            <LoanTextField\r\n              id=\"LOT1LocalCurrencyAmount\"\r\n              label=\"LOT1LocalCurrencyAmount\"\r\n              value={preshipmentFacilitys.LOT1LocalCurrencyAmount}\r\n              onChange={handleInputChangePreshipmentFacility}\r\n              name=\"LOT1LocalCurrencyAmount\"\r\n            />\r\n            {/* IsProceedSettledDisbursementAmount */}\r\n            <FormControl variant=\"standard\" sx={{ minWidth: 120 }}>\r\n              <InputLabel\r\n                id=\"IsProceedSettledDisbursementAmount\"\r\n                color=\"secondary\"\r\n              >\r\n                IsProceedSettledDisbursementAmount{\" \"}\r\n              </InputLabel>\r\n              <Select\r\n                color=\"secondary\"\r\n                onChange={(event) => {\r\n                  preshipmentFacilitys.IsProceedSettledDisbursementAmount =\r\n                    event.target.value;\r\n                  // setLoanTypeId(event.target.value);\r\n                }}\r\n                labelId=\"IsProceedSettledDisbursementAmount\"\r\n                id=\"IsProceedSettledDisbursementAmount\"\r\n                label=\"IsProceedSettledDisbursementAmount\"\r\n              >\r\n                <MenuItem value=\"\">\r\n                  <em>None</em>\r\n                </MenuItem>\r\n                <MenuItem value=\"1\">\r\n                  <em>yes</em>\r\n                </MenuItem>\r\n                <MenuItem value=\"0\">\r\n                  <em>No</em>\r\n                </MenuItem>\r\n              </Select>\r\n            </FormControl>\r\n            {/* IsThereProceedRemainedToBeCollected */}\r\n            <FormControl variant=\"standard\" sx={{ minWidth: 120 }}>\r\n              <InputLabel\r\n                id=\"IsThereProceedRemainedToBeCollected\"\r\n                color=\"secondary\"\r\n              >\r\n                IsThereProceedRemainedToBeCollected{\" \"}\r\n              </InputLabel>\r\n              <Select\r\n                color=\"secondary\"\r\n                onChange={(event) => {\r\n                  preshipmentFacilitys.IsThereProceedRemainedToBeCollected =\r\n                    event.target.value;\r\n                  // setLoanTypeId(event.target.value);\r\n                }}\r\n                labelId=\"IsThereProceedRemainedToBeCollected\"\r\n                id=\"IsThereProceedRemainedToBeCollected\"\r\n                label=\"IsThereProceedRemainedToBeCollected\"\r\n              >\r\n                <MenuItem value=\"\">\r\n                  <em>None</em>\r\n                </MenuItem>\r\n                <MenuItem value=\"1\">\r\n                  <em>yes</em>\r\n                </MenuItem>\r\n                <MenuItem value=\"0\">\r\n                  <em>No</em>\r\n                </MenuItem>\r\n              </Select>\r\n            </FormControl>\r\n            {/* IsCustomerPresentedNewContractForAmendment */}\r\n            <FormControl variant=\"standard\" sx={{ minWidth: 120 }}>\r\n              <InputLabel\r\n                id=\"IsCustomerPresentedNewContractForAmendment\"\r\n                color=\"secondary\"\r\n              >\r\n                IsCustomerPresentedNewContractForAmendment{\" \"}\r\n              </InputLabel>\r\n              <Select\r\n                color=\"secondary\"\r\n                onChange={(event) => {\r\n                  preshipmentFacilitys.IsCustomerPresentedNewContractForAmendment =\r\n                    event.target.value;\r\n                  // setLoanTypeId(event.target.value);\r\n                }}\r\n                labelId=\"IsCustomerPresentedNewContractForAmendment\"\r\n                id=\"IsCustomerPresentedNewContractForAmendment\"\r\n                label=\"IsCustomerPresentedNewContractForAmendment\"\r\n              >\r\n                <MenuItem value=\"\">\r\n                  <em>None</em>\r\n                </MenuItem>\r\n                <MenuItem value=\"1\">\r\n                  <em>yes</em>\r\n                </MenuItem>\r\n                <MenuItem value=\"0\">\r\n                  <em>No</em>\r\n                </MenuItem>\r\n              </Select>\r\n            </FormControl>\r\n            <LoanTextField\r\n              id=\"TurnOver\"\r\n              label=\"TurnOver\"\r\n              value={preshipmentFacilitys.TurnOver}\r\n              onChange={handleInputChangePreshipmentFacility}\r\n              name=\"TurnOver\"\r\n            />\r\n            <LoanTextField\r\n              id=\"NextAction\"\r\n              label=\"NextAction\"\r\n              value={preshipmentFacilitys.NextAction}\r\n              onChange={handleInputChangePreshipmentFacility}\r\n              name=\"NextAction\"\r\n            />\r\n          </div>\r\n          <div className=\"flex justify-center p-2 pt-5\">\r\n            <button\r\n              className=\"bg-[purple] hover:bg-purple-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\"\r\n              onClick={() => {\r\n                savePreshipmentFacility();\r\n              }}\r\n            >\r\n              Save\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </CompanyModal>\r\n    </>\r\n  );\r\n};\r\nexport default ViewPreshipmentFacility;\r\n","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\accountDetail\\creditFacilityUtilizition\\overDraftFacility\\OverDraftFacilityService.js",[],[],"C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\accountDetail\\creditFacilityUtilizition\\overDraftFacility\\ViewOverDraftFacility.jsx",["1626","1627","1628","1629","1630","1631","1632","1633","1634","1635","1636","1637","1638","1639","1640","1641","1642","1643","1644","1645","1646","1647","1648","1649","1650","1651","1652"],[],"import {\r\n  TextField,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n} from \"@mui/material\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { FaSpinner } from \"react-icons/fa\";\r\nimport { BiSkipNext } from \"react-icons/bi\";\r\nimport { MdModeEdit } from \"react-icons/md\";\r\nimport { IoTrashOutline } from \"react-icons/io5\";\r\nimport { useParams, useNavigate } from \"react-router-dom\";\r\nimport CompanyNavigation from \"../../../../Common/CompanyNavigation\";\r\nimport LoanIconButton from \"../../../../Common/LoanIconButton\";\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\nimport CompanyModal from \"../../../Common/CompanyModal\";\r\nimport { Link } from \"react-router-dom\";\r\nimport CommonServices from \"../../../Common/CommonServices\";\r\n// import AddCreditFacilityUtilizition from \"./AddCreditPerformance\";\r\nimport overDraftFacilityService from \"./OverDraftFacilityService\";\r\nimport AddPreshipmentFacility from \"./AddOverDraftFacility\";\r\nimport LoanTextField from \"../../../../Common/LoanTextField\";\r\nimport AddOverDraftFacility from \"./AddOverDraftFacility\";\r\nconst ViewOverDraftFacility = ({\r\n  isOverDraftFacilityModalOpen,\r\n  handleOverDraftFacilityOpenModal,\r\n  handleOverDraftFacilityCloseModal,\r\n  overDraftFacility,\r\n  creditFacilityUtilizitionId,\r\n}) => {\r\n  const [overDraftFacilityErrorLoading, setOverDraftFacilityErrorLoading] =\r\n    useState(false);\r\n  const navigate = useNavigate();\r\n  const [preshipmentFacilityId, setPreshipmentFacilityId] = useState([]);\r\n  const [deleteLoading, setDeleteLoading] = useState(false);\r\n  const [startDate, setStartDate] = useState(new Date());\r\n  const [expiredDate, setExpiredDate] = useState(new Date());\r\n  const [maturityDate, setMaturityDate] = useState(new Date());\r\n  const [deleteOverDraftFacilityError, setOverDraftFacilityDeleteError] =\r\n    useState(null);\r\n  const [error, setError] = useState(null);\r\n  const [\r\n    isOverDraftFacilityEditModalOpen,\r\n    setIsOverDraftFacilityEditModalOpen,\r\n  ] = useState(false);\r\n  function handleOverDraftFacilityEditOpenModal() {\r\n    setIsOverDraftFacilityEditModalOpen(true);\r\n  }\r\n  function handleOverDraftFacilityEditCloseModal() {\r\n    setIsOverDraftFacilityEditModalOpen(false);\r\n  }\r\n  function handleOverDraftFacilityEditOpenModal() {\r\n    setIsOverDraftFacilityEditModalOpen(true);\r\n  }\r\n  function handleOverDraftFacilityEditCloseModal() {\r\n    setIsOverDraftFacilityEditModalOpen(false);\r\n  }\r\n  const [overDraftFacilityId, setOverDraftFacilityId] = useState(null);\r\n  const handleInputChangeOverDraftFacility = (event) => {\r\n    const { name, value } = event.target;\r\n    setOverDraftFacilitys({\r\n      ...overDraftFacilitys,\r\n      [name]: value,\r\n    });\r\n  };\r\n  const initialOverDraftFacilityState = {\r\n    Id: null,\r\n    ApprovedFacilityLimit: \"\",\r\n    StartDate: \"\",\r\n    ExpiredDate: \"\",\r\n    Year: \"\",\r\n    Month: \"\",\r\n    HighestDebitBalance: \"\",\r\n    HighestCreditBalance: \"\",\r\n    LowestDebitBalance: \"\",\r\n    LowestCreditBalance: \"\",\r\n    NoOfDaysInCreditBalanceInMonth: \"\",\r\n    TotalDebitTransactionBalanceInMonth: \"\",\r\n    TotalCreditTransactionBalanceInMonth: \"\",\r\n    TurnoverPerPeriod: \"\",\r\n    NoOfDaysInCreditBalanceInPeriod: \"\",\r\n  };\r\n  const [overDraftFacilitys, setOverDraftFacilitys] = useState(\r\n    initialOverDraftFacilityState\r\n  );\r\n  const newOverDraftFacility = () => {\r\n    setOverDraftFacilitys(initialOverDraftFacilityState);\r\n    // setSubmitted(false);\r\n  };\r\n  const saveOverDraftFacility = () => {\r\n    var data = {\r\n      ApprovedFacilityLimit: overDraftFacilitys.ApprovedFacilityLimit,\r\n      StartDate: overDraftFacilitys.StartDate,\r\n      ExpiredDate: overDraftFacilitys.ExpiredDate,\r\n      Year: overDraftFacilitys.Year,\r\n      Month: overDraftFacilitys.Month,\r\n      HighestDebitBalance: overDraftFacilitys.HighestDebitBalance,\r\n      HighestCreditBalance: overDraftFacilitys.HighestCreditBalance,\r\n      LowestDebitBalance: overDraftFacilitys.LowestDebitBalance,\r\n      LowestCreditBalance: overDraftFacilitys.LowestCreditBalance,\r\n      NoOfDaysInCreditBalanceInMonth:\r\n        overDraftFacilitys.NoOfDaysInCreditBalanceInMonth,\r\n      TotalDebitTransactionBalanceInMonth:\r\n        overDraftFacilitys.TotalDebitTransactionBalanceInMonth,\r\n      TotalCreditTransactionBalanceInMonth:\r\n        overDraftFacilitys.TotalCreditTransactionBalanceInMonth,\r\n      TurnoverPerPeriod: overDraftFacilitys.TurnoverPerPeriod,\r\n      NoOfDaysInCreditBalanceInPeriod:\r\n        overDraftFacilitys.NoOfDaysInCreditBalanceInPeriod,\r\n    };\r\n    overDraftFacilityService\r\n      .addOverDraftFacility(data, creditFacilityUtilizitionId)\r\n      .then((response) => {\r\n        setOverDraftFacilitys({\r\n          Id: response.data.Id,\r\n          ApprovedFacilityLimit: response.data.ApprovedFacilityLimit,\r\n          StartDate: response.data.StartDate,\r\n          ExpiredDate: response.data.ExpiredDate,\r\n          Year: response.data.Year,\r\n          Month: response.data.Month,\r\n          HighestDebitBalance: response.data.HighestDebitBalance,\r\n          HighestCreditBalance: response.data.HighestCreditBalance,\r\n          LowestDebitBalance: response.data.LowestDebitBalance,\r\n          LowestCreditBalance: response.data.LowestCreditBalance,\r\n          NoOfDaysInCreditBalanceInMonth:\r\n            response.data.NoOfDaysInCreditBalanceInMonth,\r\n          TotalDebitTransactionBalanceInMonth:\r\n            response.data.TotalDebitTransactionBalanceInMonth,\r\n          TotalCreditTransactionBalanceInMonth:\r\n            response.data.TotalCreditTransactionBalanceInMonth,\r\n          TurnoverPerPeriod: response.data.TurnoverPerPeriod,\r\n          NoOfDaysInCreditBalanceInPeriod:\r\n            response.data.NoOfDaysInCreditBalanceInPeriod,\r\n        });\r\n        if (response.data.Code === 200) {\r\n          setOverDraftFacilitys(initialOverDraftFacilityState);\r\n          console.log(response.data);\r\n          // setHoldId(response.data.Result.Id);\r\n          overDraftFacility();\r\n          toast.success(\"Added successfully\", {\r\n            position: toast.POSITION.TOP_RIGHT,\r\n            toastId: \"PreshipmentFacility\",\r\n          });\r\n        }\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n  const handleDelete = (overDraftFacility) => {\r\n    setDeleteLoading(true);\r\n    const confirm = window.confirm(\r\n      `Are you sure you want to delete ${overDraftFacility.Id}?`\r\n    );\r\n    if (confirm) {\r\n      toast.success(\"Deleting\", {\r\n        position: toast.POSITION.TOP_RIGHT,\r\n        toastId: \"deletePreshipmentFacility\",\r\n      });\r\n      overDraftFacilityService\r\n        .deleteOverDraftFacilityById(overDraftFacility.Id)\r\n        .then(() => {\r\n          overDraftFacility((previousData) =>\r\n            previousData.filter((comp) => comp.Id !== overDraftFacility.Id)\r\n          );\r\n        })\r\n        .catch((e) => {\r\n          setOverDraftFacilityDeleteError(e);\r\n          setDeleteLoading(false);\r\n        });\r\n    }\r\n  };\r\n  const [editOverDraftFacility, setEditOverDraftFacility] = useState({\r\n    //  Id: editAddresAccountDetailId,\r\n    ApprovedFacilityLimit: \"\",\r\n    StartDate: \"\",\r\n    ExpiredDate: \"\",\r\n    Year: \"\",\r\n    Month: \"\",\r\n    HighestDebitBalance: \"\",\r\n    HighestCreditBalance: \"\",\r\n    LowestDebitBalance: \"\",\r\n    LowestCreditBalance: \"\",\r\n    NoOfDaysInCreditBalanceInMonth: \"\",\r\n    TotalDebitTransactionBalanceInMonth: \"\",\r\n    TotalCreditTransactionBalanceInMonth: \"\",\r\n    TurnoverPerPeriod: \"\",\r\n    NoOfDaysInCreditBalanceInPeriod: \"\",\r\n  });\r\n\r\n  const handleInputChangeEditOverDraftFacility = (event) => {\r\n    const { name, value } = event.target;\r\n    setEditOverDraftFacility({\r\n      ...editOverDraftFacility,\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  const getOverDraftFacilityId = (editOverDraftFacilityId) => {\r\n    overDraftFacilityService\r\n      .getOverDraftFacilityById(editOverDraftFacilityId) //here is\r\n      .then((res) => {\r\n        setEditOverDraftFacility({\r\n          ...editOverDraftFacility,\r\n          Id: editOverDraftFacilityId,\r\n          ApprovedFacilityLimit: res.data.Result.ApprovedFacilityLimit,\r\n          StartDate: res.data.Result.StartDate,\r\n          ExpiredDate: res.data.Result.ExpiredDate,\r\n          Year: res.data.Result.Year,\r\n          Month: res.data.Result.Month,\r\n          HighestDebitBalance: res.data.Result.HighestDebitBalance,\r\n          HighestCreditBalance: res.data.Result.HighestCreditBalance,\r\n          LowestDebitBalance: res.data.Result.LowestDebitBalance,\r\n          LowestCreditBalance: res.data.Result.LowestCreditBalance,\r\n          NoOfDaysInCreditBalanceInMonth:\r\n            res.data.Result.NoOfDaysInCreditBalanceInMonth,\r\n          TotalDebitTransactionBalanceInMonth:\r\n            res.data.Result.TotalDebitTransactionBalanceInMonth,\r\n          TotalCreditTransactionBalanceInMonth:\r\n            res.data.Result.TotalCreditTransactionBalanceInMonth,\r\n          TurnoverPerPeriod: res.data.Result.TurnoverPerPeriod,\r\n          NoOfDaysInCreditBalanceInPeriod:\r\n            res.data.Result.NoOfDaysInCreditBalanceInPeriod,\r\n        });\r\n      })\r\n      .catch((err) => {\r\n        if (err.response.data.StatusCode === 404) {\r\n          console.log(err.response.data.Message);\r\n        }\r\n      });\r\n  };\r\n  const updateOverDraftFacilityById = (e) => {\r\n    e.preventDefault();\r\n    overDraftFacilityService\r\n      .updateOverdraftFacilityById(overDraftFacilityId, editOverDraftFacility)\r\n      .then((response) => {\r\n        if (response.data.Code === 200) {\r\n          overDraftFacility();\r\n          toast.success(\"Updated successfully\", {\r\n            position: toast.POSITION.TOP_RIGHT,\r\n            toastId: \"updateCompany\",\r\n          });\r\n        }\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n  return (\r\n    <div>\r\n      <CompanyModal\r\n        isOpen={isOverDraftFacilityModalOpen}\r\n        onClose={handleOverDraftFacilityCloseModal}\r\n        title=\" over draft Facility\"\r\n      >\r\n        <div className=\"flex items-top justify-top h-screen\">\r\n          <div>\r\n            <div className=\"rounded-lg overflow-hidden overflow-x-scroll overflow-y-scroll\">\r\n              {/* <div className=\"bg-gray-100 flex items-center justify-center h-screen\"> */}\r\n              <div>\r\n                <h4 className=\"text-lg font-semibold eading-tight p-2\"></h4>\r\n                <AddOverDraftFacility\r\n                  handleInputChangeOverDraftFacility={\r\n                    handleInputChangeOverDraftFacility\r\n                  }\r\n                  saveOverDraftFacility={saveOverDraftFacility}\r\n                  overDraftFacilitys={overDraftFacilitys}\r\n                  setOverDraftFacilitys={setOverDraftFacilitys}\r\n                />\r\n                <div>\r\n                  {error && <p className=\"text-red-500\">{error}</p>}\r\n                  {!error && overDraftFacilityErrorLoading ? (\r\n                    <span>\r\n                      <FaSpinner\r\n                        className=\"animate-spin rounded-full h-6 w-6 text-purple-600\"\r\n                        fontSize=\"small\"\r\n                        data-toggle=\"tooltip\"\r\n                        title=\"Click it to sign in\"\r\n                      />\r\n                      Loading...\r\n                    </span>\r\n                  ) : (\r\n                    !error &&\r\n                    !overDraftFacilityErrorLoading && (\r\n                      <div className=\"overflow-x-auto\">\r\n                        <ToastContainer />\r\n                        <table className=\"min-w-full table table-bordered table-striped bg-purple-100\">\r\n                          <thead>\r\n                            <tr className=\"bg-purple-200\">\r\n                              <th className=\"px-2 py-4 text-base\">\r\n                                {\" \"}\r\n                                Approved Facility Limit\r\n                              </th>\r\n                              <th className=\"px-2 py-4 text-base\">\r\n                                {\" \"}\r\n                                Start Date{\" \"}\r\n                              </th>\r\n                              <th className=\"px-2 py-4 text-base\">\r\n                                {\" \"}\r\n                                Expired Date\r\n                              </th>\r\n                              <th className=\"px-2 py-4 text-base\"> Year </th>\r\n                              <th className=\"px-2 py-4 text-base\"> Month </th>\r\n                              <th className=\"px-2 py-4 text-base\">\r\n                                {\" \"}\r\n                                Highest Debit Balance{\" \"}\r\n                              </th>\r\n                              <th className=\"px-2 py-4 text-base\">\r\n                                {\" \"}\r\n                                Highest Credit Balance{\" \"}\r\n                              </th>\r\n                              <th className=\"px-2 py-4 text-base\">\r\n                                {\" \"}\r\n                                Lowest Debit Balance{\" \"}\r\n                              </th>\r\n                              <th className=\"px-2 py-4 text-base\">\r\n                                {\" \"}\r\n                                Lowest Credit Balance{\" \"}\r\n                              </th>\r\n                              <th className=\"px-2 py-4 text-base\">\r\n                                {\" \"}\r\n                                No Of Days In Credit Balance In Month{\" \"}\r\n                              </th>\r\n                              <th className=\"px-2 py-4 text-base\">\r\n                                {\" \"}\r\n                                Total Debit Transaction Balance In Month{\" \"}\r\n                              </th>\r\n                              <th className=\"px-2 py-4 text-base\">\r\n                                {\" \"}\r\n                                Total Credit Transaction Balance In Month{\" \"}\r\n                              </th>\r\n                              <th className=\"px-2 py-4 text-base\">\r\n                                {\" \"}\r\n                                Turn over Per Period{\" \"}\r\n                              </th>\r\n                              <th className=\"px-2 py-4 text-base\">\r\n                                No Of Days In Credit Balance In Period{\" \"}\r\n                              </th>\r\n                              <th className=\"px-2 py-4 text-base\"> Action </th>\r\n                            </tr>\r\n                          </thead>\r\n                          <tbody>\r\n                            {overDraftFacility.length === 0 ? (\r\n                              <p className=\"text-red-600 p-4\">Data not found</p>\r\n                            ) : (\r\n                              overDraftFacility.map(\r\n                                (preshipmentFacilitys, index) => (\r\n                                  <tr\r\n                                    key={index}\r\n                                    className=\"bg-white\r\n                    border-b border-purple-200\"\r\n                                  >\r\n                                    <td className=\"p-2\">\r\n                                      {\r\n                                        preshipmentFacilitys.ApprovedFacilityLimit\r\n                                      }\r\n                                    </td>\r\n                                    <td className=\"p-2\">\r\n                                      {preshipmentFacilitys.StartDate}\r\n                                    </td>\r\n                                    <td className=\"p-2\">\r\n                                      {preshipmentFacilitys.ExpiredDate}\r\n                                    </td>\r\n                                    <td className=\"p-2\">\r\n                                      {preshipmentFacilitys.Year}\r\n                                    </td>\r\n                                    <td className=\"p-2\">\r\n                                      {preshipmentFacilitys.Month}\r\n                                    </td>\r\n                                    <td className=\"p-2\">\r\n                                      {preshipmentFacilitys.HighestDebitBalance}\r\n                                    </td>\r\n                                    <td className=\"p-2\">\r\n                                      {\r\n                                        preshipmentFacilitys.HighestCreditBalance\r\n                                      }\r\n                                    </td>\r\n                                    <td className=\"p-2\">\r\n                                      {preshipmentFacilitys.LowestDebitBalance}\r\n                                    </td>\r\n                                    <td className=\"p-2\">\r\n                                      {preshipmentFacilitys.LowestCreditBalance}\r\n                                    </td>\r\n                                    <td className=\"p-2\">\r\n                                      {\r\n                                        preshipmentFacilitys.NoOfDaysInCreditBalanceInMonth\r\n                                      }\r\n                                    </td>\r\n                                    <td className=\"p-2\">\r\n                                      {\r\n                                        preshipmentFacilitys.TotalDebitTransactionBalanceInMonth\r\n                                      }\r\n                                    </td>\r\n                                    <td className=\"p-2\">\r\n                                      {\r\n                                        preshipmentFacilitys.TotalCreditTransactionBalanceInMonth\r\n                                      }\r\n                                    </td>\r\n                                    <td className=\"p-2\">\r\n                                      {preshipmentFacilitys.TurnoverPerPeriod}\r\n                                    </td>\r\n                                    <td className=\"p-2\">\r\n                                      {\r\n                                        preshipmentFacilitys.NoOfDaysInCreditBalanceInPeriod\r\n                                      }\r\n                                    </td>\r\n                                    <td className=\"p-2\">\r\n                                      <>\r\n                                        <LoanIconButton\r\n                                          style={{ color: \"green\" }}\r\n                                          icon={<MdModeEdit />}\r\n                                          text=\"Edit\"\r\n                                          onClick={() => {\r\n                                            handleOverDraftFacilityEditOpenModal();\r\n                                            getOverDraftFacilityId(\r\n                                              preshipmentFacilitys.Id\r\n                                            );\r\n                                            setOverDraftFacilityId(\r\n                                              preshipmentFacilitys.Id\r\n                                            );\r\n                                          }}\r\n                                        />\r\n                                      </>\r\n                                      {/* <>\r\n                                        <LoanIconButton\r\n                                          style={{ color: \"green\" }}\r\n                                          text=\" Delete\"\r\n                                          onClick={() => {\r\n                                            handleDelete(preshipmentFacilitys);\r\n                                          }}\r\n                                        >\r\n                                          <ToastContainer />\r\n                                        </LoanIconButton>\r\n                                      </> */}\r\n                                    </td>\r\n                                  </tr>\r\n                                )\r\n                              )\r\n                            )}\r\n                          </tbody>\r\n                        </table>\r\n                      </div>\r\n                    )\r\n                  )}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </CompanyModal>\r\n      <CompanyModal\r\n        isOpen={isOverDraftFacilityEditModalOpen}\r\n        onClose={handleOverDraftFacilityEditCloseModal}\r\n        title=\"Modify account detail information\"\r\n      >\r\n        <div>\r\n          <ToastContainer />\r\n          <form onSubmit={updateOverDraftFacilityById}>\r\n            <div className=\"grid grid-cols-1 gap-4 submit-form\">\r\n              <div className=\"submit-form \">\r\n                <div className=\"relative center justify-center flex-1 w-full max-w-full grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\">\r\n                  <LoanTextField\r\n                    id=\"ApprovedFacilityLimit\"\r\n                    label=\"ApprovedFacilityLimit\"\r\n                    value={editOverDraftFacility.ApprovedFacilityLimit}\r\n                    onChange={handleInputChangeEditOverDraftFacility}\r\n                    name=\"ApprovedFacilityLimit\"\r\n                  />\r\n                  <p>\r\n                    Start Date:\r\n                    <input\r\n                      id=\"StartDate\"\r\n                      name=\"StartDate\"\r\n                      label=\"StartDate\"\r\n                      placeholder=\"StartDate\"\r\n                      type=\"date\"\r\n                      value={\r\n                        startDate.getFullYear().toString() +\r\n                        \"-\" +\r\n                        (startDate.getMonth() + 1).toString().padStart(2, 0) +\r\n                        \"-\" +\r\n                        startDate.getDate().toString().padStart(2, 0)\r\n                      }\r\n                      onChange={(e) => {\r\n                        setStartDate(new Date(e.target.value));\r\n                        editOverDraftFacility.StartDate = startDate;\r\n                      }}\r\n                    />{\" \"}\r\n                  </p>\r\n                  <p>\r\n                    Expired Date:\r\n                    <input\r\n                      id=\"ExpiredDate\"\r\n                      name=\"ExpiredDate\"\r\n                      label=\"ExpiredDate\"\r\n                      placeholder=\"ExpiredDate\"\r\n                      type=\"date\"\r\n                      value={\r\n                        maturityDate.getFullYear().toString() +\r\n                        \"-\" +\r\n                        (maturityDate.getMonth() + 1)\r\n                          .toString()\r\n                          .padStart(2, 0) +\r\n                        \"-\" +\r\n                        maturityDate.getDate().toString().padStart(2, 0)\r\n                      }\r\n                      onChange={(e) => {\r\n                        setMaturityDate(new Date(e.target.value));\r\n                        editOverDraftFacility.ExpiredDate = maturityDate;\r\n                      }}\r\n                    />{\" \"}\r\n                  </p>\r\n                  <LoanTextField\r\n                    id=\"Year\"\r\n                    label=\"Year\"\r\n                    value={editOverDraftFacility.Year}\r\n                    onChange={handleInputChangeEditOverDraftFacility}\r\n                    name=\"Year\"\r\n                  />\r\n                  <LoanTextField\r\n                    id=\"Month\"\r\n                    label=\"Month\"\r\n                    value={editOverDraftFacility.Month}\r\n                    onChange={handleInputChangeEditOverDraftFacility}\r\n                    name=\"Month\"\r\n                  />\r\n                  <LoanTextField\r\n                    id=\"HighestDebitBalance\"\r\n                    label=\"HighestDebitBalance\"\r\n                    value={editOverDraftFacility.HighestDebitBalance}\r\n                    onChange={handleInputChangeEditOverDraftFacility}\r\n                    name=\"HighestDebitBalance\"\r\n                  />\r\n                  <LoanTextField\r\n                    id=\"HighestCreditBalance\"\r\n                    label=\"HighestCreditBalance\"\r\n                    value={editOverDraftFacility.HighestCreditBalance}\r\n                    onChange={handleInputChangeEditOverDraftFacility}\r\n                    name=\"HighestCreditBalance\"\r\n                  />\r\n                  <LoanTextField\r\n                    id=\"LowestDebitBalance\"\r\n                    label=\"LowestDebitBalance\"\r\n                    value={editOverDraftFacility.LowestDebitBalance}\r\n                    onChange={handleInputChangeEditOverDraftFacility}\r\n                    name=\"LowestDebitBalance\"\r\n                  />\r\n                  <LoanTextField\r\n                    id=\"LowestCreditBalance\"\r\n                    label=\"LowestCreditBalance\"\r\n                    value={editOverDraftFacility.LowestCreditBalance}\r\n                    onChange={handleInputChangeEditOverDraftFacility}\r\n                    name=\"LowestCreditBalance\"\r\n                  />\r\n                  <LoanTextField\r\n                    id=\"NoOfDaysInCreditBalanceInMonth\"\r\n                    label=\"NoOfDaysInCreditBalanceInMonth\"\r\n                    value={editOverDraftFacility.NoOfDaysInCreditBalanceInMonth}\r\n                    onChange={handleInputChangeEditOverDraftFacility}\r\n                    name=\"NoOfDaysInCreditBalanceInMonth\"\r\n                  />\r\n                  <LoanTextField\r\n                    id=\"TotalDebitTransactionBalanceInMonth\"\r\n                    label=\"TotalDebitTransactionBalanceInMonth\"\r\n                    value={\r\n                      editOverDraftFacility.TotalDebitTransactionBalanceInMonth\r\n                    }\r\n                    onChange={handleInputChangeEditOverDraftFacility}\r\n                    name=\"TotalDebitTransactionBalanceInMonth\"\r\n                  />\r\n                  <LoanTextField\r\n                    id=\"TotalCreditTransactionBalanceInMonth\"\r\n                    label=\"TotalCreditTransactionBalanceInMonth\"\r\n                    value={\r\n                      editOverDraftFacility.TotalCreditTransactionBalanceInMonth\r\n                    }\r\n                    onChange={handleInputChangeEditOverDraftFacility}\r\n                    name=\"TotalCreditTransactionBalanceInMonth\"\r\n                  />\r\n                  <LoanTextField\r\n                    id=\"TurnoverPerPeriod\"\r\n                    label=\"TurnoverPerPeriod\"\r\n                    value={editOverDraftFacility.TurnoverPerPeriod}\r\n                    onChange={handleInputChangeEditOverDraftFacility}\r\n                    name=\"TurnoverPerPeriod\"\r\n                  />\r\n                  <LoanTextField\r\n                    id=\"NoOfDaysInCreditBalanceInPeriod\"\r\n                    label=\"NoOfDaysInCreditBalanceInPeriod\"\r\n                    value={\r\n                      editOverDraftFacility.NoOfDaysInCreditBalanceInPeriod\r\n                    }\r\n                    onChange={handleInputChangeEditOverDraftFacility}\r\n                    name=\"NoOfDaysInCreditBalanceInPeriod\"\r\n                  />\r\n                </div>\r\n                <div className=\"flex justify-center items-center\">\r\n                  <button\r\n                    type=\"submit\"\r\n                    className=\"bg-[purple] hover:bg-purple-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline \"\r\n                  >\r\n                    Update\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </CompanyModal>\r\n    </div>\r\n  );\r\n};\r\nexport default ViewOverDraftFacility;\r\n","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\accountDetail\\creditFacilityUtilizition\\overDraftFacility\\AddOverDraftFacility.jsx",["1653","1654","1655","1656","1657","1658","1659","1660","1661","1662","1663","1664","1665","1666","1667","1668","1669","1670","1671","1672","1673","1674","1675","1676","1677"],[],"import {\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  IconButton,\r\n} from \"@mui/material\";\r\nimport { useState, useEffect } from \"react\";\r\nimport LoanIconButton from \"../../../../Common/LoanIconButton\";\r\nimport CompanyModal from \"../../../Common/CompanyModal\";\r\n// import CompanyModal from \"../../../../Common/CompanyModal\";\r\nimport { RiSkipBackMiniFill } from \"react-icons/ri\";\r\nimport { BsPlus } from \"react-icons/bs\";\r\nimport { BiSkipNext, BiSkipPrevious } from \"react-icons/bi\";\r\nimport { IoRefresh } from \"react-icons/io5\";\r\n// import LoanTextField from \"../../../Common/LoanTextField\";\r\nimport CommonServices from \"../../../Common/CommonServices\";\r\nimport LoanTextField from \"../../../../Common/LoanTextField\";\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\nconst AddOverDraftFacility = ({\r\n  submitted,\r\n  handleBack,\r\n  handleSkip,\r\n  handleNext,\r\n  saveOverDraftFacility,\r\n  overDraftFacilitys,\r\n  handleInputChangeOverDraftFacility,\r\n  setOverDraftFacilitys,\r\n}) => {\r\n  const [isOverDraftModalOpen, setIsOverDraftModalOpen] = useState(false);\r\n  function handleOverDraftOpenModal() {\r\n    setIsOverDraftModalOpen(true);\r\n  }\r\n  function handlOverDraftCloseModal() {\r\n    setIsOverDraftModalOpen(false);\r\n  }\r\n  const [approvalDate, setApprovalDate] = useState(new Date());\r\n  const [startDate, setStartDate] = useState(new Date());\r\n  const [maturityDate, setMaturityDate] = useState(new Date());\r\n  const [salesContractDate, setSalesContractDate] = useState(new Date());\r\n  const [shipmentDate, setShipmentDate] = useState(new Date());\r\n  const [lOT1ShipmentDate, setLOT1ShipmentDate] = useState(new Date());\r\n  const [LOT1IncomingDate, setLOT1IncomingDate] = useState(new Date());\r\n  const [LOT1DisbursementDate, setLOT1DisbursementDate] = useState(new Date());\r\n  const [currency, setCurrency] = useState([]);\r\n  const [country, setCountry] = useState([]);\r\n  const [sectorType, setSectorType] = useState([]);\r\n  const getCurrency = () => {\r\n    CommonServices.getCurrency()\r\n      .then((response) => {\r\n        setCurrency(response.data.Result);\r\n        console.log(response.data.Result);\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n  useEffect(() => {\r\n    getCurrency();\r\n  }, []);\r\n  const getCountry = () => {\r\n    CommonServices.getCountry()\r\n      .then((response) => {\r\n        setCountry(response.data.Result);\r\n        console.log(response.data.Result);\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n  useEffect(() => {\r\n    getCountry();\r\n  }, []);\r\n  const getSectorType = () => {\r\n    CommonServices.sector()\r\n      .then((response) => {\r\n        setSectorType(response.data.Result);\r\n        console.log(response.data.Result);\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n  useEffect(() => {\r\n    getSectorType();\r\n  }, []);\r\n  return (\r\n    <>\r\n      <div className=\"flex\">\r\n        {/* <LoanIconButton\r\n          style={{ color: \"purple\" }}\r\n          icon={<BiSkipPrevious />}\r\n          text=\"Back\"\r\n          onClick={handleSkip}\r\n        /> */}\r\n        <LoanIconButton\r\n          style={{ color: \"purple\" }}\r\n          icon={<BsPlus />}\r\n          text=\"Add\"\r\n          onClick={handleOverDraftOpenModal}\r\n        />\r\n        {/* <LoanIconButton\r\n          style={{ color: \"purple\" }}\r\n          icon={<BiSkipNext />}\r\n          text=\"Skip\"\r\n          onClick={handleSkip}\r\n        /> */}\r\n      </div>\r\n      <CompanyModal\r\n        isOpen={isOverDraftModalOpen}\r\n        onClose={handlOverDraftCloseModal}\r\n        title=\"Add over draft \"\r\n      >\r\n        <div>\r\n          <ToastContainer />\r\n          <div className=\"relative center justify-center flex-1 w-full max-w-full grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\">\r\n            <LoanTextField\r\n              id=\"ApprovedFacilityLimit\"\r\n              label=\"ApprovedFacilityLimit\"\r\n              value={overDraftFacilitys.ApprovedFacilityLimit}\r\n              onChange={handleInputChangeOverDraftFacility}\r\n              name=\"ApprovedFacilityLimit\"\r\n            />\r\n            <p>\r\n              Start Date:\r\n              <input\r\n                id=\"StartDate\"\r\n                name=\"StartDate\"\r\n                label=\"StartDate\"\r\n                placeholder=\"StartDate\"\r\n                type=\"date\"\r\n                value={\r\n                  startDate.getFullYear().toString() +\r\n                  \"-\" +\r\n                  (startDate.getMonth() + 1).toString().padStart(2, 0) +\r\n                  \"-\" +\r\n                  startDate.getDate().toString().padStart(2, 0)\r\n                }\r\n                onChange={(e) => {\r\n                  setStartDate(new Date(e.target.value));\r\n                  overDraftFacilitys.StartDate = startDate;\r\n                }}\r\n              />{\" \"}\r\n            </p>\r\n            <p>\r\n              Expired Date:\r\n              <input\r\n                id=\"ExpiredDate\"\r\n                name=\"ExpiredDate\"\r\n                label=\"ExpiredDate\"\r\n                placeholder=\"ExpiredDate\"\r\n                type=\"date\"\r\n                value={\r\n                  maturityDate.getFullYear().toString() +\r\n                  \"-\" +\r\n                  (maturityDate.getMonth() + 1).toString().padStart(2, 0) +\r\n                  \"-\" +\r\n                  maturityDate.getDate().toString().padStart(2, 0)\r\n                }\r\n                onChange={(e) => {\r\n                  setMaturityDate(new Date(e.target.value));\r\n                  overDraftFacilitys.ExpiredDate = maturityDate;\r\n                }}\r\n              />{\" \"}\r\n            </p>\r\n            <LoanTextField\r\n              id=\"Year\"\r\n              label=\"Year\"\r\n              value={overDraftFacilitys.Year}\r\n              onChange={handleInputChangeOverDraftFacility}\r\n              name=\"Year\"\r\n            />\r\n            <LoanTextField\r\n              id=\"Month\"\r\n              label=\"Month\"\r\n              value={overDraftFacilitys.Month}\r\n              onChange={handleInputChangeOverDraftFacility}\r\n              name=\"Month\"\r\n            />\r\n            <LoanTextField\r\n              id=\"HighestDebitBalance\"\r\n              label=\"HighestDebitBalance\"\r\n              value={overDraftFacilitys.HighestDebitBalance}\r\n              onChange={handleInputChangeOverDraftFacility}\r\n              name=\"HighestDebitBalance\"\r\n            />\r\n            <LoanTextField\r\n              id=\"HighestCreditBalance\"\r\n              label=\"HighestCreditBalance\"\r\n              value={overDraftFacilitys.HighestCreditBalance}\r\n              onChange={handleInputChangeOverDraftFacility}\r\n              name=\"HighestCreditBalance\"\r\n            />\r\n            <LoanTextField\r\n              id=\"LowestDebitBalance\"\r\n              label=\"LowestDebitBalance\"\r\n              value={overDraftFacilitys.LowestDebitBalance}\r\n              onChange={handleInputChangeOverDraftFacility}\r\n              name=\"LowestDebitBalance\"\r\n            />\r\n            <LoanTextField\r\n              id=\"LowestCreditBalance\"\r\n              label=\"LowestCreditBalance\"\r\n              value={overDraftFacilitys.LowestCreditBalance}\r\n              onChange={handleInputChangeOverDraftFacility}\r\n              name=\"LowestCreditBalance\"\r\n            />\r\n            <LoanTextField\r\n              id=\"NoOfDaysInCreditBalanceInMonth\"\r\n              label=\"NoOfDaysInCreditBalanceInMonth\"\r\n              value={overDraftFacilitys.NoOfDaysInCreditBalanceInMonth}\r\n              onChange={handleInputChangeOverDraftFacility}\r\n              name=\"NoOfDaysInCreditBalanceInMonth\"\r\n            />\r\n            <LoanTextField\r\n              id=\"TotalDebitTransactionBalanceInMonth\"\r\n              label=\"TotalDebitTransactionBalanceInMonth\"\r\n              value={overDraftFacilitys.TotalDebitTransactionBalanceInMonth}\r\n              onChange={handleInputChangeOverDraftFacility}\r\n              name=\"TotalDebitTransactionBalanceInMonth\"\r\n            />\r\n            <LoanTextField\r\n              id=\"TotalCreditTransactionBalanceInMonth\"\r\n              label=\"TotalCreditTransactionBalanceInMonth\"\r\n              value={overDraftFacilitys.TotalCreditTransactionBalanceInMonth}\r\n              onChange={handleInputChangeOverDraftFacility}\r\n              name=\"TotalCreditTransactionBalanceInMonth\"\r\n            />\r\n            <LoanTextField\r\n              id=\"TurnoverPerPeriod\"\r\n              label=\"TurnoverPerPeriod\"\r\n              value={overDraftFacilitys.TurnoverPerPeriod}\r\n              onChange={handleInputChangeOverDraftFacility}\r\n              name=\"TurnoverPerPeriod\"\r\n            />\r\n            <LoanTextField\r\n              id=\"NoOfDaysInCreditBalanceInPeriod\"\r\n              label=\"NoOfDaysInCreditBalanceInPeriod\"\r\n              value={overDraftFacilitys.NoOfDaysInCreditBalanceInPeriod}\r\n              onChange={handleInputChangeOverDraftFacility}\r\n              name=\"NoOfDaysInCreditBalanceInPeriod\"\r\n            />\r\n          </div>\r\n          <div className=\"flex justify-center p-2 pt-5\">\r\n            <button\r\n              className=\"bg-[purple] hover:bg-purple-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\"\r\n              onClick={() => {\r\n                saveOverDraftFacility();\r\n              }}\r\n            >\r\n              Save\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </CompanyModal>\r\n    </>\r\n  );\r\n};\r\nexport default AddOverDraftFacility;\r\n","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\accountDetail\\creditFacilityUtilizition\\LCFacility\\LCFacilityService.js",[],[],"C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\accountDetail\\creditFacilityUtilizition\\LCFacility\\ViewLCFacility.jsx",["1678","1679","1680","1681","1682","1683","1684","1685","1686","1687","1688","1689","1690","1691","1692"],[],"import {\r\n  TextField,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n} from \"@mui/material\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { FaSpinner } from \"react-icons/fa\";\r\nimport { BiSkipNext } from \"react-icons/bi\";\r\nimport { MdModeEdit } from \"react-icons/md\";\r\nimport LoanIconButton from \"../../../../Common/LoanIconButton\";\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\nimport CompanyModal from \"../../../Common/CompanyModal\";\r\nimport LoanTextField from \"../../../../Common/LoanTextField\";\r\nimport LCFacilityService from \"./LCFacilityService\";\r\nimport AddLCFacility from \"./AddLCFacility\";\r\nconst ViewLCFacility = ({\r\n  isLCFacilityModalOpen,\r\n  handleLCFacilityOpenModal,\r\n  handleLCFacilityCloseModal,\r\n  LCFacility,\r\n  creditFacilityUtilizitionId,\r\n}) => {\r\n  const [LCFacilityErrorLoading, setLCFacilityErrorLoading] = useState(false);\r\n  const [deleteLoading, setDeleteLoading] = useState(false);\r\n  const [approvalDate, setApprovalDate] = useState(new Date());\r\n  const [expiredDate, setExpiredDate] = useState(new Date());\r\n  const [PDLD, setPDLD] = useState(new Date());\r\n  const [deleteLCFacilityError, setLCFacilityDeleteError] = useState(null);\r\n  const [error, setError] = useState(null);\r\n  const [isLCFacilityEditModalOpen, setIsLCFacilityEditModalOpen] =\r\n    useState(false);\r\n  function handleLCFacilityEditOpenModal() {\r\n    setIsLCFacilityEditModalOpen(true);\r\n  }\r\n  function handleLCFacilityEditCloseModal() {\r\n    setIsLCFacilityEditModalOpen(false);\r\n  }\r\n  function handleLCFacilityEditOpenModal() {\r\n    setIsLCFacilityEditModalOpen(true);\r\n  }\r\n  function handleLCFacilityEditCloseModal() {\r\n    setIsLCFacilityEditModalOpen(false);\r\n  }\r\n  const [LCFacilityId, setLCFacilityId] = useState(null);\r\n  const handleInputChangeLCFacility = (event) => {\r\n    const { name, value } = event.target;\r\n    setLCFacilitys({\r\n      ...LCFacilitys,\r\n      [name]: value,\r\n    });\r\n  };\r\n  const initialLCFacilityState = {\r\n    Id: null,\r\n    ApprovalDate: \"\",\r\n    ApprovedAmount: \"\",\r\n    ExpiredDate: \"\",\r\n    DayPastDue: \"\",\r\n    PDLD: \"\",\r\n    OutstandingBalance: \"\",\r\n  };\r\n  const [LCFacilitys, setLCFacilitys] = useState(initialLCFacilityState);\r\n  const newLCFacility = () => {\r\n    setLCFacilitys(initialLCFacilityState);\r\n    // setSubmitted(false);\r\n  };\r\n  const saveLCFacility = () => {\r\n    var data = {\r\n      ApprovalDate: LCFacilitys.ApprovalDate,\r\n      ApprovedAmount: LCFacilitys.ApprovedAmount,\r\n      ExpiredDate: LCFacilitys.ExpiredDate,\r\n      DayPastDue: LCFacilitys.DayPastDue,\r\n      PDLD: LCFacilitys.PDLD,\r\n      OutstandingBalance: LCFacilitys.OutstandingBalance,\r\n    };\r\n    LCFacilityService.addLCFacility(data, creditFacilityUtilizitionId)\r\n      .then((response) => {\r\n        setLCFacilitys({\r\n          Id: response.data.Id,\r\n          ApprovalDate: response.data.ApprovalDate,\r\n          ApprovedAmount: response.data.ApprovedAmount,\r\n          ExpiredDate: response.data.ExpiredDate,\r\n          DayPastDue: response.data.DayPastDue,\r\n          PDLD: response.data.PDLD,\r\n          OutstandingBalance: response.data.OutstandingBalance,\r\n        });\r\n        if (response.data.Code === 200) {\r\n          setLCFacilitys(initialLCFacilityState);\r\n          console.log(response.data);\r\n          // setHoldId(response.data.Result.Id);\r\n          LCFacility();\r\n          toast.success(\"Added successfully\", {\r\n            position: toast.POSITION.TOP_RIGHT,\r\n            toastId: \"PreshipmentFacility\",\r\n          });\r\n        }\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n  const handleDelete = (LCFacility) => {\r\n    setDeleteLoading(true);\r\n    const confirm = window.confirm(\r\n      `Are you sure you want to delete ${LCFacility.Id}?`\r\n    );\r\n    if (confirm) {\r\n      toast.success(\"Deleting\", {\r\n        position: toast.POSITION.TOP_RIGHT,\r\n        toastId: \"deletePreshipmentFacility\",\r\n      });\r\n      LCFacilityService.deleteLCFacilityById(LCFacility.Id)\r\n        .then(() => {\r\n          LCFacility((previousData) =>\r\n            previousData.filter((comp) => comp.Id !== LCFacility.Id)\r\n          );\r\n        })\r\n        .catch((e) => {\r\n          setLCFacilityDeleteError(e);\r\n          setDeleteLoading(false);\r\n        });\r\n    }\r\n  };\r\n  const [editLCFacility, setEditLCFacility] = useState({\r\n    //  Id: editAddresAccountDetailId,\r\n    ApprovalDate: \"\",\r\n    ApprovedAmount: \"\",\r\n    ExpiredDate: \"\",\r\n    DayPastDue: \"\",\r\n    PDLD: \"\",\r\n    OutstandingBalance: \"\",\r\n  });\r\n\r\n  const handleInputChangeEditLCFacility = (event) => {\r\n    const { name, value } = event.target;\r\n    setEditLCFacility({\r\n      ...editLCFacility,\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  const getLCFacilityId = (editLCFacilityId) => {\r\n    LCFacilityService.getLcFacilityById(editLCFacilityId) //here is\r\n      .then((res) => {\r\n        setEditLCFacility({\r\n          ...editLCFacility,\r\n          Id: editLCFacilityId,\r\n          ApprovalDate: res.data.Result.ApprovalDate,\r\n          ApprovedAmount: res.data.Result.ApprovedAmount,\r\n          ExpiredDate: res.data.Result.ExpiredDate,\r\n          DayPastDue: res.data.Result.DayPastDue,\r\n          PDLD: res.data.Result.PDLD,\r\n          OutstandingBalance: res.data.Result.OutstandingBalance,\r\n        });\r\n      })\r\n      .catch((err) => {\r\n        if (err.response.data.StatusCode === 404) {\r\n          console.log(err.response.data.Message);\r\n        }\r\n      });\r\n  };\r\n  const updateLCFacilityById = (e) => {\r\n    e.preventDefault();\r\n    LCFacilityService.updateLCFacilityById(LCFacilityId, editLCFacility)\r\n      .then((response) => {\r\n        if (response.data.Code === 200) {\r\n          LCFacility();\r\n          toast.success(\"Updated successfully\", {\r\n            position: toast.POSITION.TOP_RIGHT,\r\n            toastId: \"updateCompany\",\r\n          });\r\n        }\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n  return (\r\n    <div>\r\n      <CompanyModal\r\n        isOpen={isLCFacilityModalOpen}\r\n        onClose={handleLCFacilityCloseModal}\r\n        title=\" over draft Facility\"\r\n      >\r\n       <div className=\"flex items-top justify-top h-screen\">\r\n          <div>\r\n            <div className=\"rounded-lg overflow-hidden overflow-x-scroll overflow-y-scroll\">\r\n              {/* <div className=\"bg-gray-100 flex items-center justify-center h-screen\"> */}\r\n              <div>\r\n                <h4 className=\"text-lg font-semibold eading-tight p-2\"></h4>\r\n                <AddLCFacility\r\n                  handleInputChangeLCFacility={handleInputChangeLCFacility}\r\n                  saveLCFacility={saveLCFacility}\r\n                  LCFacilitys={LCFacilitys}\r\n                  setLCFacilitys={setLCFacilitys}\r\n                />\r\n                <div>\r\n                  {error && <p className=\"text-red-500\">{error}</p>}\r\n                  {!error && LCFacilityErrorLoading ? (\r\n                    <span>\r\n                      <FaSpinner\r\n                        className=\"animate-spin rounded-full h-6 w-6 text-purple-600\"\r\n                        fontSize=\"small\"\r\n                        data-toggle=\"tooltip\"\r\n                        title=\"Click it to sign in\"\r\n                      />\r\n                      Loading...\r\n                    </span>\r\n                  ) : (\r\n                    !error &&\r\n                    !LCFacilityErrorLoading && (\r\n                      <div className=\"overflow-x-auto\">\r\n                        <ToastContainer />\r\n                        <table className=\"min-w-full table table-bordered table-striped bg-purple-100\">\r\n                          <thead>\r\n                            <tr className=\"bg-purple-200\">\r\n                              <th className=\"px-2 py-4\"> Approval Date</th>\r\n                              <th className=\"px-2 py-4\"> Approved Amount </th>\r\n                              <th className=\"px-2 py-4\"> Expired Date</th>\r\n                              <th className=\"px-2 py-4\"> Day Past Due </th>\r\n                              <th className=\"px-2 py-4\"> PDLD </th>\r\n                              <th className=\"px-2 py-4\">\r\n                                {\" \"}\r\n                                Outstanding Balance{\" \"}\r\n                              </th>\r\n                              <th className=\"px-2 py-4\"> Action </th>\r\n                            </tr>\r\n                          </thead>\r\n                          <tbody>\r\n                            {LCFacility.length === 0 ? (\r\n                              <p className=\"text-red-600 p-4\">Data not found</p>\r\n                            ) : (\r\n                              LCFacility.map((LcFacilitys, index) => (\r\n                                <tr\r\n                                  key={index}\r\n                                  className=\"bg-white\r\n                    border-b border-purple-200\"\r\n                                >\r\n                                  <td className=\"p-2\">\r\n                                    {LcFacilitys.ApprovalDate}\r\n                                  </td>\r\n                                  <td className=\"p-2\">\r\n                                    {LcFacilitys.ApprovedAmount}\r\n                                  </td>\r\n                                  <td className=\"p-2\">\r\n                                    {LcFacilitys.ExpiredDate}\r\n                                  </td>\r\n                                  <td className=\"p-2\">\r\n                                    {LcFacilitys.DayPastDue}\r\n                                  </td>\r\n                                  <td className=\"p-2\">{LcFacilitys.PDLD}</td>\r\n                                  <td className=\"p-2\">\r\n                                    {LcFacilitys.OutstandingBalance}\r\n                                  </td>\r\n                                  <td className=\"p-2\">\r\n                                    <>\r\n                                      <LoanIconButton\r\n                                        style={{ color: \"green\" }}\r\n                                        icon={<MdModeEdit />}\r\n                                        text=\"Edit\"\r\n                                        onClick={() => {\r\n                                          handleLCFacilityEditOpenModal();\r\n                                          getLCFacilityId(LcFacilitys.Id);\r\n                                          setLCFacilityId(LcFacilitys.Id);\r\n                                        }}\r\n                                      />\r\n                                    </>\r\n                                    <>\r\n                                      <LoanIconButton\r\n                                        style={{ color: \"red\" }}\r\n                                        text=\" Delete\"\r\n                                        onClick={() => {\r\n                                          handleDelete(LcFacilitys);\r\n                                        }}\r\n                                      >\r\n                                        <ToastContainer />\r\n                                      </LoanIconButton>\r\n                                    </>\r\n                                  </td>\r\n                                </tr>\r\n                              ))\r\n                            )}\r\n                          </tbody>\r\n                        </table>\r\n                      </div>\r\n                    )\r\n                  )}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </CompanyModal>\r\n      <CompanyModal\r\n        isOpen={isLCFacilityEditModalOpen}\r\n        onClose={handleLCFacilityEditCloseModal}\r\n        title=\"Modify account detail information\"\r\n      >\r\n        <div>\r\n          <ToastContainer />\r\n          <form onSubmit={updateLCFacilityById}>\r\n            <div className=\"grid grid-cols-1 gap-4 submit-form\">\r\n              <div className=\"submit-form \">\r\n                <div className=\"relative center justify-center flex-1 w-full max-w-full grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\">\r\n                  <p>\r\n                    Approval Date\r\n                    <input\r\n                      id=\"ApprovalDate\"\r\n                      name=\"ApprovalDate\"\r\n                      label=\"ApprovalDate\"\r\n                      placeholder=\"ApprovalDate\"\r\n                      type=\"date\"\r\n                      value={\r\n                        approvalDate.getFullYear().toString() +\r\n                        \"-\" +\r\n                        (approvalDate.getMonth() + 1)\r\n                          .toString()\r\n                          .padStart(2, 0) +\r\n                        \"-\" +\r\n                        approvalDate.getDate().toString().padStart(2, 0)\r\n                      }\r\n                      onChange={(e) => {\r\n                        setApprovalDate(new Date(e.target.value));\r\n                        editLCFacility.ApprovalDate = approvalDate;\r\n                      }}\r\n                    />{\" \"}\r\n                  </p>\r\n                  <LoanTextField\r\n                    id=\"ApprovedAmount\"\r\n                    label=\"ApprovedAmount\"\r\n                    value={editLCFacility.ApprovedAmount}\r\n                    onChange={handleInputChangeEditLCFacility}\r\n                    name=\"ApprovedAmount\"\r\n                  />\r\n                  <p>\r\n                    Expired Date:\r\n                    <input\r\n                      id=\"ExpiredDate\"\r\n                      name=\"ExpiredDate\"\r\n                      label=\"ExpiredDate\"\r\n                      placeholder=\"ExpiredDate\"\r\n                      type=\"date\"\r\n                      value={\r\n                        expiredDate.getFullYear().toString() +\r\n                        \"-\" +\r\n                        (expiredDate.getMonth() + 1).toString().padStart(2, 0) +\r\n                        \"-\" +\r\n                        expiredDate.getDate().toString().padStart(2, 0)\r\n                      }\r\n                      onChange={(e) => {\r\n                        setExpiredDate(new Date(e.target.value));\r\n                        editLCFacility.ExpiredDate = expiredDate;\r\n                      }}\r\n                    />{\" \"}\r\n                  </p>\r\n\r\n                  <LoanTextField\r\n                    id=\"DayPastDue\"\r\n                    label=\"DayPastDue\"\r\n                    value={editLCFacility.DayPastDue}\r\n                    onChange={handleInputChangeEditLCFacility}\r\n                    name=\"DayPastDue\"\r\n                  />\r\n                  <p>\r\n                    PDLD:\r\n                    <input\r\n                      id=\"PDLD\"\r\n                      name=\"PDLD\"\r\n                      label=\"PDLD\"\r\n                      placeholder=\"PDLD\"\r\n                      type=\"date\"\r\n                      value={\r\n                        PDLD.getFullYear().toString() +\r\n                        \"-\" +\r\n                        (PDLD.getMonth() + 1).toString().padStart(2, 0) +\r\n                        \"-\" +\r\n                        PDLD.getDate().toString().padStart(2, 0)\r\n                      }\r\n                      onChange={(e) => {\r\n                        setPDLD(new Date(e.target.value));\r\n                        editLCFacility.PDLD = PDLD;\r\n                      }}\r\n                    />{\" \"}\r\n                  </p>\r\n                  <LoanTextField\r\n                    id=\"OutstandingBalance\"\r\n                    label=\"OutstandingBalance\"\r\n                    value={editLCFacility.OutstandingBalance}\r\n                    onChange={handleInputChangeEditLCFacility}\r\n                    name=\"OutstandingBalance\"\r\n                  />\r\n                </div>\r\n                <div className=\"flex justify-center items-center\">\r\n                  <button\r\n                    type=\"submit\"\r\n                    className=\"bg-[purple] hover:bg-purple-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline \"\r\n                  >\r\n                    Update\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </CompanyModal>\r\n    </div>\r\n  );\r\n};\r\nexport default ViewLCFacility;\r\n","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\accountDetail\\creditFacilityUtilizition\\LCFacility\\AddLCFacility.jsx",["1693","1694","1695","1696","1697","1698","1699","1700","1701","1702","1703","1704"],[],"import {\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  IconButton,\r\n} from \"@mui/material\";\r\nimport { useState, useEffect } from \"react\";\r\nimport LoanIconButton from \"../../../../Common/LoanIconButton\";\r\nimport CompanyModal from \"../../../Common/CompanyModal\";\r\n// import CompanyModal from \"../../../../Common/CompanyModal\";\r\nimport { RiSkipBackMiniFill } from \"react-icons/ri\";\r\nimport { BsPlus } from \"react-icons/bs\";\r\nimport { BiSkipNext, BiSkipPrevious } from \"react-icons/bi\";\r\nimport { IoRefresh } from \"react-icons/io5\";\r\n// import LoanTextField from \"../../../Common/LoanTextField\";\r\nimport CommonServices from \"../../../Common/CommonServices\";\r\nimport LoanTextField from \"../../../../Common/LoanTextField\";\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\nconst AddLCFacility = ({\r\n  submitted,\r\n  handleBack,\r\n  handleSkip,\r\n  handleNext,\r\n  saveLCFacility,\r\n  LCFacilitys,\r\n  handleInputChangeLCFacility,\r\n  setLCFacilitys,\r\n}) => {\r\n  const [isLCFacilityModalOpen, setIsLCFacilityModalOpen] = useState(false);\r\n  function handleLCFacilityOpenModal() {\r\n    setIsLCFacilityModalOpen(true);\r\n  }\r\n  function handlLCFacilityCloseModal() {\r\n    setIsLCFacilityModalOpen(false);\r\n  }\r\n  const [approvalDate, setApprovalDate] = useState(new Date());\r\n  const [expiredDate, setExpiredDate] = useState(new Date());\r\n  const [PDLD, setPDLD] = useState(new Date());\r\n\r\n  return (\r\n    <>\r\n      <div className=\"flex\">\r\n        {/* <LoanIconButton\r\n          style={{ color: \"purple\" }}\r\n          icon={<BiSkipPrevious />}\r\n          text=\"Back\"\r\n          onClick={handleSkip}\r\n        /> */}\r\n        <LoanIconButton\r\n          style={{ color: \"purple\" }}\r\n          icon={<BsPlus />}\r\n          text=\"Add\"\r\n          onClick={handleLCFacilityOpenModal}\r\n        />\r\n        {/* <LoanIconButton\r\n          style={{ color: \"purple\" }}\r\n          icon={<BiSkipNext />}\r\n          text=\"Skip\"\r\n          onClick={handleSkip}\r\n        /> */}\r\n      </div>\r\n      <CompanyModal\r\n        isOpen={isLCFacilityModalOpen}\r\n        onClose={handlLCFacilityCloseModal}\r\n        title=\"LC Facility \"\r\n      >\r\n        <div>\r\n          <ToastContainer />\r\n          <div className=\"relative center justify-center flex-1 w-full max-w-full grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\">\r\n            <p>\r\n              Approval Date\r\n              <input\r\n                id=\"ApprovalDate\"\r\n                name=\"ApprovalDate\"\r\n                label=\"ApprovalDate\"\r\n                placeholder=\"ApprovalDate\"\r\n                type=\"date\"\r\n                value={\r\n                  approvalDate.getFullYear().toString() +\r\n                  \"-\" +\r\n                  (approvalDate.getMonth() + 1).toString().padStart(2, 0) +\r\n                  \"-\" +\r\n                  approvalDate.getDate().toString().padStart(2, 0)\r\n                }\r\n                onChange={(e) => {\r\n                  setApprovalDate(new Date(e.target.value));\r\n                  LCFacilitys.ApprovalDate = approvalDate;\r\n                }}\r\n              />{\" \"}\r\n            </p>\r\n            <LoanTextField\r\n              id=\"ApprovedAmount\"\r\n              label=\"ApprovedAmount\"\r\n              value={LCFacilitys.ApprovedAmount}\r\n              onChange={handleInputChangeLCFacility}\r\n              name=\"ApprovedAmount\"\r\n            />\r\n            <p>\r\n              Expired Date:\r\n              <input\r\n                id=\"ExpiredDate\"\r\n                name=\"ExpiredDate\"\r\n                label=\"ExpiredDate\"\r\n                placeholder=\"ExpiredDate\"\r\n                type=\"date\"\r\n                value={\r\n                  expiredDate.getFullYear().toString() +\r\n                  \"-\" +\r\n                  (expiredDate.getMonth() + 1).toString().padStart(2, 0) +\r\n                  \"-\" +\r\n                  expiredDate.getDate().toString().padStart(2, 0)\r\n                }\r\n                onChange={(e) => {\r\n                  setExpiredDate(new Date(e.target.value));\r\n                  LCFacilitys.ExpiredDate = expiredDate;\r\n                }}\r\n              />{\" \"}\r\n            </p>\r\n\r\n            <LoanTextField\r\n              id=\"DayPastDue\"\r\n              label=\"DayPastDue\"\r\n              value={LCFacilitys.DayPastDue}\r\n              onChange={handleInputChangeLCFacility}\r\n              name=\"DayPastDue\"\r\n            />\r\n            <p>\r\n              PDLD:\r\n              <input\r\n                id=\"PDLD\"\r\n                name=\"PDLD\"\r\n                label=\"PDLD\"\r\n                placeholder=\"PDLD\"\r\n                type=\"date\"\r\n                value={\r\n                  PDLD.getFullYear().toString() +\r\n                  \"-\" +\r\n                  (PDLD.getMonth() + 1).toString().padStart(2, 0) +\r\n                  \"-\" +\r\n                  PDLD.getDate().toString().padStart(2, 0)\r\n                }\r\n                onChange={(e) => {\r\n                  setPDLD(new Date(e.target.value));\r\n                  LCFacilitys.PDLD = PDLD;\r\n                }}\r\n              />{\" \"}\r\n            </p>\r\n            <LoanTextField\r\n              id=\"OutstandingBalance\"\r\n              label=\"OutstandingBalance\"\r\n              value={LCFacilitys.OutstandingBalance}\r\n              onChange={handleInputChangeLCFacility}\r\n              name=\"OutstandingBalance\"\r\n            />\r\n          </div>\r\n          <div className=\"flex justify-center p-2 pt-5\">\r\n            <button\r\n              className=\"bg-[purple] hover:bg-purple-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\"\r\n              onClick={() => {\r\n                saveLCFacility();\r\n              }}\r\n            >\r\n              Save\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </CompanyModal>\r\n    </>\r\n  );\r\n};\r\nexport default AddLCFacility;\r\n","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\accountDetail\\creditFacilityUtilizition\\LGFacility\\LGFacilityService.js",[],[],"C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\accountDetail\\creditFacilityUtilizition\\LGFacility\\ViewLGFacility.jsx",["1705","1706","1707","1708","1709","1710","1711","1712","1713","1714","1715","1716","1717","1718","1719","1720","1721","1722"],[],"import {\r\n  TextField,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n} from \"@mui/material\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { FaSpinner } from \"react-icons/fa\";\r\nimport { BiSkipNext } from \"react-icons/bi\";\r\nimport { MdModeEdit } from \"react-icons/md\";\r\nimport LoanIconButton from \"../../../../Common/LoanIconButton\";\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\nimport CompanyModal from \"../../../Common/CompanyModal\";\r\nimport LoanTextField from \"../../../../Common/LoanTextField\";\r\nimport LCFacilityService from \"./LGFacilityService\";\r\nimport AddLCFacility from \"./AddLGFacility\";\r\nimport LGFacilityService from \"./LGFacilityService\";\r\nimport AddLGFacility from \"./AddLGFacility\";\r\nconst ViewLGFacility = ({\r\n  isLGFacilityModalOpen,\r\n  handleLGFacilityOpenModal,\r\n  handleLGFacilityCloseModal,\r\n  LGFacility,\r\n  creditFacilityUtilizitionId,\r\n}) => {\r\n  const [LGFacilityErrorLoading, setLGFacilityErrorLoading] = useState(false);\r\n  const [deleteLoading, setDeleteLoading] = useState(false);\r\n  const [approvalDate, setApprovalDate] = useState(new Date());\r\n  const [expiredDate, setExpiredDate] = useState(new Date());\r\n  const [PDLD, setPDLD] = useState(new Date());\r\n  const [deleteLGFacilityError, setLGFacilityDeleteError] = useState(null);\r\n  const [error, setError] = useState(null);\r\n  const [isLGFacilityEditModalOpen, setIsLGFacilityEditModalOpen] =\r\n    useState(false);\r\n  function handleLGFacilityEditOpenModal() {\r\n    setIsLGFacilityEditModalOpen(true);\r\n  }\r\n  function handleLGFacilityEditCloseModal() {\r\n    setIsLGFacilityEditModalOpen(false);\r\n  }\r\n  function handleLGFacilityEditOpenModal() {\r\n    setIsLGFacilityEditModalOpen(true);\r\n  }\r\n  function handleLGFacilityEditCloseModal() {\r\n    setIsLGFacilityEditModalOpen(false);\r\n  }\r\n  const [LGFacilityId, setLGFacilityId] = useState(null);\r\n  const handleInputChangeLGFacility = (event) => {\r\n    const { name, value } = event.target;\r\n    setLGFacilitys({\r\n      ...LGFacilitys,\r\n      [name]: value,\r\n    });\r\n  };\r\n  const initialLGFacilityState = {\r\n    Id: null,\r\n    LGType: \"\",\r\n    MDRefNumber: \"\",\r\n    ApprovalDate: \"\",\r\n    ApprovedAmount: \"\",\r\n    ExpiredDate: \"\",\r\n    DayPastDue: \"\",\r\n    ClaimCreditDate: \"\",\r\n    InvocationAmount: \"\",\r\n    DebitAccount: \"\",\r\n    DebitAccountHolderName: \"\",\r\n    ClaimSettledBy: \"\",\r\n  };\r\n\r\n  const [LGFacilitys, setLGFacilitys] = useState(initialLGFacilityState);\r\n  const newLGFacility = () => {\r\n    setLGFacilitys(initialLGFacilityState);\r\n    // setSubmitted(false);\r\n  };\r\n  const saveLGFacility = () => {\r\n    var data = {\r\n      LGType: LGFacilitys.LGType,\r\n      MDRefNumber: LGFacilitys.MDRefNumber,\r\n      ApprovalDate: LGFacilitys.ApprovalDate,\r\n      ApprovedAmount: LGFacilitys.ApprovedAmount,\r\n      ExpiredDate: LGFacilitys.ExpiredDate,\r\n      DayPastDue: LGFacilitys.DayPastDue,\r\n      ClaimCreditDate: LGFacilitys.ClaimCreditDate,\r\n      InvocationAmount: LGFacilitys.InvocationAmount,\r\n      DebitAccount: LGFacilitys.DebitAccount,\r\n      DebitAccountHolderName: LGFacilitys.DebitAccountHolderName,\r\n      ClaimSettledBy: LGFacilitys.ClaimSettledBy,\r\n    };\r\n    LGFacilityService.addLGFacility(data, creditFacilityUtilizitionId)\r\n      .then((response) => {\r\n        setLGFacilitys({\r\n          Id: response.data.Id,\r\n          LGType: response.data.LGType,\r\n          MDRefNumber: response.data.MDRefNumber,\r\n          ApprovalDate: response.data.ApprovalDate,\r\n          ApprovedAmount: response.data.ApprovedAmount,\r\n          ExpiredDate: response.data.ExpiredDate,\r\n          DayPastDue: response.data.DayPastDue,\r\n          ClaimCreditDate: response.data.ClaimCreditDate,\r\n          InvocationAmount: response.data.InvocationAmount,\r\n          DebitAccount: response.data.DebitAccount,\r\n          DebitAccountHolderName: response.data.DebitAccountHolderName,\r\n          ClaimSettledBy: response.data.ClaimSettledBy,\r\n        });\r\n        if (response.data.Code === 200) {\r\n          setLGFacilitys(initialLGFacilityState);\r\n          console.log(response.data);\r\n          // setHoldId(response.data.Result.Id);\r\n          LGFacility();\r\n          toast.success(\"Added successfully\", {\r\n            position: toast.POSITION.TOP_RIGHT,\r\n            toastId: \"PreshipmentFacility\",\r\n          });\r\n        }\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n  const handleDelete = (LGFacility) => {\r\n    setDeleteLoading(true);\r\n    const confirm = window.confirm(\r\n      `Are you sure you want to delete ${LGFacility.Id}?`\r\n    );\r\n    if (confirm) {\r\n      toast.success(\"Deleting\", {\r\n        position: toast.POSITION.TOP_RIGHT,\r\n        toastId: \"deletePreshipmentFacility\",\r\n      });\r\n      LGFacilityService.deleteLGFacilityById(LGFacility.Id)\r\n        .then(() => {\r\n          LGFacility((previousData) =>\r\n            previousData.filter((comp) => comp.Id !== LGFacility.Id)\r\n          );\r\n        })\r\n        .catch((e) => {\r\n          setLGFacilityDeleteError(e);\r\n          setDeleteLoading(false);\r\n        });\r\n    }\r\n  };\r\n  const [editLGFacility, setEditLGFacility] = useState({\r\n    //  Id: editAddresAccountDetailId,\r\n    LGType: \"\",\r\n    MDRefNumber: \"\",\r\n    ApprovalDate: \"\",\r\n    ApprovedAmount: \"\",\r\n    ExpiredDate: \"\",\r\n    DayPastDue: \"\",\r\n    ClaimCreditDate: \"\",\r\n    InvocationAmount: \"\",\r\n    DebitAccount: \"\",\r\n    DebitAccountHolderName: \"\",\r\n    ClaimSettledBy: \"\",\r\n  });\r\n\r\n  const handleInputChangeEditLGFacility = (event) => {\r\n    const { name, value } = event.target;\r\n    setEditLGFacility({\r\n      ...editLGFacility,\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  const getLGFacilityId = (editLGFacilityId) => {\r\n    LGFacilityService.getLGFacilityById(editLGFacilityId) //here is\r\n      .then((res) => {\r\n        setEditLGFacility({\r\n          ...editLGFacility,\r\n          ApprovalDate: res.data.Result.ApprovalDate,\r\n          Id: editLGFacilityId,\r\n          LGType: res.data.Result.LGType,\r\n          MDRefNumber: res.data.Result.MDRefNumber,\r\n          ApprovalDate: res.data.Result.ApprovalDate,\r\n          ApprovedAmount: res.data.Result.ApprovedAmount,\r\n          ExpiredDate: res.data.Result.ExpiredDate,\r\n          DayPastDue: res.data.Result.DayPastDue,\r\n          ClaimCreditDate: res.data.Result.ClaimCreditDate,\r\n          InvocationAmount: res.data.Result.InvocationAmount,\r\n          DebitAccount: res.data.Result.DebitAccount,\r\n          DebitAccountHolderName: res.data.Result.DebitAccountHolderName,\r\n          ClaimSettledBy: res.data.Result.ClaimSettledBy,\r\n        });\r\n      })\r\n      .catch((err) => {\r\n        if (err.response.data.StatusCode === 404) {\r\n          console.log(err.response.data.Message);\r\n        }\r\n      });\r\n  };\r\n  const updateLGFacilityById = (e) => {\r\n    e.preventDefault();\r\n    LGFacilityService.updateLGFacilityById(LGFacilityId, editLGFacility)\r\n      .then((response) => {\r\n        if (response.data.Code === 200) {\r\n          LGFacility();\r\n          toast.success(\"Updated successfully\", {\r\n            position: toast.POSITION.TOP_RIGHT,\r\n            toastId: \"updateCompany\",\r\n          });\r\n        }\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n  return (\r\n    <div>\r\n      <CompanyModal\r\n        isOpen={isLGFacilityModalOpen}\r\n        onClose={handleLGFacilityCloseModal}\r\n        title=\" LG Facility\"\r\n      >\r\n        <div className=\"flex items-top justify-top h-screen overflow-x-scroll overflow-y-scroll\">\r\n          <div>\r\n            <div className=\"rounded-lg overflow-hidden overflow-x-scroll overflow-y-scroll\">\r\n              {/* <div className=\"bg-gray-100 flex items-center justify-center h-screen\"> */}\r\n              <div>\r\n                <h4 className=\"text-lg font-semibold eading-tight p-2\"></h4>\r\n                <AddLGFacility\r\n                  handleInputChangeLGFacility={handleInputChangeLGFacility}\r\n                  saveLGFacility={saveLGFacility}\r\n                  LGFacilitys={LGFacilitys}\r\n                  setLGFacilitys={setLGFacilitys}\r\n                />\r\n                <div>\r\n                  {error && <p className=\"text-red-500\">{error}</p>}\r\n                  {!error && LGFacilityErrorLoading ? (\r\n                    <span>\r\n                      <FaSpinner\r\n                        className=\"animate-spin rounded-full h-6 w-6 text-purple-600\"\r\n                        fontSize=\"small\"\r\n                        data-toggle=\"tooltip\"\r\n                        title=\"Click it to sign in\"\r\n                      />\r\n                      Loading...\r\n                    </span>\r\n                  ) : (\r\n                    !error &&\r\n                    !LGFacilityErrorLoading && (\r\n                      <div className=\"overflow-x-auto\">\r\n                        <ToastContainer />\r\n                        <table className=\"min-w-full table table-bordered table-striped bg-purple-100\">\r\n                          <thead>\r\n                            <tr className=\"bg-purple-200\">\r\n                              <th className=\"px-2 py-4\"> LG Type </th>\r\n                              <th className=\"px-2 py-4\"> Approval Date</th>\r\n                              <th className=\"px-2 py-4\"> Approval Date </th>\r\n                              <th className=\"px-2 py-4\"> Approved Amount </th>\r\n                              <th className=\"px-2 py-4\"> Expired Date </th>\r\n                              <th className=\"px-2 py-4\"> Day Past Due </th>\r\n                              <th className=\"px-2 py-4\"> Claim Credit Date </th>\r\n                              <th className=\"px-2 py-4\"> Invocation Amount </th>\r\n                              <th className=\"px-2 py-4\"> Debit Account </th>\r\n                              <th className=\"px-2 py-4\">\r\n                                {\" \"}\r\n                                Debit Account Holder Name{\" \"}\r\n                              </th>\r\n                              <th className=\"px-2 py-4\"> Claim Settled By </th>\r\n\r\n                              <th className=\"px-2 py-4\"> Action </th>\r\n                            </tr>\r\n                          </thead>\r\n                          <tbody>\r\n                            {LGFacility.length === 0 ? (\r\n                              <p className=\"text-red-600 p-4\">Data not found</p>\r\n                            ) : (\r\n                              LGFacility.map((LgFacilitys, index) => (\r\n                                <tr\r\n                                  key={index}\r\n                                  className=\"bg-white\r\n                    border-b border-purple-200\"\r\n                                >\r\n                                  <td className=\"p-2\">{LgFacilitys.LGType}</td>\r\n                                  <td className=\"p-2\">{LgFacilitys.LGType}</td>\r\n                                  <td className=\"p-2\">\r\n                                    {LgFacilitys.ApprovalDate}\r\n                                  </td>\r\n                                  <td className=\"p-2\">\r\n                                    {LgFacilitys.ApprovalDate}\r\n                                  </td>\r\n                                  <td className=\"p-2\">\r\n                                    {LgFacilitys.ApprovedAmount}\r\n                                  </td>\r\n                                  <td className=\"p-2\">\r\n                                    {LgFacilitys.ExpiredDate}\r\n                                  </td>\r\n                                  <td className=\"p-2\">\r\n                                    {LgFacilitys.DayPastDue}\r\n                                  </td>\r\n                                  <td className=\"p-2\">\r\n                                    {LgFacilitys.ClaimCreditDate}\r\n                                  </td>\r\n                                  <td className=\"p-2\">\r\n                                    {LgFacilitys.InvocationAmount}\r\n                                  </td>\r\n                                  <td className=\"p-2\">\r\n                                    {LgFacilitys.DebitAccount}\r\n                                  </td>\r\n                                  <td className=\"p-2\">\r\n                                    {LgFacilitys.DebitAccountHolderName}\r\n                                  </td>\r\n                                  <td className=\"p-2\">\r\n                                    {LgFacilitys.ClaimSettledBy}\r\n                                  </td>\r\n                                  <td className=\"p-2\">\r\n                                    <>\r\n                                      <LoanIconButton\r\n                                        style={{ color: \"green\" }}\r\n                                        icon={<MdModeEdit />}\r\n                                        text=\"Edit\"\r\n                                        onClick={() => {\r\n                                          handleLGFacilityEditOpenModal();\r\n                                          getLGFacilityId(LgFacilitys.Id);\r\n                                          setLGFacilityId(LgFacilitys.Id);\r\n                                        }}\r\n                                      />\r\n                                    </>\r\n                                    <>\r\n                                      <LoanIconButton\r\n                                        style={{ color: \"red\" }}\r\n                                        text=\" Delete\"\r\n                                        onClick={() => {\r\n                                          handleDelete(LgFacilitys);\r\n                                        }}\r\n                                      >\r\n                                        <ToastContainer />\r\n                                      </LoanIconButton>\r\n                                    </>\r\n                                  </td>\r\n                                </tr>\r\n                              ))\r\n                            )}\r\n                          </tbody>\r\n                        </table>\r\n                      </div>\r\n                    )\r\n                  )}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </CompanyModal>\r\n      <CompanyModal\r\n        isOpen={isLGFacilityEditModalOpen}\r\n        onClose={handleLGFacilityEditCloseModal}\r\n        title=\"Modify LG information\"\r\n      >\r\n        <div>\r\n          <ToastContainer />\r\n          <form onSubmit={updateLGFacilityById}>\r\n            <div className=\"grid grid-cols-1 gap-4 submit-form\">\r\n              <div className=\"submit-form \">\r\n                <div className=\"relative center justify-center flex-1 w-full max-w-full grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\">\r\n                  <LoanTextField\r\n                    id=\"LGType\"\r\n                    label=\"LGType\"\r\n                    value={editLGFacility.LGType}\r\n                    onChange={handleInputChangeEditLGFacility}\r\n                    name=\"LGType\"\r\n                  />\r\n                  <LoanTextField\r\n                    id=\"MDRefNumber\"\r\n                    label=\"MDRefNumber\"\r\n                    value={editLGFacility.MDRefNumber}\r\n                    onChange={handleInputChangeEditLGFacility}\r\n                    name=\"MDRefNumber\"\r\n                  />\r\n                  <p>\r\n                    Approval Date\r\n                    <input\r\n                      id=\"ApprovalDate\"\r\n                      name=\"ApprovalDate\"\r\n                      label=\"ApprovalDate\"\r\n                      placeholder=\"ApprovalDate\"\r\n                      type=\"date\"\r\n                      value={\r\n                        approvalDate.getFullYear().toString() +\r\n                        \"-\" +\r\n                        (approvalDate.getMonth() + 1)\r\n                          .toString()\r\n                          .padStart(2, 0) +\r\n                        \"-\" +\r\n                        approvalDate.getDate().toString().padStart(2, 0)\r\n                      }\r\n                      onChange={(e) => {\r\n                        setApprovalDate(new Date(e.target.value));\r\n                        editLGFacility.ApprovalDate = approvalDate;\r\n                      }}\r\n                    />{\" \"}\r\n                  </p>\r\n                  <LoanTextField\r\n                    id=\"ApprovedAmount\"\r\n                    label=\"ApprovedAmount\"\r\n                    value={editLGFacility.ApprovedAmount}\r\n                    onChange={handleInputChangeEditLGFacility}\r\n                    name=\"ApprovedAmount\"\r\n                  />\r\n                  <p>\r\n                    Expired Date:\r\n                    <input\r\n                      id=\"ExpiredDate\"\r\n                      name=\"ExpiredDate\"\r\n                      label=\"ExpiredDate\"\r\n                      placeholder=\"ExpiredDate\"\r\n                      type=\"date\"\r\n                      value={\r\n                        expiredDate.getFullYear().toString() +\r\n                        \"-\" +\r\n                        (expiredDate.getMonth() + 1).toString().padStart(2, 0) +\r\n                        \"-\" +\r\n                        expiredDate.getDate().toString().padStart(2, 0)\r\n                      }\r\n                      onChange={(e) => {\r\n                        setExpiredDate(new Date(e.target.value));\r\n                        editLGFacility.ExpiredDate = expiredDate;\r\n                      }}\r\n                    />{\" \"}\r\n                  </p>\r\n\r\n                  <LoanTextField\r\n                    id=\"DayPastDue\"\r\n                    label=\"DayPastDue\"\r\n                    value={editLGFacility.DayPastDue}\r\n                    onChange={handleInputChangeEditLGFacility}\r\n                    name=\"DayPastDue\"\r\n                  />\r\n                  <p>\r\n                    Claim Credit Date:\r\n                    <input\r\n                      id=\"ClaimCreditDate\"\r\n                      name=\"ClaimCreditDate\"\r\n                      label=\"ClaimCreditDate\"\r\n                      placeholder=\"ClaimCreditDate\"\r\n                      type=\"date\"\r\n                      value={\r\n                        PDLD.getFullYear().toString() +\r\n                        \"-\" +\r\n                        (PDLD.getMonth() + 1).toString().padStart(2, 0) +\r\n                        \"-\" +\r\n                        PDLD.getDate().toString().padStart(2, 0)\r\n                      }\r\n                      onChange={(e) => {\r\n                        setPDLD(new Date(e.target.value));\r\n                        editLGFacility.ClaimCreditDate = PDLD;\r\n                      }}\r\n                    />{\" \"}\r\n                  </p>\r\n                  <LoanTextField\r\n                    id=\"InvocationAmount\"\r\n                    label=\"InvocationAmount\"\r\n                    value={editLGFacility.InvocationAmount}\r\n                    onChange={handleInputChangeEditLGFacility}\r\n                    name=\"InvocationAmount\"\r\n                  />\r\n                  <LoanTextField\r\n                    id=\"DebitAccount\"\r\n                    label=\"DebitAccount\"\r\n                    value={editLGFacility.DebitAccount}\r\n                    onChange={handleInputChangeEditLGFacility}\r\n                    name=\"DebitAccount\"\r\n                  />\r\n                  <LoanTextField\r\n                    id=\"DebitAccountHolderName\"\r\n                    label=\"DebitAccountHolderName\"\r\n                    value={editLGFacility.DebitAccountHolderName}\r\n                    onChange={handleInputChangeEditLGFacility}\r\n                    name=\"DebitAccountHolderName\"\r\n                  />\r\n                  <LoanTextField\r\n                    id=\"ClaimSettledBy\"\r\n                    label=\"ClaimSettledBy\"\r\n                    value={editLGFacility.ClaimSettledBy}\r\n                    onChange={handleInputChangeEditLGFacility}\r\n                    name=\"ClaimSettledBy\"\r\n                  />\r\n                </div>\r\n                <div className=\"flex justify-center items-center\">\r\n                  <button\r\n                    type=\"submit\"\r\n                    className=\"bg-[purple] hover:bg-purple-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline \"\r\n                  >\r\n                    Update\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </CompanyModal>\r\n    </div>\r\n  );\r\n};\r\nexport default ViewLGFacility;\r\n",["1723"],"C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\accountDetail\\creditFacilityUtilizition\\LGFacility\\AddLGFacility.jsx",["1724","1725","1726","1727","1728","1729","1730","1731","1732","1733","1734","1735"],[],"import {\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  IconButton,\r\n} from \"@mui/material\";\r\nimport { useState, useEffect } from \"react\";\r\nimport LoanIconButton from \"../../../../Common/LoanIconButton\";\r\nimport CompanyModal from \"../../../Common/CompanyModal\";\r\n// import CompanyModal from \"../../../../Common/CompanyModal\";\r\nimport { RiSkipBackMiniFill } from \"react-icons/ri\";\r\nimport { BsPlus } from \"react-icons/bs\";\r\nimport { BiSkipNext, BiSkipPrevious } from \"react-icons/bi\";\r\nimport { IoRefresh } from \"react-icons/io5\";\r\n// import LoanTextField from \"../../../Common/LoanTextField\";\r\nimport CommonServices from \"../../../Common/CommonServices\";\r\nimport LoanTextField from \"../../../../Common/LoanTextField\";\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\nconst AddLGFacility = ({\r\n  submitted,\r\n  handleBack,\r\n  handleSkip,\r\n  handleNext,\r\n  saveLGFacility,\r\n  LGFacilitys,\r\n  handleInputChangeLGFacility,\r\n  setLGFacilitys,\r\n}) => {\r\n  const [isLGFacilityModalOpen, setIsLGFacilityModalOpen] = useState(false);\r\n  function handleLGFacilityOpenModal() {\r\n    setIsLGFacilityModalOpen(true);\r\n  }\r\n  function handlLGFacilityCloseModal() {\r\n    setIsLGFacilityModalOpen(false);\r\n  }\r\n  const [approvalDate, setApprovalDate] = useState(new Date());\r\n  const [expiredDate, setExpiredDate] = useState(new Date());\r\n  const [PDLD, setPDLD] = useState(new Date());\r\n\r\n  return (\r\n    <>\r\n      <div className=\"flex\">\r\n        {/* <LoanIconButton\r\n          style={{ color: \"purple\" }}\r\n          icon={<BiSkipPrevious />}\r\n          text=\"Back\"\r\n          onClick={handleSkip}\r\n        /> */}\r\n        <LoanIconButton\r\n          style={{ color: \"purple\" }}\r\n          icon={<BsPlus />}\r\n          text=\"Add\"\r\n          onClick={handleLGFacilityOpenModal}\r\n        />\r\n        {/* <LoanIconButton\r\n          style={{ color: \"purple\" }}\r\n          icon={<BiSkipNext />}\r\n          text=\"Skip\"\r\n          onClick={handleSkip}\r\n        /> */}\r\n      </div>\r\n      <CompanyModal\r\n        isOpen={isLGFacilityModalOpen}\r\n        onClose={handlLGFacilityCloseModal}\r\n        title=\"LG Facility \"\r\n      >\r\n        <div>\r\n          <ToastContainer />\r\n          <div className=\"relative center justify-center flex-1 w-full max-w-full grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\">\r\n            <LoanTextField\r\n              id=\"LGType\"\r\n              label=\"LGType\"\r\n              value={LGFacilitys.LGType}\r\n              onChange={handleInputChangeLGFacility}\r\n              name=\"LGType\"\r\n            />\r\n            <LoanTextField\r\n              id=\"MDRefNumber\"\r\n              label=\"MDRefNumber\"\r\n              value={LGFacilitys.MDRefNumber}\r\n              onChange={handleInputChangeLGFacility}\r\n              name=\"MDRefNumber\"\r\n            />\r\n            <p>\r\n              Approval Date\r\n              <input\r\n                id=\"ApprovalDate\"\r\n                name=\"ApprovalDate\"\r\n                label=\"ApprovalDate\"\r\n                placeholder=\"ApprovalDate\"\r\n                type=\"date\"\r\n                value={\r\n                  approvalDate.getFullYear().toString() +\r\n                  \"-\" +\r\n                  (approvalDate.getMonth() + 1).toString().padStart(2, 0) +\r\n                  \"-\" +\r\n                  approvalDate.getDate().toString().padStart(2, 0)\r\n                }\r\n                onChange={(e) => {\r\n                  setApprovalDate(new Date(e.target.value));\r\n                  LGFacilitys.ApprovalDate = approvalDate;\r\n                }}\r\n              />{\" \"}\r\n            </p>\r\n            <LoanTextField\r\n              id=\"ApprovedAmount\"\r\n              label=\"ApprovedAmount\"\r\n              value={LGFacilitys.ApprovedAmount}\r\n              onChange={handleInputChangeLGFacility}\r\n              name=\"ApprovedAmount\"\r\n            />\r\n            <p>\r\n              Expired Date:\r\n              <input\r\n                id=\"ExpiredDate\"\r\n                name=\"ExpiredDate\"\r\n                label=\"ExpiredDate\"\r\n                placeholder=\"ExpiredDate\"\r\n                type=\"date\"\r\n                value={\r\n                  expiredDate.getFullYear().toString() +\r\n                  \"-\" +\r\n                  (expiredDate.getMonth() + 1).toString().padStart(2, 0) +\r\n                  \"-\" +\r\n                  expiredDate.getDate().toString().padStart(2, 0)\r\n                }\r\n                onChange={(e) => {\r\n                  setExpiredDate(new Date(e.target.value));\r\n                  LGFacilitys.ExpiredDate = expiredDate;\r\n                }}\r\n              />{\" \"}\r\n            </p>\r\n\r\n            <LoanTextField\r\n              id=\"DayPastDue\"\r\n              label=\"DayPastDue\"\r\n              value={LGFacilitys.DayPastDue}\r\n              onChange={handleInputChangeLGFacility}\r\n              name=\"DayPastDue\"\r\n            />\r\n            <p>\r\n              Claim Credit Date:\r\n              <input\r\n                id=\"ClaimCreditDate\"\r\n                name=\"ClaimCreditDate\"\r\n                label=\"ClaimCreditDate\"\r\n                placeholder=\"ClaimCreditDate\"\r\n                type=\"date\"\r\n                value={\r\n                  PDLD.getFullYear().toString() +\r\n                  \"-\" +\r\n                  (PDLD.getMonth() + 1).toString().padStart(2, 0) +\r\n                  \"-\" +\r\n                  PDLD.getDate().toString().padStart(2, 0)\r\n                }\r\n                onChange={(e) => {\r\n                  setPDLD(new Date(e.target.value));\r\n                  LGFacilitys.ClaimCreditDate = PDLD;\r\n                }}\r\n              />{\" \"}\r\n            </p>\r\n            <LoanTextField\r\n              id=\"InvocationAmount\"\r\n              label=\"InvocationAmount\"\r\n              value={LGFacilitys.InvocationAmount}\r\n              onChange={handleInputChangeLGFacility}\r\n              name=\"InvocationAmount\"\r\n            />\r\n            <LoanTextField\r\n              id=\"DebitAccount\"\r\n              label=\"DebitAccount\"\r\n              value={LGFacilitys.DebitAccount}\r\n              onChange={handleInputChangeLGFacility}\r\n              name=\"DebitAccount\"\r\n            />\r\n            <LoanTextField\r\n              id=\"DebitAccountHolderName\"\r\n              label=\"DebitAccountHolderName\"\r\n              value={LGFacilitys.DebitAccountHolderName}\r\n              onChange={handleInputChangeLGFacility}\r\n              name=\"DebitAccountHolderName\"\r\n            />\r\n            <LoanTextField\r\n              id=\"ClaimSettledBy\"\r\n              label=\"ClaimSettledBy\"\r\n              value={LGFacilitys.ClaimSettledBy}\r\n              onChange={handleInputChangeLGFacility}\r\n              name=\"ClaimSettledBy\"\r\n            />\r\n          </div>\r\n          <div className=\"flex justify-center p-2 pt-5\">\r\n            <button\r\n              className=\"bg-[purple] hover:bg-purple-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\"\r\n              onClick={() => {\r\n                saveLGFacility();\r\n              }}\r\n            >\r\n              Save\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </CompanyModal>\r\n    </>\r\n  );\r\n};\r\nexport default AddLGFacility;\r\n","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\SoleAndPartnership\\OtherBank\\AddOtherBank.jsx",["1736","1737","1738","1739"],[],"import {\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  IconButton,\r\n} from \"@mui/material\";\r\nimport LoanIconButton from \"../../../Common/LoanIconButton\";\r\nimport CompanyModal from \"../../Common/CompanyModal\";\r\nimport { RiSkipBackMiniFill } from \"react-icons/ri\";\r\nimport { BsPlus } from \"react-icons/bs\";\r\nimport { BiSkipNext, BiSkipPrevious } from \"react-icons/bi\";\r\nimport { useState } from \"react\";\r\nimport { IoRefresh } from \"react-icons/io5\";\r\nimport LoanTextField from \"../../../Common/LoanTextField\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport CommonServices from \"../../Common/CommonServices\";\r\nconst AddOtherBank = ({\r\n  // submitted,\r\n  // handleBack,\r\n  handleSkip,\r\n  // handleNext,\r\n  // newAccountDetials,\r\n  soleOtherBank,\r\n  handleInputChangeSoleOtherBank,\r\n  saveSoleOtherBank,\r\n  GetRepayment,\r\n  loan,\r\n  currency,\r\n  industry,\r\n  loanStatus,\r\n  getIndustry,\r\n  selectedSector,\r\n  setSelectedSectorId,\r\n  setCreditInformationDocument,\r\n}) => {\r\n  const [isOtherBankModalOpen, setIsOtherBankModalOpen] = useState(false);\r\n  function handleOtherBankOpenModal() {\r\n    setIsOtherBankModalOpen(true);\r\n  }\r\n  function handlOtherBankCloseModal() {\r\n    setIsOtherBankModalOpen(false);\r\n  }\r\n  const [reportingDate, setReportingDate] = useState(new Date());\r\n  const [startDate, setStartDate] = useState(new Date());\r\n  const [maturityDate, setMaturityDate] = useState(new Date());\r\n  // const [creditInformationDocument, setCreditInformationDocument] =\r\n  // useState(null);\r\n  const [selectedFiles, setSelectedFiles] = useState(undefined);\r\n  const [currentFile, setCurrentFile] = useState(undefined);\r\n  const [fileInfos, setFileInfos] = useState([]);\r\n  const [progress, setProgress] = useState(0);\r\n  const [message, setMessage] = useState(\"\");\r\n  const selectFile = (event) => {\r\n    setSelectedFiles(event.target.files);\r\n  };\r\n  const uploadCreditInformationDocument = () => {\r\n    let currentFile = selectedFiles[0];\r\n    setProgress(0);\r\n    setCurrentFile(currentFile);\r\n    CommonServices.upload(currentFile, (event) => {\r\n      setProgress(Math.round((100 * event.loaded) / event.total));\r\n    })\r\n      .then((response) => {\r\n        setMessage(response.data.message);\r\n        setCreditInformationDocument(response.data.Result);\r\n      })\r\n      .then((files) => {\r\n        setFileInfos(files.data);\r\n      })\r\n      .catch(() => {\r\n        setProgress(0);\r\n        setCurrentFile(undefined);\r\n      });\r\n    setSelectedFiles(undefined);\r\n  };\r\n  return (\r\n    <>\r\n      <div className=\"flex\">\r\n        <LoanIconButton\r\n          style={{ color: \"purple\" }}\r\n          icon={<BiSkipPrevious />}\r\n          text=\"Back\"\r\n          onClick={handleSkip}\r\n        />\r\n        <LoanIconButton\r\n          style={{ color: \"purple\" }}\r\n          icon={<BsPlus />}\r\n          text=\"Add\"\r\n          onClick={handleOtherBankOpenModal}\r\n        />\r\n        <LoanIconButton\r\n          style={{ color: \"purple\" }}\r\n          icon={<BiSkipNext />}\r\n          text=\"Skip\"\r\n          onClick={handleSkip}\r\n        />\r\n      </div>\r\n      <CompanyModal\r\n        isOpen={isOtherBankModalOpen}\r\n        onClose={handlOtherBankCloseModal}\r\n        title=\"Add other bank  \"\r\n      >\r\n        <div>\r\n          <div className=\"relative center justify-center flex-1 w-full max-w-full grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\">\r\n            <LoanTextField\r\n              id=\"FullName\"\r\n              label=\"FullName\"\r\n              value={soleOtherBank.FullName}\r\n              onChange={handleInputChangeSoleOtherBank}\r\n              name=\"FullName\"\r\n            />\r\n            <LoanTextField\r\n              id=\"TinNumber\"\r\n              label=\"TinNumber\"\r\n              value={soleOtherBank.TinNumber}\r\n              onChange={handleInputChangeSoleOtherBank}\r\n              name=\"TinNumber\"\r\n            />\r\n            <LoanTextField\r\n              id=\"BankName\"\r\n              label=\"BankName\"\r\n              value={soleOtherBank.BankName}\r\n              onChange={handleInputChangeSoleOtherBank}\r\n              name=\"BankName\"\r\n            />\r\n            <LoanTextField\r\n              id=\"BranchName\"\r\n              label=\"BranchName\"\r\n              value={soleOtherBank.BranchName}\r\n              onChange={handleInputChangeSoleOtherBank}\r\n              name=\"BranchName\"\r\n            />\r\n            <LoanTextField\r\n              id=\"AccountNumber\"\r\n              label=\"AccountNumber\"\r\n              value={soleOtherBank.AccountNumber}\r\n              onChange={handleInputChangeSoleOtherBank}\r\n              name=\"AccountNumber\"\r\n            />\r\n            <FormControl variant=\"standard\" sx={{ minWidth: 120 }}>\r\n              <InputLabel id=\"countrylbl\" color=\"secondary\">\r\n                loan type\r\n              </InputLabel>\r\n              <Select\r\n                color=\"secondary\"\r\n                onChange={(event) =>\r\n                  (soleOtherBank.LoanTypeId = event.target.value)\r\n                }\r\n                labelId=\"loanType\"\r\n                id=\"loanTypeSelected\"\r\n                label=\"loanType\"\r\n              >\r\n                <MenuItem value=\"\">\r\n                  <em>None</em>\r\n                </MenuItem>\r\n                {loan.map((yourLoan) => (\r\n                  <MenuItem\r\n                    key={yourLoan.Id}\r\n                    LoanTypeId={yourLoan.Id}\r\n                    value={yourLoan.Id}\r\n                  >\r\n                    {yourLoan.Name}\r\n                  </MenuItem>\r\n                ))}\r\n              </Select>\r\n            </FormControl>\r\n            <p>\r\n              issue Date:\r\n              <div>\r\n                <DatePicker\r\n                  selected={reportingDate}\r\n                  onChange={(reportingDate) => setReportingDate(reportingDate)}\r\n                />\r\n              </div>\r\n            </p>\r\n            <FormControl variant=\"standard\" sx={{ minWidth: 120 }}>\r\n              <InputLabel id=\"countrylbl\" color=\"secondary\">\r\n                currency\r\n              </InputLabel>\r\n              <Select\r\n                color=\"secondary\"\r\n                onChange={(event) =>\r\n                  (soleOtherBank.CurrencyId = event.target.value)\r\n                }\r\n                labelId=\"loanType\"\r\n                id=\"loanTypeSelected\"\r\n                label=\"loanType\"\r\n              >\r\n                <MenuItem value=\"\">\r\n                  <em>None</em>\r\n                </MenuItem>\r\n                {currency.map((yourCurrency) => (\r\n                  <MenuItem\r\n                    key={yourCurrency.Id}\r\n                    LoanTypeId={yourCurrency.Id}\r\n                    value={yourCurrency.Id}\r\n                  >\r\n                    {yourCurrency.Name}\r\n                  </MenuItem>\r\n                ))}\r\n              </Select>\r\n            </FormControl>\r\n            <LoanTextField\r\n              id=\"ApprovedAmount\"\r\n              label=\"ApprovedAmount\"\r\n              value={soleOtherBank.ApprovedAmount}\r\n              onChange={handleInputChangeSoleOtherBank}\r\n              name=\"ApprovedAmount\"\r\n            />\r\n            <p>\r\n              Start Date:\r\n              <div>\r\n                <DatePicker\r\n                  selected={startDate}\r\n                  onChange={(startDate) => setStartDate(startDate)}\r\n                />\r\n              </div>\r\n            </p>\r\n            <p>\r\n              Maturity Date:\r\n              <div>\r\n                <DatePicker\r\n                  selected={maturityDate}\r\n                  onChange={(maturityDate) => setMaturityDate(maturityDate)}\r\n                />\r\n              </div>\r\n            </p>\r\n            <FormControl variant=\"standard\" sx={{ minWidth: 120 }}>\r\n              <InputLabel id=\"countrylbl\" color=\"secondary\">\r\n                Repayment Frequency\r\n              </InputLabel>\r\n              <Select\r\n                color=\"secondary\"\r\n                onChange={(event) =>\r\n                  (soleOtherBank.RepaymentFrequencyId = event.target.value)\r\n                }\r\n                labelId=\"repayment\"\r\n                id=\"repaymentSelected\"\r\n                label=\"repayment\"\r\n              >\r\n                <MenuItem value=\"\">\r\n                  <em>None</em>\r\n                </MenuItem>\r\n                {GetRepayment.map((yourRepayment) => (\r\n                  <MenuItem\r\n                    key={yourRepayment.Id}\r\n                    RepaymentFrequencyId={yourRepayment.Id}\r\n                    value={yourRepayment.Id}\r\n                  >\r\n                    {yourRepayment.Name}\r\n                  </MenuItem>\r\n                ))}\r\n              </Select>\r\n            </FormControl>\r\n            <LoanTextField\r\n              id=\"NumberOfInstallment\"\r\n              label=\"NumberOfInstallment\"\r\n              value={soleOtherBank.NumberOfInstallment}\r\n              onChange={handleInputChangeSoleOtherBank}\r\n              name=\"NumberOfInstallment\"\r\n            />\r\n            <LoanTextField\r\n              id=\"InstallmentAmount\"\r\n              label=\"InstallmentAmount\"\r\n              value={soleOtherBank.InstallmentAmount}\r\n              onChange={handleInputChangeSoleOtherBank}\r\n              name=\"InstallmentAmount\"\r\n            />\r\n            <LoanTextField\r\n              id=\"OutstandingLoanBalance\"\r\n              label=\"OutstandingLoanBalance\"\r\n              value={soleOtherBank.OutstandingLoanBalance}\r\n              onChange={handleInputChangeSoleOtherBank}\r\n              name=\"OutstandingLoanBalance\"\r\n            />\r\n            {/* LoanStatusId */}\r\n            <FormControl variant=\"standard\" sx={{ minWidth: 120 }}>\r\n              <InputLabel id=\"countrylbl\" color=\"secondary\">\r\n                Loan Status\r\n              </InputLabel>\r\n              <Select\r\n                color=\"secondary\"\r\n                onChange={(event) =>\r\n                  (soleOtherBank.LoanStatusId = event.target.value)\r\n                }\r\n                labelId=\"SectorTypeId\"\r\n                id=\"SectorTypeSelected\"\r\n                label=\"SectorTypeId\"\r\n              >\r\n                <MenuItem value=\"\">\r\n                  <em>None</em>\r\n                </MenuItem>\r\n                {loanStatus.map((yourLoanStatus) => (\r\n                  <MenuItem\r\n                    key={yourLoanStatus.Id}\r\n                    LoanStatusId={yourLoanStatus.Id}\r\n                    value={yourLoanStatus.Id}\r\n                  >\r\n                    {yourLoanStatus.Name}\r\n                  </MenuItem>\r\n                ))}\r\n              </Select>\r\n            </FormControl>\r\n            <LoanTextField\r\n              id=\"NoOfDaysInArrears\"\r\n              label=\"NoOfDaysInArrears\"\r\n              value={soleOtherBank.NoOfDaysInArrears}\r\n              onChange={handleInputChangeSoleOtherBank}\r\n              name=\"NoOfDaysInArrears\"\r\n            />\r\n            <LoanTextField\r\n              id=\"BalanceOverdue\"\r\n              label=\"BalanceOverdue\"\r\n              value={soleOtherBank.BalanceOverdue}\r\n              onChange={handleInputChangeSoleOtherBank}\r\n              name=\"BalanceOverdue\"\r\n            />\r\n            <LoanTextField\r\n              id=\"NoOfRestructuring\"\r\n              label=\"NoOfRestructuring\"\r\n              value={soleOtherBank.NoOfRestructuring}\r\n              onChange={handleInputChangeSoleOtherBank}\r\n              name=\"NoOfRestructuring\"\r\n            />\r\n            <LoanTextField\r\n              id=\"RestructuredCreditReferenceNumber\"\r\n              label=\"RestructuredCreditReferenceNumber\"\r\n              value={soleOtherBank.RestructuredCreditReferenceNumber}\r\n              onChange={handleInputChangeSoleOtherBank}\r\n              name=\"RestructuredCreditReferenceNumber\"\r\n            />\r\n            <FormControl variant=\"standard\" sx={{ minWidth: 120 }}>\r\n              <InputLabel id=\"countrylbl\" color=\"secondary\">\r\n                Sector Type\r\n              </InputLabel>\r\n              <Select\r\n                color=\"secondary\"\r\n                onChange={(event) => {\r\n                  setSelectedSectorId(event.target.value);\r\n                  industry(event.target.value);\r\n                  soleOtherBank.SectorTypeId = event.target.value;\r\n                }}\r\n                labelId=\"SectorTypeId\"\r\n                id=\"SectorTypeSelected\"\r\n                label=\"SectorTypeId\"\r\n              >\r\n                <MenuItem value=\"\">\r\n                  <em>None</em>\r\n                </MenuItem>\r\n                {selectedSector.map((yourSector) => (\r\n                  <MenuItem\r\n                    key={yourSector.Id}\r\n                    SectorTypeId={yourSector.Id}\r\n                    value={yourSector.Id}\r\n                  >\r\n                    {yourSector.Name}\r\n                  </MenuItem>\r\n                ))}\r\n              </Select>\r\n            </FormControl>\r\n            <FormControl variant=\"standard\" sx={{ minWidth: 120 }}>\r\n              <InputLabel id=\"countrylbl\" color=\"secondary\">\r\n                industry Type\r\n              </InputLabel>\r\n              <Select\r\n                color=\"secondary\"\r\n                onChange={(event) =>\r\n                  (soleOtherBank.IndustryTypeId = event.target.value)\r\n                }\r\n                labelId=\"IndustryTypeId\"\r\n                id=\"IndustryTypeSelected\"\r\n                label=\"IndustryTypeId\"\r\n              >\r\n                <MenuItem value=\"\">\r\n                  <em>None</em>\r\n                </MenuItem>\r\n                {getIndustry.map((yourIndustry) => (\r\n                  <MenuItem\r\n                    key={yourIndustry.Id}\r\n                    IndustryTypeId={yourIndustry.Id}\r\n                    value={yourIndustry.Id}\r\n                  >\r\n                    {yourIndustry.Name}\r\n                  </MenuItem>\r\n                ))}\r\n              </Select>\r\n            </FormControl>\r\n            <div>\r\n              {currentFile && (\r\n                <div className=\"progress\">\r\n                  <div\r\n                    className=\"progress-bar progress-bar-info progress-bar-striped\"\r\n                    role=\"progressbar\"\r\n                    aria-valuenow={progress}\r\n                    aria-valuemin=\"0\"\r\n                    aria-valuemax=\"100\"\r\n                    style={{ width: progress + \"%\" }}\r\n                  >\r\n                    {progress}%\r\n                  </div>\r\n                </div>\r\n              )}\r\n              <label className=\"btn btn-default\">\r\n                <input type=\"file\" onChange={selectFile} />\r\n              </label>\r\n              <button\r\n                className=\"btn btn-success\"\r\n                disabled={!selectedFiles}\r\n                onClick={uploadCreditInformationDocument}\r\n              >\r\n                upload Credit Information Document\r\n              </button>\r\n              <div className=\"alert alert-light\" role=\"alert\">\r\n                {message}\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"flex justify-center p-2 pt-5\">\r\n            <button\r\n              className=\"bg-[purple] hover:bg-purple-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\"\r\n              onClick={() => {\r\n                saveSoleOtherBank();\r\n              }}\r\n            >\r\n              Save\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </CompanyModal>\r\n    </>\r\n  );\r\n};\r\nexport default AddOtherBank;\r\n","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\accountDetail\\creditFacilityUtilizition\\TermLoan\\ViewTermLoan.jsx",["1740","1741","1742","1743","1744","1745","1746","1747","1748","1749"],[],"import {\r\n  TextField,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n} from \"@mui/material\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { FaSpinner } from \"react-icons/fa\";\r\nimport { BiSkipNext } from \"react-icons/bi\";\r\nimport { MdModeEdit } from \"react-icons/md\";\r\nimport LoanIconButton from \"../../../../Common/LoanIconButton\";\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\nimport CompanyModal from \"../../../Common/CompanyModal\";\r\nimport LoanTextField from \"../../../../Common/LoanTextField\";\r\nimport AddTermLoan from \"./AddTermLoan\";\r\nimport TermLoanService from \"./TermLoanService\";\r\nconst ViewTermLoan = ({\r\n  isTermLoanModalOpen,\r\n  handleTermLoanOpenModal,\r\n  handleTermLoanCloseModal,\r\n  termLoan,\r\n  creditFacilityUtilizitionId,\r\n}) => {\r\n  const [termLoanErrorLoading, setTermLoanErrorLoading] = useState(false);\r\n  const [deleteLoading, setDeleteLoading] = useState(false);\r\n  const [paymentDueDate, setPaymentDueDate] = useState(new Date());\r\n  const [actualPaymentDate, setActualPaymentDate] = useState(new Date());\r\n  const [startDate, setStartDate] = useState(new Date());\r\n  const [maturityDate, setMaturityDate] = useState(new Date());\r\n  const [deleteTermLoanError, setTermLoanDeleteError] = useState(null);\r\n  const [error, setError] = useState(null);\r\n  const [isTermLoanEditModalOpen, setIsTermLoanEditModalOpen] = useState(false);\r\n\r\n  function handleTermLoanEditOpenModal() {\r\n    setIsTermLoanEditModalOpen(true);\r\n  }\r\n  function handleTermLoanEditCloseModal() {\r\n    setIsTermLoanEditModalOpen(false);\r\n  }\r\n  function handleTermLoanEditOpenModal() {\r\n    setIsTermLoanEditModalOpen(true);\r\n  }\r\n  function handleTermLoanEditCloseModal() {\r\n    setIsTermLoanEditModalOpen(false);\r\n  }\r\n  const [termLoanId, setTermLoanId] = useState(null);\r\n  const handleInputChangeTermLoan = (event) => {\r\n    const { name, value } = event.target;\r\n    setTermLoans({\r\n      ...termLoans,\r\n      [name]: value,\r\n    });\r\n  };\r\n  const initialTermLoanState = {\r\n    Id: null,\r\n    ApprovedAmount: \"\",\r\n    TotalCommitment: \"\",\r\n    Commitment: \"\",\r\n    StartDate: \"\",\r\n    MaturityDate: \"\",\r\n    RepaymentFrequencyId: \"\",\r\n    TotalNumberOfScheduledPayment: \"\",\r\n    ScheduledPayment: \"\",\r\n    PaymentDueDate: \"\",\r\n    DaysPastDue: \"\",\r\n    ActualPaymentDate: \"\",\r\n  };\r\n  const [termLoans, setTermLoans] = useState(initialTermLoanState);\r\n  const newTermLoan = () => {\r\n    setTermLoans(initialTermLoanState);\r\n    // setSubmitted(false);\r\n  };\r\n  const saveTermLoan = () => {\r\n    var data = {\r\n      ApprovedAmount: termLoans.ApprovedAmount,\r\n      TotalCommitment: termLoans.TotalCommitment,\r\n      Commitment: termLoans.Commitment,\r\n      StartDate: termLoans.StartDate,\r\n      MaturityDate: termLoans.MaturityDate,\r\n      RepaymentFrequencyId: termLoans.RepaymentFrequencyId,\r\n      TotalNumberOfScheduledPayment: termLoans.TotalNumberOfScheduledPayment,\r\n      ScheduledPayment: termLoans.ScheduledPayment,\r\n      PaymentDueDate: termLoans.PaymentDueDate,\r\n      DaysPastDue: termLoans.DaysPastDue,\r\n      ActualPaymentDate: termLoans.ActualPaymentDate,\r\n    };\r\n    TermLoanService.addTermLoan(data, creditFacilityUtilizitionId)\r\n      .then((response) => {\r\n        setTermLoans({\r\n          Id: response.data.Id,\r\n          ApprovedAmount: response.data.ApprovedAmount,\r\n          TotalCommitment: response.data.TotalCommitment,\r\n          Commitment: response.data.Commitment,\r\n          StartDate: response.data.StartDate,\r\n          MaturityDate: response.data.MaturityDate,\r\n          RepaymentFrequencyId: response.data.RepaymentFrequencyId,\r\n          TotalNumberOfScheduledPayment:\r\n            response.data.TotalNumberOfScheduledPayment,\r\n          ScheduledPayment: response.data.ScheduledPayment,\r\n          PaymentDueDate: response.data.PaymentDueDate,\r\n          DaysPastDue: response.data.DaysPastDue,\r\n          ActualPaymentDate: response.data.ActualPaymentDate,\r\n        });\r\n        if (response.data.Code === 200) {\r\n          setTermLoans(initialTermLoanState);\r\n          console.log(response.data);\r\n          // setHoldId(response.data.Result.Id);\r\n          termLoan();\r\n          toast.success(\"Added successfully\", {\r\n            position: toast.POSITION.TOP_RIGHT,\r\n            toastId: \"termloan\",\r\n          });\r\n        }\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n  const handleDelete = (TermLoan) => {\r\n    setDeleteLoading(true);\r\n    const confirm = window.confirm(\r\n      `Are you sure you want to delete ${TermLoan.Id}?`\r\n    );\r\n    if (confirm) {\r\n      toast.success(\"Deleting\", {\r\n        position: toast.POSITION.TOP_RIGHT,\r\n        toastId: \"deletePreshipmentFacility\",\r\n      });\r\n      TermLoanService.deleteTermLoanById(TermLoan.Id)\r\n        .then(() => {\r\n          TermLoan((previousData) =>\r\n            previousData.filter((comp) => comp.Id !== TermLoan.Id)\r\n          );\r\n        })\r\n        .catch((e) => {\r\n          setTermLoanDeleteError(e);\r\n          setDeleteLoading(false);\r\n        });\r\n    }\r\n  };\r\n  const [editTermLoan, setEditTermLoan] = useState({\r\n    //  Id: editAddresAccountDetailId,\r\n    ApprovedAmount: \"\",\r\n    TotalCommitment: \"\",\r\n    Commitment: \"\",\r\n    StartDate: \"\",\r\n    MaturityDate: \"\",\r\n    RepaymentFrequencyId: \"\",\r\n    TotalNumberOfScheduledPayment: \"\",\r\n    ScheduledPayment: \"\",\r\n    PaymentDueDate: \"\",\r\n    DaysPastDue: \"\",\r\n    ActualPaymentDate: \"\",\r\n  });\r\n\r\n  const handleInputChangeEditTermLoan = (event) => {\r\n    const { name, value } = event.target;\r\n    setEditTermLoan({\r\n      ...editTermLoan,\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  const getTermLoanId = (editTermLoanId) => {\r\n    TermLoanService.getTermLoanById(editTermLoanId) //here is\r\n      .then((res) => {\r\n        setEditTermLoan({\r\n          ...editTermLoan,\r\n          Id: editTermLoanId,\r\n          ApprovedAmount: res.data.Result.ApprovedAmount,\r\n          TotalCommitment: res.data.Result.TotalCommitment,\r\n          Commitment: res.data.Result.Commitment,\r\n          StartDate: res.data.Result.StartDate,\r\n          MaturityDate: res.data.Result.MaturityDate,\r\n          RepaymentFrequencyId: res.data.Result.RepaymentFrequencyId,\r\n          TotalNumberOfScheduledPayment:\r\n            res.data.Result.TotalNumberOfScheduledPayment,\r\n          ScheduledPayment: res.data.Result.ScheduledPayment,\r\n          PaymentDueDate: res.data.Result.PaymentDueDate,\r\n          DaysPastDue: res.data.Result.DaysPastDue,\r\n          ActualPaymentDate: res.data.Result.ActualPaymentDate,\r\n        });\r\n      })\r\n      .catch((err) => {\r\n        if (err.response.data.StatusCode === 404) {\r\n          console.log(err.response.data.Message);\r\n        }\r\n      });\r\n  };\r\n  const updateTermLoanById = (e) => {\r\n    e.preventDefault();\r\n    TermLoanService.updateTermLoanById(termLoanId, editTermLoan)\r\n      .then((response) => {\r\n        if (response.data.Code === 200) {\r\n          termLoan();\r\n          toast.success(\"Updated successfully\", {\r\n            position: toast.POSITION.TOP_RIGHT,\r\n            toastId: \"updateCompany\",\r\n          });\r\n        }\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n  const [repaymentSchedule, setRepaymentSchedule] = useState([]);\r\n  const getTermLoanRepyment = () => {\r\n    setTimeout(() => {\r\n      TermLoanService.getRepayment().then((response) => {\r\n        setRepaymentSchedule(response.data.Result);\r\n      });\r\n    }, 1000);\r\n  };\r\n  useEffect(() => {\r\n    getTermLoanRepyment();\r\n  }, []);\r\n  return (\r\n    <div>\r\n      <CompanyModal\r\n        isOpen={isTermLoanModalOpen}\r\n        onClose={handleTermLoanCloseModal}\r\n        title=\" Term loan\"\r\n      >\r\n        <div className=\"flex items-top justify-top h-screen overflow-x-scroll overflow-y-scroll\">\r\n          <div>\r\n            <div className=\"rounded-lg overflow-hidden overflow-x-scroll overflow-y-scroll\">\r\n              {/* <div className=\"bg-gray-100 flex items-center justify-center h-screen\"> */}\r\n              <div>\r\n                <h4 className=\"text-lg font-semibold eading-tight p-2\"></h4>\r\n                <AddTermLoan\r\n                  handleInputChangeTermLoan={handleInputChangeTermLoan}\r\n                  saveTermLoan={saveTermLoan}\r\n                  TermLoans={termLoans}\r\n                  setTermLoans={setTermLoans}\r\n                  repaymentSchedule={repaymentSchedule}\r\n                />\r\n                <div>\r\n                  {error && <p className=\"text-red-500\">{error}</p>}\r\n                  {!error && termLoanErrorLoading ? (\r\n                    <span>\r\n                      <FaSpinner\r\n                        className=\"animate-spin rounded-full h-6 w-6 text-purple-600\"\r\n                        fontSize=\"small\"\r\n                        data-toggle=\"tooltip\"\r\n                        title=\"Click it to sign in\"\r\n                      />\r\n                      Loading...\r\n                    </span>\r\n                  ) : (\r\n                    !error &&\r\n                    !termLoanErrorLoading && (\r\n                      <div className=\"overflow-x-auto\">\r\n                        <ToastContainer />\r\n                        <table className=\"min-w-full table table-bordered table-striped bg-purple-100\">\r\n                          <thead>\r\n                            <tr className=\"bg-purple-200\">\r\n                              <th className=\"px-2 py-4\"> Approved Amount</th>\r\n                              <th className=\"px-2 py-4\"> Total Commitment </th>\r\n                              <th className=\"px-2 py-4\"> Commitment</th>\r\n                              <th className=\"px-2 py-4\"> Start Date</th>\r\n                              <th className=\"px-2 py-4\"> Maturity Date </th>\r\n                              <th className=\"px-2 py-4\">\r\n                                {\" \"}\r\n                                Repayment Frequency{\" \"}\r\n                              </th>\r\n                              <th className=\"px-2 py-4\">\r\n                                {\" \"}\r\n                                Total Number Of Scheduled Payment{\" \"}\r\n                              </th>\r\n                              <th className=\"px-2 py-4\"> Scheduled Payment </th>\r\n                              <th className=\"px-2 py-4\"> Payment Due Date </th>\r\n                              <th className=\"px-2 py-4\"> Days Past Due </th>\r\n                              <th className=\"px-2 py-4\">\r\n                                {\" \"}\r\n                                Actual Payment Date{\" \"}\r\n                              </th>\r\n                              <th className=\"px-2 py-4\"> Action </th>\r\n                            </tr>\r\n                          </thead>\r\n                          <tbody>\r\n                            {termLoan.length === 0 ? (\r\n                              <p className=\"text-red-600 p-4\">Data not found</p>\r\n                            ) : (\r\n                              termLoan.map((termloan, index) => (\r\n                                <tr\r\n                                  key={index}\r\n                                  className=\"bg-white\r\n                    border-b border-purple-200\"\r\n                                >\r\n                                  <td className=\"p-2\">\r\n                                    {termloan.ApprovedAmount}\r\n                                  </td>\r\n                                  <td className=\"p-2\">\r\n                                    {termloan.TotalCommitment}\r\n                                  </td>\r\n                                  <td className=\"p-2\">{termloan.Commitment}</td>\r\n                                  <td className=\"p-2\">{termloan.StartDate}</td>\r\n                                  <td className=\"p-2\">\r\n                                    {termloan.MaturityDate}\r\n                                  </td>\r\n                                  <td className=\"p-2\">\r\n                                    {termloan.RepaymentFrequency}\r\n                                  </td>\r\n                                  <td className=\"p-2\">\r\n                                    {termloan.TotalNumberOfScheduledPayment}\r\n                                  </td>{\" \"}\r\n                                  <td className=\"p-2\">\r\n                                    {termloan.ScheduledPayment}\r\n                                  </td>{\" \"}\r\n                                  <td className=\"p-2\">\r\n                                    {termloan.PaymentDueDate}\r\n                                  </td>{\" \"}\r\n                                  <td className=\"p-2\">\r\n                                    {termloan.DaysPastDue}\r\n                                  </td>{\" \"}\r\n                                  <td className=\"p-2\">\r\n                                    {termloan.ActualPaymentDate}\r\n                                  </td>\r\n                                  <td className=\"p-2\">\r\n                                    <>\r\n                                      <LoanIconButton\r\n                                        style={{ color: \"green\" }}\r\n                                        icon={<MdModeEdit />}\r\n                                        text=\"Edit\"\r\n                                        onClick={() => {\r\n                                          handleTermLoanEditOpenModal();\r\n                                          getTermLoanId(termloan.Id);\r\n                                          setTermLoanId(termloan.Id);\r\n                                        }}\r\n                                      />\r\n                                    </>\r\n                                    <>\r\n                                      <LoanIconButton\r\n                                        style={{ color: \"red\" }}\r\n                                        text=\" Delete\"\r\n                                        onClick={() => {\r\n                                          handleDelete(termloan);\r\n                                        }}\r\n                                      >\r\n                                        <ToastContainer />\r\n                                      </LoanIconButton>\r\n                                    </>\r\n                                  </td>\r\n                                </tr>\r\n                              ))\r\n                            )}\r\n                          </tbody>\r\n                        </table>\r\n                      </div>\r\n                    )\r\n                  )}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </CompanyModal>\r\n      <CompanyModal\r\n        isOpen={isTermLoanEditModalOpen}\r\n        onClose={handleTermLoanEditCloseModal}\r\n        title=\"Modify term loan information\"\r\n      >\r\n        <div>\r\n          <ToastContainer />\r\n          <form onSubmit={updateTermLoanById}>\r\n            <div className=\"grid grid-cols-1 gap-4 submit-form\">\r\n              <div className=\"submit-form \">\r\n                <div className=\"relative center justify-center flex-1 w-full max-w-full grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\">\r\n                  <LoanTextField\r\n                    id=\"ApprovedAmount\"\r\n                    label=\"ApprovedAmount\"\r\n                    value={editTermLoan.ApprovedAmount}\r\n                    onChange={handleInputChangeEditTermLoan}\r\n                    name=\"ApprovedAmount\"\r\n                  />\r\n                  <LoanTextField\r\n                    id=\"TotalCommitment\"\r\n                    label=\"TotalCommitment\"\r\n                    value={editTermLoan.TotalCommitment}\r\n                    onChange={handleInputChangeEditTermLoan}\r\n                    name=\"TotalCommitment\"\r\n                  />\r\n                  <LoanTextField\r\n                    id=\"Commitment\"\r\n                    label=\"Commitment\"\r\n                    value={editTermLoan.Commitment}\r\n                    onChange={handleInputChangeEditTermLoan}\r\n                    name=\"Commitment\"\r\n                  />\r\n                  <p>\r\n                    Start Date\r\n                    <input\r\n                      id=\"StartDate\"\r\n                      name=\"StartDate\"\r\n                      label=\"StartDate\"\r\n                      placeholder=\"StartDate\"\r\n                      type=\"date\"\r\n                      value={\r\n                        startDate.getFullYear().toString() +\r\n                        \"-\" +\r\n                        (startDate.getMonth() + 1).toString().padStart(2, 0) +\r\n                        \"-\" +\r\n                        startDate.getDate().toString().padStart(2, 0)\r\n                      }\r\n                      onChange={(e) => {\r\n                        setStartDate(new Date(e.target.value));\r\n                        editTermLoan.StartDate = startDate;\r\n                      }}\r\n                    />{\" \"}\r\n                  </p>\r\n                  <p>\r\n                    Maturity Date\r\n                    <input\r\n                      id=\"MaturityDate\"\r\n                      name=\"MaturityDate\"\r\n                      label=\"MaturityDate\"\r\n                      placeholder=\"MaturityDate\"\r\n                      type=\"date\"\r\n                      value={\r\n                        maturityDate.getFullYear().toString() +\r\n                        \"-\" +\r\n                        (maturityDate.getMonth() + 1)\r\n                          .toString()\r\n                          .padStart(2, 0) +\r\n                        \"-\" +\r\n                        maturityDate.getDate().toString().padStart(2, 0)\r\n                      }\r\n                      onChange={(e) => {\r\n                        setMaturityDate(new Date(e.target.value));\r\n                        editTermLoan.MaturityDate = maturityDate;\r\n                      }}\r\n                    />{\" \"}\r\n                  </p>\r\n                  {/* RepaymentFrequencyId */}\r\n                  <FormControl variant=\"standard\" sx={{ minWidth: 120 }}>\r\n                    <InputLabel id=\"countrylbl\" color=\"secondary\">\r\n                      Repayment Frequency{\" \"}\r\n                    </InputLabel>\r\n                    <Select\r\n                      color=\"secondary\"\r\n                      onChange={(event) => {\r\n                        editTermLoan.RepaymentFrequencyId = event.target.value;\r\n                      }}\r\n                      labelId=\"countrylbl\"\r\n                      id=\"RepaymentFrequencyId\"\r\n                      label=\"Country\"\r\n                    >\r\n                      <MenuItem value=\"\">\r\n                        <em>None</em>\r\n                      </MenuItem>\r\n                      {repaymentSchedule.map((yourTermLoan) => (\r\n                        <MenuItem\r\n                          key={yourTermLoan.Id}\r\n                          RepaymentFrequencyId={yourTermLoan.Id}\r\n                          value={yourTermLoan.Id}\r\n                        >\r\n                          {yourTermLoan.Name}\r\n                        </MenuItem>\r\n                      ))}\r\n                    </Select>\r\n                  </FormControl>\r\n\r\n                  <LoanTextField\r\n                    id=\"TotalNumberOfScheduledPayment\"\r\n                    label=\"TotalNumberOfScheduledPayment\"\r\n                    value={editTermLoan.TotalNumberOfScheduledPayment}\r\n                    onChange={handleInputChangeEditTermLoan}\r\n                    name=\"TotalNumberOfScheduledPayment\"\r\n                  />\r\n                  <LoanTextField\r\n                    id=\"ScheduledPayment\"\r\n                    label=\"ScheduledPayment\"\r\n                    value={editTermLoan.ScheduledPayment}\r\n                    onChange={handleInputChangeEditTermLoan}\r\n                    name=\"ScheduledPayment\"\r\n                  />\r\n                  <p>\r\n                    Payment Due Date\r\n                    <input\r\n                      id=\"PaymentDueDate\"\r\n                      name=\"PaymentDueDate\"\r\n                      label=\"PaymentDueDate\"\r\n                      placeholder=\"PaymentDueDate\"\r\n                      type=\"date\"\r\n                      value={\r\n                        paymentDueDate.getFullYear().toString() +\r\n                        \"-\" +\r\n                        (paymentDueDate.getMonth() + 1)\r\n                          .toString()\r\n                          .padStart(2, 0) +\r\n                        \"-\" +\r\n                        paymentDueDate.getDate().toString().padStart(2, 0)\r\n                      }\r\n                      onChange={(e) => {\r\n                        setPaymentDueDate(new Date(e.target.value));\r\n                        editTermLoan.PaymentDueDate = paymentDueDate;\r\n                      }}\r\n                    />{\" \"}\r\n                  </p>\r\n                  <LoanTextField\r\n                    id=\"DaysPastDue\"\r\n                    label=\"DaysPastDue\"\r\n                    value={editTermLoan.DaysPastDue}\r\n                    onChange={handleInputChangeEditTermLoan}\r\n                    name=\"DaysPastDue\"\r\n                  />\r\n                  <p>\r\n                    Actual Payment Date\r\n                    <input\r\n                      id=\"ActualPaymentDate\"\r\n                      name=\"ActualPaymentDate\"\r\n                      label=\"ActualPaymentDate\"\r\n                      placeholder=\"ActualPaymentDate\"\r\n                      type=\"date\"\r\n                      value={\r\n                        actualPaymentDate.getFullYear().toString() +\r\n                        \"-\" +\r\n                        (actualPaymentDate.getMonth() + 1)\r\n                          .toString()\r\n                          .padStart(2, 0) +\r\n                        \"-\" +\r\n                        actualPaymentDate.getDate().toString().padStart(2, 0)\r\n                      }\r\n                      onChange={(e) => {\r\n                        setActualPaymentDate(new Date(e.target.value));\r\n                        editTermLoan.ActualPaymentDate = actualPaymentDate;\r\n                      }}\r\n                    />{\" \"}\r\n                  </p>\r\n                </div>\r\n                <div className=\"flex justify-center items-center\">\r\n                  <button\r\n                    type=\"submit\"\r\n                    className=\"bg-[purple] hover:bg-purple-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline \"\r\n                  >\r\n                    Update\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </CompanyModal>\r\n    </div>\r\n  );\r\n};\r\nexport default ViewTermLoan;\r\n","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\accountDetail\\creditFacilityUtilizition\\TermLoan\\TermLoanService.js",[],[],"C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\accountDetail\\creditFacilityUtilizition\\TermLoan\\AddTermLoan.jsx",["1750","1751","1752","1753","1754","1755","1756","1757"],[],"import {\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  IconButton,\r\n} from \"@mui/material\";\r\nimport { useState, useEffect } from \"react\";\r\nimport LoanIconButton from \"../../../../Common/LoanIconButton\";\r\nimport CompanyModal from \"../../../Common/CompanyModal\";\r\n// import CompanyModal from \"../../../../Common/CompanyModal\";\r\nimport { RiSkipBackMiniFill } from \"react-icons/ri\";\r\nimport { BsPlus } from \"react-icons/bs\";\r\nimport { BiSkipNext, BiSkipPrevious } from \"react-icons/bi\";\r\nimport { IoRefresh } from \"react-icons/io5\";\r\n// import LoanTextField from \"../../../Common/LoanTextField\";\r\nimport CommonServices from \"../../../Common/CommonServices\";\r\nimport LoanTextField from \"../../../../Common/LoanTextField\";\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\nconst AddTermLoan = ({\r\n  submitted,\r\n  handleBack,\r\n  handleSkip,\r\n  handleNext,\r\n  handleInputChangeTermLoan,\r\n  saveTermLoan,\r\n  TermLoans,\r\n  setTermLoans,\r\n  repaymentSchedule,\r\n}) => {\r\n  const [isTermLoanModalOpen, setIsTermLoanModalOpen] = useState(false);\r\n  function handleTermLoanOpenModal() {\r\n    setIsTermLoanModalOpen(true);\r\n  }\r\n  function handlTermLoanCloseModal() {\r\n    setIsTermLoanModalOpen(false);\r\n  }\r\n  const [paymentDueDate, setPaymentDueDate] = useState(new Date());\r\n  const [actualPaymentDate, setActualPaymentDate] = useState(new Date());\r\n  const [startDate, setStartDate] = useState(new Date());\r\n  const [maturityDate, setMaturityDate] = useState(new Date());\r\n\r\n  return (\r\n    <>\r\n      <div className=\"flex\">\r\n        {/* <LoanIconButton\r\n          style={{ color: \"purple\" }}\r\n          icon={<BiSkipPrevious />}\r\n          text=\"Back\"\r\n          onClick={handleSkip}\r\n        /> */}\r\n        <LoanIconButton\r\n          style={{ color: \"purple\" }}\r\n          icon={<BsPlus />}\r\n          text=\"Add\"\r\n          onClick={handleTermLoanOpenModal}\r\n        />\r\n        {/* <LoanIconButton\r\n          style={{ color: \"purple\" }}\r\n          icon={<BiSkipNext />}\r\n          text=\"Skip\"\r\n          onClick={handleSkip}\r\n        /> */}\r\n      </div>\r\n      <CompanyModal\r\n        isOpen={isTermLoanModalOpen}\r\n        onClose={handlTermLoanCloseModal}\r\n        title=\"term loan \"\r\n      >\r\n        <div>\r\n          <ToastContainer />\r\n          <div className=\"relative center justify-center flex-1 w-full max-w-full grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\">\r\n            <LoanTextField\r\n              id=\"ApprovedAmount\"\r\n              label=\"ApprovedAmount\"\r\n              value={TermLoans.ApprovedAmount}\r\n              onChange={handleInputChangeTermLoan}\r\n              name=\"ApprovedAmount\"\r\n            />\r\n            <LoanTextField\r\n              id=\"TotalCommitment\"\r\n              label=\"TotalCommitment\"\r\n              value={TermLoans.TotalCommitment}\r\n              onChange={handleInputChangeTermLoan}\r\n              name=\"TotalCommitment\"\r\n            />\r\n            <LoanTextField\r\n              id=\"Commitment\"\r\n              label=\"Commitment\"\r\n              value={TermLoans.Commitment}\r\n              onChange={handleInputChangeTermLoan}\r\n              name=\"Commitment\"\r\n            />\r\n            <p>\r\n              Start Date\r\n              <input\r\n                id=\"StartDate\"\r\n                name=\"StartDate\"\r\n                label=\"StartDate\"\r\n                placeholder=\"StartDate\"\r\n                type=\"date\"\r\n                value={\r\n                  startDate.getFullYear().toString() +\r\n                  \"-\" +\r\n                  (startDate.getMonth() + 1).toString().padStart(2, 0) +\r\n                  \"-\" +\r\n                  startDate.getDate().toString().padStart(2, 0)\r\n                }\r\n                onChange={(e) => {\r\n                  setStartDate(new Date(e.target.value));\r\n                  TermLoans.StartDate = startDate;\r\n                }}\r\n              />{\" \"}\r\n            </p>\r\n            <p>\r\n              Maturity Date\r\n              <input\r\n                id=\"MaturityDate\"\r\n                name=\"MaturityDate\"\r\n                label=\"MaturityDate\"\r\n                placeholder=\"MaturityDate\"\r\n                type=\"date\"\r\n                value={\r\n                  maturityDate.getFullYear().toString() +\r\n                  \"-\" +\r\n                  (maturityDate.getMonth() + 1).toString().padStart(2, 0) +\r\n                  \"-\" +\r\n                  maturityDate.getDate().toString().padStart(2, 0)\r\n                }\r\n                onChange={(e) => {\r\n                  setMaturityDate(new Date(e.target.value));\r\n                  TermLoans.MaturityDate = maturityDate;\r\n                }}\r\n              />{\" \"}\r\n            </p>\r\n            {/* RepaymentFrequencyId */}\r\n            <FormControl variant=\"standard\" sx={{ minWidth: 120 }}>\r\n                    <InputLabel id=\"countrylbl\" color=\"secondary\">\r\n                    Repayment Frequency{\" \"}\r\n                    </InputLabel>\r\n                    <Select\r\n                      color=\"secondary\"\r\n                      onChange={(event) => {\r\n                        TermLoans.RepaymentFrequencyId =\r\n                          event.target.value;\r\n                      }}\r\n                      labelId=\"countrylbl\"\r\n                      id=\"RepaymentFrequencyId\"\r\n                      label=\"Country\"\r\n                    >\r\n                      <MenuItem value=\"\">\r\n                        <em>None</em>\r\n                      </MenuItem>\r\n                      {repaymentSchedule.map((yourTermLoan) => (\r\n                        <MenuItem\r\n                          key={yourTermLoan.Id}\r\n                          RepaymentFrequencyId={yourTermLoan.Id}\r\n                          value={yourTermLoan.Id}\r\n                        >\r\n                          {yourTermLoan.Name}\r\n                        </MenuItem>\r\n                      ))}\r\n                    </Select>\r\n                  </FormControl>\r\n            <LoanTextField\r\n              id=\"TotalNumberOfScheduledPayment\"\r\n              label=\"TotalNumberOfScheduledPayment\"\r\n              value={TermLoans.TotalNumberOfScheduledPayment}\r\n              onChange={handleInputChangeTermLoan}\r\n              name=\"TotalNumberOfScheduledPayment\"\r\n            />\r\n            <LoanTextField\r\n              id=\"ScheduledPayment\"\r\n              label=\"ScheduledPayment\"\r\n              value={TermLoans.ScheduledPayment}\r\n              onChange={handleInputChangeTermLoan}\r\n              name=\"ScheduledPayment\"\r\n            />\r\n            <p>\r\n              Payment Due Date\r\n              <input\r\n                id=\"PaymentDueDate\"\r\n                name=\"PaymentDueDate\"\r\n                label=\"PaymentDueDate\"\r\n                placeholder=\"PaymentDueDate\"\r\n                type=\"date\"\r\n                value={\r\n                  paymentDueDate.getFullYear().toString() +\r\n                  \"-\" +\r\n                  (paymentDueDate.getMonth() + 1).toString().padStart(2, 0) +\r\n                  \"-\" +\r\n                  paymentDueDate.getDate().toString().padStart(2, 0)\r\n                }\r\n                onChange={(e) => {\r\n                  setPaymentDueDate(new Date(e.target.value));\r\n                  TermLoans.PaymentDueDate = paymentDueDate;\r\n                }}\r\n              />{\" \"}\r\n            </p>\r\n            <LoanTextField\r\n              id=\"DaysPastDue\"\r\n              label=\"DaysPastDue\"\r\n              value={TermLoans.DaysPastDue}\r\n              onChange={handleInputChangeTermLoan}\r\n              name=\"DaysPastDue\"\r\n            />\r\n            <p>\r\n              Actual Payment Date\r\n              <input\r\n                id=\"ActualPaymentDate\"\r\n                name=\"ActualPaymentDate\"\r\n                label=\"ActualPaymentDate\"\r\n                placeholder=\"ActualPaymentDate\"\r\n                type=\"date\"\r\n                value={\r\n                  actualPaymentDate.getFullYear().toString() +\r\n                  \"-\" +\r\n                  (actualPaymentDate.getMonth() + 1).toString().padStart(2, 0) +\r\n                  \"-\" +\r\n                  actualPaymentDate.getDate().toString().padStart(2, 0)\r\n                }\r\n                onChange={(e) => {\r\n                  setActualPaymentDate(new Date(e.target.value));\r\n                  TermLoans.ActualPaymentDate = actualPaymentDate;\r\n                }}\r\n              />{\" \"}\r\n            </p>\r\n          </div>\r\n          <div className=\"flex justify-center p-2 pt-5\">\r\n            <button\r\n              className=\"bg-[purple] hover:bg-purple-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\"\r\n              onClick={() => {\r\n                saveTermLoan();\r\n              }}\r\n            >\r\n              Save\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </CompanyModal>\r\n    </>\r\n  );\r\n};\r\nexport default AddTermLoan;\r\n","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\accountDetail\\creditFacilityUtilizition\\merchandiseFacility\\MerchandiseFacilityService.js",[],[],"C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\accountDetail\\creditFacilityUtilizition\\merchandiseFacility\\ViewMerchandiseFacility.jsx",["1758","1759","1760","1761","1762","1763","1764","1765","1766","1767","1768","1769","1770","1771","1772","1773"],[],"import {\r\n  TextField,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n} from \"@mui/material\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { FaSpinner } from \"react-icons/fa\";\r\nimport { BiSkipNext } from \"react-icons/bi\";\r\nimport { MdModeEdit } from \"react-icons/md\";\r\nimport LoanIconButton from \"../../../../Common/LoanIconButton\";\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\nimport CompanyModal from \"../../../Common/CompanyModal\";\r\nimport LoanTextField from \"../../../../Common/LoanTextField\";\r\nimport AddMerchandiseFacility from \"./AddMerchandiseFacility\";\r\nimport MerchandiseFacilityService from \"./MerchandiseFacilityService\";\r\nconst ViewMerchandiseFacility = ({\r\n  isMerchandiseFacilityModalOpen,\r\n  handleMerchandiseFacilityOpenModal,\r\n  handleMerchandiseFacilityCloseModal,\r\n  MerchandiseFacility,\r\n  creditFacilityUtilizitionId,\r\n}) => {\r\n  const [merchandiseFacilityErrorLoading, setMerchandiseFacilityErrorLoading] =\r\n    useState(false);\r\n  const [deleteLoading, setDeleteLoading] = useState(false);\r\n  const [startDate, setStartDate] = useState(new Date());\r\n  const [expiredDate, setExpiredDate] = useState(new Date());\r\n  const [disbursementDate, setDisbursementDate] = useState(new Date());\r\n  const [deleteMerchandiseFacilityError, setMerchandiseFacilityDeleteError] =\r\n    useState(null);\r\n  const [error, setError] = useState(null);\r\n  const [\r\n    isMerchandiseFacilityEditModalOpen,\r\n    setIsMerchandiseFacilityEditModalOpen,\r\n  ] = useState(false);\r\n  function handleMerchandiseFacilityEditOpenModal() {\r\n    setIsMerchandiseFacilityEditModalOpen(true);\r\n  }\r\n  function handleMerchandiseFacilityEditCloseModal() {\r\n    setIsMerchandiseFacilityEditModalOpen(false);\r\n  }\r\n  function handleMerchandiseFacilityEditOpenModal() {\r\n    setIsMerchandiseFacilityEditModalOpen(true);\r\n  }\r\n  function handleMerchandiseFacilityEditCloseModal() {\r\n    setIsMerchandiseFacilityEditModalOpen(false);\r\n  }\r\n  const [merchandiseFacilityId, setMerchandiseFacilityId] = useState(null);\r\n  const handleInputChangeMerchandiseFacility = (event) => {\r\n    const { name, value } = event.target;\r\n    setMerchandiseFacilitys({\r\n      ...merchandiseFacilitys,\r\n      [name]: value,\r\n    });\r\n  };\r\n  const initialMerchandiseFacilityState = {\r\n    Id: null,\r\n    MerchandiseAC: \"\",\r\n    ApprovedFacilityLimit: \"\",\r\n    StartDate: \"\",\r\n    ExpiredDate: \"\",\r\n    DisbursementDate: \"\",\r\n    DisbursementAmount: \"\",\r\n    DisbursementSettlementDay: \"\",\r\n    ActualSettlementDays: \"\",\r\n    TotalDisbursementInFacilityPeriod: \"\",\r\n  };\r\n  const [merchandiseFacilitys, setMerchandiseFacilitys] = useState(\r\n    initialMerchandiseFacilityState\r\n  );\r\n  const newMerchandiseFacility = () => {\r\n    setMerchandiseFacilitys(initialMerchandiseFacilityState);\r\n    // setSubmitted(false);\r\n  };\r\n  const saveMerchandiseFacility = () => {\r\n    var data = {\r\n      MerchandiseAC: merchandiseFacilitys.MerchandiseAC,\r\n      ApprovedFacilityLimit: merchandiseFacilitys.ApprovedFacilityLimit,\r\n      StartDate: merchandiseFacilitys.StartDate,\r\n      ExpiredDate: merchandiseFacilitys.ExpiredDate,\r\n      DisbursementDate: merchandiseFacilitys.DisbursementDate,\r\n      DisbursementAmount: merchandiseFacilitys.DisbursementAmount,\r\n      DisbursementSettlementDay: merchandiseFacilitys.DisbursementSettlementDay,\r\n      ActualSettlementDays: merchandiseFacilitys.ActualSettlementDays,\r\n      TotalDisbursementInFacilityPeriod:\r\n        merchandiseFacilitys.TotalDisbursementInFacilityPeriod,\r\n    };\r\n    MerchandiseFacilityService.addMerchandiseFacility(\r\n      data,\r\n      creditFacilityUtilizitionId\r\n    )\r\n      .then((response) => {\r\n        setMerchandiseFacilitys({\r\n          Id: response.data.Id,\r\n          MerchandiseAC: response.data.MerchandiseAC,\r\n          ApprovedFacilityLimit: response.data.ApprovedFacilityLimit,\r\n          StartDate: response.data.StartDate,\r\n          ExpiredDate: response.data.ExpiredDate,\r\n          DisbursementDate: response.data.DisbursementDate,\r\n          DisbursementAmount: response.data.DisbursementAmount,\r\n          DisbursementSettlementDay: response.data.DisbursementSettlementDay,\r\n          ActualSettlementDays: response.data.ActualSettlementDays,\r\n          TotalDisbursementInFacilityPeriod:\r\n            response.data.TotalDisbursementInFacilityPeriod,\r\n        });\r\n        if (response.data.Code === 200) {\r\n          setMerchandiseFacilitys(initialMerchandiseFacilityState);\r\n          console.log(response.data);\r\n          // setHoldId(response.data.Result.Id);\r\n          MerchandiseFacility();\r\n          toast.success(\"Added successfully\", {\r\n            position: toast.POSITION.TOP_RIGHT,\r\n            toastId: \"PreshipmentFacility\",\r\n          });\r\n        }\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n  const handleDelete = (MerchandiseFacility) => {\r\n    setDeleteLoading(true);\r\n    const confirm = window.confirm(\r\n      `Are you sure you want to delete ${MerchandiseFacility.Id}?`\r\n    );\r\n    if (confirm) {\r\n      toast.success(\"Deleting\", {\r\n        position: toast.POSITION.TOP_RIGHT,\r\n        toastId: \"deletePreshipmentFacility\",\r\n      });\r\n      MerchandiseFacilityService.deleteMerchandiseFacilityById(\r\n        MerchandiseFacility.Id\r\n      )\r\n        .then(() => {\r\n          MerchandiseFacility((previousData) =>\r\n            previousData.filter((comp) => comp.Id !== MerchandiseFacility.Id)\r\n          );\r\n        })\r\n        .catch((e) => {\r\n          setMerchandiseFacilityDeleteError(e);\r\n          setDeleteLoading(false);\r\n        });\r\n    }\r\n  };\r\n  const [editMerchandiseFacility, setEditMerchandiseFacility] = useState({\r\n    //  Id: editAddresAccountDetailId,\r\n    MerchandiseAC: \"\",\r\n    ApprovedFacilityLimit: \"\",\r\n    StartDate: \"\",\r\n    ExpiredDate: \"\",\r\n    DisbursementDate: \"\",\r\n    DisbursementAmount: \"\",\r\n    DisbursementSettlementDay: \"\",\r\n    ActualSettlementDays: \"\",\r\n    TotalDisbursementInFacilityPeriod: \"\",\r\n  });\r\n\r\n  const handleInputChangeEditMerchandiseFacility = (event) => {\r\n    const { name, value } = event.target;\r\n    setEditMerchandiseFacility({\r\n      ...editMerchandiseFacility,\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  const getMerchandiseFacilityId = (editMerchandiseFacilityId) => {\r\n    MerchandiseFacilityService.getMerchandiseFacilityById(\r\n      editMerchandiseFacilityId\r\n    )\r\n      .then((res) => {\r\n        setEditMerchandiseFacility({\r\n          ...editMerchandiseFacility,\r\n          Id: editMerchandiseFacilityId,\r\n          MerchandiseAC: res.data.Result.MerchandiseAC,\r\n          ApprovedFacilityLimit: res.data.Result.ApprovedFacilityLimit,\r\n          StartDate: res.data.Result.StartDate,\r\n          ExpiredDate: res.data.Result.ExpiredDate,\r\n          DisbursementDate: res.data.Result.DisbursementDate,\r\n          DisbursementAmount: res.data.Result.DisbursementAmount,\r\n          DisbursementSettlementDay: res.data.Result.DisbursementSettlementDay,\r\n          ActualSettlementDays: res.data.Result.ActualSettlementDays,\r\n          TotalDisbursementInFacilityPeriod:\r\n            res.data.Result.TotalDisbursementInFacilityPeriod,\r\n        });\r\n      })\r\n      .catch((err) => {\r\n        if (err.response.data.StatusCode === 404) {\r\n          console.log(err.response.data.Message);\r\n        }\r\n      });\r\n  };\r\n  const updateMerchandiseFacilityById = (e) => {\r\n    e.preventDefault();\r\n    MerchandiseFacilityService.updateMerchandiseFacilityById(\r\n      merchandiseFacilityId,\r\n      editMerchandiseFacility\r\n    )\r\n      .then((response) => {\r\n        if (response.data.Code === 200) {\r\n          MerchandiseFacility();\r\n          toast.success(\"Updated successfully\", {\r\n            position: toast.POSITION.TOP_RIGHT,\r\n            toastId: \"updateCompany\",\r\n          });\r\n        }\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n  return (\r\n    <div>\r\n      <CompanyModal\r\n        isOpen={isMerchandiseFacilityModalOpen}\r\n        onClose={handleMerchandiseFacilityCloseModal}\r\n        title=\" Merchandise Facility\"\r\n      >\r\n        <div className=\"flex items-top justify-top h-screen\">\r\n          <div>\r\n            <div className=\"rounded-lg overflow-hidden overflow-x-scroll overflow-y-scroll\">\r\n              {/* <div className=\"bg-gray-100 flex items-center justify-center h-screen\"> */}\r\n              <div>\r\n                <h4 className=\"text-lg font-semibold eading-tight p-2\"></h4>\r\n                <AddMerchandiseFacility\r\n                  handleInputChangeMerchandiseFacility={\r\n                    handleInputChangeMerchandiseFacility\r\n                  }\r\n                  saveLCFacility={saveMerchandiseFacility}\r\n                  merchandiseFacilitys={merchandiseFacilitys}\r\n                  setMerchandiseFacilitys={setMerchandiseFacilitys}\r\n                />\r\n                <div>\r\n                  {error && <p className=\"text-red-500\">{error}</p>}\r\n                  {!error && merchandiseFacilityErrorLoading ? (\r\n                    <span>\r\n                      <FaSpinner\r\n                        className=\"animate-spin rounded-full h-6 w-6 text-purple-600\"\r\n                        fontSize=\"small\"\r\n                        data-toggle=\"tooltip\"\r\n                        title=\"Click it to sign in\"\r\n                      />\r\n                      Loading...\r\n                    </span>\r\n                  ) : (\r\n                    !error &&\r\n                    !merchandiseFacilityErrorLoading && (\r\n                      <div className=\"overflow-x-auto\">\r\n                        <ToastContainer />\r\n                        <table className=\"min-w-full table table-bordered table-striped bg-purple-100\">\r\n                          <thead>\r\n                            <tr className=\"bg-purple-200\">\r\n                              <th className=\"px-2 py-4 text-base\">\r\n                                {\" \"}\r\n                                Merchandise AC\r\n                              </th>\r\n                              <th className=\"px-2 py-4 text-base\">\r\n                                {\" \"}\r\n                                Approved Facility Limit\r\n                              </th>\r\n                              <th className=\"px-2 py-4 text-base\">\r\n                                {\" \"}\r\n                                Start Date\r\n                              </th>\r\n                              <th className=\"px-2 py-4 text-base\">\r\n                                {\" \"}\r\n                                Expired Date\r\n                              </th>\r\n                              <th className=\"px-2 py-4 text-base\">\r\n                                {\" \"}\r\n                                Disbursement Date{\" \"}\r\n                              </th>\r\n                              <th className=\"px-2 py-4 text-base\">\r\n                                {\" \"}\r\n                                Disbursement Amount{\" \"}\r\n                              </th>\r\n                              <th className=\"px-2 py-4 text-base\">\r\n                                {\" \"}\r\n                                Disbursement Settlement Day{\" \"}\r\n                              </th>\r\n                              <th className=\"px-2 py-4 text-base\">\r\n                                {\" \"}\r\n                                Actual Settlement Days{\" \"}\r\n                              </th>\r\n                              <th className=\"px-2 py-4 text-base\">\r\n                                {\" \"}\r\n                                Total Disbursement In Facility Period{\" \"}\r\n                              </th>\r\n                              <th className=\"px-2 py-4 text-base\"> Action </th>\r\n                            </tr>\r\n                          </thead>\r\n                          <tbody>\r\n                            {MerchandiseFacility.length === 0 ? (\r\n                              <p className=\"text-red-600 p-4\">Data not found</p>\r\n                            ) : (\r\n                              MerchandiseFacility.map(\r\n                                (merchandiseFacility, index) => (\r\n                                  <tr\r\n                                    key={index}\r\n                                    className=\"bg-white\r\n                    border-b border-purple-200\"\r\n                                  >\r\n                                    <td className=\"p-2\">\r\n                                      {merchandiseFacility.MerchandiseAC}\r\n                                    </td>\r\n                                    <td className=\"p-2\">\r\n                                      {\r\n                                        merchandiseFacility.ApprovedFacilityLimit\r\n                                      }\r\n                                    </td>\r\n                                    <td className=\"p-2\">\r\n                                      {merchandiseFacility.StartDate}\r\n                                    </td>\r\n                                    <td className=\"p-2\">\r\n                                      {merchandiseFacility.ExpiredDate}\r\n                                    </td>\r\n                                    <td className=\"p-2\">\r\n                                      {merchandiseFacility.DisbursementDate}\r\n                                    </td>\r\n                                    <td className=\"p-2\">\r\n                                      {merchandiseFacility.DisbursementAmount}\r\n                                    </td>\r\n                                    <td className=\"p-2\">\r\n                                      {\r\n                                        merchandiseFacility.DisbursementSettlementDay\r\n                                      }\r\n                                    </td>\r\n                                    <td className=\"p-2\">\r\n                                      {merchandiseFacility.ActualSettlementDays}\r\n                                    </td>\r\n                                    <td className=\"p-2\">\r\n                                      {\r\n                                        merchandiseFacility.TotalDisbursementInFacilityPeriod\r\n                                      }\r\n                                    </td>\r\n                                    <td className=\"p-2\">\r\n                                      <>\r\n                                        <LoanIconButton\r\n                                          style={{ color: \"green\" }}\r\n                                          icon={<MdModeEdit />}\r\n                                          text=\"Edit\"\r\n                                          onClick={() => {\r\n                                            handleMerchandiseFacilityEditOpenModal();\r\n                                            getMerchandiseFacilityId(\r\n                                              merchandiseFacility.Id\r\n                                            );\r\n                                            setMerchandiseFacilityId(\r\n                                              merchandiseFacility.Id\r\n                                            );\r\n                                          }}\r\n                                        />\r\n                                      </>\r\n                                      {/* <>\r\n                                        <LoanIconButton\r\n                                          style={{ color: \"red\" }}\r\n                                          text=\" Delete\"\r\n                                          onClick={() => {\r\n                                            handleDelete(merchandiseFacility);\r\n                                          }}\r\n                                        >\r\n                                          <ToastContainer />\r\n                                        </LoanIconButton>\r\n                                      </> */}\r\n                                    </td>\r\n                                  </tr>\r\n                                )\r\n                              )\r\n                            )}\r\n                          </tbody>\r\n                        </table>\r\n                      </div>\r\n                    )\r\n                  )}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </CompanyModal>\r\n      <CompanyModal\r\n        isOpen={isMerchandiseFacilityEditModalOpen}\r\n        onClose={handleMerchandiseFacilityEditCloseModal}\r\n        title=\"Modify merchandise Facility\"\r\n      >\r\n        <div>\r\n          <ToastContainer />\r\n          <form onSubmit={updateMerchandiseFacilityById}>\r\n            <div className=\"grid grid-cols-1 gap-4 submit-form\">\r\n              <div className=\"submit-form \">\r\n                <div className=\"relative center justify-center flex-1 w-full max-w-full grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\">\r\n                  <LoanTextField\r\n                    id=\"MerchandiseAC\"\r\n                    label=\"MerchandiseAC\"\r\n                    value={editMerchandiseFacility.MerchandiseAC}\r\n                    onChange={handleInputChangeEditMerchandiseFacility}\r\n                    name=\"MerchandiseAC\"\r\n                  />\r\n                  <LoanTextField\r\n                    id=\"ApprovedFacilityLimit\"\r\n                    label=\"ApprovedFacilityLimit\"\r\n                    value={editMerchandiseFacility.ApprovedFacilityLimit}\r\n                    onChange={handleInputChangeEditMerchandiseFacility}\r\n                    name=\"ApprovedFacilityLimit\"\r\n                  />\r\n                  <p>\r\n                    Start Date\r\n                    <input\r\n                      id=\"StartDate\"\r\n                      name=\"StartDate\"\r\n                      label=\"StartDate\"\r\n                      placeholder=\"StartDate\"\r\n                      type=\"date\"\r\n                      value={\r\n                        startDate.getFullYear().toString() +\r\n                        \"-\" +\r\n                        (startDate.getMonth() + 1).toString().padStart(2, 0) +\r\n                        \"-\" +\r\n                        startDate.getDate().toString().padStart(2, 0)\r\n                      }\r\n                      onChange={(e) => {\r\n                        setStartDate(new Date(e.target.value));\r\n                        editMerchandiseFacility.StartDate = startDate;\r\n                      }}\r\n                    />{\" \"}\r\n                  </p>\r\n                  <p>\r\n                    Expired Date\r\n                    <input\r\n                      id=\"ExpiredDate\"\r\n                      name=\"ExpiredDate\"\r\n                      label=\"ExpiredDate\"\r\n                      placeholder=\"ExpiredDate\"\r\n                      type=\"date\"\r\n                      value={\r\n                        expiredDate.getFullYear().toString() +\r\n                        \"-\" +\r\n                        (expiredDate.getMonth() + 1).toString().padStart(2, 0) +\r\n                        \"-\" +\r\n                        expiredDate.getDate().toString().padStart(2, 0)\r\n                      }\r\n                      onChange={(e) => {\r\n                        setExpiredDate(new Date(e.target.value));\r\n                        editMerchandiseFacility.ExpiredDate = expiredDate;\r\n                      }}\r\n                    />{\" \"}\r\n                  </p>\r\n                  <p>\r\n                    Disbursement Date\r\n                    <input\r\n                      id=\"DisbursementDate\"\r\n                      name=\"DisbursementDate\"\r\n                      label=\"DisbursementDate\"\r\n                      placeholder=\"DisbursementDate\"\r\n                      type=\"date\"\r\n                      value={\r\n                        disbursementDate.getFullYear().toString() +\r\n                        \"-\" +\r\n                        (disbursementDate.getMonth() + 1)\r\n                          .toString()\r\n                          .padStart(2, 0) +\r\n                        \"-\" +\r\n                        disbursementDate.getDate().toString().padStart(2, 0)\r\n                      }\r\n                      onChange={(e) => {\r\n                        setDisbursementDate(new Date(e.target.value));\r\n                        editMerchandiseFacility.DisbursementDate =\r\n                          disbursementDate;\r\n                      }}\r\n                    />{\" \"}\r\n                  </p>\r\n                  <LoanTextField\r\n                    id=\"DisbursementAmount\"\r\n                    label=\"DisbursementAmount\"\r\n                    value={editMerchandiseFacility.DisbursementAmount}\r\n                    onChange={handleInputChangeEditMerchandiseFacility}\r\n                    name=\"DisbursementAmount\"\r\n                  />\r\n                  <LoanTextField\r\n                    id=\"DisbursementSettlementDay\"\r\n                    label=\"DisbursementSettlementDay\"\r\n                    value={editMerchandiseFacility.DisbursementSettlementDay}\r\n                    onChange={handleInputChangeEditMerchandiseFacility}\r\n                    name=\"DisbursementSettlementDay\"\r\n                  />\r\n                  <LoanTextField\r\n                    id=\"ActualSettlementDays\"\r\n                    label=\"ActualSettlementDays\"\r\n                    value={editMerchandiseFacility.ActualSettlementDays}\r\n                    onChange={handleInputChangeEditMerchandiseFacility}\r\n                    name=\"ActualSettlementDays\"\r\n                  />\r\n                  <LoanTextField\r\n                    id=\"TotalDisbursementInFacilityPeriod\"\r\n                    label=\"TotalDisbursementInFacilityPeriod\"\r\n                    value={\r\n                      editMerchandiseFacility.TotalDisbursementInFacilityPeriod\r\n                    }\r\n                    onChange={handleInputChangeEditMerchandiseFacility}\r\n                    name=\"TotalDisbursementInFacilityPeriod\"\r\n                  />\r\n                </div>\r\n                <div className=\"flex justify-center items-center\">\r\n                  <button\r\n                    type=\"submit\"\r\n                    className=\"bg-[purple] hover:bg-purple-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline \"\r\n                  >\r\n                    Update\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </CompanyModal>\r\n    </div>\r\n  );\r\n};\r\nexport default ViewMerchandiseFacility;\r\n","C:\\Users\\CBE\\Desktop\\NewCredit\\cbe-wholesale-frontend\\src\\Components\\Enterprise\\accountDetail\\creditFacilityUtilizition\\merchandiseFacility\\AddMerchandiseFacility.jsx",["1774","1775","1776","1777","1778","1779","1780","1781","1782","1783","1784"],[],"import {\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  IconButton,\r\n} from \"@mui/material\";\r\nimport { useState, useEffect } from \"react\";\r\nimport LoanIconButton from \"../../../../Common/LoanIconButton\";\r\nimport CompanyModal from \"../../../Common/CompanyModal\";\r\nimport { RiSkipBackMiniFill } from \"react-icons/ri\";\r\nimport { BsPlus } from \"react-icons/bs\";\r\nimport { BiSkipNext, BiSkipPrevious } from \"react-icons/bi\";\r\nimport { IoRefresh } from \"react-icons/io5\";\r\nimport LoanTextField from \"../../../../Common/LoanTextField\";\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\nconst AddLCFacility = ({\r\n  submitted,\r\n  handleBack,\r\n  handleSkip,\r\n  handleNext,\r\n  saveLCFacility,\r\n  merchandiseFacilitys,\r\n  handleInputChangeMerchandiseFacility,\r\n  setLCFacilitys,\r\n}) => {\r\n  const [isMerchandiseFacilityModalOpen, setIsMerchandiseFacilityModalOpen] =\r\n    useState(false);\r\n  function handleMerchandiseFacilityOpenModal() {\r\n    setIsMerchandiseFacilityModalOpen(true);\r\n  }\r\n  function handlMerchandiseFacilityCloseModal() {\r\n    setIsMerchandiseFacilityModalOpen(false);\r\n  }\r\n  const [startDate, setStartDate] = useState(new Date());\r\n  const [expiredDate, setExpiredDate] = useState(new Date());\r\n  const [disbursementDate, setDisbursementDate] = useState(new Date());\r\n\r\n  return (\r\n    <>\r\n      <div className=\"flex\">\r\n        {/* <LoanIconButton\r\n          style={{ color: \"purple\" }}\r\n          icon={<BiSkipPrevious />}\r\n          text=\"Back\"\r\n          onClick={handlMerchandiseFacilityCloseModal}\r\n        /> */}\r\n        <LoanIconButton\r\n          style={{ color: \"purple\" }}\r\n          icon={<BsPlus />}\r\n          text=\"Add\"\r\n          onClick={handleMerchandiseFacilityOpenModal}\r\n        />\r\n        {/* <LoanIconButton\r\n          style={{ color: \"purple\" }}\r\n          icon={<BiSkipNext />}\r\n          text=\"Skip\"\r\n          onClick={handlMerchandiseFacilityCloseModal}\r\n        /> */}\r\n      </div>\r\n      <CompanyModal\r\n        isOpen={isMerchandiseFacilityModalOpen}\r\n        onClose={handlMerchandiseFacilityCloseModal}\r\n        title=\"Merchandise Facility \"\r\n      >\r\n        <div>\r\n          <ToastContainer />\r\n          <div className=\"relative center justify-center flex-1 w-full max-w-full grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\">\r\n            <LoanTextField\r\n              id=\"MerchandiseAC\"\r\n              label=\"MerchandiseAC\"\r\n              value={merchandiseFacilitys.MerchandiseAC}\r\n              onChange={handleInputChangeMerchandiseFacility}\r\n              name=\"MerchandiseAC\"\r\n            />\r\n            <LoanTextField\r\n              id=\"ApprovedFacilityLimit\"\r\n              label=\"ApprovedFacilityLimit\"\r\n              value={merchandiseFacilitys.ApprovedFacilityLimit}\r\n              onChange={handleInputChangeMerchandiseFacility}\r\n              name=\"ApprovedFacilityLimit\"\r\n            />\r\n            <p>\r\n              Start Date\r\n              <input\r\n                id=\"StartDate\"\r\n                name=\"StartDate\"\r\n                label=\"StartDate\"\r\n                placeholder=\"StartDate\"\r\n                type=\"date\"\r\n                value={\r\n                  startDate.getFullYear().toString() +\r\n                  \"-\" +\r\n                  (startDate.getMonth() + 1).toString().padStart(2, 0) +\r\n                  \"-\" +\r\n                  startDate.getDate().toString().padStart(2, 0)\r\n                }\r\n                onChange={(e) => {\r\n                  setStartDate(new Date(e.target.value));\r\n                  merchandiseFacilitys.StartDate = startDate;\r\n                }}\r\n              />{\" \"}\r\n            </p>\r\n            <p>\r\n              Expired Date\r\n              <input\r\n                id=\"ExpiredDate\"\r\n                name=\"ExpiredDate\"\r\n                label=\"ExpiredDate\"\r\n                placeholder=\"ExpiredDate\"\r\n                type=\"date\"\r\n                value={\r\n                  expiredDate.getFullYear().toString() +\r\n                  \"-\" +\r\n                  (expiredDate.getMonth() + 1).toString().padStart(2, 0) +\r\n                  \"-\" +\r\n                  expiredDate.getDate().toString().padStart(2, 0)\r\n                }\r\n                onChange={(e) => {\r\n                  setExpiredDate(new Date(e.target.value));\r\n                  merchandiseFacilitys.ExpiredDate = expiredDate;\r\n                }}\r\n              />{\" \"}\r\n            </p>\r\n            <p>\r\n              Disbursement Date\r\n              <input\r\n                id=\"DisbursementDate\"\r\n                name=\"DisbursementDate\"\r\n                label=\"DisbursementDate\"\r\n                placeholder=\"DisbursementDate\"\r\n                type=\"date\"\r\n                value={\r\n                  disbursementDate.getFullYear().toString() +\r\n                  \"-\" +\r\n                  (disbursementDate.getMonth() + 1).toString().padStart(2, 0) +\r\n                  \"-\" +\r\n                  disbursementDate.getDate().toString().padStart(2, 0)\r\n                }\r\n                onChange={(e) => {\r\n                  setDisbursementDate(new Date(e.target.value));\r\n                  merchandiseFacilitys.DisbursementDate = disbursementDate;\r\n                }}\r\n              />{\" \"}\r\n            </p>\r\n            <LoanTextField\r\n              id=\"DisbursementAmount\"\r\n              label=\"DisbursementAmount\"\r\n              value={merchandiseFacilitys.DisbursementAmount}\r\n              onChange={handleInputChangeMerchandiseFacility}\r\n              name=\"DisbursementAmount\"\r\n            />\r\n            <LoanTextField\r\n              id=\"DisbursementSettlementDay\"\r\n              label=\"DisbursementSettlementDay\"\r\n              value={merchandiseFacilitys.DisbursementSettlementDay}\r\n              onChange={handleInputChangeMerchandiseFacility}\r\n              name=\"DisbursementSettlementDay\"\r\n            />\r\n            <LoanTextField\r\n              id=\"ActualSettlementDays\"\r\n              label=\"ActualSettlementDays\"\r\n              value={merchandiseFacilitys.ActualSettlementDays}\r\n              onChange={handleInputChangeMerchandiseFacility}\r\n              name=\"ActualSettlementDays\"\r\n            />\r\n            <LoanTextField\r\n              id=\"TotalDisbursementInFacilityPeriod\"\r\n              label=\"TotalDisbursementInFacilityPeriod\"\r\n              value={merchandiseFacilitys.TotalDisbursementInFacilityPeriod}\r\n              onChange={handleInputChangeMerchandiseFacility}\r\n              name=\"TotalDisbursementInFacilityPeriod\"\r\n            />\r\n          </div>\r\n          <div className=\"flex justify-center p-2 pt-5\">\r\n            <button\r\n              className=\"bg-[purple] hover:bg-purple-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\"\r\n              onClick={() => {\r\n                saveLCFacility();\r\n              }}\r\n            >\r\n              Save\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </CompanyModal>\r\n    </>\r\n  );\r\n};\r\nexport default AddLCFacility;\r\n","C:\\Users\\CBE\\Desktop\\dynamic\\src\\index.js",[],[],["1785"],"C:\\Users\\CBE\\Desktop\\dynamic\\src\\App.js",[],[],"C:\\Users\\CBE\\Desktop\\dynamic\\src\\Components\\Home.jsx",["1786","1787","1788","1789","1790","1791","1792","1793","1794"],[],"import { useState, useEffect } from \"react\";\r\nimport {\r\n  TextField,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n} from \"@mui/material\";\r\nimport { BiSkipNext } from \"react-icons/bi\";\r\nimport { Link } from \"react-router-dom\";\r\nimport two from \"./Images/two.jfif\";\r\nimport three from \"./Images/4.jfif\";\r\nimport four from \"./Images/5.jfif\";\r\nimport six from \"./Images/six.jfif\";\r\nimport cc from \"./Images/cc.webp\";\r\nconst Home = () => {\r\n  return (\r\n    <div className=\"grid grid-cols-1 divide-x indent-[5%]  divide-blue-200 mx-w-[1240px] mx-auto grid gap-1 ease-in-out px-4\">\r\n      <div className=\"bg border-r-green-100 border-color: rgb(214 211 209)\">\r\n        <h1 className=\"bg bg-red-300\">Dynamic pricing </h1>\r\n        <h2 className=\"\">\r\n          Dynamic price optimization is the process of offering products at\r\n          various prices that adjust according to market conditions. Pricing on\r\n          products and services are dynamically changed based on competitive\r\n          pricing, supply & demand, sales requirements, and conversion rates.\r\n        </h2>\r\n        <h3>\r\n          so we are working the two Ethiopian company called Ubuy And Jiji.\r\n        </h3>\r\n        <div className=\"grid grid-cols-2 divide-x indent-[5%]  divide-blue-200 mx-w-[1240px] mx-auto grid gap-1 ease-in-out px-4\">\r\n          <div>\r\n            <Link\r\n              className=\"btn btn-info btn-lg bg-green-400 max-lg border-double border-4 border-indigo-600\"\r\n              to=\"/dynamic\"\r\n            >\r\n              UBUY Estimated Cost\r\n            </Link>\r\n          </div>\r\n          <div>\r\n            <Link className=\" bg-green-400 border-double border-4 border-indigo-600\" to=\"/dynamicJiji\">\r\n              JIJI Estimated Cost\r\n            </Link>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      {}\r\n      <div className=\"grid grid-cols-2\">\r\n        <div>\r\n          <img\r\n            src={two}\r\n            alt=\"unable to display cbe logo\"\r\n            className=\"w-[200px] h-[200px]\"\r\n          />\r\n          <img\r\n            src={cc}\r\n            alt=\"unable to display cbe logo\"\r\n            className=\"w-[200px] h-[200px]\"\r\n          />\r\n        </div>\r\n        <div>\r\n          <img\r\n            src={three}\r\n            alt=\"unable to display cbe logo\"\r\n            className=\"w-[200px] h-[200px]\"\r\n          />\r\n          <img\r\n            src={four}\r\n            alt=\"unable to display cbe logo\"\r\n            className=\"w-[200px] h-[200px]\"\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default Home;\r\n","C:\\Users\\CBE\\Desktop\\dynamic\\src\\Components\\DynamicPricingUbuy.jsx",["1795","1796","1797","1798","1799","1800","1801","1802","1803","1804","1805","1806","1807","1808","1809","1810","1811","1812","1813","1814","1815","1816","1817","1818","1819","1820","1821","1822","1823","1824","1825","1826","1827","1828","1829","1830","1831","1832","1833","1834","1835","1836","1837","1838","1839","1840","1841","1842","1843","1844","1845","1846","1847","1848","1849","1850","1851","1852","1853","1854","1855"],[],"C:\\Users\\CBE\\Desktop\\dynamic\\src\\Components\\DynamicPricingJiji.jsx",["1856","1857","1858","1859","1860","1861","1862","1863","1864","1865","1866","1867","1868","1869","1870","1871","1872","1873","1874","1875","1876","1877","1878","1879","1880","1881","1882","1883","1884","1885","1886","1887","1888","1889","1890","1891","1892","1893","1894","1895","1896","1897","1898","1899","1900","1901","1902","1903","1904","1905","1906","1907","1908","1909","1910","1911","1912","1913","1914"],[],"C:\\Users\\CBE\\Desktop\\dynamic\\src\\Components\\Navbar\\Navbar.jsx",[],[],{"ruleId":"1915","severity":1,"message":"1916","line":2,"column":8,"nodeType":"1917","messageId":"1918","endLine":2,"endColumn":24},{"ruleId":"1915","severity":1,"message":"1919","line":10,"column":12,"nodeType":"1917","messageId":"1918","endLine":10,"endColumn":16},{"ruleId":"1915","severity":1,"message":"1920","line":10,"column":18,"nodeType":"1917","messageId":"1918","endLine":10,"endColumn":25},{"ruleId":"1915","severity":1,"message":"1921","line":19,"column":12,"nodeType":"1917","messageId":"1918","endLine":19,"endColumn":19},{"ruleId":"1915","severity":1,"message":"1922","line":19,"column":21,"nodeType":"1917","messageId":"1918","endLine":19,"endColumn":31},{"ruleId":"1915","severity":1,"message":"1923","line":4,"column":8,"nodeType":"1917","messageId":"1918","endLine":4,"endColumn":24},{"ruleId":"1915","severity":1,"message":"1924","line":16,"column":10,"nodeType":"1917","messageId":"1918","endLine":16,"endColumn":12},{"ruleId":"1915","severity":1,"message":"1925","line":16,"column":14,"nodeType":"1917","messageId":"1918","endLine":16,"endColumn":19},{"ruleId":"1926","severity":1,"message":"1927","line":14,"column":107,"nodeType":"1928","messageId":"1929","endLine":14,"endColumn":109},{"ruleId":"1915","severity":1,"message":"1930","line":17,"column":41,"nodeType":"1917","messageId":"1918","endLine":17,"endColumn":71},{"ruleId":"1915","severity":1,"message":"1931","line":18,"column":40,"nodeType":"1917","messageId":"1918","endLine":18,"endColumn":69},{"ruleId":"1915","severity":1,"message":"1932","line":19,"column":30,"nodeType":"1917","messageId":"1918","endLine":19,"endColumn":49},{"ruleId":"1915","severity":1,"message":"1933","line":25,"column":14,"nodeType":"1917","messageId":"1918","endLine":25,"endColumn":36},{"ruleId":"1915","severity":1,"message":"1934","line":33,"column":14,"nodeType":"1917","messageId":"1918","endLine":33,"endColumn":29},{"ruleId":"1926","severity":1,"message":"1927","line":59,"column":84,"nodeType":"1928","messageId":"1929","endLine":59,"endColumn":86},{"ruleId":"1926","severity":1,"message":"1927","line":95,"column":84,"nodeType":"1928","messageId":"1929","endLine":95,"endColumn":86},{"ruleId":"1926","severity":1,"message":"1927","line":13,"column":107,"nodeType":"1928","messageId":"1929","endLine":13,"endColumn":109},{"ruleId":"1926","severity":1,"message":"1927","line":57,"column":88,"nodeType":"1928","messageId":"1929","endLine":57,"endColumn":90},{"ruleId":"1926","severity":1,"message":"1927","line":67,"column":88,"nodeType":"1928","messageId":"1929","endLine":67,"endColumn":90},{"ruleId":"1926","severity":1,"message":"1927","line":67,"column":166,"nodeType":"1928","messageId":"1929","endLine":67,"endColumn":168},{"ruleId":"1926","severity":1,"message":"1927","line":91,"column":84,"nodeType":"1928","messageId":"1929","endLine":91,"endColumn":86},{"ruleId":"1926","severity":1,"message":"1927","line":91,"column":162,"nodeType":"1928","messageId":"1929","endLine":91,"endColumn":164},{"ruleId":"1915","severity":1,"message":"1935","line":6,"column":3,"nodeType":"1917","messageId":"1918","endLine":6,"endColumn":11},{"ruleId":"1915","severity":1,"message":"1936","line":8,"column":10,"nodeType":"1917","messageId":"1918","endLine":8,"endColumn":27},{"ruleId":"1915","severity":1,"message":"1937","line":16,"column":10,"nodeType":"1917","messageId":"1918","endLine":16,"endColumn":14},{"ruleId":"1915","severity":1,"message":"1938","line":16,"column":16,"nodeType":"1917","messageId":"1918","endLine":16,"endColumn":24},{"ruleId":"1915","severity":1,"message":"1939","line":18,"column":8,"nodeType":"1917","messageId":"1918","endLine":18,"endColumn":13},{"ruleId":"1915","severity":1,"message":"1940","line":26,"column":10,"nodeType":"1917","messageId":"1918","endLine":26,"endColumn":22},{"ruleId":"1915","severity":1,"message":"1941","line":29,"column":10,"nodeType":"1917","messageId":"1918","endLine":29,"endColumn":17},{"ruleId":"1915","severity":1,"message":"1942","line":30,"column":10,"nodeType":"1917","messageId":"1918","endLine":30,"endColumn":23},{"ruleId":"1915","severity":1,"message":"1924","line":33,"column":11,"nodeType":"1917","messageId":"1918","endLine":33,"endColumn":13},{"ruleId":"1915","severity":1,"message":"1943","line":48,"column":10,"nodeType":"1917","messageId":"1918","endLine":48,"endColumn":23},{"ruleId":"1915","severity":1,"message":"1944","line":49,"column":10,"nodeType":"1917","messageId":"1918","endLine":49,"endColumn":27},{"ruleId":"1915","severity":1,"message":"1945","line":50,"column":10,"nodeType":"1917","messageId":"1918","endLine":50,"endColumn":34},{"ruleId":"1915","severity":1,"message":"1946","line":50,"column":36,"nodeType":"1917","messageId":"1918","endLine":50,"endColumn":63},{"ruleId":"1915","severity":1,"message":"1947","line":61,"column":10,"nodeType":"1917","messageId":"1918","endLine":61,"endColumn":19},{"ruleId":"1948","severity":1,"message":"1949","line":236,"column":6,"nodeType":"1950","endLine":236,"endColumn":8,"suggestions":"1951"},{"ruleId":"1915","severity":1,"message":"1952","line":238,"column":10,"nodeType":"1917","messageId":"1918","endLine":238,"endColumn":27},{"ruleId":"1915","severity":1,"message":"1953","line":439,"column":10,"nodeType":"1917","messageId":"1918","endLine":439,"endColumn":17},{"ruleId":"1915","severity":1,"message":"1954","line":441,"column":10,"nodeType":"1917","messageId":"1918","endLine":441,"endColumn":22},{"ruleId":"1915","severity":1,"message":"1955","line":441,"column":24,"nodeType":"1917","messageId":"1918","endLine":441,"endColumn":39},{"ruleId":"1915","severity":1,"message":"1956","line":458,"column":10,"nodeType":"1917","messageId":"1918","endLine":458,"endColumn":22},{"ruleId":"1915","severity":1,"message":"1957","line":458,"column":24,"nodeType":"1917","messageId":"1918","endLine":458,"endColumn":39},{"ruleId":"1915","severity":1,"message":"1958","line":471,"column":10,"nodeType":"1917","messageId":"1918","endLine":471,"endColumn":31},{"ruleId":"1948","severity":1,"message":"1959","line":595,"column":6,"nodeType":"1950","endLine":595,"endColumn":8,"suggestions":"1960"},{"ruleId":"1948","severity":1,"message":"1961","line":611,"column":6,"nodeType":"1950","endLine":611,"endColumn":8,"suggestions":"1962"},{"ruleId":"1948","severity":1,"message":"1963","line":633,"column":6,"nodeType":"1950","endLine":633,"endColumn":8,"suggestions":"1964"},{"ruleId":"1948","severity":1,"message":"1965","line":646,"column":6,"nodeType":"1950","endLine":646,"endColumn":8,"suggestions":"1966"},{"ruleId":"1948","severity":1,"message":"1967","line":670,"column":6,"nodeType":"1950","endLine":670,"endColumn":8,"suggestions":"1968"},{"ruleId":"1948","severity":1,"message":"1969","line":683,"column":6,"nodeType":"1950","endLine":683,"endColumn":8,"suggestions":"1970"},{"ruleId":"1948","severity":1,"message":"1971","line":708,"column":6,"nodeType":"1950","endLine":708,"endColumn":8,"suggestions":"1972"},{"ruleId":"1948","severity":1,"message":"1973","line":724,"column":6,"nodeType":"1950","endLine":724,"endColumn":8,"suggestions":"1974"},{"ruleId":"1948","severity":1,"message":"1975","line":747,"column":6,"nodeType":"1950","endLine":747,"endColumn":8,"suggestions":"1976"},{"ruleId":"1948","severity":1,"message":"1977","line":766,"column":6,"nodeType":"1950","endLine":766,"endColumn":8,"suggestions":"1978"},{"ruleId":"1948","severity":1,"message":"1975","line":788,"column":6,"nodeType":"1950","endLine":788,"endColumn":8,"suggestions":"1979"},{"ruleId":"1948","severity":1,"message":"1980","line":804,"column":6,"nodeType":"1950","endLine":804,"endColumn":8,"suggestions":"1981"},{"ruleId":"1948","severity":1,"message":"1982","line":828,"column":6,"nodeType":"1950","endLine":828,"endColumn":8,"suggestions":"1983"},{"ruleId":"1948","severity":1,"message":"1984","line":842,"column":6,"nodeType":"1950","endLine":842,"endColumn":8,"suggestions":"1985"},{"ruleId":"1986","severity":1,"message":"1987","line":847,"column":12,"nodeType":"1917","messageId":"1988","endLine":847,"endColumn":35},{"ruleId":"1915","severity":1,"message":"1989","line":850,"column":10,"nodeType":"1917","messageId":"1918","endLine":850,"endColumn":32},{"ruleId":"1915","severity":1,"message":"1990","line":850,"column":34,"nodeType":"1917","messageId":"1918","endLine":850,"endColumn":59},{"ruleId":"1948","severity":1,"message":"1991","line":996,"column":6,"nodeType":"1950","endLine":996,"endColumn":8,"suggestions":"1992"},{"ruleId":"1948","severity":1,"message":"1993","line":1009,"column":6,"nodeType":"1950","endLine":1009,"endColumn":8,"suggestions":"1994"},{"ruleId":"1915","severity":1,"message":"1995","line":1108,"column":9,"nodeType":"1917","messageId":"1918","endLine":1108,"endColumn":27},{"ruleId":"1948","severity":1,"message":"1991","line":1133,"column":6,"nodeType":"1950","endLine":1133,"endColumn":8,"suggestions":"1996"},{"ruleId":"1948","severity":1,"message":"1997","line":1146,"column":6,"nodeType":"1950","endLine":1146,"endColumn":8,"suggestions":"1998"},{"ruleId":"1915","severity":1,"message":"1999","line":1160,"column":9,"nodeType":"1917","messageId":"1918","endLine":1160,"endColumn":26},{"ruleId":"1948","severity":1,"message":"1963","line":1179,"column":6,"nodeType":"1950","endLine":1179,"endColumn":8,"suggestions":"2000"},{"ruleId":"1948","severity":1,"message":"2001","line":1192,"column":6,"nodeType":"1950","endLine":1192,"endColumn":8,"suggestions":"2002"},{"ruleId":"1915","severity":1,"message":"2003","line":1281,"column":9,"nodeType":"1917","messageId":"1918","endLine":1281,"endColumn":28},{"ruleId":"1948","severity":1,"message":"1963","line":1300,"column":6,"nodeType":"1950","endLine":1300,"endColumn":8,"suggestions":"2004"},{"ruleId":"1948","severity":1,"message":"2005","line":1313,"column":6,"nodeType":"1950","endLine":1313,"endColumn":8,"suggestions":"2006"},{"ruleId":"1915","severity":1,"message":"2007","line":1327,"column":9,"nodeType":"1917","messageId":"1918","endLine":1327,"endColumn":34},{"ruleId":"1948","severity":1,"message":"2008","line":1427,"column":6,"nodeType":"1950","endLine":1427,"endColumn":8,"suggestions":"2009"},{"ruleId":"1948","severity":1,"message":"2010","line":1500,"column":6,"nodeType":"1950","endLine":1500,"endColumn":8,"suggestions":"2011"},{"ruleId":"1915","severity":1,"message":"2012","line":1509,"column":32,"nodeType":"1917","messageId":"1918","endLine":1509,"endColumn":55},{"ruleId":"1986","severity":1,"message":"1987","line":1528,"column":12,"nodeType":"1917","messageId":"1988","endLine":1528,"endColumn":35},{"ruleId":"1986","severity":1,"message":"2013","line":1535,"column":12,"nodeType":"1917","messageId":"1988","endLine":1535,"endColumn":60},{"ruleId":"1986","severity":1,"message":"2014","line":1538,"column":12,"nodeType":"1917","messageId":"1988","endLine":1538,"endColumn":61},{"ruleId":"1948","severity":1,"message":"2015","line":1766,"column":6,"nodeType":"1950","endLine":1766,"endColumn":8,"suggestions":"2016"},{"ruleId":"1915","severity":1,"message":"2017","line":1980,"column":23,"nodeType":"1917","messageId":"1918","endLine":1980,"endColumn":37},{"ruleId":"1915","severity":1,"message":"2018","line":2009,"column":10,"nodeType":"1917","messageId":"1918","endLine":2009,"endColumn":14},{"ruleId":"1915","severity":1,"message":"2019","line":2009,"column":16,"nodeType":"1917","messageId":"1918","endLine":2009,"endColumn":23},{"ruleId":"1915","severity":1,"message":"2020","line":2010,"column":10,"nodeType":"1917","messageId":"1918","endLine":2010,"endColumn":15},{"ruleId":"1915","severity":1,"message":"2021","line":2010,"column":17,"nodeType":"1917","messageId":"1918","endLine":2010,"endColumn":25},{"ruleId":"1915","severity":1,"message":"2022","line":2011,"column":10,"nodeType":"1917","messageId":"1918","endLine":2011,"endColumn":21},{"ruleId":"1915","severity":1,"message":"2023","line":2011,"column":23,"nodeType":"1917","messageId":"1918","endLine":2011,"endColumn":37},{"ruleId":"1915","severity":1,"message":"2024","line":2012,"column":10,"nodeType":"1917","messageId":"1918","endLine":2012,"endColumn":23},{"ruleId":"1915","severity":1,"message":"2025","line":2017,"column":22,"nodeType":"1917","messageId":"1918","endLine":2017,"endColumn":35},{"ruleId":"1915","severity":1,"message":"2026","line":2020,"column":10,"nodeType":"1917","messageId":"1918","endLine":2020,"endColumn":27},{"ruleId":"1915","severity":1,"message":"2027","line":2022,"column":10,"nodeType":"1917","messageId":"1918","endLine":2022,"endColumn":29},{"ruleId":"1915","severity":1,"message":"2028","line":2026,"column":10,"nodeType":"1917","messageId":"1918","endLine":2026,"endColumn":19},{"ruleId":"1915","severity":1,"message":"2029","line":2041,"column":12,"nodeType":"1917","messageId":"1918","endLine":2041,"endColumn":58},{"ruleId":"1915","severity":1,"message":"2030","line":2055,"column":12,"nodeType":"1917","messageId":"1918","endLine":2055,"endColumn":57},{"ruleId":"1915","severity":1,"message":"2031","line":2069,"column":12,"nodeType":"1917","messageId":"1918","endLine":2069,"endColumn":59},{"ruleId":"1915","severity":1,"message":"2032","line":2084,"column":12,"nodeType":"1917","messageId":"1918","endLine":2084,"endColumn":57},{"ruleId":"1915","severity":1,"message":"2033","line":2121,"column":5,"nodeType":"1917","messageId":"1918","endLine":2121,"endColumn":48},{"ruleId":"1915","severity":1,"message":"2034","line":2122,"column":5,"nodeType":"1917","messageId":"1918","endLine":2122,"endColumn":51},{"ruleId":"1986","severity":1,"message":"1987","line":2136,"column":12,"nodeType":"1917","messageId":"1988","endLine":2136,"endColumn":35},{"ruleId":"1986","severity":1,"message":"1987","line":2141,"column":12,"nodeType":"1917","messageId":"1988","endLine":2141,"endColumn":35},{"ruleId":"1986","severity":1,"message":"1987","line":2147,"column":12,"nodeType":"1917","messageId":"1988","endLine":2147,"endColumn":35},{"ruleId":"1986","severity":1,"message":"1987","line":2154,"column":12,"nodeType":"1917","messageId":"1988","endLine":2154,"endColumn":35},{"ruleId":"1986","severity":1,"message":"1987","line":2161,"column":12,"nodeType":"1917","messageId":"1988","endLine":2161,"endColumn":35},{"ruleId":"1986","severity":1,"message":"1987","line":2169,"column":12,"nodeType":"1917","messageId":"1988","endLine":2169,"endColumn":35},{"ruleId":"1986","severity":1,"message":"1987","line":2174,"column":12,"nodeType":"1917","messageId":"1988","endLine":2174,"endColumn":35},{"ruleId":"1986","severity":1,"message":"1987","line":2179,"column":12,"nodeType":"1917","messageId":"1988","endLine":2179,"endColumn":35},{"ruleId":"1986","severity":1,"message":"1987","line":2185,"column":12,"nodeType":"1917","messageId":"1988","endLine":2185,"endColumn":35},{"ruleId":"1986","severity":1,"message":"1987","line":2193,"column":12,"nodeType":"1917","messageId":"1988","endLine":2193,"endColumn":35},{"ruleId":"1986","severity":1,"message":"1987","line":2196,"column":12,"nodeType":"1917","messageId":"1988","endLine":2196,"endColumn":35},{"ruleId":"1986","severity":1,"message":"1987","line":2199,"column":12,"nodeType":"1917","messageId":"1988","endLine":2199,"endColumn":35},{"ruleId":"1986","severity":1,"message":"1987","line":2203,"column":12,"nodeType":"1917","messageId":"1988","endLine":2203,"endColumn":35},{"ruleId":"1915","severity":1,"message":"2035","line":2267,"column":12,"nodeType":"1917","messageId":"1918","endLine":2267,"endColumn":37},{"ruleId":"1915","severity":1,"message":"2036","line":2270,"column":12,"nodeType":"1917","messageId":"1918","endLine":2270,"endColumn":38},{"ruleId":"1915","severity":1,"message":"2037","line":2289,"column":12,"nodeType":"1917","messageId":"1918","endLine":2289,"endColumn":53},{"ruleId":"1915","severity":1,"message":"2038","line":2297,"column":12,"nodeType":"1917","messageId":"1918","endLine":2297,"endColumn":68},{"ruleId":"1986","severity":1,"message":"2039","line":2354,"column":12,"nodeType":"1917","messageId":"1988","endLine":2354,"endColumn":34},{"ruleId":"1915","severity":1,"message":"2040","line":2658,"column":9,"nodeType":"1917","messageId":"1918","endLine":2658,"endColumn":28},{"ruleId":"1915","severity":1,"message":"2041","line":2810,"column":9,"nodeType":"1917","messageId":"1918","endLine":2810,"endColumn":21},{"ruleId":"1915","severity":1,"message":"2042","line":2907,"column":9,"nodeType":"1917","messageId":"1918","endLine":2907,"endColumn":34},{"ruleId":"1915","severity":1,"message":"2043","line":2968,"column":9,"nodeType":"1917","messageId":"1918","endLine":2968,"endColumn":21},{"ruleId":"1915","severity":1,"message":"2044","line":2975,"column":9,"nodeType":"1917","messageId":"1918","endLine":2975,"endColumn":29},{"ruleId":"1948","severity":1,"message":"2010","line":3058,"column":6,"nodeType":"1950","endLine":3058,"endColumn":8,"suggestions":"2045"},{"ruleId":"1948","severity":1,"message":"2010","line":3077,"column":6,"nodeType":"1950","endLine":3077,"endColumn":8,"suggestions":"2046"},{"ruleId":"1926","severity":1,"message":"1927","line":3113,"column":23,"nodeType":"1928","messageId":"1929","endLine":3113,"endColumn":25},{"ruleId":"1926","severity":1,"message":"1927","line":3116,"column":30,"nodeType":"1928","messageId":"1929","endLine":3116,"endColumn":32},{"ruleId":"1926","severity":1,"message":"1927","line":3119,"column":30,"nodeType":"1928","messageId":"1929","endLine":3119,"endColumn":32},{"ruleId":"1926","severity":1,"message":"1927","line":3122,"column":30,"nodeType":"1928","messageId":"1929","endLine":3122,"endColumn":32},{"ruleId":"1948","severity":1,"message":"2047","line":3131,"column":6,"nodeType":"1950","endLine":3131,"endColumn":8,"suggestions":"2048"},{"ruleId":"2049","severity":1,"message":"2050","line":3182,"column":11,"nodeType":"2051","endLine":3189,"endColumn":13},{"ruleId":"1915","severity":1,"message":"2052","line":2,"column":5,"nodeType":"1917","messageId":"1918","endLine":2,"endColumn":11},{"ruleId":"1915","severity":1,"message":"2053","line":4,"column":5,"nodeType":"1917","messageId":"1918","endLine":4,"endColumn":14},{"ruleId":"1915","severity":1,"message":"2054","line":5,"column":5,"nodeType":"1917","messageId":"1918","endLine":5,"endColumn":25},{"ruleId":"1915","severity":1,"message":"2055","line":129,"column":7,"nodeType":"1917","messageId":"1918","endLine":129,"endColumn":25},{"ruleId":"1915","severity":1,"message":"1937","line":3,"column":10,"nodeType":"1917","messageId":"1918","endLine":3,"endColumn":14},{"ruleId":"1915","severity":1,"message":"2056","line":15,"column":11,"nodeType":"1917","messageId":"1918","endLine":15,"endColumn":27},{"ruleId":"2057","severity":1,"message":"2058","line":18,"column":176,"nodeType":"2059","messageId":"1929","endLine":18,"endColumn":185},{"ruleId":"1915","severity":1,"message":"2060","line":14,"column":10,"nodeType":"1917","messageId":"1918","endLine":14,"endColumn":19},{"ruleId":"1915","severity":1,"message":"2061","line":72,"column":10,"nodeType":"1917","messageId":"1918","endLine":72,"endColumn":28},{"ruleId":"1948","severity":1,"message":"1967","line":115,"column":6,"nodeType":"1950","endLine":115,"endColumn":8,"suggestions":"2062"},{"ruleId":"1948","severity":1,"message":"1969","line":157,"column":6,"nodeType":"1950","endLine":157,"endColumn":8,"suggestions":"2063"},{"ruleId":"1948","severity":1,"message":"2064","line":170,"column":6,"nodeType":"1950","endLine":170,"endColumn":8,"suggestions":"2065"},{"ruleId":"1915","severity":1,"message":"1937","line":3,"column":10,"nodeType":"1917","messageId":"1918","endLine":3,"endColumn":14},{"ruleId":"1915","severity":1,"message":"2056","line":15,"column":9,"nodeType":"1917","messageId":"1918","endLine":15,"endColumn":25},{"ruleId":"2066","replacedBy":"2067"},{"ruleId":"1915","severity":1,"message":"2068","line":6,"column":10,"nodeType":"1917","messageId":"1918","endLine":6,"endColumn":14},{"ruleId":"1915","severity":1,"message":"2069","line":5,"column":8,"nodeType":"1917","messageId":"1918","endLine":5,"endColumn":23},{"ruleId":"1915","severity":1,"message":"1924","line":15,"column":10,"nodeType":"1917","messageId":"1918","endLine":15,"endColumn":12},{"ruleId":"1915","severity":1,"message":"1925","line":15,"column":14,"nodeType":"1917","messageId":"1918","endLine":15,"endColumn":19},{"ruleId":"1915","severity":1,"message":"2070","line":18,"column":10,"nodeType":"1917","messageId":"1918","endLine":18,"endColumn":24},{"ruleId":"1915","severity":1,"message":"2071","line":18,"column":26,"nodeType":"1917","messageId":"1918","endLine":18,"endColumn":43},{"ruleId":"2049","severity":1,"message":"2050","line":148,"column":15,"nodeType":"2051","endLine":148,"endColumn":63},{"ruleId":"1926","severity":1,"message":"1927","line":13,"column":107,"nodeType":"1928","messageId":"1929","endLine":13,"endColumn":109},{"ruleId":"1926","severity":1,"message":"1927","line":57,"column":88,"nodeType":"1928","messageId":"1929","endLine":57,"endColumn":90},{"ruleId":"1926","severity":1,"message":"1927","line":67,"column":88,"nodeType":"1928","messageId":"1929","endLine":67,"endColumn":90},{"ruleId":"1926","severity":1,"message":"1927","line":67,"column":166,"nodeType":"1928","messageId":"1929","endLine":67,"endColumn":168},{"ruleId":"1926","severity":1,"message":"1927","line":91,"column":84,"nodeType":"1928","messageId":"1929","endLine":91,"endColumn":86},{"ruleId":"1926","severity":1,"message":"1927","line":91,"column":162,"nodeType":"1928","messageId":"1929","endLine":91,"endColumn":164},{"ruleId":"1926","severity":1,"message":"1927","line":14,"column":107,"nodeType":"1928","messageId":"1929","endLine":14,"endColumn":109},{"ruleId":"1915","severity":1,"message":"1930","line":17,"column":41,"nodeType":"1917","messageId":"1918","endLine":17,"endColumn":71},{"ruleId":"1915","severity":1,"message":"1931","line":18,"column":40,"nodeType":"1917","messageId":"1918","endLine":18,"endColumn":69},{"ruleId":"1915","severity":1,"message":"1932","line":19,"column":30,"nodeType":"1917","messageId":"1918","endLine":19,"endColumn":49},{"ruleId":"1915","severity":1,"message":"1933","line":25,"column":14,"nodeType":"1917","messageId":"1918","endLine":25,"endColumn":36},{"ruleId":"1915","severity":1,"message":"1934","line":33,"column":14,"nodeType":"1917","messageId":"1918","endLine":33,"endColumn":29},{"ruleId":"1926","severity":1,"message":"1927","line":59,"column":84,"nodeType":"1928","messageId":"1929","endLine":59,"endColumn":86},{"ruleId":"1926","severity":1,"message":"1927","line":95,"column":84,"nodeType":"1928","messageId":"1929","endLine":95,"endColumn":86},{"ruleId":"1915","severity":1,"message":"2072","line":19,"column":10,"nodeType":"1917","messageId":"1918","endLine":19,"endColumn":17},{"ruleId":"1915","severity":1,"message":"2073","line":20,"column":10,"nodeType":"1917","messageId":"1918","endLine":20,"endColumn":23},{"ruleId":"1915","severity":1,"message":"2025","line":25,"column":22,"nodeType":"1917","messageId":"1918","endLine":25,"endColumn":35},{"ruleId":"1915","severity":1,"message":"2074","line":26,"column":10,"nodeType":"1917","messageId":"1918","endLine":26,"endColumn":16},{"ruleId":"1915","severity":1,"message":"2075","line":27,"column":25,"nodeType":"1917","messageId":"1918","endLine":27,"endColumn":41},{"ruleId":"1915","severity":1,"message":"2076","line":28,"column":10,"nodeType":"1917","messageId":"1918","endLine":28,"endColumn":28},{"ruleId":"1915","severity":1,"message":"1937","line":3,"column":10,"nodeType":"1917","messageId":"1918","endLine":3,"endColumn":14},{"ruleId":"1915","severity":1,"message":"2056","line":15,"column":11,"nodeType":"1917","messageId":"1918","endLine":15,"endColumn":27},{"ruleId":"1915","severity":1,"message":"2077","line":2,"column":27,"nodeType":"1917","messageId":"1918","endLine":2,"endColumn":33},{"ruleId":"1915","severity":1,"message":"2078","line":2,"column":35,"nodeType":"1917","messageId":"1918","endLine":2,"endColumn":40},{"ruleId":"1915","severity":1,"message":"2079","line":2,"column":42,"nodeType":"1917","messageId":"1918","endLine":2,"endColumn":48},{"ruleId":"1915","severity":1,"message":"2080","line":5,"column":10,"nodeType":"1917","messageId":"1918","endLine":5,"endColumn":14},{"ruleId":"1915","severity":1,"message":"2081","line":10,"column":8,"nodeType":"1917","messageId":"1918","endLine":10,"endColumn":11},{"ruleId":"1915","severity":1,"message":"2082","line":12,"column":8,"nodeType":"1917","messageId":"1918","endLine":12,"endColumn":11},{"ruleId":"1915","severity":1,"message":"2083","line":6,"column":3,"nodeType":"1917","messageId":"1918","endLine":6,"endColumn":13},{"ruleId":"1915","severity":1,"message":"2084","line":13,"column":10,"nodeType":"1917","messageId":"1918","endLine":13,"endColumn":19},{"ruleId":"1915","severity":1,"message":"1937","line":16,"column":10,"nodeType":"1917","messageId":"1918","endLine":16,"endColumn":14},{"ruleId":"1915","severity":1,"message":"2085","line":17,"column":10,"nodeType":"1917","messageId":"1918","endLine":17,"endColumn":20},{"ruleId":"1915","severity":1,"message":"2086","line":17,"column":22,"nodeType":"1917","messageId":"1918","endLine":17,"endColumn":36},{"ruleId":"1915","severity":1,"message":"2087","line":34,"column":11,"nodeType":"1917","messageId":"1918","endLine":34,"endColumn":20},{"ruleId":"1915","severity":1,"message":"2088","line":43,"column":10,"nodeType":"1917","messageId":"1918","endLine":43,"endColumn":29},{"ruleId":"1915","severity":1,"message":"2089","line":45,"column":9,"nodeType":"1917","messageId":"1918","endLine":45,"endColumn":36},{"ruleId":"1915","severity":1,"message":"1947","line":53,"column":10,"nodeType":"1917","messageId":"1918","endLine":53,"endColumn":19},{"ruleId":"2057","severity":1,"message":"2058","line":18,"column":176,"nodeType":"2059","messageId":"1929","endLine":18,"endColumn":185},{"ruleId":"1915","severity":1,"message":"1937","line":3,"column":10,"nodeType":"1917","messageId":"1918","endLine":3,"endColumn":14},{"ruleId":"1915","severity":1,"message":"2056","line":15,"column":9,"nodeType":"1917","messageId":"1918","endLine":15,"endColumn":25},{"ruleId":"1915","severity":1,"message":"2085","line":5,"column":10,"nodeType":"1917","messageId":"1918","endLine":5,"endColumn":20},{"ruleId":"1915","severity":1,"message":"1937","line":6,"column":10,"nodeType":"1917","messageId":"1918","endLine":6,"endColumn":14},{"ruleId":"1915","severity":1,"message":"2090","line":11,"column":8,"nodeType":"1917","messageId":"1918","endLine":11,"endColumn":21},{"ruleId":"1915","severity":1,"message":"2091","line":21,"column":10,"nodeType":"1917","messageId":"1918","endLine":21,"endColumn":26},{"ruleId":"1915","severity":1,"message":"2092","line":21,"column":28,"nodeType":"1917","messageId":"1918","endLine":21,"endColumn":48},{"ruleId":"1915","severity":1,"message":"2093","line":22,"column":10,"nodeType":"1917","messageId":"1918","endLine":22,"endColumn":32},{"ruleId":"1915","severity":1,"message":"2094","line":22,"column":34,"nodeType":"1917","messageId":"1918","endLine":22,"endColumn":59},{"ruleId":"1948","severity":1,"message":"2095","line":145,"column":6,"nodeType":"1950","endLine":145,"endColumn":8,"suggestions":"2096"},{"ruleId":"1915","severity":1,"message":"2085","line":17,"column":10,"nodeType":"1917","messageId":"1918","endLine":17,"endColumn":20},{"ruleId":"1915","severity":1,"message":"1943","line":29,"column":10,"nodeType":"1917","messageId":"1918","endLine":29,"endColumn":23},{"ruleId":"1915","severity":1,"message":"1944","line":30,"column":10,"nodeType":"1917","messageId":"1918","endLine":30,"endColumn":27},{"ruleId":"1948","severity":1,"message":"2097","line":74,"column":6,"nodeType":"1950","endLine":74,"endColumn":8,"suggestions":"2098"},{"ruleId":"1915","severity":1,"message":"2099","line":215,"column":12,"nodeType":"1917","messageId":"1918","endLine":215,"endColumn":35},{"ruleId":"1926","severity":1,"message":"1927","line":321,"column":23,"nodeType":"1928","messageId":"1929","endLine":321,"endColumn":25},{"ruleId":"1926","severity":1,"message":"1927","line":323,"column":30,"nodeType":"1928","messageId":"1929","endLine":323,"endColumn":32},{"ruleId":"1926","severity":1,"message":"1927","line":325,"column":30,"nodeType":"1928","messageId":"1929","endLine":325,"endColumn":32},{"ruleId":"1926","severity":1,"message":"1927","line":327,"column":30,"nodeType":"1928","messageId":"1929","endLine":327,"endColumn":32},{"ruleId":"1948","severity":1,"message":"2100","line":417,"column":6,"nodeType":"1950","endLine":417,"endColumn":8,"suggestions":"2101"},{"ruleId":"1948","severity":1,"message":"2102","line":79,"column":6,"nodeType":"1950","endLine":79,"endColumn":8,"suggestions":"2103"},{"ruleId":"1948","severity":1,"message":"2104","line":213,"column":6,"nodeType":"1950","endLine":213,"endColumn":8,"suggestions":"2105"},{"ruleId":"1915","severity":1,"message":"2085","line":3,"column":10,"nodeType":"1917","messageId":"1918","endLine":3,"endColumn":20},{"ruleId":"1915","severity":1,"message":"1937","line":11,"column":10,"nodeType":"1917","messageId":"1918","endLine":11,"endColumn":14},{"ruleId":"1915","severity":1,"message":"2069","line":15,"column":8,"nodeType":"1917","messageId":"1918","endLine":15,"endColumn":23},{"ruleId":"1915","severity":1,"message":"2106","line":33,"column":10,"nodeType":"1917","messageId":"1918","endLine":33,"endColumn":28},{"ruleId":"1915","severity":1,"message":"2099","line":35,"column":12,"nodeType":"1917","messageId":"1918","endLine":35,"endColumn":35},{"ruleId":"1915","severity":1,"message":"1933","line":38,"column":12,"nodeType":"1917","messageId":"1918","endLine":38,"endColumn":34},{"ruleId":"1948","severity":1,"message":"2107","line":75,"column":6,"nodeType":"1950","endLine":75,"endColumn":8,"suggestions":"2108"},{"ruleId":"1915","severity":1,"message":"2109","line":4,"column":10,"nodeType":"1917","messageId":"1918","endLine":4,"endColumn":19},{"ruleId":"1915","severity":1,"message":"2110","line":18,"column":10,"nodeType":"1917","messageId":"1918","endLine":18,"endColumn":33},{"ruleId":"1948","severity":1,"message":"2111","line":55,"column":6,"nodeType":"1950","endLine":55,"endColumn":8,"suggestions":"2112"},{"ruleId":"1948","severity":1,"message":"2113","line":94,"column":6,"nodeType":"1950","endLine":94,"endColumn":8,"suggestions":"2114"},{"ruleId":"1948","severity":1,"message":"2115","line":139,"column":6,"nodeType":"1950","endLine":139,"endColumn":8,"suggestions":"2116"},{"ruleId":"1915","severity":1,"message":"2117","line":155,"column":12,"nodeType":"1917","messageId":"1918","endLine":155,"endColumn":48},{"ruleId":"1915","severity":1,"message":"2118","line":177,"column":12,"nodeType":"1917","messageId":"1918","endLine":177,"endColumn":45},{"ruleId":"1915","severity":1,"message":"2119","line":180,"column":12,"nodeType":"1917","messageId":"1918","endLine":180,"endColumn":46},{"ruleId":"1915","severity":1,"message":"2099","line":185,"column":12,"nodeType":"1917","messageId":"1918","endLine":185,"endColumn":35},{"ruleId":"1915","severity":1,"message":"2120","line":212,"column":10,"nodeType":"1917","messageId":"1918","endLine":212,"endColumn":30},{"ruleId":"1915","severity":1,"message":"2121","line":213,"column":10,"nodeType":"1917","messageId":"1918","endLine":213,"endColumn":30},{"ruleId":"1915","severity":1,"message":"2122","line":214,"column":10,"nodeType":"1917","messageId":"1918","endLine":214,"endColumn":28},{"ruleId":"1915","severity":1,"message":"2123","line":216,"column":10,"nodeType":"1917","messageId":"1918","endLine":216,"endColumn":15},{"ruleId":"1915","severity":1,"message":"2073","line":217,"column":10,"nodeType":"1917","messageId":"1918","endLine":217,"endColumn":23},{"ruleId":"1915","severity":1,"message":"2074","line":222,"column":10,"nodeType":"1917","messageId":"1918","endLine":222,"endColumn":16},{"ruleId":"1915","severity":1,"message":"2124","line":222,"column":18,"nodeType":"1917","messageId":"1918","endLine":222,"endColumn":27},{"ruleId":"1915","severity":1,"message":"2076","line":223,"column":10,"nodeType":"1917","messageId":"1918","endLine":223,"endColumn":28},{"ruleId":"1948","severity":1,"message":"2015","line":295,"column":6,"nodeType":"1950","endLine":295,"endColumn":8,"suggestions":"2125"},{"ruleId":"2066","replacedBy":"2126"},{"ruleId":"1915","severity":1,"message":"2127","line":8,"column":10,"nodeType":"1917","messageId":"1918","endLine":8,"endColumn":16},{"ruleId":"1915","severity":1,"message":"2128","line":13,"column":8,"nodeType":"1917","messageId":"1918","endLine":13,"endColumn":32},{"ruleId":"1915","severity":1,"message":"2129","line":16,"column":10,"nodeType":"1917","messageId":"1918","endLine":16,"endColumn":19},{"ruleId":"1915","severity":1,"message":"2130","line":17,"column":10,"nodeType":"1917","messageId":"1918","endLine":17,"endColumn":30},{"ruleId":"1915","severity":1,"message":"2131","line":18,"column":10,"nodeType":"1917","messageId":"1918","endLine":18,"endColumn":22},{"ruleId":"1915","severity":1,"message":"2132","line":19,"column":10,"nodeType":"1917","messageId":"1918","endLine":19,"endColumn":27},{"ruleId":"1915","severity":1,"message":"2072","line":25,"column":10,"nodeType":"1917","messageId":"1918","endLine":25,"endColumn":17},{"ruleId":"1915","severity":1,"message":"2133","line":25,"column":19,"nodeType":"1917","messageId":"1918","endLine":25,"endColumn":29},{"ruleId":"1915","severity":1,"message":"2134","line":32,"column":10,"nodeType":"1917","messageId":"1918","endLine":32,"endColumn":24},{"ruleId":"1915","severity":1,"message":"2135","line":32,"column":26,"nodeType":"1917","messageId":"1918","endLine":32,"endColumn":43},{"ruleId":"1915","severity":1,"message":"2136","line":37,"column":10,"nodeType":"1917","messageId":"1918","endLine":37,"endColumn":40},{"ruleId":"1915","severity":1,"message":"2137","line":37,"column":42,"nodeType":"1917","messageId":"1918","endLine":37,"endColumn":75},{"ruleId":"1915","severity":1,"message":"1947","line":39,"column":10,"nodeType":"1917","messageId":"1918","endLine":39,"endColumn":19},{"ruleId":"1948","severity":1,"message":"2138","line":88,"column":6,"nodeType":"1950","endLine":88,"endColumn":8,"suggestions":"2139"},{"ruleId":"1915","severity":1,"message":"2140","line":156,"column":9,"nodeType":"1917","messageId":"1918","endLine":156,"endColumn":46},{"ruleId":"1915","severity":1,"message":"2141","line":169,"column":9,"nodeType":"1917","messageId":"1918","endLine":169,"endColumn":30},{"ruleId":"1915","severity":1,"message":"2129","line":1,"column":10,"nodeType":"1917","messageId":"1918","endLine":1,"endColumn":19},{"ruleId":"1915","severity":1,"message":"2083","line":1,"column":21,"nodeType":"1917","messageId":"1918","endLine":1,"endColumn":31},{"ruleId":"1915","severity":1,"message":"2142","line":4,"column":10,"nodeType":"1917","messageId":"1918","endLine":4,"endColumn":28},{"ruleId":"1915","severity":1,"message":"2143","line":474,"column":7,"nodeType":"1917","messageId":"1918","endLine":474,"endColumn":17},{"ruleId":"2057","severity":1,"message":"2144","line":531,"column":3,"nodeType":"2059","messageId":"1929","endLine":531,"endColumn":14},{"ruleId":"2057","severity":1,"message":"2145","line":532,"column":3,"nodeType":"2059","messageId":"1929","endLine":532,"endColumn":13},{"ruleId":"2057","severity":1,"message":"2146","line":533,"column":3,"nodeType":"2059","messageId":"1929","endLine":533,"endColumn":12},{"ruleId":"2057","severity":1,"message":"2147","line":534,"column":3,"nodeType":"2059","messageId":"1929","endLine":534,"endColumn":26},{"ruleId":"2057","severity":1,"message":"2148","line":535,"column":3,"nodeType":"2059","messageId":"1929","endLine":535,"endColumn":19},{"ruleId":"1915","severity":1,"message":"2149","line":3,"column":3,"nodeType":"1917","messageId":"1918","endLine":3,"endColumn":14},{"ruleId":"1915","severity":1,"message":"2150","line":4,"column":3,"nodeType":"1917","messageId":"1918","endLine":4,"endColumn":13},{"ruleId":"1915","severity":1,"message":"2151","line":5,"column":3,"nodeType":"1917","messageId":"1918","endLine":5,"endColumn":9},{"ruleId":"1915","severity":1,"message":"2152","line":6,"column":3,"nodeType":"1917","messageId":"1918","endLine":6,"endColumn":11},{"ruleId":"1915","severity":1,"message":"2060","line":1,"column":20,"nodeType":"1917","messageId":"1918","endLine":1,"endColumn":29},{"ruleId":"1915","severity":1,"message":"1947","line":27,"column":10,"nodeType":"1917","messageId":"1918","endLine":27,"endColumn":19},{"ruleId":"1915","severity":1,"message":"2083","line":6,"column":3,"nodeType":"1917","messageId":"1918","endLine":6,"endColumn":13},{"ruleId":"1915","severity":1,"message":"2142","line":10,"column":10,"nodeType":"1917","messageId":"1918","endLine":10,"endColumn":28},{"ruleId":"1915","severity":1,"message":"2084","line":14,"column":10,"nodeType":"1917","messageId":"1918","endLine":14,"endColumn":19},{"ruleId":"1915","severity":1,"message":"2129","line":3,"column":3,"nodeType":"1917","messageId":"1918","endLine":3,"endColumn":12},{"ruleId":"1915","severity":1,"message":"2153","line":10,"column":10,"nodeType":"1917","messageId":"1918","endLine":10,"endColumn":24},{"ruleId":"1915","severity":1,"message":"1944","line":26,"column":10,"nodeType":"1917","messageId":"1918","endLine":26,"endColumn":27},{"ruleId":"1915","severity":1,"message":"1947","line":39,"column":10,"nodeType":"1917","messageId":"1918","endLine":39,"endColumn":19},{"ruleId":"1915","severity":1,"message":"2149","line":2,"column":3,"nodeType":"1917","messageId":"1918","endLine":2,"endColumn":14},{"ruleId":"1915","severity":1,"message":"2150","line":3,"column":3,"nodeType":"1917","messageId":"1918","endLine":3,"endColumn":13},{"ruleId":"1915","severity":1,"message":"2151","line":4,"column":3,"nodeType":"1917","messageId":"1918","endLine":4,"endColumn":9},{"ruleId":"1915","severity":1,"message":"2152","line":5,"column":3,"nodeType":"1917","messageId":"1918","endLine":5,"endColumn":11},{"ruleId":"1915","severity":1,"message":"2083","line":6,"column":3,"nodeType":"1917","messageId":"1918","endLine":6,"endColumn":13},{"ruleId":"1915","severity":1,"message":"2084","line":14,"column":10,"nodeType":"1917","messageId":"1918","endLine":14,"endColumn":19},{"ruleId":"1915","severity":1,"message":"1947","line":44,"column":10,"nodeType":"1917","messageId":"1918","endLine":44,"endColumn":19},{"ruleId":"1948","severity":1,"message":"2104","line":107,"column":6,"nodeType":"1950","endLine":107,"endColumn":8,"suggestions":"2154"},{"ruleId":"1915","severity":1,"message":"2155","line":109,"column":9,"nodeType":"1917","messageId":"1918","endLine":109,"endColumn":21},{"ruleId":"1915","severity":1,"message":"2149","line":3,"column":3,"nodeType":"1917","messageId":"1918","endLine":3,"endColumn":14},{"ruleId":"1915","severity":1,"message":"2150","line":4,"column":3,"nodeType":"1917","messageId":"1918","endLine":4,"endColumn":13},{"ruleId":"1915","severity":1,"message":"2151","line":5,"column":3,"nodeType":"1917","messageId":"1918","endLine":5,"endColumn":9},{"ruleId":"1915","severity":1,"message":"2152","line":6,"column":3,"nodeType":"1917","messageId":"1918","endLine":6,"endColumn":11},{"ruleId":"1915","severity":1,"message":"2060","line":8,"column":20,"nodeType":"1917","messageId":"1918","endLine":8,"endColumn":29},{"ruleId":"1915","severity":1,"message":"1947","line":32,"column":10,"nodeType":"1917","messageId":"1918","endLine":32,"endColumn":19},{"ruleId":"1915","severity":1,"message":"2060","line":1,"column":20,"nodeType":"1917","messageId":"1918","endLine":1,"endColumn":29},{"ruleId":"1915","severity":1,"message":"2156","line":2,"column":21,"nodeType":"1917","messageId":"1918","endLine":2,"endColumn":32},{"ruleId":"1915","severity":1,"message":"2086","line":4,"column":10,"nodeType":"1917","messageId":"1918","endLine":4,"endColumn":24},{"ruleId":"1915","severity":1,"message":"1947","line":32,"column":10,"nodeType":"1917","messageId":"1918","endLine":32,"endColumn":19},{"ruleId":"1915","severity":1,"message":"2157","line":33,"column":10,"nodeType":"1917","messageId":"1918","endLine":33,"endColumn":19},{"ruleId":"1915","severity":1,"message":"2074","line":34,"column":10,"nodeType":"1917","messageId":"1918","endLine":34,"endColumn":16},{"ruleId":"2066","replacedBy":"2158"},{"ruleId":"1915","severity":1,"message":"2159","line":1,"column":8,"nodeType":"1917","messageId":"1918","endLine":1,"endColumn":25},{"ruleId":"1915","severity":1,"message":"2160","line":2,"column":10,"nodeType":"1917","messageId":"1918","endLine":2,"endColumn":19},{"ruleId":"1915","severity":1,"message":"2156","line":2,"column":21,"nodeType":"1917","messageId":"1918","endLine":2,"endColumn":32},{"ruleId":"1915","severity":1,"message":"2161","line":5,"column":8,"nodeType":"1917","messageId":"1918","endLine":5,"endColumn":18},{"ruleId":"1915","severity":1,"message":"2153","line":11,"column":10,"nodeType":"1917","messageId":"1918","endLine":11,"endColumn":24},{"ruleId":"1915","severity":1,"message":"2157","line":25,"column":10,"nodeType":"1917","messageId":"1918","endLine":25,"endColumn":19},{"ruleId":"1915","severity":1,"message":"2074","line":26,"column":10,"nodeType":"1917","messageId":"1918","endLine":26,"endColumn":16},{"ruleId":"1915","severity":1,"message":"1947","line":30,"column":10,"nodeType":"1917","messageId":"1918","endLine":30,"endColumn":19},{"ruleId":"1948","severity":1,"message":"2162","line":180,"column":6,"nodeType":"1950","endLine":180,"endColumn":8,"suggestions":"2163"},{"ruleId":"1948","severity":1,"message":"2164","line":62,"column":8,"nodeType":"1950","endLine":62,"endColumn":10,"suggestions":"2165"},{"ruleId":"1948","severity":1,"message":"2166","line":72,"column":8,"nodeType":"1950","endLine":72,"endColumn":10,"suggestions":"2167"},{"ruleId":"1915","severity":1,"message":"1947","line":23,"column":10,"nodeType":"1917","messageId":"1918","endLine":23,"endColumn":19},{"ruleId":"1915","severity":1,"message":"2029","line":84,"column":12,"nodeType":"1917","messageId":"1918","endLine":84,"endColumn":58},{"ruleId":"1948","severity":1,"message":"2168","line":125,"column":6,"nodeType":"1950","endLine":125,"endColumn":8,"suggestions":"2169"},{"ruleId":"1948","severity":1,"message":"1997","line":135,"column":6,"nodeType":"1950","endLine":135,"endColumn":8,"suggestions":"2170"},{"ruleId":"1915","severity":1,"message":"2151","line":4,"column":10,"nodeType":"1917","messageId":"1918","endLine":4,"endColumn":16},{"ruleId":"1915","severity":1,"message":"2149","line":4,"column":18,"nodeType":"1917","messageId":"1918","endLine":4,"endColumn":29},{"ruleId":"1915","severity":1,"message":"2152","line":4,"column":31,"nodeType":"1917","messageId":"1918","endLine":4,"endColumn":39},{"ruleId":"1915","severity":1,"message":"2150","line":4,"column":41,"nodeType":"1917","messageId":"1918","endLine":4,"endColumn":51},{"ruleId":"1915","severity":1,"message":"1947","line":19,"column":10,"nodeType":"1917","messageId":"1918","endLine":19,"endColumn":19},{"ruleId":"1915","severity":1,"message":"2032","line":84,"column":12,"nodeType":"1917","messageId":"1918","endLine":84,"endColumn":57},{"ruleId":"1948","severity":1,"message":"2171","line":124,"column":6,"nodeType":"1950","endLine":124,"endColumn":8,"suggestions":"2172"},{"ruleId":"1948","severity":1,"message":"2001","line":134,"column":6,"nodeType":"1950","endLine":134,"endColumn":8,"suggestions":"2173"},{"ruleId":"1915","severity":1,"message":"1947","line":20,"column":10,"nodeType":"1917","messageId":"1918","endLine":20,"endColumn":19},{"ruleId":"1915","severity":1,"message":"2030","line":93,"column":12,"nodeType":"1917","messageId":"1918","endLine":93,"endColumn":57},{"ruleId":"1948","severity":1,"message":"1991","line":153,"column":6,"nodeType":"1950","endLine":153,"endColumn":8,"suggestions":"2174"},{"ruleId":"1948","severity":1,"message":"1993","line":164,"column":6,"nodeType":"1950","endLine":164,"endColumn":8,"suggestions":"2175"},{"ruleId":"1915","severity":1,"message":"2151","line":4,"column":10,"nodeType":"1917","messageId":"1918","endLine":4,"endColumn":16},{"ruleId":"1915","severity":1,"message":"2149","line":4,"column":18,"nodeType":"1917","messageId":"1918","endLine":4,"endColumn":29},{"ruleId":"1915","severity":1,"message":"2152","line":4,"column":31,"nodeType":"1917","messageId":"1918","endLine":4,"endColumn":39},{"ruleId":"1915","severity":1,"message":"2150","line":4,"column":41,"nodeType":"1917","messageId":"1918","endLine":4,"endColumn":51},{"ruleId":"1915","severity":1,"message":"2176","line":14,"column":40,"nodeType":"1917","messageId":"1918","endLine":14,"endColumn":71},{"ruleId":"1915","severity":1,"message":"1947","line":22,"column":10,"nodeType":"1917","messageId":"1918","endLine":22,"endColumn":19},{"ruleId":"1915","severity":1,"message":"2031","line":60,"column":12,"nodeType":"1917","messageId":"1918","endLine":60,"endColumn":59},{"ruleId":"1948","severity":1,"message":"2177","line":91,"column":6,"nodeType":"1950","endLine":91,"endColumn":8,"suggestions":"2178"},{"ruleId":"1948","severity":1,"message":"2005","line":101,"column":6,"nodeType":"1950","endLine":101,"endColumn":8,"suggestions":"2179"},{"ruleId":"1915","severity":1,"message":"2160","line":1,"column":10,"nodeType":"1917","messageId":"1918","endLine":1,"endColumn":19},{"ruleId":"1915","severity":1,"message":"2156","line":1,"column":21,"nodeType":"1917","messageId":"1918","endLine":1,"endColumn":32},{"ruleId":"1915","severity":1,"message":"2153","line":4,"column":10,"nodeType":"1917","messageId":"1918","endLine":4,"endColumn":24},{"ruleId":"1915","severity":1,"message":"2180","line":4,"column":26,"nodeType":"1917","messageId":"1918","endLine":4,"endColumn":31},{"ruleId":"1915","severity":1,"message":"2157","line":26,"column":10,"nodeType":"1917","messageId":"1918","endLine":26,"endColumn":19},{"ruleId":"1915","severity":1,"message":"2074","line":27,"column":10,"nodeType":"1917","messageId":"1918","endLine":27,"endColumn":16},{"ruleId":"1986","severity":1,"message":"2181","line":138,"column":12,"nodeType":"1917","messageId":"1988","endLine":138,"endColumn":48},{"ruleId":"1915","severity":1,"message":"1947","line":147,"column":10,"nodeType":"1917","messageId":"1918","endLine":147,"endColumn":19},{"ruleId":"1948","severity":1,"message":"2182","line":320,"column":6,"nodeType":"1950","endLine":320,"endColumn":8,"suggestions":"2183"},{"ruleId":"1915","severity":1,"message":"2184","line":326,"column":10,"nodeType":"1917","messageId":"1918","endLine":326,"endColumn":26},{"ruleId":"1915","severity":1,"message":"2028","line":407,"column":10,"nodeType":"1917","messageId":"1918","endLine":407,"endColumn":19},{"ruleId":"1915","severity":1,"message":"1947","line":17,"column":10,"nodeType":"1917","messageId":"1918","endLine":17,"endColumn":19},{"ruleId":"1986","severity":1,"message":"2185","line":54,"column":12,"nodeType":"1917","messageId":"1988","endLine":54,"endColumn":42},{"ruleId":"1948","severity":1,"message":"1963","line":90,"column":6,"nodeType":"1950","endLine":90,"endColumn":8,"suggestions":"2186"},{"ruleId":"1948","severity":1,"message":"2187","line":100,"column":6,"nodeType":"1950","endLine":100,"endColumn":8,"suggestions":"2188"},{"ruleId":"1915","severity":1,"message":"2189","line":114,"column":9,"nodeType":"1917","messageId":"1918","endLine":114,"endColumn":15},{"ruleId":"1915","severity":1,"message":"1947","line":20,"column":10,"nodeType":"1917","messageId":"1918","endLine":20,"endColumn":19},{"ruleId":"1915","severity":1,"message":"2030","line":85,"column":12,"nodeType":"1917","messageId":"1918","endLine":85,"endColumn":57},{"ruleId":"1948","severity":1,"message":"2190","line":135,"column":6,"nodeType":"1950","endLine":135,"endColumn":8,"suggestions":"2191"},{"ruleId":"1948","severity":1,"message":"2192","line":145,"column":6,"nodeType":"1950","endLine":145,"endColumn":8,"suggestions":"2193"},{"ruleId":"1915","severity":1,"message":"2194","line":185,"column":21,"nodeType":"1917","messageId":"1918","endLine":185,"endColumn":33},{"ruleId":"1915","severity":1,"message":"1947","line":21,"column":10,"nodeType":"1917","messageId":"1918","endLine":21,"endColumn":19},{"ruleId":"1915","severity":1,"message":"2195","line":61,"column":12,"nodeType":"1917","messageId":"1918","endLine":61,"endColumn":48},{"ruleId":"1948","severity":1,"message":"2182","line":134,"column":6,"nodeType":"1950","endLine":134,"endColumn":8,"suggestions":"2196"},{"ruleId":"1915","severity":1,"message":"2194","line":137,"column":21,"nodeType":"1917","messageId":"1918","endLine":137,"endColumn":33},{"ruleId":"1915","severity":1,"message":"2184","line":253,"column":10,"nodeType":"1917","messageId":"1918","endLine":253,"endColumn":26},{"ruleId":"1915","severity":1,"message":"2028","line":297,"column":10,"nodeType":"1917","messageId":"1918","endLine":297,"endColumn":19},{"ruleId":"1915","severity":1,"message":"2197","line":298,"column":10,"nodeType":"1917","messageId":"1918","endLine":298,"endColumn":21},{"ruleId":"1915","severity":1,"message":"2198","line":298,"column":23,"nodeType":"1917","messageId":"1918","endLine":298,"endColumn":37},{"ruleId":"1915","severity":1,"message":"1947","line":21,"column":10,"nodeType":"1917","messageId":"1918","endLine":21,"endColumn":19},{"ruleId":"1915","severity":1,"message":"2199","line":51,"column":10,"nodeType":"1917","messageId":"1918","endLine":51,"endColumn":29},{"ruleId":"1915","severity":1,"message":"2200","line":51,"column":31,"nodeType":"1917","messageId":"1918","endLine":51,"endColumn":53},{"ruleId":"1915","severity":1,"message":"2201","line":52,"column":10,"nodeType":"1917","messageId":"1918","endLine":52,"endColumn":35},{"ruleId":"1915","severity":1,"message":"2202","line":52,"column":37,"nodeType":"1917","messageId":"1918","endLine":52,"endColumn":65},{"ruleId":"1915","severity":1,"message":"2203","line":65,"column":12,"nodeType":"1917","messageId":"1918","endLine":65,"endColumn":48},{"ruleId":"1948","severity":1,"message":"2204","line":120,"column":6,"nodeType":"1950","endLine":120,"endColumn":8,"suggestions":"2205"},{"ruleId":"1948","severity":1,"message":"2206","line":130,"column":6,"nodeType":"1950","endLine":130,"endColumn":8,"suggestions":"2207"},{"ruleId":"1915","severity":1,"message":"2194","line":133,"column":21,"nodeType":"1917","messageId":"1918","endLine":133,"endColumn":33},{"ruleId":"1926","severity":1,"message":"1927","line":239,"column":23,"nodeType":"1928","messageId":"1929","endLine":239,"endColumn":25},{"ruleId":"1915","severity":1,"message":"2208","line":3,"column":8,"nodeType":"1917","messageId":"1918","endLine":3,"endColumn":20},{"ruleId":"1915","severity":1,"message":"2209","line":19,"column":10,"nodeType":"1917","messageId":"1918","endLine":19,"endColumn":28},{"ruleId":"1915","severity":1,"message":"2210","line":19,"column":30,"nodeType":"1917","messageId":"1918","endLine":19,"endColumn":51},{"ruleId":"1915","severity":1,"message":"2211","line":21,"column":10,"nodeType":"1917","messageId":"1918","endLine":21,"endColumn":32},{"ruleId":"1915","severity":1,"message":"2212","line":21,"column":34,"nodeType":"1917","messageId":"1918","endLine":21,"endColumn":59},{"ruleId":"1915","severity":1,"message":"1947","line":24,"column":10,"nodeType":"1917","messageId":"1918","endLine":24,"endColumn":19},{"ruleId":"1915","severity":1,"message":"2213","line":78,"column":10,"nodeType":"1917","messageId":"1918","endLine":78,"endColumn":23},{"ruleId":"1948","severity":1,"message":"2204","line":149,"column":6,"nodeType":"1950","endLine":149,"endColumn":8,"suggestions":"2214"},{"ruleId":"1948","severity":1,"message":"2215","line":159,"column":6,"nodeType":"1950","endLine":159,"endColumn":8,"suggestions":"2216"},{"ruleId":"1926","severity":1,"message":"1927","line":283,"column":23,"nodeType":"1928","messageId":"1929","endLine":283,"endColumn":25},{"ruleId":"1915","severity":1,"message":"2060","line":1,"column":20,"nodeType":"1917","messageId":"1918","endLine":1,"endColumn":29},{"ruleId":"1915","severity":1,"message":"2217","line":2,"column":8,"nodeType":"1917","messageId":"1918","endLine":2,"endColumn":20},{"ruleId":"1915","severity":1,"message":"2218","line":3,"column":8,"nodeType":"1917","messageId":"1918","endLine":3,"endColumn":22},{"ruleId":"1915","severity":1,"message":"2127","line":4,"column":10,"nodeType":"1917","messageId":"1918","endLine":4,"endColumn":16},{"ruleId":"1915","severity":1,"message":"2083","line":5,"column":10,"nodeType":"1917","messageId":"1918","endLine":5,"endColumn":20},{"ruleId":"1915","severity":1,"message":"2150","line":10,"column":3,"nodeType":"1917","messageId":"1918","endLine":10,"endColumn":13},{"ruleId":"1915","severity":1,"message":"2129","line":11,"column":3,"nodeType":"1917","messageId":"1918","endLine":11,"endColumn":12},{"ruleId":"1915","severity":1,"message":"2152","line":12,"column":3,"nodeType":"1917","messageId":"1918","endLine":12,"endColumn":11},{"ruleId":"1915","severity":1,"message":"2149","line":13,"column":3,"nodeType":"1917","messageId":"1918","endLine":13,"endColumn":14},{"ruleId":"1915","severity":1,"message":"2151","line":14,"column":3,"nodeType":"1917","messageId":"1918","endLine":14,"endColumn":9},{"ruleId":"1915","severity":1,"message":"1947","line":23,"column":10,"nodeType":"1917","messageId":"1918","endLine":23,"endColumn":19},{"ruleId":"1915","severity":1,"message":"2099","line":81,"column":12,"nodeType":"1917","messageId":"1918","endLine":81,"endColumn":35},{"ruleId":"1915","severity":1,"message":"2219","line":84,"column":12,"nodeType":"1917","messageId":"1918","endLine":84,"endColumn":48},{"ruleId":"1915","severity":1,"message":"2220","line":103,"column":9,"nodeType":"1917","messageId":"1918","endLine":103,"endColumn":32},{"ruleId":"1915","severity":1,"message":"2060","line":1,"column":20,"nodeType":"1917","messageId":"1918","endLine":1,"endColumn":29},{"ruleId":"1915","severity":1,"message":"1947","line":12,"column":10,"nodeType":"1917","messageId":"1918","endLine":12,"endColumn":19},{"ruleId":"1915","severity":1,"message":"2099","line":65,"column":12,"nodeType":"1917","messageId":"1918","endLine":65,"endColumn":35},{"ruleId":"1915","severity":1,"message":"2219","line":68,"column":12,"nodeType":"1917","messageId":"1918","endLine":68,"endColumn":48},{"ruleId":"1915","severity":1,"message":"2221","line":92,"column":9,"nodeType":"1917","messageId":"1918","endLine":92,"endColumn":33},{"ruleId":"1915","severity":1,"message":"1947","line":17,"column":10,"nodeType":"1917","messageId":"1918","endLine":17,"endColumn":19},{"ruleId":"1986","severity":1,"message":"2222","line":57,"column":12,"nodeType":"1917","messageId":"1988","endLine":57,"endColumn":49},{"ruleId":"1948","severity":1,"message":"2223","line":92,"column":6,"nodeType":"1950","endLine":92,"endColumn":8,"suggestions":"2224"},{"ruleId":"1948","severity":1,"message":"2225","line":102,"column":6,"nodeType":"1950","endLine":102,"endColumn":8,"suggestions":"2226"},{"ruleId":"1915","severity":1,"message":"2227","line":117,"column":9,"nodeType":"1917","messageId":"1918","endLine":117,"endColumn":22},{"ruleId":"1915","severity":1,"message":"2060","line":1,"column":20,"nodeType":"1917","messageId":"1918","endLine":1,"endColumn":29},{"ruleId":"1915","severity":1,"message":"2150","line":6,"column":3,"nodeType":"1917","messageId":"1918","endLine":6,"endColumn":13},{"ruleId":"1915","severity":1,"message":"2129","line":7,"column":3,"nodeType":"1917","messageId":"1918","endLine":7,"endColumn":12},{"ruleId":"1915","severity":1,"message":"2152","line":8,"column":3,"nodeType":"1917","messageId":"1918","endLine":8,"endColumn":11},{"ruleId":"1915","severity":1,"message":"2149","line":9,"column":3,"nodeType":"1917","messageId":"1918","endLine":9,"endColumn":14},{"ruleId":"1915","severity":1,"message":"2151","line":10,"column":3,"nodeType":"1917","messageId":"1918","endLine":10,"endColumn":9},{"ruleId":"1915","severity":1,"message":"2176","line":14,"column":40,"nodeType":"1917","messageId":"1918","endLine":14,"endColumn":71},{"ruleId":"1915","severity":1,"message":"1947","line":22,"column":10,"nodeType":"1917","messageId":"1918","endLine":22,"endColumn":19},{"ruleId":"1915","severity":1,"message":"2099","line":53,"column":12,"nodeType":"1917","messageId":"1918","endLine":53,"endColumn":35},{"ruleId":"1915","severity":1,"message":"2219","line":56,"column":12,"nodeType":"1917","messageId":"1918","endLine":56,"endColumn":48},{"ruleId":"1915","severity":1,"message":"2007","line":71,"column":9,"nodeType":"1917","messageId":"1918","endLine":71,"endColumn":34},{"ruleId":"1915","severity":1,"message":"2217","line":2,"column":8,"nodeType":"1917","messageId":"1918","endLine":2,"endColumn":20},{"ruleId":"1915","severity":1,"message":"2218","line":3,"column":8,"nodeType":"1917","messageId":"1918","endLine":3,"endColumn":22},{"ruleId":"1915","severity":1,"message":"2127","line":4,"column":10,"nodeType":"1917","messageId":"1918","endLine":4,"endColumn":16},{"ruleId":"1915","severity":1,"message":"2083","line":5,"column":10,"nodeType":"1917","messageId":"1918","endLine":5,"endColumn":20},{"ruleId":"1915","severity":1,"message":"1947","line":23,"column":8,"nodeType":"1917","messageId":"1918","endLine":23,"endColumn":17},{"ruleId":"1915","severity":1,"message":"2099","line":82,"column":12,"nodeType":"1917","messageId":"1918","endLine":82,"endColumn":35},{"ruleId":"1915","severity":1,"message":"2219","line":85,"column":12,"nodeType":"1917","messageId":"1918","endLine":85,"endColumn":48},{"ruleId":"1915","severity":1,"message":"2228","line":110,"column":9,"nodeType":"1917","messageId":"1918","endLine":110,"endColumn":32},{"ruleId":"1915","severity":1,"message":"2151","line":4,"column":10,"nodeType":"1917","messageId":"1918","endLine":4,"endColumn":16},{"ruleId":"1915","severity":1,"message":"2149","line":4,"column":18,"nodeType":"1917","messageId":"1918","endLine":4,"endColumn":29},{"ruleId":"1915","severity":1,"message":"2152","line":4,"column":31,"nodeType":"1917","messageId":"1918","endLine":4,"endColumn":39},{"ruleId":"1915","severity":1,"message":"2150","line":4,"column":41,"nodeType":"1917","messageId":"1918","endLine":4,"endColumn":51},{"ruleId":"1915","severity":1,"message":"1947","line":20,"column":10,"nodeType":"1917","messageId":"1918","endLine":20,"endColumn":19},{"ruleId":"1915","severity":1,"message":"2030","line":83,"column":12,"nodeType":"1917","messageId":"1918","endLine":83,"endColumn":57},{"ruleId":"1915","severity":1,"message":"2229","line":87,"column":10,"nodeType":"1917","messageId":"1918","endLine":87,"endColumn":38},{"ruleId":"1915","severity":1,"message":"2230","line":87,"column":40,"nodeType":"1917","messageId":"1918","endLine":87,"endColumn":71},{"ruleId":"1915","severity":1,"message":"2231","line":91,"column":10,"nodeType":"1917","messageId":"1918","endLine":91,"endColumn":22},{"ruleId":"1915","severity":1,"message":"2232","line":91,"column":24,"nodeType":"1917","messageId":"1918","endLine":91,"endColumn":39},{"ruleId":"1948","severity":1,"message":"1991","line":142,"column":6,"nodeType":"1950","endLine":142,"endColumn":8,"suggestions":"2233"},{"ruleId":"1948","severity":1,"message":"1993","line":152,"column":6,"nodeType":"1950","endLine":152,"endColumn":8,"suggestions":"2234"},{"ruleId":"1915","severity":1,"message":"2194","line":155,"column":21,"nodeType":"1917","messageId":"1918","endLine":155,"endColumn":33},{"ruleId":"1915","severity":1,"message":"2151","line":3,"column":10,"nodeType":"1917","messageId":"1918","endLine":3,"endColumn":16},{"ruleId":"1915","severity":1,"message":"2149","line":3,"column":18,"nodeType":"1917","messageId":"1918","endLine":3,"endColumn":29},{"ruleId":"1915","severity":1,"message":"2152","line":3,"column":31,"nodeType":"1917","messageId":"1918","endLine":3,"endColumn":39},{"ruleId":"1915","severity":1,"message":"2150","line":3,"column":41,"nodeType":"1917","messageId":"1918","endLine":3,"endColumn":51},{"ruleId":"1915","severity":1,"message":"2235","line":13,"column":10,"nodeType":"1917","messageId":"1918","endLine":13,"endColumn":41},{"ruleId":"1915","severity":1,"message":"1947","line":22,"column":10,"nodeType":"1917","messageId":"1918","endLine":22,"endColumn":19},{"ruleId":"1915","severity":1,"message":"2236","line":85,"column":10,"nodeType":"1917","messageId":"1918","endLine":85,"endColumn":29},{"ruleId":"1915","severity":1,"message":"2237","line":151,"column":9,"nodeType":"1917","messageId":"1918","endLine":151,"endColumn":27},{"ruleId":"1948","severity":1,"message":"2238","line":221,"column":6,"nodeType":"1950","endLine":221,"endColumn":8,"suggestions":"2239"},{"ruleId":"1948","severity":1,"message":"2240","line":231,"column":6,"nodeType":"1950","endLine":231,"endColumn":8,"suggestions":"2241"},{"ruleId":"1915","severity":1,"message":"1947","line":19,"column":12,"nodeType":"1917","messageId":"1918","endLine":19,"endColumn":21},{"ruleId":"1915","severity":1,"message":"2242","line":91,"column":11,"nodeType":"1917","messageId":"1918","endLine":91,"endColumn":50},{"ruleId":"1948","severity":1,"message":"2243","line":109,"column":8,"nodeType":"1950","endLine":109,"endColumn":10,"suggestions":"2244"},{"ruleId":"1948","severity":1,"message":"2245","line":119,"column":8,"nodeType":"1950","endLine":119,"endColumn":10,"suggestions":"2246"},{"ruleId":"1915","severity":1,"message":"2247","line":129,"column":11,"nodeType":"1917","messageId":"1918","endLine":129,"endColumn":46},{"ruleId":"1915","severity":1,"message":"2090","line":3,"column":8,"nodeType":"1917","messageId":"1918","endLine":3,"endColumn":21},{"ruleId":"1915","severity":1,"message":"2151","line":4,"column":10,"nodeType":"1917","messageId":"1918","endLine":4,"endColumn":16},{"ruleId":"1915","severity":1,"message":"2149","line":4,"column":18,"nodeType":"1917","messageId":"1918","endLine":4,"endColumn":29},{"ruleId":"1915","severity":1,"message":"2152","line":4,"column":31,"nodeType":"1917","messageId":"1918","endLine":4,"endColumn":39},{"ruleId":"1915","severity":1,"message":"2150","line":4,"column":41,"nodeType":"1917","messageId":"1918","endLine":4,"endColumn":51},{"ruleId":"1915","severity":1,"message":"1947","line":19,"column":10,"nodeType":"1917","messageId":"1918","endLine":19,"endColumn":19},{"ruleId":"1915","severity":1,"message":"2030","line":59,"column":12,"nodeType":"1917","messageId":"1918","endLine":59,"endColumn":57},{"ruleId":"1915","severity":1,"message":"2229","line":63,"column":10,"nodeType":"1917","messageId":"1918","endLine":63,"endColumn":38},{"ruleId":"1915","severity":1,"message":"2230","line":63,"column":40,"nodeType":"1917","messageId":"1918","endLine":63,"endColumn":71},{"ruleId":"1915","severity":1,"message":"2231","line":67,"column":10,"nodeType":"1917","messageId":"1918","endLine":67,"endColumn":22},{"ruleId":"1915","severity":1,"message":"2232","line":67,"column":24,"nodeType":"1917","messageId":"1918","endLine":67,"endColumn":39},{"ruleId":"1915","severity":1,"message":"2248","line":73,"column":9,"nodeType":"1917","messageId":"1918","endLine":73,"endColumn":43},{"ruleId":"1948","severity":1,"message":"2249","line":93,"column":6,"nodeType":"1950","endLine":93,"endColumn":8,"suggestions":"2250"},{"ruleId":"1948","severity":1,"message":"2251","line":103,"column":6,"nodeType":"1950","endLine":103,"endColumn":8,"suggestions":"2252"},{"ruleId":"1915","severity":1,"message":"2194","line":107,"column":21,"nodeType":"1917","messageId":"1918","endLine":107,"endColumn":33},{"ruleId":"1915","severity":1,"message":"2247","line":117,"column":9,"nodeType":"1917","messageId":"1918","endLine":117,"endColumn":44},{"ruleId":"1915","severity":1,"message":"2077","line":2,"column":27,"nodeType":"1917","messageId":"1918","endLine":2,"endColumn":33},{"ruleId":"1915","severity":1,"message":"2078","line":2,"column":35,"nodeType":"1917","messageId":"1918","endLine":2,"endColumn":40},{"ruleId":"1915","severity":1,"message":"2079","line":2,"column":42,"nodeType":"1917","messageId":"1918","endLine":2,"endColumn":48},{"ruleId":"1915","severity":1,"message":"2080","line":5,"column":10,"nodeType":"1917","messageId":"1918","endLine":5,"endColumn":14},{"ruleId":"1915","severity":1,"message":"2081","line":10,"column":8,"nodeType":"1917","messageId":"1918","endLine":10,"endColumn":11},{"ruleId":"1915","severity":1,"message":"2082","line":13,"column":8,"nodeType":"1917","messageId":"1918","endLine":13,"endColumn":11},{"ruleId":"1915","severity":1,"message":"2157","line":14,"column":10,"nodeType":"1917","messageId":"1918","endLine":14,"endColumn":19},{"ruleId":"1915","severity":1,"message":"2074","line":16,"column":10,"nodeType":"1917","messageId":"1918","endLine":16,"endColumn":16},{"ruleId":"1915","severity":1,"message":"2253","line":23,"column":10,"nodeType":"1917","messageId":"1918","endLine":23,"endColumn":24},{"ruleId":"1915","severity":1,"message":"2254","line":23,"column":26,"nodeType":"1917","messageId":"1918","endLine":23,"endColumn":43},{"ruleId":"1915","severity":1,"message":"2255","line":24,"column":10,"nodeType":"1917","messageId":"1918","endLine":24,"endColumn":31},{"ruleId":"1915","severity":1,"message":"2256","line":24,"column":33,"nodeType":"1917","messageId":"1918","endLine":24,"endColumn":57},{"ruleId":"1915","severity":1,"message":"2257","line":55,"column":9,"nodeType":"1917","messageId":"1918","endLine":55,"endColumn":23},{"ruleId":"1915","severity":1,"message":"2258","line":74,"column":9,"nodeType":"1917","messageId":"1918","endLine":74,"endColumn":37},{"ruleId":"1915","severity":1,"message":"2259","line":102,"column":10,"nodeType":"1917","messageId":"1918","endLine":102,"endColumn":27},{"ruleId":"1915","severity":1,"message":"2260","line":103,"column":10,"nodeType":"1917","messageId":"1918","endLine":103,"endColumn":25},{"ruleId":"2066","replacedBy":"2261"},{"ruleId":"1915","severity":1,"message":"2157","line":22,"column":10,"nodeType":"1917","messageId":"1918","endLine":22,"endColumn":19},{"ruleId":"1915","severity":1,"message":"2074","line":24,"column":10,"nodeType":"1917","messageId":"1918","endLine":24,"endColumn":16},{"ruleId":"1915","severity":1,"message":"2124","line":24,"column":18,"nodeType":"1917","messageId":"1918","endLine":24,"endColumn":27},{"ruleId":"1948","severity":1,"message":"1982","line":136,"column":6,"nodeType":"1950","endLine":136,"endColumn":8,"suggestions":"2262"},{"ruleId":"1948","severity":1,"message":"1984","line":151,"column":6,"nodeType":"1950","endLine":151,"endColumn":8,"suggestions":"2263"},{"ruleId":"1915","severity":1,"message":"1947","line":173,"column":10,"nodeType":"1917","messageId":"1918","endLine":173,"endColumn":19},{"ruleId":"1915","severity":1,"message":"2264","line":176,"column":5,"nodeType":"1917","messageId":"1918","endLine":176,"endColumn":43},{"ruleId":"1915","severity":1,"message":"2265","line":180,"column":12,"nodeType":"1917","messageId":"1918","endLine":180,"endColumn":54},{"ruleId":"1915","severity":1,"message":"2266","line":183,"column":12,"nodeType":"1917","messageId":"1918","endLine":183,"endColumn":55},{"ruleId":"1915","severity":1,"message":"2267","line":205,"column":9,"nodeType":"1917","messageId":"1918","endLine":205,"endColumn":35},{"ruleId":"1915","severity":1,"message":"2268","line":210,"column":9,"nodeType":"1917","messageId":"1918","endLine":210,"endColumn":21},{"ruleId":"1915","severity":1,"message":"2028","line":216,"column":10,"nodeType":"1917","messageId":"1918","endLine":216,"endColumn":19},{"ruleId":"1915","severity":1,"message":"2026","line":218,"column":10,"nodeType":"1917","messageId":"1918","endLine":218,"endColumn":27},{"ruleId":"1915","severity":1,"message":"2027","line":220,"column":10,"nodeType":"1917","messageId":"1918","endLine":220,"endColumn":29},{"ruleId":"1948","severity":1,"message":"2269","line":239,"column":6,"nodeType":"1950","endLine":239,"endColumn":8,"suggestions":"2270"},{"ruleId":"1915","severity":1,"message":"2259","line":276,"column":10,"nodeType":"1917","messageId":"1918","endLine":276,"endColumn":27},{"ruleId":"1915","severity":1,"message":"2260","line":277,"column":10,"nodeType":"1917","messageId":"1918","endLine":277,"endColumn":25},{"ruleId":"1915","severity":1,"message":"2271","line":3,"column":8,"nodeType":"1917","messageId":"1918","endLine":3,"endColumn":15},{"ruleId":"1915","severity":1,"message":"2090","line":6,"column":8,"nodeType":"1917","messageId":"1918","endLine":6,"endColumn":21},{"ruleId":"1915","severity":1,"message":"2069","line":10,"column":8,"nodeType":"1917","messageId":"1918","endLine":10,"endColumn":23},{"ruleId":"1915","severity":1,"message":"2153","line":11,"column":10,"nodeType":"1917","messageId":"1918","endLine":11,"endColumn":24},{"ruleId":"1915","severity":1,"message":"2157","line":17,"column":10,"nodeType":"1917","messageId":"1918","endLine":17,"endColumn":19},{"ruleId":"1915","severity":1,"message":"2074","line":19,"column":10,"nodeType":"1917","messageId":"1918","endLine":19,"endColumn":16},{"ruleId":"1915","severity":1,"message":"2272","line":57,"column":9,"nodeType":"1917","messageId":"1918","endLine":57,"endColumn":23},{"ruleId":"1915","severity":1,"message":"2259","line":105,"column":10,"nodeType":"1917","messageId":"1918","endLine":105,"endColumn":27},{"ruleId":"1915","severity":1,"message":"2260","line":106,"column":10,"nodeType":"1917","messageId":"1918","endLine":106,"endColumn":25},{"ruleId":"1915","severity":1,"message":"2273","line":3,"column":5,"nodeType":"1917","messageId":"1918","endLine":3,"endColumn":14},{"ruleId":"1915","severity":1,"message":"2273","line":2,"column":5,"nodeType":"1917","messageId":"1918","endLine":2,"endColumn":14},{"ruleId":"1915","severity":1,"message":"2273","line":3,"column":5,"nodeType":"1917","messageId":"1918","endLine":3,"endColumn":14},{"ruleId":"1915","severity":1,"message":"2149","line":2,"column":3,"nodeType":"1917","messageId":"1918","endLine":2,"endColumn":14},{"ruleId":"1915","severity":1,"message":"2150","line":3,"column":3,"nodeType":"1917","messageId":"1918","endLine":3,"endColumn":13},{"ruleId":"1915","severity":1,"message":"2151","line":4,"column":3,"nodeType":"1917","messageId":"1918","endLine":4,"endColumn":9},{"ruleId":"1915","severity":1,"message":"2152","line":5,"column":3,"nodeType":"1917","messageId":"1918","endLine":5,"endColumn":11},{"ruleId":"1915","severity":1,"message":"2083","line":6,"column":3,"nodeType":"1917","messageId":"1918","endLine":6,"endColumn":13},{"ruleId":"1915","severity":1,"message":"2084","line":14,"column":10,"nodeType":"1917","messageId":"1918","endLine":14,"endColumn":19},{"ruleId":"1915","severity":1,"message":"2274","line":37,"column":10,"nodeType":"1917","messageId":"1918","endLine":37,"endColumn":32},{"ruleId":"1915","severity":1,"message":"2275","line":39,"column":9,"nodeType":"1917","messageId":"1918","endLine":39,"endColumn":39},{"ruleId":"1915","severity":1,"message":"2069","line":9,"column":8,"nodeType":"1917","messageId":"1918","endLine":9,"endColumn":23},{"ruleId":"1915","severity":1,"message":"1947","line":35,"column":10,"nodeType":"1917","messageId":"1918","endLine":35,"endColumn":19},{"ruleId":"1915","severity":1,"message":"2157","line":160,"column":10,"nodeType":"1917","messageId":"1918","endLine":160,"endColumn":19},{"ruleId":"1915","severity":1,"message":"2268","line":162,"column":9,"nodeType":"1917","messageId":"1918","endLine":162,"endColumn":21},{"ruleId":"1915","severity":1,"message":"2028","line":229,"column":10,"nodeType":"1917","messageId":"1918","endLine":229,"endColumn":19},{"ruleId":"1915","severity":1,"message":"2149","line":3,"column":3,"nodeType":"1917","messageId":"1918","endLine":3,"endColumn":14},{"ruleId":"1915","severity":1,"message":"2150","line":4,"column":3,"nodeType":"1917","messageId":"1918","endLine":4,"endColumn":13},{"ruleId":"1915","severity":1,"message":"2151","line":5,"column":3,"nodeType":"1917","messageId":"1918","endLine":5,"endColumn":9},{"ruleId":"1915","severity":1,"message":"2152","line":6,"column":3,"nodeType":"1917","messageId":"1918","endLine":6,"endColumn":11},{"ruleId":"1915","severity":1,"message":"2276","line":8,"column":17,"nodeType":"1917","messageId":"1918","endLine":8,"endColumn":25},{"ruleId":"1915","severity":1,"message":"2060","line":8,"column":27,"nodeType":"1917","messageId":"1918","endLine":8,"endColumn":36},{"ruleId":"1915","severity":1,"message":"2149","line":2,"column":3,"nodeType":"1917","messageId":"1918","endLine":2,"endColumn":14},{"ruleId":"1915","severity":1,"message":"2150","line":3,"column":3,"nodeType":"1917","messageId":"1918","endLine":3,"endColumn":13},{"ruleId":"1915","severity":1,"message":"2151","line":4,"column":3,"nodeType":"1917","messageId":"1918","endLine":4,"endColumn":9},{"ruleId":"1915","severity":1,"message":"2152","line":5,"column":3,"nodeType":"1917","messageId":"1918","endLine":5,"endColumn":11},{"ruleId":"1915","severity":1,"message":"2083","line":6,"column":3,"nodeType":"1917","messageId":"1918","endLine":6,"endColumn":13},{"ruleId":"1915","severity":1,"message":"2084","line":14,"column":10,"nodeType":"1917","messageId":"1918","endLine":14,"endColumn":19},{"ruleId":"1915","severity":1,"message":"2277","line":37,"column":10,"nodeType":"1917","messageId":"1918","endLine":37,"endColumn":32},{"ruleId":"1915","severity":1,"message":"2278","line":39,"column":9,"nodeType":"1917","messageId":"1918","endLine":39,"endColumn":39},{"ruleId":"1915","severity":1,"message":"2149","line":3,"column":3,"nodeType":"1917","messageId":"1918","endLine":3,"endColumn":14},{"ruleId":"1915","severity":1,"message":"2150","line":4,"column":3,"nodeType":"1917","messageId":"1918","endLine":4,"endColumn":13},{"ruleId":"1915","severity":1,"message":"2151","line":5,"column":3,"nodeType":"1917","messageId":"1918","endLine":5,"endColumn":9},{"ruleId":"1915","severity":1,"message":"2152","line":6,"column":3,"nodeType":"1917","messageId":"1918","endLine":6,"endColumn":11},{"ruleId":"1915","severity":1,"message":"2276","line":8,"column":17,"nodeType":"1917","messageId":"1918","endLine":8,"endColumn":25},{"ruleId":"1915","severity":1,"message":"2060","line":8,"column":27,"nodeType":"1917","messageId":"1918","endLine":8,"endColumn":36},{"ruleId":"1915","severity":1,"message":"2149","line":2,"column":3,"nodeType":"1917","messageId":"1918","endLine":2,"endColumn":14},{"ruleId":"1915","severity":1,"message":"2150","line":3,"column":3,"nodeType":"1917","messageId":"1918","endLine":3,"endColumn":13},{"ruleId":"1915","severity":1,"message":"2151","line":4,"column":3,"nodeType":"1917","messageId":"1918","endLine":4,"endColumn":9},{"ruleId":"1915","severity":1,"message":"2152","line":5,"column":3,"nodeType":"1917","messageId":"1918","endLine":5,"endColumn":11},{"ruleId":"1915","severity":1,"message":"2083","line":6,"column":3,"nodeType":"1917","messageId":"1918","endLine":6,"endColumn":13},{"ruleId":"1915","severity":1,"message":"2142","line":10,"column":10,"nodeType":"1917","messageId":"1918","endLine":10,"endColumn":28},{"ruleId":"1915","severity":1,"message":"2084","line":14,"column":10,"nodeType":"1917","messageId":"1918","endLine":14,"endColumn":19},{"ruleId":"1915","severity":1,"message":"2085","line":3,"column":10,"nodeType":"1917","messageId":"1918","endLine":3,"endColumn":20},{"ruleId":"1915","severity":1,"message":"2279","line":5,"column":10,"nodeType":"1917","messageId":"1918","endLine":5,"endColumn":24},{"ruleId":"1915","severity":1,"message":"1937","line":7,"column":10,"nodeType":"1917","messageId":"1918","endLine":7,"endColumn":14},{"ruleId":"1915","severity":1,"message":"2280","line":8,"column":10,"nodeType":"1917","messageId":"1918","endLine":8,"endColumn":27},{"ruleId":"1915","severity":1,"message":"2073","line":30,"column":10,"nodeType":"1917","messageId":"1918","endLine":30,"endColumn":23},{"ruleId":"1915","severity":1,"message":"2281","line":31,"column":10,"nodeType":"1917","messageId":"1918","endLine":31,"endColumn":34},{"ruleId":"1915","severity":1,"message":"2282","line":36,"column":10,"nodeType":"1917","messageId":"1918","endLine":36,"endColumn":38},{"ruleId":"1915","severity":1,"message":"2283","line":38,"column":12,"nodeType":"1917","messageId":"1918","endLine":38,"endColumn":44},{"ruleId":"1915","severity":1,"message":"2284","line":41,"column":12,"nodeType":"1917","messageId":"1918","endLine":41,"endColumn":45},{"ruleId":"1948","severity":1,"message":"2285","line":125,"column":6,"nodeType":"1950","endLine":125,"endColumn":8,"suggestions":"2286"},{"ruleId":"1915","severity":1,"message":"2287","line":176,"column":9,"nodeType":"1917","messageId":"1918","endLine":176,"endColumn":21},{"ruleId":"1915","severity":1,"message":"2288","line":250,"column":5,"nodeType":"1917","messageId":"1918","endLine":250,"endColumn":41},{"ruleId":"1915","severity":1,"message":"2289","line":251,"column":5,"nodeType":"1917","messageId":"1918","endLine":251,"endColumn":44},{"ruleId":"1915","severity":1,"message":"2290","line":254,"column":5,"nodeType":"1917","messageId":"1918","endLine":254,"endColumn":42},{"ruleId":"1948","severity":1,"message":"2291","line":395,"column":6,"nodeType":"1950","endLine":395,"endColumn":8,"suggestions":"2292"},{"ruleId":"1915","severity":1,"message":"2149","line":3,"column":5,"nodeType":"1917","messageId":"1918","endLine":3,"endColumn":16},{"ruleId":"1915","severity":1,"message":"2150","line":4,"column":5,"nodeType":"1917","messageId":"1918","endLine":4,"endColumn":15},{"ruleId":"1915","severity":1,"message":"2151","line":5,"column":5,"nodeType":"1917","messageId":"1918","endLine":5,"endColumn":11},{"ruleId":"1915","severity":1,"message":"2152","line":6,"column":5,"nodeType":"1917","messageId":"1918","endLine":6,"endColumn":13},{"ruleId":"1915","severity":1,"message":"2293","line":8,"column":10,"nodeType":"1917","messageId":"1918","endLine":8,"endColumn":18},{"ruleId":"1915","severity":1,"message":"2085","line":11,"column":10,"nodeType":"1917","messageId":"1918","endLine":11,"endColumn":20},{"ruleId":"1915","severity":1,"message":"2279","line":13,"column":10,"nodeType":"1917","messageId":"1918","endLine":13,"endColumn":24},{"ruleId":"1915","severity":1,"message":"2159","line":15,"column":8,"nodeType":"1917","messageId":"1918","endLine":15,"endColumn":25},{"ruleId":"1915","severity":1,"message":"1937","line":19,"column":10,"nodeType":"1917","messageId":"1918","endLine":19,"endColumn":14},{"ruleId":"1915","severity":1,"message":"2294","line":41,"column":42,"nodeType":"1917","messageId":"1918","endLine":41,"endColumn":75},{"ruleId":"1915","severity":1,"message":"2290","line":44,"column":5,"nodeType":"1917","messageId":"1918","endLine":44,"endColumn":42},{"ruleId":"1915","severity":1,"message":"2087","line":48,"column":11,"nodeType":"1917","messageId":"1918","endLine":48,"endColumn":20},{"ruleId":"1915","severity":1,"message":"2073","line":52,"column":10,"nodeType":"1917","messageId":"1918","endLine":52,"endColumn":23},{"ruleId":"1915","severity":1,"message":"2288","line":54,"column":5,"nodeType":"1917","messageId":"1918","endLine":54,"endColumn":41},{"ruleId":"1986","severity":1,"message":"2295","line":75,"column":12,"nodeType":"1917","messageId":"1988","endLine":75,"endColumn":57},{"ruleId":"1915","severity":1,"message":"2287","line":130,"column":9,"nodeType":"1917","messageId":"1918","endLine":130,"endColumn":21},{"ruleId":"1948","severity":1,"message":"2296","line":239,"column":6,"nodeType":"1950","endLine":239,"endColumn":8,"suggestions":"2297"},{"ruleId":"2298","severity":1,"message":"2299","line":489,"column":15,"nodeType":"2051","endLine":489,"endColumn":70},{"ruleId":"1915","severity":1,"message":"2109","line":9,"column":10,"nodeType":"1917","messageId":"1918","endLine":9,"endColumn":19},{"ruleId":"1915","severity":1,"message":"2085","line":10,"column":10,"nodeType":"1917","messageId":"1918","endLine":10,"endColumn":20},{"ruleId":"1915","severity":1,"message":"2300","line":11,"column":10,"nodeType":"1917","messageId":"1918","endLine":11,"endColumn":20},{"ruleId":"1915","severity":1,"message":"2279","line":12,"column":10,"nodeType":"1917","messageId":"1918","endLine":12,"endColumn":24},{"ruleId":"1915","severity":1,"message":"2160","line":13,"column":10,"nodeType":"1917","messageId":"1918","endLine":13,"endColumn":19},{"ruleId":"1915","severity":1,"message":"2159","line":14,"column":8,"nodeType":"1917","messageId":"1918","endLine":14,"endColumn":25},{"ruleId":"1915","severity":1,"message":"2218","line":15,"column":8,"nodeType":"1917","messageId":"1918","endLine":15,"endColumn":22},{"ruleId":"1915","severity":1,"message":"1937","line":18,"column":10,"nodeType":"1917","messageId":"1918","endLine":18,"endColumn":14},{"ruleId":"1915","severity":1,"message":"2301","line":22,"column":8,"nodeType":"1917","messageId":"1918","endLine":22,"endColumn":28},{"ruleId":"1915","severity":1,"message":"2090","line":23,"column":8,"nodeType":"1917","messageId":"1918","endLine":23,"endColumn":21},{"ruleId":"1915","severity":1,"message":"2302","line":31,"column":10,"nodeType":"1917","messageId":"1918","endLine":31,"endColumn":39},{"ruleId":"1915","severity":1,"message":"2303","line":36,"column":10,"nodeType":"1917","messageId":"1918","endLine":36,"endColumn":20},{"ruleId":"1915","severity":1,"message":"2073","line":38,"column":10,"nodeType":"1917","messageId":"1918","endLine":38,"endColumn":23},{"ruleId":"1915","severity":1,"message":"2304","line":50,"column":10,"nodeType":"1917","messageId":"1918","endLine":50,"endColumn":38},{"ruleId":"1915","severity":1,"message":"2123","line":52,"column":10,"nodeType":"1917","messageId":"1918","endLine":52,"endColumn":15},{"ruleId":"1986","severity":1,"message":"2305","line":63,"column":12,"nodeType":"1917","messageId":"1988","endLine":63,"endColumn":48},{"ruleId":"1986","severity":1,"message":"2306","line":66,"column":12,"nodeType":"1917","messageId":"1988","endLine":66,"endColumn":49},{"ruleId":"1915","severity":1,"message":"2307","line":109,"column":9,"nodeType":"1917","messageId":"1918","endLine":109,"endColumn":29},{"ruleId":"1915","severity":1,"message":"2308","line":251,"column":9,"nodeType":"1917","messageId":"1918","endLine":251,"endColumn":47},{"ruleId":"1948","severity":1,"message":"2296","line":358,"column":6,"nodeType":"1950","endLine":358,"endColumn":8,"suggestions":"2309"},{"ruleId":"1948","severity":1,"message":"2310","line":391,"column":6,"nodeType":"1950","endLine":391,"endColumn":8,"suggestions":"2311"},{"ruleId":"1915","severity":1,"message":"2312","line":392,"column":9,"nodeType":"1917","messageId":"1918","endLine":392,"endColumn":19},{"ruleId":"1915","severity":1,"message":"2313","line":398,"column":9,"nodeType":"1917","messageId":"1918","endLine":398,"endColumn":19},{"ruleId":"2298","severity":1,"message":"2299","line":413,"column":17,"nodeType":"2051","endLine":413,"endColumn":72},{"ruleId":"1915","severity":1,"message":"2129","line":2,"column":3,"nodeType":"1917","messageId":"1918","endLine":2,"endColumn":12},{"ruleId":"1915","severity":1,"message":"2149","line":3,"column":3,"nodeType":"1917","messageId":"1918","endLine":3,"endColumn":14},{"ruleId":"1915","severity":1,"message":"2150","line":4,"column":3,"nodeType":"1917","messageId":"1918","endLine":4,"endColumn":13},{"ruleId":"1915","severity":1,"message":"2151","line":5,"column":3,"nodeType":"1917","messageId":"1918","endLine":5,"endColumn":9},{"ruleId":"1915","severity":1,"message":"2152","line":6,"column":3,"nodeType":"1917","messageId":"1918","endLine":6,"endColumn":11},{"ruleId":"1915","severity":1,"message":"2109","line":9,"column":10,"nodeType":"1917","messageId":"1918","endLine":9,"endColumn":19},{"ruleId":"1915","severity":1,"message":"2085","line":10,"column":10,"nodeType":"1917","messageId":"1918","endLine":10,"endColumn":20},{"ruleId":"1915","severity":1,"message":"2300","line":11,"column":10,"nodeType":"1917","messageId":"1918","endLine":11,"endColumn":20},{"ruleId":"1915","severity":1,"message":"2279","line":12,"column":10,"nodeType":"1917","messageId":"1918","endLine":12,"endColumn":24},{"ruleId":"1915","severity":1,"message":"2160","line":13,"column":10,"nodeType":"1917","messageId":"1918","endLine":13,"endColumn":19},{"ruleId":"1915","severity":1,"message":"2159","line":14,"column":8,"nodeType":"1917","messageId":"1918","endLine":14,"endColumn":25},{"ruleId":"1915","severity":1,"message":"2218","line":15,"column":8,"nodeType":"1917","messageId":"1918","endLine":15,"endColumn":22},{"ruleId":"1915","severity":1,"message":"2153","line":16,"column":10,"nodeType":"1917","messageId":"1918","endLine":16,"endColumn":24},{"ruleId":"1915","severity":1,"message":"1937","line":18,"column":10,"nodeType":"1917","messageId":"1918","endLine":18,"endColumn":14},{"ruleId":"1915","severity":1,"message":"2301","line":21,"column":8,"nodeType":"1917","messageId":"1918","endLine":21,"endColumn":28},{"ruleId":"1915","severity":1,"message":"2090","line":22,"column":8,"nodeType":"1917","messageId":"1918","endLine":22,"endColumn":21},{"ruleId":"1915","severity":1,"message":"2314","line":24,"column":8,"nodeType":"1917","messageId":"1918","endLine":24,"endColumn":29},{"ruleId":"1915","severity":1,"message":"2315","line":31,"column":10,"nodeType":"1917","messageId":"1918","endLine":31,"endColumn":41},{"ruleId":"1915","severity":1,"message":"2316","line":31,"column":43,"nodeType":"1917","messageId":"1918","endLine":31,"endColumn":77},{"ruleId":"1915","severity":1,"message":"2317","line":35,"column":10,"nodeType":"1917","messageId":"1918","endLine":35,"endColumn":20},{"ruleId":"1915","severity":1,"message":"2318","line":35,"column":22,"nodeType":"1917","messageId":"1918","endLine":35,"endColumn":35},{"ruleId":"1915","severity":1,"message":"2319","line":36,"column":22,"nodeType":"1917","messageId":"1918","endLine":36,"endColumn":35},{"ruleId":"1915","severity":1,"message":"2320","line":37,"column":33,"nodeType":"1917","messageId":"1918","endLine":37,"endColumn":57},{"ruleId":"1915","severity":1,"message":"2073","line":38,"column":10,"nodeType":"1917","messageId":"1918","endLine":38,"endColumn":23},{"ruleId":"1915","severity":1,"message":"2321","line":39,"column":10,"nodeType":"1917","messageId":"1918","endLine":39,"endColumn":22},{"ruleId":"1915","severity":1,"message":"2322","line":39,"column":24,"nodeType":"1917","messageId":"1918","endLine":39,"endColumn":39},{"ruleId":"1915","severity":1,"message":"2323","line":40,"column":10,"nodeType":"1917","messageId":"1918","endLine":40,"endColumn":19},{"ruleId":"1915","severity":1,"message":"2324","line":40,"column":21,"nodeType":"1917","messageId":"1918","endLine":40,"endColumn":33},{"ruleId":"1915","severity":1,"message":"2325","line":41,"column":10,"nodeType":"1917","messageId":"1918","endLine":41,"endColumn":22},{"ruleId":"1915","severity":1,"message":"2326","line":41,"column":24,"nodeType":"1917","messageId":"1918","endLine":41,"endColumn":39},{"ruleId":"1915","severity":1,"message":"2327","line":42,"column":10,"nodeType":"1917","messageId":"1918","endLine":42,"endColumn":26},{"ruleId":"1915","severity":1,"message":"2328","line":42,"column":28,"nodeType":"1917","messageId":"1918","endLine":42,"endColumn":47},{"ruleId":"1915","severity":1,"message":"2329","line":43,"column":10,"nodeType":"1917","messageId":"1918","endLine":43,"endColumn":32},{"ruleId":"1915","severity":1,"message":"2330","line":43,"column":34,"nodeType":"1917","messageId":"1918","endLine":43,"endColumn":59},{"ruleId":"1915","severity":1,"message":"2331","line":47,"column":5,"nodeType":"1917","messageId":"1918","endLine":47,"endColumn":44},{"ruleId":"1915","severity":1,"message":"2332","line":48,"column":5,"nodeType":"1917","messageId":"1918","endLine":48,"endColumn":47},{"ruleId":"1915","severity":1,"message":"2304","line":50,"column":10,"nodeType":"1917","messageId":"1918","endLine":50,"endColumn":38},{"ruleId":"1915","severity":1,"message":"2333","line":50,"column":40,"nodeType":"1917","messageId":"1918","endLine":50,"endColumn":71},{"ruleId":"1915","severity":1,"message":"2123","line":52,"column":10,"nodeType":"1917","messageId":"1918","endLine":52,"endColumn":15},{"ruleId":"1915","severity":1,"message":"2334","line":54,"column":5,"nodeType":"1917","messageId":"1918","endLine":54,"endColumn":39},{"ruleId":"1915","severity":1,"message":"2335","line":57,"column":12,"nodeType":"1917","messageId":"1918","endLine":57,"endColumn":50},{"ruleId":"1915","severity":1,"message":"2336","line":60,"column":12,"nodeType":"1917","messageId":"1918","endLine":60,"endColumn":51},{"ruleId":"1986","severity":1,"message":"2337","line":63,"column":12,"nodeType":"1917","messageId":"1988","endLine":63,"endColumn":50},{"ruleId":"1986","severity":1,"message":"2338","line":66,"column":12,"nodeType":"1917","messageId":"1988","endLine":66,"endColumn":51},{"ruleId":"1915","severity":1,"message":"2339","line":69,"column":9,"nodeType":"1917","messageId":"1918","endLine":69,"endColumn":45},{"ruleId":"1915","severity":1,"message":"2340","line":93,"column":9,"nodeType":"1917","messageId":"1918","endLine":93,"endColumn":31},{"ruleId":"1915","severity":1,"message":"2341","line":97,"column":9,"nodeType":"1917","messageId":"1918","endLine":97,"endColumn":32},{"ruleId":"1915","severity":1,"message":"2287","line":148,"column":9,"nodeType":"1917","messageId":"1918","endLine":148,"endColumn":21},{"ruleId":"1915","severity":1,"message":"2342","line":186,"column":9,"nodeType":"1917","messageId":"1918","endLine":186,"endColumn":49},{"ruleId":"1915","severity":1,"message":"2343","line":194,"column":9,"nodeType":"1917","messageId":"1918","endLine":194,"endColumn":33},{"ruleId":"1915","severity":1,"message":"2344","line":224,"column":9,"nodeType":"1917","messageId":"1918","endLine":224,"endColumn":46},{"ruleId":"1915","severity":1,"message":"2345","line":243,"column":10,"nodeType":"1917","messageId":"1918","endLine":243,"endColumn":34},{"ruleId":"1948","severity":1,"message":"2296","line":272,"column":6,"nodeType":"1950","endLine":272,"endColumn":8,"suggestions":"2346"},{"ruleId":"1915","severity":1,"message":"2347","line":273,"column":10,"nodeType":"1917","messageId":"1918","endLine":273,"endColumn":18},{"ruleId":"1948","severity":1,"message":"2310","line":302,"column":6,"nodeType":"1950","endLine":302,"endColumn":8,"suggestions":"2348"},{"ruleId":"2298","severity":1,"message":"2299","line":314,"column":17,"nodeType":"2051","endLine":314,"endColumn":72},{"ruleId":"1915","severity":1,"message":"2129","line":2,"column":3,"nodeType":"1917","messageId":"1918","endLine":2,"endColumn":12},{"ruleId":"1915","severity":1,"message":"2149","line":3,"column":3,"nodeType":"1917","messageId":"1918","endLine":3,"endColumn":14},{"ruleId":"1915","severity":1,"message":"2150","line":4,"column":3,"nodeType":"1917","messageId":"1918","endLine":4,"endColumn":13},{"ruleId":"1915","severity":1,"message":"2151","line":5,"column":3,"nodeType":"1917","messageId":"1918","endLine":5,"endColumn":9},{"ruleId":"1915","severity":1,"message":"2152","line":6,"column":3,"nodeType":"1917","messageId":"1918","endLine":6,"endColumn":11},{"ruleId":"1915","severity":1,"message":"2109","line":9,"column":10,"nodeType":"1917","messageId":"1918","endLine":9,"endColumn":19},{"ruleId":"1915","severity":1,"message":"2085","line":10,"column":10,"nodeType":"1917","messageId":"1918","endLine":10,"endColumn":20},{"ruleId":"1915","severity":1,"message":"2300","line":11,"column":10,"nodeType":"1917","messageId":"1918","endLine":11,"endColumn":20},{"ruleId":"1915","severity":1,"message":"2279","line":12,"column":10,"nodeType":"1917","messageId":"1918","endLine":12,"endColumn":24},{"ruleId":"1915","severity":1,"message":"2160","line":13,"column":10,"nodeType":"1917","messageId":"1918","endLine":13,"endColumn":19},{"ruleId":"1915","severity":1,"message":"2159","line":14,"column":8,"nodeType":"1917","messageId":"1918","endLine":14,"endColumn":25},{"ruleId":"1915","severity":1,"message":"2218","line":15,"column":8,"nodeType":"1917","messageId":"1918","endLine":15,"endColumn":22},{"ruleId":"1915","severity":1,"message":"2153","line":16,"column":10,"nodeType":"1917","messageId":"1918","endLine":16,"endColumn":24},{"ruleId":"1915","severity":1,"message":"1937","line":18,"column":10,"nodeType":"1917","messageId":"1918","endLine":18,"endColumn":14},{"ruleId":"1915","severity":1,"message":"2090","line":22,"column":8,"nodeType":"1917","messageId":"1918","endLine":22,"endColumn":21},{"ruleId":"1915","severity":1,"message":"2349","line":33,"column":5,"nodeType":"1917","messageId":"1918","endLine":33,"endColumn":37},{"ruleId":"1915","severity":1,"message":"2350","line":34,"column":5,"nodeType":"1917","messageId":"1918","endLine":34,"endColumn":41},{"ruleId":"1915","severity":1,"message":"2317","line":38,"column":10,"nodeType":"1917","messageId":"1918","endLine":38,"endColumn":20},{"ruleId":"1915","severity":1,"message":"2351","line":40,"column":34,"nodeType":"1917","messageId":"1918","endLine":40,"endColumn":59},{"ruleId":"1915","severity":1,"message":"2073","line":41,"column":10,"nodeType":"1917","messageId":"1918","endLine":41,"endColumn":23},{"ruleId":"1915","severity":1,"message":"2321","line":42,"column":10,"nodeType":"1917","messageId":"1918","endLine":42,"endColumn":22},{"ruleId":"1915","severity":1,"message":"2322","line":42,"column":24,"nodeType":"1917","messageId":"1918","endLine":42,"endColumn":39},{"ruleId":"1915","severity":1,"message":"2323","line":43,"column":10,"nodeType":"1917","messageId":"1918","endLine":43,"endColumn":19},{"ruleId":"1915","severity":1,"message":"2324","line":43,"column":21,"nodeType":"1917","messageId":"1918","endLine":43,"endColumn":33},{"ruleId":"1915","severity":1,"message":"2325","line":44,"column":10,"nodeType":"1917","messageId":"1918","endLine":44,"endColumn":22},{"ruleId":"1915","severity":1,"message":"2326","line":44,"column":24,"nodeType":"1917","messageId":"1918","endLine":44,"endColumn":39},{"ruleId":"1915","severity":1,"message":"2327","line":45,"column":10,"nodeType":"1917","messageId":"1918","endLine":45,"endColumn":26},{"ruleId":"1915","severity":1,"message":"2328","line":45,"column":28,"nodeType":"1917","messageId":"1918","endLine":45,"endColumn":47},{"ruleId":"1915","severity":1,"message":"2329","line":46,"column":10,"nodeType":"1917","messageId":"1918","endLine":46,"endColumn":32},{"ruleId":"1915","severity":1,"message":"2330","line":46,"column":34,"nodeType":"1917","messageId":"1918","endLine":46,"endColumn":59},{"ruleId":"1915","severity":1,"message":"2331","line":50,"column":5,"nodeType":"1917","messageId":"1918","endLine":50,"endColumn":44},{"ruleId":"1915","severity":1,"message":"2332","line":51,"column":5,"nodeType":"1917","messageId":"1918","endLine":51,"endColumn":47},{"ruleId":"1915","severity":1,"message":"2352","line":54,"column":5,"nodeType":"1917","messageId":"1918","endLine":54,"endColumn":45},{"ruleId":"1915","severity":1,"message":"2353","line":55,"column":5,"nodeType":"1917","messageId":"1918","endLine":55,"endColumn":48},{"ruleId":"1915","severity":1,"message":"2123","line":57,"column":10,"nodeType":"1917","messageId":"1918","endLine":57,"endColumn":15},{"ruleId":"1915","severity":1,"message":"2354","line":59,"column":5,"nodeType":"1917","messageId":"1918","endLine":59,"endColumn":40},{"ruleId":"1915","severity":1,"message":"2355","line":62,"column":12,"nodeType":"1917","messageId":"1918","endLine":62,"endColumn":51},{"ruleId":"1915","severity":1,"message":"2356","line":65,"column":12,"nodeType":"1917","messageId":"1918","endLine":65,"endColumn":52},{"ruleId":"1986","severity":1,"message":"2357","line":68,"column":12,"nodeType":"1917","messageId":"1988","endLine":68,"endColumn":51},{"ruleId":"1986","severity":1,"message":"2358","line":71,"column":12,"nodeType":"1917","messageId":"1988","endLine":71,"endColumn":52},{"ruleId":"1915","severity":1,"message":"2359","line":99,"column":9,"nodeType":"1917","messageId":"1918","endLine":99,"endColumn":32},{"ruleId":"1915","severity":1,"message":"2287","line":151,"column":9,"nodeType":"1917","messageId":"1918","endLine":151,"endColumn":21},{"ruleId":"1915","severity":1,"message":"2360","line":190,"column":9,"nodeType":"1917","messageId":"1918","endLine":190,"endColumn":50},{"ruleId":"1915","severity":1,"message":"2361","line":198,"column":9,"nodeType":"1917","messageId":"1918","endLine":198,"endColumn":34},{"ruleId":"1915","severity":1,"message":"2362","line":227,"column":9,"nodeType":"1917","messageId":"1918","endLine":227,"endColumn":39},{"ruleId":"1948","severity":1,"message":"2310","line":274,"column":6,"nodeType":"1950","endLine":274,"endColumn":8,"suggestions":"2363"},{"ruleId":"2298","severity":1,"message":"2299","line":286,"column":17,"nodeType":"2051","endLine":286,"endColumn":72},{"ruleId":"1915","severity":1,"message":"2083","line":6,"column":3,"nodeType":"1917","messageId":"1918","endLine":6,"endColumn":13},{"ruleId":"1915","severity":1,"message":"2142","line":10,"column":10,"nodeType":"1917","messageId":"1918","endLine":10,"endColumn":28},{"ruleId":"1915","severity":1,"message":"2084","line":14,"column":10,"nodeType":"1917","messageId":"1918","endLine":14,"endColumn":19},{"ruleId":"1915","severity":1,"message":"2323","line":39,"column":10,"nodeType":"1917","messageId":"1918","endLine":39,"endColumn":19},{"ruleId":"1915","severity":1,"message":"2324","line":39,"column":21,"nodeType":"1917","messageId":"1918","endLine":39,"endColumn":33},{"ruleId":"1915","severity":1,"message":"2325","line":40,"column":10,"nodeType":"1917","messageId":"1918","endLine":40,"endColumn":22},{"ruleId":"1915","severity":1,"message":"2326","line":40,"column":24,"nodeType":"1917","messageId":"1918","endLine":40,"endColumn":39},{"ruleId":"1915","severity":1,"message":"2327","line":41,"column":10,"nodeType":"1917","messageId":"1918","endLine":41,"endColumn":26},{"ruleId":"1915","severity":1,"message":"2328","line":41,"column":28,"nodeType":"1917","messageId":"1918","endLine":41,"endColumn":47},{"ruleId":"1915","severity":1,"message":"2331","line":43,"column":5,"nodeType":"1917","messageId":"1918","endLine":43,"endColumn":44},{"ruleId":"1915","severity":1,"message":"2332","line":44,"column":5,"nodeType":"1917","messageId":"1918","endLine":44,"endColumn":47},{"ruleId":"1915","severity":1,"message":"2329","line":46,"column":10,"nodeType":"1917","messageId":"1918","endLine":46,"endColumn":32},{"ruleId":"1915","severity":1,"message":"2330","line":46,"column":34,"nodeType":"1917","messageId":"1918","endLine":46,"endColumn":59},{"ruleId":"1915","severity":1,"message":"2085","line":10,"column":10,"nodeType":"1917","messageId":"1918","endLine":10,"endColumn":20},{"ruleId":"1915","severity":1,"message":"2300","line":11,"column":10,"nodeType":"1917","messageId":"1918","endLine":11,"endColumn":20},{"ruleId":"1915","severity":1,"message":"2279","line":12,"column":10,"nodeType":"1917","messageId":"1918","endLine":12,"endColumn":24},{"ruleId":"1915","severity":1,"message":"2160","line":13,"column":10,"nodeType":"1917","messageId":"1918","endLine":13,"endColumn":19},{"ruleId":"1915","severity":1,"message":"2159","line":14,"column":8,"nodeType":"1917","messageId":"1918","endLine":14,"endColumn":25},{"ruleId":"1915","severity":1,"message":"2218","line":15,"column":8,"nodeType":"1917","messageId":"1918","endLine":15,"endColumn":22},{"ruleId":"1915","severity":1,"message":"2153","line":16,"column":10,"nodeType":"1917","messageId":"1918","endLine":16,"endColumn":24},{"ruleId":"1915","severity":1,"message":"1937","line":18,"column":10,"nodeType":"1917","messageId":"1918","endLine":18,"endColumn":14},{"ruleId":"1915","severity":1,"message":"2090","line":23,"column":8,"nodeType":"1917","messageId":"1918","endLine":23,"endColumn":21},{"ruleId":"1915","severity":1,"message":"2302","line":31,"column":10,"nodeType":"1917","messageId":"1918","endLine":31,"endColumn":39},{"ruleId":"1915","severity":1,"message":"2364","line":33,"column":35,"nodeType":"1917","messageId":"1918","endLine":33,"endColumn":61},{"ruleId":"1915","severity":1,"message":"2317","line":36,"column":10,"nodeType":"1917","messageId":"1918","endLine":36,"endColumn":20},{"ruleId":"1915","severity":1,"message":"2318","line":36,"column":22,"nodeType":"1917","messageId":"1918","endLine":36,"endColumn":35},{"ruleId":"1915","severity":1,"message":"2303","line":37,"column":10,"nodeType":"1917","messageId":"1918","endLine":37,"endColumn":20},{"ruleId":"1915","severity":1,"message":"2319","line":37,"column":22,"nodeType":"1917","messageId":"1918","endLine":37,"endColumn":35},{"ruleId":"1915","severity":1,"message":"2073","line":39,"column":10,"nodeType":"1917","messageId":"1918","endLine":39,"endColumn":23},{"ruleId":"1915","severity":1,"message":"2321","line":40,"column":10,"nodeType":"1917","messageId":"1918","endLine":40,"endColumn":22},{"ruleId":"1915","severity":1,"message":"2322","line":40,"column":24,"nodeType":"1917","messageId":"1918","endLine":40,"endColumn":39},{"ruleId":"1915","severity":1,"message":"2327","line":43,"column":10,"nodeType":"1917","messageId":"1918","endLine":43,"endColumn":26},{"ruleId":"1915","severity":1,"message":"2328","line":43,"column":28,"nodeType":"1917","messageId":"1918","endLine":43,"endColumn":47},{"ruleId":"1915","severity":1,"message":"2329","line":49,"column":10,"nodeType":"1917","messageId":"1918","endLine":49,"endColumn":32},{"ruleId":"1915","severity":1,"message":"2330","line":49,"column":34,"nodeType":"1917","messageId":"1918","endLine":49,"endColumn":59},{"ruleId":"1915","severity":1,"message":"2331","line":53,"column":5,"nodeType":"1917","messageId":"1918","endLine":53,"endColumn":44},{"ruleId":"1915","severity":1,"message":"2332","line":54,"column":5,"nodeType":"1917","messageId":"1918","endLine":54,"endColumn":47},{"ruleId":"1915","severity":1,"message":"2365","line":56,"column":10,"nodeType":"1917","messageId":"1918","endLine":56,"endColumn":40},{"ruleId":"1986","severity":1,"message":"2366","line":69,"column":12,"nodeType":"1917","messageId":"1988","endLine":69,"endColumn":50},{"ruleId":"1986","severity":1,"message":"2367","line":72,"column":12,"nodeType":"1917","messageId":"1988","endLine":72,"endColumn":51},{"ruleId":"1915","severity":1,"message":"2368","line":117,"column":9,"nodeType":"1917","messageId":"1918","endLine":117,"endColumn":31},{"ruleId":"1915","severity":1,"message":"2369","line":264,"column":9,"nodeType":"1917","messageId":"1918","endLine":264,"endColumn":49},{"ruleId":"1948","severity":1,"message":"2310","line":371,"column":6,"nodeType":"1950","endLine":371,"endColumn":8,"suggestions":"2370"},{"ruleId":"2298","severity":1,"message":"2299","line":384,"column":17,"nodeType":"2051","endLine":384,"endColumn":72},{"ruleId":"1915","severity":1,"message":"2083","line":6,"column":3,"nodeType":"1917","messageId":"1918","endLine":6,"endColumn":13},{"ruleId":"1915","severity":1,"message":"2142","line":10,"column":10,"nodeType":"1917","messageId":"1918","endLine":10,"endColumn":28},{"ruleId":"1915","severity":1,"message":"2085","line":12,"column":10,"nodeType":"1917","messageId":"1918","endLine":12,"endColumn":20},{"ruleId":"1915","severity":1,"message":"2086","line":12,"column":22,"nodeType":"1917","messageId":"1918","endLine":12,"endColumn":36},{"ruleId":"1915","severity":1,"message":"2084","line":14,"column":10,"nodeType":"1917","messageId":"1918","endLine":14,"endColumn":19},{"ruleId":"1915","severity":1,"message":"1937","line":17,"column":10,"nodeType":"1917","messageId":"1918","endLine":17,"endColumn":14},{"ruleId":"1915","severity":1,"message":"2087","line":32,"column":11,"nodeType":"1917","messageId":"1918","endLine":32,"endColumn":20},{"ruleId":"1915","severity":1,"message":"2083","line":6,"column":3,"nodeType":"1917","messageId":"1918","endLine":6,"endColumn":13},{"ruleId":"1915","severity":1,"message":"2142","line":10,"column":10,"nodeType":"1917","messageId":"1918","endLine":10,"endColumn":28},{"ruleId":"1915","severity":1,"message":"2084","line":14,"column":10,"nodeType":"1917","messageId":"1918","endLine":14,"endColumn":19},{"ruleId":"1915","severity":1,"message":"2083","line":6,"column":3,"nodeType":"1917","messageId":"1918","endLine":6,"endColumn":13},{"ruleId":"1915","severity":1,"message":"2142","line":10,"column":10,"nodeType":"1917","messageId":"1918","endLine":10,"endColumn":28},{"ruleId":"1915","severity":1,"message":"2084","line":14,"column":10,"nodeType":"1917","messageId":"1918","endLine":14,"endColumn":19},{"ruleId":"1915","severity":1,"message":"2321","line":37,"column":10,"nodeType":"1917","messageId":"1918","endLine":37,"endColumn":22},{"ruleId":"1915","severity":1,"message":"2324","line":38,"column":21,"nodeType":"1917","messageId":"1918","endLine":38,"endColumn":33},{"ruleId":"1915","severity":1,"message":"2326","line":39,"column":24,"nodeType":"1917","messageId":"1918","endLine":39,"endColumn":39},{"ruleId":"1915","severity":1,"message":"2327","line":40,"column":10,"nodeType":"1917","messageId":"1918","endLine":40,"endColumn":26},{"ruleId":"1915","severity":1,"message":"2328","line":40,"column":28,"nodeType":"1917","messageId":"1918","endLine":40,"endColumn":47},{"ruleId":"1915","severity":1,"message":"2331","line":42,"column":5,"nodeType":"1917","messageId":"1918","endLine":42,"endColumn":44},{"ruleId":"1915","severity":1,"message":"2332","line":43,"column":5,"nodeType":"1917","messageId":"1918","endLine":43,"endColumn":47},{"ruleId":"1915","severity":1,"message":"2329","line":45,"column":10,"nodeType":"1917","messageId":"1918","endLine":45,"endColumn":32},{"ruleId":"1915","severity":1,"message":"2330","line":45,"column":34,"nodeType":"1917","messageId":"1918","endLine":45,"endColumn":59},{"ruleId":"1915","severity":1,"message":"2083","line":6,"column":3,"nodeType":"1917","messageId":"1918","endLine":6,"endColumn":13},{"ruleId":"1915","severity":1,"message":"2142","line":12,"column":10,"nodeType":"1917","messageId":"1918","endLine":12,"endColumn":28},{"ruleId":"1915","severity":1,"message":"2085","line":14,"column":10,"nodeType":"1917","messageId":"1918","endLine":14,"endColumn":20},{"ruleId":"1915","severity":1,"message":"2086","line":14,"column":22,"nodeType":"1917","messageId":"1918","endLine":14,"endColumn":36},{"ruleId":"1915","severity":1,"message":"2084","line":15,"column":10,"nodeType":"1917","messageId":"1918","endLine":15,"endColumn":19},{"ruleId":"1915","severity":1,"message":"2321","line":37,"column":10,"nodeType":"1917","messageId":"1918","endLine":37,"endColumn":22},{"ruleId":"1915","severity":1,"message":"2322","line":37,"column":24,"nodeType":"1917","messageId":"1918","endLine":37,"endColumn":39},{"ruleId":"1915","severity":1,"message":"2129","line":2,"column":3,"nodeType":"1917","messageId":"1918","endLine":2,"endColumn":12},{"ruleId":"1915","severity":1,"message":"2149","line":3,"column":3,"nodeType":"1917","messageId":"1918","endLine":3,"endColumn":14},{"ruleId":"1915","severity":1,"message":"2150","line":4,"column":3,"nodeType":"1917","messageId":"1918","endLine":4,"endColumn":13},{"ruleId":"1915","severity":1,"message":"2151","line":5,"column":3,"nodeType":"1917","messageId":"1918","endLine":5,"endColumn":9},{"ruleId":"1915","severity":1,"message":"2152","line":6,"column":3,"nodeType":"1917","messageId":"1918","endLine":6,"endColumn":11},{"ruleId":"1915","severity":1,"message":"2060","line":8,"column":20,"nodeType":"1917","messageId":"1918","endLine":8,"endColumn":29},{"ruleId":"1915","severity":1,"message":"2085","line":10,"column":10,"nodeType":"1917","messageId":"1918","endLine":10,"endColumn":20},{"ruleId":"1915","severity":1,"message":"2279","line":12,"column":10,"nodeType":"1917","messageId":"1918","endLine":12,"endColumn":24},{"ruleId":"1915","severity":1,"message":"2160","line":13,"column":10,"nodeType":"1917","messageId":"1918","endLine":13,"endColumn":19},{"ruleId":"1915","severity":1,"message":"2159","line":14,"column":8,"nodeType":"1917","messageId":"1918","endLine":14,"endColumn":25},{"ruleId":"1915","severity":1,"message":"1937","line":18,"column":10,"nodeType":"1917","messageId":"1918","endLine":18,"endColumn":14},{"ruleId":"1915","severity":1,"message":"2371","line":19,"column":8,"nodeType":"1917","messageId":"1918","endLine":19,"endColumn":22},{"ruleId":"1915","severity":1,"message":"2372","line":22,"column":8,"nodeType":"1917","messageId":"1918","endLine":22,"endColumn":30},{"ruleId":"1915","severity":1,"message":"2373","line":32,"column":41,"nodeType":"1917","messageId":"1918","endLine":32,"endColumn":73},{"ruleId":"1915","severity":1,"message":"2374","line":34,"column":9,"nodeType":"1917","messageId":"1918","endLine":34,"endColumn":17},{"ruleId":"1915","severity":1,"message":"2375","line":35,"column":10,"nodeType":"1917","messageId":"1918","endLine":35,"endColumn":31},{"ruleId":"1915","severity":1,"message":"2376","line":35,"column":33,"nodeType":"1917","messageId":"1918","endLine":35,"endColumn":57},{"ruleId":"1915","severity":1,"message":"2073","line":36,"column":10,"nodeType":"1917","messageId":"1918","endLine":36,"endColumn":23},{"ruleId":"1915","severity":1,"message":"2377","line":38,"column":10,"nodeType":"1917","messageId":"1918","endLine":38,"endColumn":21},{"ruleId":"1915","severity":1,"message":"2378","line":38,"column":23,"nodeType":"1917","messageId":"1918","endLine":38,"endColumn":37},{"ruleId":"1915","severity":1,"message":"2379","line":40,"column":10,"nodeType":"1917","messageId":"1918","endLine":40,"endColumn":38},{"ruleId":"1915","severity":1,"message":"2380","line":42,"column":17,"nodeType":"1917","messageId":"1918","endLine":42,"endColumn":25},{"ruleId":"1986","severity":1,"message":"2381","line":53,"column":12,"nodeType":"1917","messageId":"1988","endLine":53,"endColumn":48},{"ruleId":"1986","severity":1,"message":"2382","line":56,"column":12,"nodeType":"1917","messageId":"1988","endLine":56,"endColumn":49},{"ruleId":"1915","severity":1,"message":"2383","line":87,"column":9,"nodeType":"1917","messageId":"1918","endLine":87,"endColumn":29},{"ruleId":"1915","severity":1,"message":"2287","line":151,"column":9,"nodeType":"1917","messageId":"1918","endLine":151,"endColumn":21},{"ruleId":"2298","severity":1,"message":"2299","line":262,"column":17,"nodeType":"2051","endLine":262,"endColumn":72},{"ruleId":"1915","severity":1,"message":"2149","line":2,"column":3,"nodeType":"1917","messageId":"1918","endLine":2,"endColumn":14},{"ruleId":"1915","severity":1,"message":"2150","line":3,"column":3,"nodeType":"1917","messageId":"1918","endLine":3,"endColumn":13},{"ruleId":"1915","severity":1,"message":"2151","line":4,"column":3,"nodeType":"1917","messageId":"1918","endLine":4,"endColumn":9},{"ruleId":"1915","severity":1,"message":"2152","line":5,"column":3,"nodeType":"1917","messageId":"1918","endLine":5,"endColumn":11},{"ruleId":"1915","severity":1,"message":"2083","line":6,"column":3,"nodeType":"1917","messageId":"1918","endLine":6,"endColumn":13},{"ruleId":"1915","severity":1,"message":"2142","line":12,"column":10,"nodeType":"1917","messageId":"1918","endLine":12,"endColumn":28},{"ruleId":"1915","severity":1,"message":"2085","line":14,"column":10,"nodeType":"1917","messageId":"1918","endLine":14,"endColumn":20},{"ruleId":"1915","severity":1,"message":"2086","line":14,"column":22,"nodeType":"1917","messageId":"1918","endLine":14,"endColumn":36},{"ruleId":"1915","severity":1,"message":"2084","line":15,"column":10,"nodeType":"1917","messageId":"1918","endLine":15,"endColumn":19},{"ruleId":"1915","severity":1,"message":"2180","line":19,"column":26,"nodeType":"1917","messageId":"1918","endLine":19,"endColumn":31},{"ruleId":"1915","severity":1,"message":"2321","line":37,"column":10,"nodeType":"1917","messageId":"1918","endLine":37,"endColumn":22},{"ruleId":"1915","severity":1,"message":"2322","line":37,"column":24,"nodeType":"1917","messageId":"1918","endLine":37,"endColumn":39},{"ruleId":"1915","severity":1,"message":"2384","line":40,"column":10,"nodeType":"1917","messageId":"1918","endLine":40,"endColumn":27},{"ruleId":"1915","severity":1,"message":"2385","line":40,"column":29,"nodeType":"1917","messageId":"1918","endLine":40,"endColumn":49},{"ruleId":"1915","severity":1,"message":"2386","line":41,"column":10,"nodeType":"1917","messageId":"1918","endLine":41,"endColumn":22},{"ruleId":"1915","severity":1,"message":"2387","line":41,"column":24,"nodeType":"1917","messageId":"1918","endLine":41,"endColumn":39},{"ruleId":"1915","severity":1,"message":"2388","line":42,"column":10,"nodeType":"1917","messageId":"1918","endLine":42,"endColumn":26},{"ruleId":"1915","severity":1,"message":"2389","line":42,"column":28,"nodeType":"1917","messageId":"1918","endLine":42,"endColumn":47},{"ruleId":"1915","severity":1,"message":"2390","line":43,"column":10,"nodeType":"1917","messageId":"1918","endLine":43,"endColumn":26},{"ruleId":"1915","severity":1,"message":"2391","line":43,"column":28,"nodeType":"1917","messageId":"1918","endLine":43,"endColumn":47},{"ruleId":"1915","severity":1,"message":"2392","line":44,"column":10,"nodeType":"1917","messageId":"1918","endLine":44,"endColumn":30},{"ruleId":"1915","severity":1,"message":"2393","line":44,"column":32,"nodeType":"1917","messageId":"1918","endLine":44,"endColumn":55},{"ruleId":"1915","severity":1,"message":"2347","line":45,"column":10,"nodeType":"1917","messageId":"1918","endLine":45,"endColumn":18},{"ruleId":"1915","severity":1,"message":"2394","line":46,"column":10,"nodeType":"1917","messageId":"1918","endLine":46,"endColumn":17},{"ruleId":"1915","severity":1,"message":"2395","line":47,"column":10,"nodeType":"1917","messageId":"1918","endLine":47,"endColumn":20},{"ruleId":"1915","severity":1,"message":"2129","line":2,"column":3,"nodeType":"1917","messageId":"1918","endLine":2,"endColumn":12},{"ruleId":"1915","severity":1,"message":"2149","line":3,"column":3,"nodeType":"1917","messageId":"1918","endLine":3,"endColumn":14},{"ruleId":"1915","severity":1,"message":"2150","line":4,"column":3,"nodeType":"1917","messageId":"1918","endLine":4,"endColumn":13},{"ruleId":"1915","severity":1,"message":"2151","line":5,"column":3,"nodeType":"1917","messageId":"1918","endLine":5,"endColumn":9},{"ruleId":"1915","severity":1,"message":"2152","line":6,"column":3,"nodeType":"1917","messageId":"1918","endLine":6,"endColumn":11},{"ruleId":"1915","severity":1,"message":"2060","line":8,"column":20,"nodeType":"1917","messageId":"1918","endLine":8,"endColumn":29},{"ruleId":"1915","severity":1,"message":"2085","line":10,"column":10,"nodeType":"1917","messageId":"1918","endLine":10,"endColumn":20},{"ruleId":"1915","severity":1,"message":"2396","line":25,"column":34,"nodeType":"1917","messageId":"1918","endLine":25,"endColumn":59},{"ruleId":"1915","severity":1,"message":"2073","line":26,"column":10,"nodeType":"1917","messageId":"1918","endLine":26,"endColumn":23},{"ruleId":"1915","severity":1,"message":"2397","line":30,"column":10,"nodeType":"1917","messageId":"1918","endLine":30,"endColumn":31},{"ruleId":"1915","severity":1,"message":"2380","line":31,"column":17,"nodeType":"1917","messageId":"1918","endLine":31,"endColumn":25},{"ruleId":"1986","severity":1,"message":"2398","line":40,"column":12,"nodeType":"1917","messageId":"1988","endLine":40,"endColumn":41},{"ruleId":"1986","severity":1,"message":"2399","line":43,"column":12,"nodeType":"1917","messageId":"1988","endLine":43,"endColumn":42},{"ruleId":"1915","severity":1,"message":"2400","line":64,"column":9,"nodeType":"1917","messageId":"1918","endLine":64,"endColumn":22},{"ruleId":"2298","severity":1,"message":"2299","line":191,"column":17,"nodeType":"2051","endLine":191,"endColumn":72},{"ruleId":"1915","severity":1,"message":"2149","line":2,"column":3,"nodeType":"1917","messageId":"1918","endLine":2,"endColumn":14},{"ruleId":"1915","severity":1,"message":"2150","line":3,"column":3,"nodeType":"1917","messageId":"1918","endLine":3,"endColumn":13},{"ruleId":"1915","severity":1,"message":"2151","line":4,"column":3,"nodeType":"1917","messageId":"1918","endLine":4,"endColumn":9},{"ruleId":"1915","severity":1,"message":"2152","line":5,"column":3,"nodeType":"1917","messageId":"1918","endLine":5,"endColumn":11},{"ruleId":"1915","severity":1,"message":"2083","line":6,"column":3,"nodeType":"1917","messageId":"1918","endLine":6,"endColumn":13},{"ruleId":"1915","severity":1,"message":"2060","line":8,"column":20,"nodeType":"1917","messageId":"1918","endLine":8,"endColumn":29},{"ruleId":"1915","severity":1,"message":"2142","line":12,"column":10,"nodeType":"1917","messageId":"1918","endLine":12,"endColumn":28},{"ruleId":"1915","severity":1,"message":"2085","line":14,"column":10,"nodeType":"1917","messageId":"1918","endLine":14,"endColumn":20},{"ruleId":"1915","severity":1,"message":"2086","line":14,"column":22,"nodeType":"1917","messageId":"1918","endLine":14,"endColumn":36},{"ruleId":"1915","severity":1,"message":"2084","line":15,"column":10,"nodeType":"1917","messageId":"1918","endLine":15,"endColumn":19},{"ruleId":"1915","severity":1,"message":"2371","line":17,"column":8,"nodeType":"1917","messageId":"1918","endLine":17,"endColumn":22},{"ruleId":"1915","severity":1,"message":"2180","line":19,"column":26,"nodeType":"1917","messageId":"1918","endLine":19,"endColumn":31},{"ruleId":"1915","severity":1,"message":"2129","line":2,"column":3,"nodeType":"1917","messageId":"1918","endLine":2,"endColumn":12},{"ruleId":"1915","severity":1,"message":"2149","line":3,"column":3,"nodeType":"1917","messageId":"1918","endLine":3,"endColumn":14},{"ruleId":"1915","severity":1,"message":"2150","line":4,"column":3,"nodeType":"1917","messageId":"1918","endLine":4,"endColumn":13},{"ruleId":"1915","severity":1,"message":"2151","line":5,"column":3,"nodeType":"1917","messageId":"1918","endLine":5,"endColumn":9},{"ruleId":"1915","severity":1,"message":"2152","line":6,"column":3,"nodeType":"1917","messageId":"1918","endLine":6,"endColumn":11},{"ruleId":"1915","severity":1,"message":"2060","line":8,"column":20,"nodeType":"1917","messageId":"1918","endLine":8,"endColumn":29},{"ruleId":"1915","severity":1,"message":"2085","line":10,"column":10,"nodeType":"1917","messageId":"1918","endLine":10,"endColumn":20},{"ruleId":"1915","severity":1,"message":"2401","line":16,"column":8,"nodeType":"1917","messageId":"1918","endLine":16,"endColumn":25},{"ruleId":"1915","severity":1,"message":"2402","line":17,"column":8,"nodeType":"1917","messageId":"1918","endLine":17,"endColumn":21},{"ruleId":"1915","severity":1,"message":"2403","line":27,"column":34,"nodeType":"1917","messageId":"1918","endLine":27,"endColumn":59},{"ruleId":"1915","severity":1,"message":"2073","line":28,"column":10,"nodeType":"1917","messageId":"1918","endLine":28,"endColumn":23},{"ruleId":"1915","severity":1,"message":"2404","line":32,"column":10,"nodeType":"1917","messageId":"1918","endLine":32,"endColumn":31},{"ruleId":"1915","severity":1,"message":"2380","line":33,"column":17,"nodeType":"1917","messageId":"1918","endLine":33,"endColumn":25},{"ruleId":"1986","severity":1,"message":"2405","line":42,"column":12,"nodeType":"1917","messageId":"1988","endLine":42,"endColumn":41},{"ruleId":"1986","severity":1,"message":"2406","line":45,"column":12,"nodeType":"1917","messageId":"1988","endLine":45,"endColumn":42},{"ruleId":"1915","severity":1,"message":"2407","line":72,"column":9,"nodeType":"1917","messageId":"1918","endLine":72,"endColumn":22},{"ruleId":"2057","severity":1,"message":"2408","line":175,"column":11,"nodeType":"2059","messageId":"1929","endLine":175,"endColumn":23},{"ruleId":"2298","severity":1,"message":"2299","line":220,"column":17,"nodeType":"2051","endLine":220,"endColumn":72},{"ruleId":"2066","replacedBy":"2409"},{"ruleId":"1915","severity":1,"message":"2149","line":2,"column":3,"nodeType":"1917","messageId":"1918","endLine":2,"endColumn":14},{"ruleId":"1915","severity":1,"message":"2150","line":3,"column":3,"nodeType":"1917","messageId":"1918","endLine":3,"endColumn":13},{"ruleId":"1915","severity":1,"message":"2151","line":4,"column":3,"nodeType":"1917","messageId":"1918","endLine":4,"endColumn":9},{"ruleId":"1915","severity":1,"message":"2152","line":5,"column":3,"nodeType":"1917","messageId":"1918","endLine":5,"endColumn":11},{"ruleId":"1915","severity":1,"message":"2083","line":6,"column":3,"nodeType":"1917","messageId":"1918","endLine":6,"endColumn":13},{"ruleId":"1915","severity":1,"message":"2060","line":8,"column":20,"nodeType":"1917","messageId":"1918","endLine":8,"endColumn":29},{"ruleId":"1915","severity":1,"message":"2142","line":12,"column":10,"nodeType":"1917","messageId":"1918","endLine":12,"endColumn":28},{"ruleId":"1915","severity":1,"message":"2085","line":14,"column":10,"nodeType":"1917","messageId":"1918","endLine":14,"endColumn":20},{"ruleId":"1915","severity":1,"message":"2086","line":14,"column":22,"nodeType":"1917","messageId":"1918","endLine":14,"endColumn":36},{"ruleId":"1915","severity":1,"message":"2084","line":15,"column":10,"nodeType":"1917","messageId":"1918","endLine":15,"endColumn":19},{"ruleId":"1915","severity":1,"message":"2371","line":17,"column":8,"nodeType":"1917","messageId":"1918","endLine":17,"endColumn":22},{"ruleId":"1915","severity":1,"message":"2180","line":19,"column":26,"nodeType":"1917","messageId":"1918","endLine":19,"endColumn":31},{"ruleId":"1915","severity":1,"message":"2083","line":6,"column":3,"nodeType":"1917","messageId":"1918","endLine":6,"endColumn":13},{"ruleId":"1915","severity":1,"message":"2142","line":10,"column":10,"nodeType":"1917","messageId":"1918","endLine":10,"endColumn":28},{"ruleId":"1915","severity":1,"message":"2084","line":14,"column":10,"nodeType":"1917","messageId":"1918","endLine":14,"endColumn":19},{"ruleId":"1915","severity":1,"message":"1947","line":51,"column":10,"nodeType":"1917","messageId":"1918","endLine":51,"endColumn":19},{"ruleId":"1915","severity":1,"message":"2129","line":2,"column":3,"nodeType":"1917","messageId":"1918","endLine":2,"endColumn":12},{"ruleId":"1915","severity":1,"message":"2085","line":10,"column":10,"nodeType":"1917","messageId":"1918","endLine":10,"endColumn":20},{"ruleId":"1915","severity":1,"message":"2410","line":25,"column":32,"nodeType":"1917","messageId":"1918","endLine":25,"endColumn":55},{"ruleId":"1915","severity":1,"message":"2073","line":26,"column":10,"nodeType":"1917","messageId":"1918","endLine":26,"endColumn":23},{"ruleId":"1915","severity":1,"message":"2411","line":31,"column":10,"nodeType":"1917","messageId":"1918","endLine":31,"endColumn":29},{"ruleId":"1915","severity":1,"message":"2380","line":32,"column":17,"nodeType":"1917","messageId":"1918","endLine":32,"endColumn":25},{"ruleId":"1986","severity":1,"message":"2412","line":41,"column":12,"nodeType":"1917","messageId":"1988","endLine":41,"endColumn":39},{"ruleId":"1986","severity":1,"message":"2413","line":44,"column":12,"nodeType":"1917","messageId":"1988","endLine":44,"endColumn":40},{"ruleId":"1915","severity":1,"message":"2414","line":70,"column":9,"nodeType":"1917","messageId":"1918","endLine":70,"endColumn":20},{"ruleId":"2298","severity":1,"message":"2299","line":230,"column":17,"nodeType":"2051","endLine":230,"endColumn":72},{"ruleId":"1915","severity":1,"message":"2083","line":6,"column":3,"nodeType":"1917","messageId":"1918","endLine":6,"endColumn":13},{"ruleId":"1915","severity":1,"message":"2060","line":8,"column":20,"nodeType":"1917","messageId":"1918","endLine":8,"endColumn":29},{"ruleId":"1915","severity":1,"message":"2142","line":12,"column":10,"nodeType":"1917","messageId":"1918","endLine":12,"endColumn":28},{"ruleId":"1915","severity":1,"message":"2085","line":14,"column":10,"nodeType":"1917","messageId":"1918","endLine":14,"endColumn":20},{"ruleId":"1915","severity":1,"message":"2086","line":14,"column":22,"nodeType":"1917","messageId":"1918","endLine":14,"endColumn":36},{"ruleId":"1915","severity":1,"message":"2084","line":15,"column":10,"nodeType":"1917","messageId":"1918","endLine":15,"endColumn":19},{"ruleId":"1915","severity":1,"message":"2371","line":17,"column":8,"nodeType":"1917","messageId":"1918","endLine":17,"endColumn":22},{"ruleId":"1915","severity":1,"message":"2180","line":19,"column":26,"nodeType":"1917","messageId":"1918","endLine":19,"endColumn":31},{"ruleId":"1915","severity":1,"message":"2129","line":2,"column":3,"nodeType":"1917","messageId":"1918","endLine":2,"endColumn":12},{"ruleId":"1915","severity":1,"message":"2149","line":3,"column":3,"nodeType":"1917","messageId":"1918","endLine":3,"endColumn":14},{"ruleId":"1915","severity":1,"message":"2150","line":4,"column":3,"nodeType":"1917","messageId":"1918","endLine":4,"endColumn":13},{"ruleId":"1915","severity":1,"message":"2151","line":5,"column":3,"nodeType":"1917","messageId":"1918","endLine":5,"endColumn":9},{"ruleId":"1915","severity":1,"message":"2152","line":6,"column":3,"nodeType":"1917","messageId":"1918","endLine":6,"endColumn":11},{"ruleId":"1915","severity":1,"message":"2060","line":8,"column":20,"nodeType":"1917","messageId":"1918","endLine":8,"endColumn":29},{"ruleId":"1915","severity":1,"message":"2085","line":10,"column":10,"nodeType":"1917","messageId":"1918","endLine":10,"endColumn":20},{"ruleId":"1915","severity":1,"message":"2415","line":25,"column":43,"nodeType":"1917","messageId":"1918","endLine":25,"endColumn":77},{"ruleId":"1915","severity":1,"message":"2073","line":27,"column":10,"nodeType":"1917","messageId":"1918","endLine":27,"endColumn":23},{"ruleId":"1915","severity":1,"message":"2416","line":31,"column":10,"nodeType":"1917","messageId":"1918","endLine":31,"endColumn":40},{"ruleId":"1915","severity":1,"message":"2380","line":33,"column":17,"nodeType":"1917","messageId":"1918","endLine":33,"endColumn":25},{"ruleId":"1986","severity":1,"message":"2417","line":44,"column":12,"nodeType":"1917","messageId":"1988","endLine":44,"endColumn":50},{"ruleId":"1986","severity":1,"message":"2418","line":47,"column":12,"nodeType":"1917","messageId":"1988","endLine":47,"endColumn":51},{"ruleId":"1915","severity":1,"message":"2419","line":73,"column":9,"nodeType":"1917","messageId":"1918","endLine":73,"endColumn":31},{"ruleId":"1915","severity":1,"message":"2287","line":123,"column":9,"nodeType":"1917","messageId":"1918","endLine":123,"endColumn":21},{"ruleId":"2298","severity":1,"message":"2299","line":225,"column":17,"nodeType":"2051","endLine":225,"endColumn":72},{"ruleId":"1915","severity":1,"message":"2149","line":2,"column":3,"nodeType":"1917","messageId":"1918","endLine":2,"endColumn":14},{"ruleId":"1915","severity":1,"message":"2150","line":3,"column":3,"nodeType":"1917","messageId":"1918","endLine":3,"endColumn":13},{"ruleId":"1915","severity":1,"message":"2151","line":4,"column":3,"nodeType":"1917","messageId":"1918","endLine":4,"endColumn":9},{"ruleId":"1915","severity":1,"message":"2152","line":5,"column":3,"nodeType":"1917","messageId":"1918","endLine":5,"endColumn":11},{"ruleId":"1915","severity":1,"message":"2083","line":6,"column":3,"nodeType":"1917","messageId":"1918","endLine":6,"endColumn":13},{"ruleId":"1915","severity":1,"message":"2060","line":8,"column":20,"nodeType":"1917","messageId":"1918","endLine":8,"endColumn":29},{"ruleId":"1915","severity":1,"message":"2142","line":11,"column":10,"nodeType":"1917","messageId":"1918","endLine":11,"endColumn":28},{"ruleId":"1915","severity":1,"message":"2085","line":13,"column":10,"nodeType":"1917","messageId":"1918","endLine":13,"endColumn":20},{"ruleId":"1915","severity":1,"message":"2086","line":13,"column":22,"nodeType":"1917","messageId":"1918","endLine":13,"endColumn":36},{"ruleId":"1915","severity":1,"message":"2084","line":14,"column":10,"nodeType":"1917","messageId":"1918","endLine":14,"endColumn":19},{"ruleId":"1915","severity":1,"message":"2180","line":16,"column":26,"nodeType":"1917","messageId":"1918","endLine":16,"endColumn":31},{"ruleId":"2066","replacedBy":"2420"},{"ruleId":"1915","severity":1,"message":"2276","line":1,"column":10,"nodeType":"1917","messageId":"1918","endLine":1,"endColumn":18},{"ruleId":"1915","severity":1,"message":"2060","line":1,"column":20,"nodeType":"1917","messageId":"1918","endLine":1,"endColumn":29},{"ruleId":"1915","severity":1,"message":"2129","line":3,"column":3,"nodeType":"1917","messageId":"1918","endLine":3,"endColumn":12},{"ruleId":"1915","severity":1,"message":"2149","line":4,"column":3,"nodeType":"1917","messageId":"1918","endLine":4,"endColumn":14},{"ruleId":"1915","severity":1,"message":"2150","line":5,"column":3,"nodeType":"1917","messageId":"1918","endLine":5,"endColumn":13},{"ruleId":"1915","severity":1,"message":"2151","line":6,"column":3,"nodeType":"1917","messageId":"1918","endLine":6,"endColumn":9},{"ruleId":"1915","severity":1,"message":"2152","line":7,"column":3,"nodeType":"1917","messageId":"1918","endLine":7,"endColumn":11},{"ruleId":"1915","severity":1,"message":"2085","line":9,"column":10,"nodeType":"1917","messageId":"1918","endLine":9,"endColumn":20},{"ruleId":"1915","severity":1,"message":"2421","line":14,"column":8,"nodeType":"1917","messageId":"1918","endLine":14,"endColumn":11},{"ruleId":"1915","severity":1,"message":"2060","line":1,"column":20,"nodeType":"1917","messageId":"1918","endLine":1,"endColumn":29},{"ruleId":"1915","severity":1,"message":"2129","line":3,"column":3,"nodeType":"1917","messageId":"1918","endLine":3,"endColumn":12},{"ruleId":"1915","severity":1,"message":"2422","line":11,"column":10,"nodeType":"1917","messageId":"1918","endLine":11,"endColumn":24},{"ruleId":"1915","severity":1,"message":"2423","line":11,"column":26,"nodeType":"1917","messageId":"1918","endLine":11,"endColumn":43},{"ruleId":"1915","severity":1,"message":"2424","line":12,"column":10,"nodeType":"1917","messageId":"1918","endLine":12,"endColumn":22},{"ruleId":"1915","severity":1,"message":"2425","line":12,"column":24,"nodeType":"1917","messageId":"1918","endLine":12,"endColumn":39},{"ruleId":"1915","severity":1,"message":"2426","line":13,"column":10,"nodeType":"1917","messageId":"1918","endLine":13,"endColumn":14},{"ruleId":"1915","severity":1,"message":"2427","line":13,"column":16,"nodeType":"1917","messageId":"1918","endLine":13,"endColumn":23},{"ruleId":"1915","severity":1,"message":"2428","line":20,"column":10,"nodeType":"1917","messageId":"1918","endLine":20,"endColumn":22},{"ruleId":"1915","severity":1,"message":"2429","line":20,"column":24,"nodeType":"1917","messageId":"1918","endLine":20,"endColumn":39},{"ruleId":"1915","severity":1,"message":"2430","line":24,"column":10,"nodeType":"1917","messageId":"1918","endLine":24,"endColumn":23},{"ruleId":"1915","severity":1,"message":"2431","line":24,"column":25,"nodeType":"1917","messageId":"1918","endLine":24,"endColumn":41},{"ruleId":"1915","severity":1,"message":"2323","line":30,"column":7,"nodeType":"1917","messageId":"1918","endLine":30,"endColumn":16},{"ruleId":"1915","severity":1,"message":"2432","line":31,"column":9,"nodeType":"1917","messageId":"1918","endLine":31,"endColumn":17},{"ruleId":"1926","severity":1,"message":"1927","line":37,"column":17,"nodeType":"1928","messageId":"1929","endLine":37,"endColumn":19},{"ruleId":"1926","severity":1,"message":"1927","line":38,"column":19,"nodeType":"1928","messageId":"1929","endLine":38,"endColumn":21},{"ruleId":"1926","severity":1,"message":"1927","line":39,"column":24,"nodeType":"1928","messageId":"1929","endLine":39,"endColumn":26},{"ruleId":"1926","severity":1,"message":"1927","line":40,"column":19,"nodeType":"1928","messageId":"1929","endLine":40,"endColumn":21},{"ruleId":"1926","severity":1,"message":"1927","line":52,"column":26,"nodeType":"1928","messageId":"1929","endLine":52,"endColumn":28},{"ruleId":"1926","severity":1,"message":"1927","line":78,"column":19,"nodeType":"1928","messageId":"1929","endLine":78,"endColumn":21},{"ruleId":"1926","severity":1,"message":"1927","line":89,"column":26,"nodeType":"1928","messageId":"1929","endLine":89,"endColumn":28},{"ruleId":"1926","severity":1,"message":"1927","line":114,"column":24,"nodeType":"1928","messageId":"1929","endLine":114,"endColumn":26},{"ruleId":"1926","severity":1,"message":"1927","line":115,"column":19,"nodeType":"1928","messageId":"1929","endLine":115,"endColumn":21},{"ruleId":"1926","severity":1,"message":"1927","line":127,"column":26,"nodeType":"1928","messageId":"1929","endLine":127,"endColumn":28},{"ruleId":"1926","severity":1,"message":"1927","line":153,"column":19,"nodeType":"1928","messageId":"1929","endLine":153,"endColumn":21},{"ruleId":"1926","severity":1,"message":"1927","line":164,"column":26,"nodeType":"1928","messageId":"1929","endLine":164,"endColumn":28},{"ruleId":"1926","severity":1,"message":"1927","line":189,"column":24,"nodeType":"1928","messageId":"1929","endLine":189,"endColumn":26},{"ruleId":"1926","severity":1,"message":"1927","line":190,"column":19,"nodeType":"1928","messageId":"1929","endLine":190,"endColumn":21},{"ruleId":"1926","severity":1,"message":"1927","line":191,"column":24,"nodeType":"1928","messageId":"1929","endLine":191,"endColumn":26},{"ruleId":"1926","severity":1,"message":"1927","line":192,"column":19,"nodeType":"1928","messageId":"1929","endLine":192,"endColumn":21},{"ruleId":"1926","severity":1,"message":"1927","line":204,"column":26,"nodeType":"1928","messageId":"1929","endLine":204,"endColumn":28},{"ruleId":"1926","severity":1,"message":"1927","line":230,"column":19,"nodeType":"1928","messageId":"1929","endLine":230,"endColumn":21},{"ruleId":"1926","severity":1,"message":"1927","line":241,"column":26,"nodeType":"1928","messageId":"1929","endLine":241,"endColumn":28},{"ruleId":"1926","severity":1,"message":"1927","line":266,"column":24,"nodeType":"1928","messageId":"1929","endLine":266,"endColumn":26},{"ruleId":"1926","severity":1,"message":"1927","line":267,"column":19,"nodeType":"1928","messageId":"1929","endLine":267,"endColumn":21},{"ruleId":"1926","severity":1,"message":"1927","line":279,"column":26,"nodeType":"1928","messageId":"1929","endLine":279,"endColumn":28},{"ruleId":"1926","severity":1,"message":"1927","line":305,"column":19,"nodeType":"1928","messageId":"1929","endLine":305,"endColumn":21},{"ruleId":"1926","severity":1,"message":"1927","line":316,"column":26,"nodeType":"1928","messageId":"1929","endLine":316,"endColumn":28},{"ruleId":"1926","severity":1,"message":"1927","line":341,"column":24,"nodeType":"1928","messageId":"1929","endLine":341,"endColumn":26},{"ruleId":"1926","severity":1,"message":"1927","line":342,"column":19,"nodeType":"1928","messageId":"1929","endLine":342,"endColumn":21},{"ruleId":"1926","severity":1,"message":"1927","line":343,"column":24,"nodeType":"1928","messageId":"1929","endLine":343,"endColumn":26},{"ruleId":"1926","severity":1,"message":"1927","line":344,"column":19,"nodeType":"1928","messageId":"1929","endLine":344,"endColumn":21},{"ruleId":"1926","severity":1,"message":"1927","line":356,"column":26,"nodeType":"1928","messageId":"1929","endLine":356,"endColumn":28},{"ruleId":"1926","severity":1,"message":"1927","line":382,"column":19,"nodeType":"1928","messageId":"1929","endLine":382,"endColumn":21},{"ruleId":"1926","severity":1,"message":"1927","line":393,"column":26,"nodeType":"1928","messageId":"1929","endLine":393,"endColumn":28},{"ruleId":"1926","severity":1,"message":"1927","line":418,"column":24,"nodeType":"1928","messageId":"1929","endLine":418,"endColumn":26},{"ruleId":"1926","severity":1,"message":"1927","line":419,"column":19,"nodeType":"1928","messageId":"1929","endLine":419,"endColumn":21},{"ruleId":"1926","severity":1,"message":"1927","line":431,"column":26,"nodeType":"1928","messageId":"1929","endLine":431,"endColumn":28},{"ruleId":"1926","severity":1,"message":"1927","line":457,"column":19,"nodeType":"1928","messageId":"1929","endLine":457,"endColumn":21},{"ruleId":"1926","severity":1,"message":"1927","line":468,"column":26,"nodeType":"1928","messageId":"1929","endLine":468,"endColumn":28},{"ruleId":"1926","severity":1,"message":"1927","line":494,"column":19,"nodeType":"1928","messageId":"1929","endLine":494,"endColumn":21},{"ruleId":"1926","severity":1,"message":"1927","line":495,"column":24,"nodeType":"1928","messageId":"1929","endLine":495,"endColumn":26},{"ruleId":"1926","severity":1,"message":"1927","line":496,"column":19,"nodeType":"1928","messageId":"1929","endLine":496,"endColumn":21},{"ruleId":"1926","severity":1,"message":"1927","line":508,"column":26,"nodeType":"1928","messageId":"1929","endLine":508,"endColumn":28},{"ruleId":"1926","severity":1,"message":"1927","line":534,"column":19,"nodeType":"1928","messageId":"1929","endLine":534,"endColumn":21},{"ruleId":"1926","severity":1,"message":"1927","line":545,"column":26,"nodeType":"1928","messageId":"1929","endLine":545,"endColumn":28},{"ruleId":"1926","severity":1,"message":"1927","line":570,"column":24,"nodeType":"1928","messageId":"1929","endLine":570,"endColumn":26},{"ruleId":"1926","severity":1,"message":"1927","line":571,"column":19,"nodeType":"1928","messageId":"1929","endLine":571,"endColumn":21},{"ruleId":"1926","severity":1,"message":"1927","line":583,"column":26,"nodeType":"1928","messageId":"1929","endLine":583,"endColumn":28},{"ruleId":"1926","severity":1,"message":"1927","line":609,"column":19,"nodeType":"1928","messageId":"1929","endLine":609,"endColumn":21},{"ruleId":"1926","severity":1,"message":"1927","line":620,"column":26,"nodeType":"1928","messageId":"1929","endLine":620,"endColumn":28},{"ruleId":"1915","severity":1,"message":"2060","line":1,"column":20,"nodeType":"1917","messageId":"1918","endLine":1,"endColumn":29},{"ruleId":"1915","severity":1,"message":"2129","line":3,"column":3,"nodeType":"1917","messageId":"1918","endLine":3,"endColumn":12},{"ruleId":"1915","severity":1,"message":"2422","line":11,"column":10,"nodeType":"1917","messageId":"1918","endLine":11,"endColumn":24},{"ruleId":"1915","severity":1,"message":"2423","line":11,"column":26,"nodeType":"1917","messageId":"1918","endLine":11,"endColumn":43},{"ruleId":"1915","severity":1,"message":"2424","line":12,"column":10,"nodeType":"1917","messageId":"1918","endLine":12,"endColumn":22},{"ruleId":"1915","severity":1,"message":"2425","line":12,"column":24,"nodeType":"1917","messageId":"1918","endLine":12,"endColumn":39},{"ruleId":"1915","severity":1,"message":"2426","line":13,"column":10,"nodeType":"1917","messageId":"1918","endLine":13,"endColumn":14},{"ruleId":"1915","severity":1,"message":"2427","line":13,"column":16,"nodeType":"1917","messageId":"1918","endLine":13,"endColumn":23},{"ruleId":"1915","severity":1,"message":"2428","line":20,"column":10,"nodeType":"1917","messageId":"1918","endLine":20,"endColumn":22},{"ruleId":"1915","severity":1,"message":"2429","line":20,"column":24,"nodeType":"1917","messageId":"1918","endLine":20,"endColumn":39},{"ruleId":"1915","severity":1,"message":"2430","line":24,"column":10,"nodeType":"1917","messageId":"1918","endLine":24,"endColumn":23},{"ruleId":"1915","severity":1,"message":"2431","line":24,"column":25,"nodeType":"1917","messageId":"1918","endLine":24,"endColumn":41},{"ruleId":"1926","severity":1,"message":"1927","line":32,"column":17,"nodeType":"1928","messageId":"1929","endLine":32,"endColumn":19},{"ruleId":"1926","severity":1,"message":"1927","line":33,"column":19,"nodeType":"1928","messageId":"1929","endLine":33,"endColumn":21},{"ruleId":"1926","severity":1,"message":"1927","line":34,"column":24,"nodeType":"1928","messageId":"1929","endLine":34,"endColumn":26},{"ruleId":"1926","severity":1,"message":"1927","line":35,"column":19,"nodeType":"1928","messageId":"1929","endLine":35,"endColumn":21},{"ruleId":"1926","severity":1,"message":"1927","line":47,"column":26,"nodeType":"1928","messageId":"1929","endLine":47,"endColumn":28},{"ruleId":"1926","severity":1,"message":"1927","line":73,"column":19,"nodeType":"1928","messageId":"1929","endLine":73,"endColumn":21},{"ruleId":"1926","severity":1,"message":"1927","line":84,"column":26,"nodeType":"1928","messageId":"1929","endLine":84,"endColumn":28},{"ruleId":"1926","severity":1,"message":"1927","line":109,"column":24,"nodeType":"1928","messageId":"1929","endLine":109,"endColumn":26},{"ruleId":"1926","severity":1,"message":"1927","line":110,"column":19,"nodeType":"1928","messageId":"1929","endLine":110,"endColumn":21},{"ruleId":"1926","severity":1,"message":"1927","line":122,"column":26,"nodeType":"1928","messageId":"1929","endLine":122,"endColumn":28},{"ruleId":"1926","severity":1,"message":"1927","line":148,"column":19,"nodeType":"1928","messageId":"1929","endLine":148,"endColumn":21},{"ruleId":"1926","severity":1,"message":"1927","line":159,"column":26,"nodeType":"1928","messageId":"1929","endLine":159,"endColumn":28},{"ruleId":"1926","severity":1,"message":"1927","line":184,"column":24,"nodeType":"1928","messageId":"1929","endLine":184,"endColumn":26},{"ruleId":"1926","severity":1,"message":"1927","line":185,"column":19,"nodeType":"1928","messageId":"1929","endLine":185,"endColumn":21},{"ruleId":"1926","severity":1,"message":"1927","line":186,"column":24,"nodeType":"1928","messageId":"1929","endLine":186,"endColumn":26},{"ruleId":"1926","severity":1,"message":"1927","line":187,"column":19,"nodeType":"1928","messageId":"1929","endLine":187,"endColumn":21},{"ruleId":"1926","severity":1,"message":"1927","line":199,"column":26,"nodeType":"1928","messageId":"1929","endLine":199,"endColumn":28},{"ruleId":"1926","severity":1,"message":"1927","line":225,"column":19,"nodeType":"1928","messageId":"1929","endLine":225,"endColumn":21},{"ruleId":"1926","severity":1,"message":"1927","line":236,"column":26,"nodeType":"1928","messageId":"1929","endLine":236,"endColumn":28},{"ruleId":"1926","severity":1,"message":"1927","line":261,"column":24,"nodeType":"1928","messageId":"1929","endLine":261,"endColumn":26},{"ruleId":"1926","severity":1,"message":"1927","line":262,"column":19,"nodeType":"1928","messageId":"1929","endLine":262,"endColumn":21},{"ruleId":"1926","severity":1,"message":"1927","line":274,"column":26,"nodeType":"1928","messageId":"1929","endLine":274,"endColumn":28},{"ruleId":"1926","severity":1,"message":"1927","line":300,"column":19,"nodeType":"1928","messageId":"1929","endLine":300,"endColumn":21},{"ruleId":"1926","severity":1,"message":"1927","line":311,"column":26,"nodeType":"1928","messageId":"1929","endLine":311,"endColumn":28},{"ruleId":"1926","severity":1,"message":"1927","line":336,"column":24,"nodeType":"1928","messageId":"1929","endLine":336,"endColumn":26},{"ruleId":"1926","severity":1,"message":"1927","line":337,"column":19,"nodeType":"1928","messageId":"1929","endLine":337,"endColumn":21},{"ruleId":"1926","severity":1,"message":"1927","line":338,"column":24,"nodeType":"1928","messageId":"1929","endLine":338,"endColumn":26},{"ruleId":"1926","severity":1,"message":"1927","line":339,"column":19,"nodeType":"1928","messageId":"1929","endLine":339,"endColumn":21},{"ruleId":"1926","severity":1,"message":"1927","line":351,"column":26,"nodeType":"1928","messageId":"1929","endLine":351,"endColumn":28},{"ruleId":"1926","severity":1,"message":"1927","line":377,"column":19,"nodeType":"1928","messageId":"1929","endLine":377,"endColumn":21},{"ruleId":"1926","severity":1,"message":"1927","line":388,"column":26,"nodeType":"1928","messageId":"1929","endLine":388,"endColumn":28},{"ruleId":"1926","severity":1,"message":"1927","line":413,"column":24,"nodeType":"1928","messageId":"1929","endLine":413,"endColumn":26},{"ruleId":"1926","severity":1,"message":"1927","line":414,"column":19,"nodeType":"1928","messageId":"1929","endLine":414,"endColumn":21},{"ruleId":"1926","severity":1,"message":"1927","line":426,"column":26,"nodeType":"1928","messageId":"1929","endLine":426,"endColumn":28},{"ruleId":"1926","severity":1,"message":"1927","line":452,"column":19,"nodeType":"1928","messageId":"1929","endLine":452,"endColumn":21},{"ruleId":"1926","severity":1,"message":"1927","line":463,"column":26,"nodeType":"1928","messageId":"1929","endLine":463,"endColumn":28},{"ruleId":"1926","severity":1,"message":"1927","line":489,"column":19,"nodeType":"1928","messageId":"1929","endLine":489,"endColumn":21},{"ruleId":"1926","severity":1,"message":"1927","line":490,"column":24,"nodeType":"1928","messageId":"1929","endLine":490,"endColumn":26},{"ruleId":"1926","severity":1,"message":"1927","line":491,"column":19,"nodeType":"1928","messageId":"1929","endLine":491,"endColumn":21},{"ruleId":"1926","severity":1,"message":"1927","line":503,"column":26,"nodeType":"1928","messageId":"1929","endLine":503,"endColumn":28},{"ruleId":"1926","severity":1,"message":"1927","line":529,"column":19,"nodeType":"1928","messageId":"1929","endLine":529,"endColumn":21},{"ruleId":"1926","severity":1,"message":"1927","line":540,"column":26,"nodeType":"1928","messageId":"1929","endLine":540,"endColumn":28},{"ruleId":"1926","severity":1,"message":"1927","line":565,"column":24,"nodeType":"1928","messageId":"1929","endLine":565,"endColumn":26},{"ruleId":"1926","severity":1,"message":"1927","line":566,"column":19,"nodeType":"1928","messageId":"1929","endLine":566,"endColumn":21},{"ruleId":"1926","severity":1,"message":"1927","line":578,"column":26,"nodeType":"1928","messageId":"1929","endLine":578,"endColumn":28},{"ruleId":"1926","severity":1,"message":"1927","line":604,"column":19,"nodeType":"1928","messageId":"1929","endLine":604,"endColumn":21},{"ruleId":"1926","severity":1,"message":"1927","line":615,"column":26,"nodeType":"1928","messageId":"1929","endLine":615,"endColumn":28},"no-unused-vars","'RegistrationPage' is defined but never used.","Identifier","unusedVar","'open' is assigned a value but never used.","'setOpen' is assigned a value but never used.","'isValid' is assigned a value but never used.","'setIsValid' is assigned a value but never used.","'loginDataService' is defined but never used.","'Id' is assigned a value but never used.","'setId' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'setSpecificEligibilityCriteria' is assigned a value but never used.","'setGeneralEligibilityCriteria' is assigned a value but never used.","'setSpecificElements' is assigned a value but never used.","'handleGeneralOpenModal' is defined but never used.","'handleOpenModal' is defined but never used.","'BsSearch' is defined but never used.","'AiFillEnvironment' is defined but never used.","'Link' is defined but never used.","'Navigate' is defined but never used.","'Basic' is defined but never used.","'BsWindowPlus' is defined but never used.","'useForm' is defined but never used.","'useUploadFile' is defined but never used.","'martailStatus' is assigned a value but never used.","'martailStatusHold' is assigned a value but never used.","'martailStatusHoldSetData' is assigned a value but never used.","'setMartailStatusHoldSetData' is assigned a value but never used.","'fileInfos' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'updateCompanyNGOAndEmbassyInformationById'. Either include it or remove the dependency array.","ArrayExpression",["2433"],"'NGOAndEmbassyInfo' is assigned a value but never used.","'leftNav' is assigned a value but never used.","'currentIndex' is assigned a value but never used.","'setCurrentIndex' is assigned a value but never used.","'getSoleTaxId' is assigned a value but never used.","'setGetSoleTaxId' is assigned a value but never used.","'grauntorInformationId' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getSoleANdPartinershipById'. Either include it or remove the dependency array.",["2434"],"React Hook useEffect has a missing dependency: 'updateSoleAndPartinershipInfo'. Either include it or remove the dependency array.",["2435"],"React Hook useEffect has a missing dependency: 'updateTaxById'. Either include it or remove the dependency array.",["2436"],"React Hook useEffect has a missing dependency: 'updateTaxInfo'. Either include it or remove the dependency array.",["2437"],"React Hook useEffect has a missing dependency: 'updateCompanyById'. Either include it or remove the dependency array.",["2438"],"React Hook useEffect has a missing dependency: 'updateCompanyInfo'. Either include it or remove the dependency array.",["2439"],"React Hook useEffect has a missing dependency: 'getAddressByCompanyId'. Either include it or remove the dependency array.",["2440"],"React Hook useEffect has a missing dependency: 'updateCompanyAddressById'. Either include it or remove the dependency array.",["2441"],"React Hook useEffect has a missing dependency: 'getContactInformationBy'. Either include it or remove the dependency array.",["2442"],"React Hook useEffect has a missing dependency: 'updateCompanyContactInformationById'. Either include it or remove the dependency array.",["2443"],["2444"],"React Hook useEffect has a missing dependency: 'updateCompanyAccountInformationById'. Either include it or remove the dependency array.",["2445"],"React Hook useEffect has a missing dependency: 'getTradeInformationBy'. Either include it or remove the dependency array.",["2446"],"React Hook useEffect has a missing dependency: 'updateCompanyTradeInformationById'. Either include it or remove the dependency array.",["2447"],"no-redeclare","'handleGeneralCloseModal' is already defined.","redeclared","'employeeInfoIdForLocal' is assigned a value but never used.","'setEmployeeInfoIdForLocal' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'updateMarriedById'. Either include it or remove the dependency array.",["2448"],"React Hook useEffect has a missing dependency: 'updateMarriedInfo'. Either include it or remove the dependency array.",["2449"],"'updateDivorcedById' is assigned a value but never used.",["2450"],"React Hook useEffect has a missing dependency: 'updateDivorcedInfo'. Either include it or remove the dependency array.",["2451"],"'updateWidowedById' is assigned a value but never used.",["2452"],"React Hook useEffect has a missing dependency: 'updateWidowedInfo'. Either include it or remove the dependency array.",["2453"],"'updateUnmarriedById' is assigned a value but never used.",["2454"],"React Hook useEffect has a missing dependency: 'updateUnmarriedInfo'. Either include it or remove the dependency array.",["2455"],"'newMartailStatusUnmarried' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'updateCompanyEmployeeInformationById'. Either include it or remove the dependency array.",["2456"],"React Hook useEffect has a missing dependency: 'holdId'. Either include it or remove the dependency array.",["2457"],"'setSelectedPathMoUDEdit' is assigned a value but never used.","'handleCompanyPLCAndShareInformationEditOpenModal' is already defined.","'handleCompanyPLCAndShareInformationEditCloseModal' is already defined.","React Hook useEffect has a missing dependency: 'updateCompanyPLCAndShareInformationById'. Either include it or remove the dependency array.",["2458"],"'setTaxClerance' is assigned a value but never used.","'city' is assigned a value but never used.","'setCity' is assigned a value but never used.","'email' is assigned a value but never used.","'setEmail' is assigned a value but never used.","'phoneNumber' is assigned a value but never used.","'setPhoneNumber' is assigned a value but never used.","'selectedValue' is assigned a value but never used.","'setHoldUserId' is assigned a value but never used.","'holdTradeSectorId' is assigned a value but never used.","'tradeIndustryTypeId' is assigned a value but never used.","'isLoading' is assigned a value but never used.","'handleCompanyDivorcedInformationEditCloseModal' is defined but never used.","'handleCompanyMarriedInformationEditCloseModal' is defined but never used.","'handleCompanyUnmarriedInformationEditCloseModal' is defined but never used.","'handleCompanyWidowedInformationEditCloseModal' is defined but never used.","'isCompanyEmployeeInformationDetialModalOpen' is assigned a value but never used.","'setIsCompanyEmployeeInformationDetialModalOpen' is assigned a value but never used.","'handleCompanyTaxOpenModal' is defined but never used.","'handleCompanyTaxCloseModal' is defined but never used.","'handleCompanyTaxInformationEditCloseModal' is defined but never used.","'handleCompanySoleAndPartnershipInformationEditCloseModal' is defined but never used.","'handleGeneralOpenModal' is already defined.","'newGrauntorSoleInfo' is assigned a value but never used.","'handleChange' is assigned a value but never used.","'fireOnChangeMartialStatus' is assigned a value but never used.","'handleSubmit' is assigned a value but never used.","'deleteCompanyUsingId' is assigned a value but never used.",["2459"],["2460"],"React Hook useEffect has a missing dependency: 'fetchMartialStatus'. Either include it or remove the dependency array.",["2461"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'UserId' is assigned a value but never used.","'AddressId' is assigned a value but never used.","'ContactInformationId' is assigned a value but never used.","'getCompanyByuserId' is assigned a value but never used.","'doYouHaveAccount' is assigned a value but never used.","no-dupe-keys","Duplicate key 'transform'.","ObjectExpression","'useEffect' is defined but never used.","'isAccountTypeValid' is assigned a value but never used.",["2462"],["2463"],"React Hook useEffect has a missing dependency: 'updateCompanyAddress'. Either include it or remove the dependency array.",["2464"],"no-new-object",["2465"],"'Menu' is defined but never used.","'loanDataService' is defined but never used.","'isLoginLoading' is assigned a value but never used.","'setIsLoginLoading' is assigned a value but never used.","'loading' is assigned a value but never used.","'deleteLoading' is assigned a value but never used.","'holdId' is assigned a value but never used.","'setCompanyTypeId' is assigned a value but never used.","'deleteCompanyError' is assigned a value but never used.","'Router' is defined but never used.","'Route' is defined but never used.","'Routes' is defined but never used.","'menu' is defined but never used.","'Box' is defined but never used.","'Api' is defined but never used.","'IconButton' is defined but never used.","'IoRefresh' is defined but never used.","'BiSkipNext' is defined but never used.","'BiSkipPrevious' is defined but never used.","'companyId' is assigned a value but never used.","'selectedCompanyType' is assigned a value but never used.","'onChangeSelectedCompanyType' is assigned a value but never used.","'LoanTextField' is defined but never used.","'companyAddressId' is assigned a value but never used.","'setCompanyEmployeeId' is assigned a value but never used.","'getEmployeeInformation' is assigned a value but never used.","'setGetEmployeeInformation' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getCompanyEmployees'. Either include it or remove the dependency array.",["2466"],"React Hook useEffect has a missing dependency: 'getCompanySoleAndPartinershipInformationById'. Either include it or remove the dependency array.",["2467"],"'handleGeneralCloseModal' is defined but never used.","React Hook useEffect has a missing dependency: 'getSoleById'. Either include it or remove the dependency array.",["2468"],"React Hook useEffect has a missing dependency: 'getSeniorManagementStaffs'. Either include it or remove the dependency array.",["2469"],"React Hook useEffect has a missing dependency: 'fetchCompany'. Either include it or remove the dependency array.",["2470"],"'isCompanyModalOpen' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getCompanyAddresses'. Either include it or remove the dependency array.",["2471"],"'FaSpinner' is defined but never used.","'PLCAndShareErrorLoading' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getCompanyPLCAndShareInformationById'. Either include it or remove the dependency array.",["2472"],"React Hook useEffect has a missing dependency: 'getCompanyPLCAndShareTaxInformationById'. Either include it or remove the dependency array.",["2473"],"React Hook useEffect has a missing dependency: 'getCompanyOtherBankCreditExposureInformationById'. Either include it or remove the dependency array.",["2474"],"'handleGeneralPLCAndShareTaxOpenModal' is defined but never used.","'handleCompanyPLCAndShareOpenModal' is defined but never used.","'handleCompanyPLCAndShareCloseModal' is defined but never used.","'selectedPathAoADEdit' is assigned a value but never used.","'selectedPathMoUDEdit' is assigned a value but never used.","'selectedPathMDEdit' is assigned a value but never used.","'error' is assigned a value but never used.","'setHoldId' is assigned a value but never used.",["2475"],["2465"],"'BsPlus' is defined but never used.","'AddSOEAndGovernmentalTax' is defined but never used.","'TextField' is defined but never used.","'LocalizationProvider' is defined but never used.","'AdapterDayjs' is defined but never used.","'DesktopDatePicker' is defined but never used.","'setLoading' is assigned a value but never used.","'formController' is assigned a value but never used.","'setFormController' is assigned a value but never used.","'selectedPathSOEAndGovernmental' is assigned a value but never used.","'setSelectedPathSOEAndGovernmental' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getSOEAndGovernmental'. Either include it or remove the dependency array.",["2476"],"'handleEditSOEAndGovernmentalOpenModal' is assigned a value but never used.","'soeAndGovernmentalTax' is assigned a value but never used.","'RiSkipBackMiniFill' is defined but never used.","'uploadFile' is assigned a value but never used.","Duplicate key 'getEntitype'.","Duplicate key 'getCountry'.","Duplicate key 'getRegion'.","Duplicate key 'getProofOfIdentityTypes'.","Duplicate key 'getMaritalStatus'.","'FormControl' is defined but never used.","'InputLabel' is defined but never used.","'Select' is defined but never used.","'MenuItem' is defined but never used.","'ToastContainer' is defined but never used.",["2477"],"'renderButton' is assigned a value but never used.","'useNavigate' is defined but never used.","'submitted' is assigned a value but never used.",["2465"],"'CompanyNavigation' is defined but never used.","'useParams' is defined but never used.","'DatePicker' is defined but never used.","React Hook useEffect has a missing dependency: 'updateCompanyPLCAndShareTaxInformationById'. Either include it or remove the dependency array.",["2478"],"React Hook useEffect has a missing dependency: 'getShareHolderById'. Either include it or remove the dependency array.",["2479"],"React Hook useEffect has a missing dependency: 'updateShareHolderById'. Either include it or remove the dependency array.",["2480"],"React Hook useEffect has a missing dependency: 'updateDivorcedById'. Either include it or remove the dependency array.",["2481"],["2482"],"React Hook useEffect has a missing dependency: 'updateWidowedById'. Either include it or remove the dependency array.",["2483"],["2484"],["2485"],["2486"],"'setUnMarriedCertficateIssueDate' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'updateUnmarriedById'. Either include it or remove the dependency array.",["2487"],["2488"],"'toast' is defined but never used.","'handleCompanyOtherBankEditCloseModal' is already defined.","React Hook useEffect has a missing dependency: 'updateOtherBank'. Either include it or remove the dependency array.",["2489"],"'selectedSectorId' is assigned a value but never used.","'handleCompanyTaxEditCloseModal' is already defined.",["2490"],"React Hook useEffect has a missing dependency: 'updateTax'. Either include it or remove the dependency array.",["2491"],"'newTax' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getDependentById'. Either include it or remove the dependency array.",["2492"],"React Hook useEffect has a missing dependency: 'updateDependent'. Either include it or remove the dependency array.",["2493"],"'setSubmitted' is assigned a value but never used.","'handleCompanyOtherBankEditCloseModal' is defined but never used.",["2494"],"'isOtherBank' is assigned a value but never used.","'setIsOtherBank' is assigned a value but never used.","'proofOfIdentityType' is assigned a value but never used.","'setProofOfIdentityType' is assigned a value but never used.","'dependentRelationshipType' is assigned a value but never used.","'setGuarantorRelationshipType' is assigned a value but never used.","'handleCompanyGuarantorEditCloseModal' is defined but never used.","React Hook useEffect has a missing dependency: 'getGuarantorById'. Either include it or remove the dependency array.",["2495"],"React Hook useEffect has a missing dependency: 'updateGuarantor'. Either include it or remove the dependency array.",["2496"],"'LoanDateTime' is defined but never used.","'selectedPathCertsp' is assigned a value but never used.","'setSelectedPathCertsp' is assigned a value but never used.","'selectedPathCertspEdit' is assigned a value but never used.","'setSelectedPathCertspEdit' is assigned a value but never used.","'HoldUnMarried' is assigned a value but never used.",["2497"],"React Hook useEffect has a missing dependency: 'updateGuarantorById'. Either include it or remove the dependency array.",["2498"],"'CompanyModal' is defined but never used.","'LoanIconButton' is defined but never used.","'handleCompanyMaritalStatusCloseModal' is defined but never used.","'newMartailStatusWidowed' is assigned a value but never used.","'newMartailStatusDivorced' is assigned a value but never used.","'handleCompanyMarriedTaxEditCloseModal' is already defined.","React Hook useEffect has a missing dependency: 'updateMarriedTaxById'. Either include it or remove the dependency array.",["2499"],"React Hook useEffect has a missing dependency: 'updateMarriedTax'. Either include it or remove the dependency array.",["2500"],"'newMarriedTax' is assigned a value but never used.","'newMaritalStatusMarried' is assigned a value but never used.","'isCompanyMarriedTaxModalOpen' is assigned a value but never used.","'setIsCompanyMarriedTaxModalOpen' is assigned a value but never used.","'marriedTaxId' is assigned a value but never used.","'setMarriedTaxId' is assigned a value but never used.",["2501"],["2502"],"'marriageCertificateIssuDateEdit' is assigned a value but never used.","'holdGuarantorSpouse' is assigned a value but never used.","'getGuarantorSpouse' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getGuarantorSpouseById'. Either include it or remove the dependency array.",["2503"],"React Hook useEffect has a missing dependency: 'updateGuarantorSpouseById'. Either include it or remove the dependency array.",["2504"],"'handleInputChangeEditGuarantorUnMarried' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getGuarantorUnMarriedById'. Either include it or remove the dependency array.",["2505"],"React Hook useEffect has a missing dependency: 'updateGuarantorUnMarriedById'. Either include it or remove the dependency array.",["2506"],"'handleInputChangeGuarantorUnMarried' is assigned a value but never used.","'handleInputChangeEditMarriedStatus' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'updateUnMarriedById'. Either include it or remove the dependency array.",["2507"],"React Hook useEffect has a missing dependency: 'updateUnMarriedInfo'. Either include it or remove the dependency array.",["2508"],"'getAccountInfo' is assigned a value but never used.","'setGetAccountInfo' is assigned a value but never used.","'getAccountInformation' is assigned a value but never used.","'setGetAccountInformation' is assigned a value but never used.","'newAccountInfo' is assigned a value but never used.","'getCompanyAccountInformation' is assigned a value but never used.","'selectedContactId' is assigned a value but never used.","'isEditModalOpen' is assigned a value but never used.",["2465"],["2509"],["2510"],"'isCompanyTradeInformationEditModalOpen' is assigned a value but never used.","'handleCompanyTradeInformationEditOpenModal' is defined but never used.","'handleCompanyTradeInformationEditCloseModal' is defined but never used.","'handleInputChangeTradeInfo' is assigned a value but never used.","'newTradeInfo' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'companyId'. Either include it or remove the dependency array.",["2511"],"'LeftNav' is defined but never used.","'newContactInfo' is assigned a value but never used.","'CompanyId' is assigned a value but never used.","'selectedCompanyAccount' is assigned a value but never used.","'onChangeselectedCompanyAccount' is assigned a value but never used.","'useState' is defined but never used.","'selectedCompanyContact' is assigned a value but never used.","'onChangeselectedCompanyContact' is assigned a value but never used.","'IoTrashOutline' is defined but never used.","'MdOutlineViewList' is defined but never used.","'deleteAccountDetailError' is assigned a value but never used.","'isAccountDetialEditModalOpen' is assigned a value but never used.","'handleAccountDetialEditOpenModal' is defined but never used.","'handleAccountDetialEditCloseModal' is defined but never used.","React Hook useEffect has a missing dependency: 'getAccountDetial'. Either include it or remove the dependency array.",["2512"],"'handleDelete' is assigned a value but never used.","'deleteCreditFacilityUtilizitionError' is assigned a value but never used.","'setCreditFacilityUtilizitionDeleteError' is assigned a value but never used.","'CreditFacilityUtilizitionErrorLoading' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getFCYInflowPerformance'. Either include it or remove the dependency array.",["2513"],"'IconName' is defined but never used.","'setSoleAndPartnershipErrorLoading' is assigned a value but never used.","'handleCreditFacilityUtilizitionEditCloseModal' is already defined.","React Hook useEffect has a missing dependency: 'getLoanType'. Either include it or remove the dependency array.",["2514"],"jsx-a11y/heading-has-content","Headings must have content and the content must be accessible by a screen reader.","'MdModeEdit' is defined but never used.","'AddCreditPerformance' is defined but never used.","'CreditPerformanceErrorLoading' is assigned a value but never used.","'currencyId' is assigned a value but never used.","'deleteCreditPerformanceError' is assigned a value but never used.","'handleCreditPerformanceEditOpenModal' is already defined.","'handleCreditPerformanceEditCloseModal' is already defined.","'newCreditPerformance' is assigned a value but never used.","'handleInputChangeEditCreditPerformance' is assigned a value but never used.",["2515"],"React Hook useEffect has a missing dependency: 'getCurrency'. Either include it or remove the dependency array.",["2516"],"'handleBack' is assigned a value but never used.","'handleNext' is assigned a value but never used.","'AddDepositPerformance' is defined but never used.","'DepositePerformanceErrorLoading' is assigned a value but never used.","'setDepositePerformanceErrorLoading' is assigned a value but never used.","'loanTypeId' is assigned a value but never used.","'setLoanTypeId' is assigned a value but never used.","'setCurrencyId' is assigned a value but never used.","'setDepositePerformanceId' is assigned a value but never used.","'approvalDate' is assigned a value but never used.","'setApprovalDate' is assigned a value but never used.","'startDate' is assigned a value but never used.","'setStartDate' is assigned a value but never used.","'maturityDate' is assigned a value but never used.","'setMaturityDate' is assigned a value but never used.","'scheduledPayment' is assigned a value but never used.","'setScheduledPayment' is assigned a value but never used.","'adjustmentMaturityDate' is assigned a value but never used.","'setAdjustmentMaturityDate' is assigned a value but never used.","'systemAdjustmentDate4WaiverAndExtension' is assigned a value but never used.","'setSystemAdjustmentDate4WaiverAndExtension' is assigned a value but never used.","'setCreditPerformanceDeleteError' is assigned a value but never used.","'isDepositePerformanceEditModalOpen' is assigned a value but never used.","'handleDepositePerformanceEditOpenModal' is defined but never used.","'handleDepositePerformanceEditCloseModal' is defined but never used.","'handleDepositePerformanceEditOpenModal' is already defined.","'handleDepositePerformanceEditCloseModal' is already defined.","'handleInputChangeDepositePerformance' is assigned a value but never used.","'newDepositePerformance' is assigned a value but never used.","'saveDepositePerformance' is assigned a value but never used.","'handleInputChangeEditDepositePerformance' is assigned a value but never used.","'getDepositePerformanceId' is assigned a value but never used.","'updateDepositeFacilityUtilizitionById' is assigned a value but never used.","'loanTypeIdForPerformance' is assigned a value but never used.",["2517"],"'currency' is assigned a value but never used.",["2518"],"'FCYInflowPerformanceErrorLoading' is assigned a value but never used.","'setFCYInflowePerformanceErrorLoading' is assigned a value but never used.","'setFCYInflowPerformanceId' is assigned a value but never used.","'deleteFCYInflowFCYInflowPerformanceError' is assigned a value but never used.","'setFCYInflowFCYInflowPerformanceDeleteError' is assigned a value but never used.","'isFCYInflowPerformanceEditModalOpen' is assigned a value but never used.","'handleFCYInflowPerformanceEditOpenModal' is defined but never used.","'handleFCYInflowPerformanceEditCloseModal' is defined but never used.","'handleFCYInflowPerformanceEditOpenModal' is already defined.","'handleFCYInflowPerformanceEditCloseModal' is already defined.","'newFCYInflowPerformance' is assigned a value but never used.","'handleInputChangeEditFCYInflowPerformance' is assigned a value but never used.","'getFCYInflowPerformanceId' is assigned a value but never used.","'updateFCYInflowPerformanceById' is assigned a value but never used.",["2519"],"'setPreshipmentErrorLoading' is assigned a value but never used.","'deletePreshipmentFacilityError' is assigned a value but never used.","'handlePreshipmentFacilityEditOpenModal' is already defined.","'handlePreshipmentFacilityEditCloseModal' is already defined.","'newPreshipmentFacility' is assigned a value but never used.","'handleInputChangeEditPreshipmentFacility' is assigned a value but never used.",["2520"],"'CommonServices' is defined but never used.","'AddPreshipmentFacility' is defined but never used.","'setOverDraftFacilityErrorLoading' is assigned a value but never used.","'navigate' is assigned a value but never used.","'preshipmentFacilityId' is assigned a value but never used.","'setPreshipmentFacilityId' is assigned a value but never used.","'expiredDate' is assigned a value but never used.","'setExpiredDate' is assigned a value but never used.","'deleteOverDraftFacilityError' is assigned a value but never used.","'setError' is assigned a value but never used.","'handleOverDraftFacilityEditOpenModal' is already defined.","'handleOverDraftFacilityEditCloseModal' is already defined.","'newOverDraftFacility' is assigned a value but never used.","'salesContractDate' is assigned a value but never used.","'setSalesContractDate' is assigned a value but never used.","'shipmentDate' is assigned a value but never used.","'setShipmentDate' is assigned a value but never used.","'lOT1ShipmentDate' is assigned a value but never used.","'setLOT1ShipmentDate' is assigned a value but never used.","'LOT1IncomingDate' is assigned a value but never used.","'setLOT1IncomingDate' is assigned a value but never used.","'LOT1DisbursementDate' is assigned a value but never used.","'setLOT1DisbursementDate' is assigned a value but never used.","'country' is assigned a value but never used.","'sectorType' is assigned a value but never used.","'setLCFacilityErrorLoading' is assigned a value but never used.","'deleteLCFacilityError' is assigned a value but never used.","'handleLCFacilityEditOpenModal' is already defined.","'handleLCFacilityEditCloseModal' is already defined.","'newLCFacility' is assigned a value but never used.","'LCFacilityService' is defined but never used.","'AddLCFacility' is defined but never used.","'setLGFacilityErrorLoading' is assigned a value but never used.","'deleteLGFacilityError' is assigned a value but never used.","'handleLGFacilityEditOpenModal' is already defined.","'handleLGFacilityEditCloseModal' is already defined.","'newLGFacility' is assigned a value but never used.","Duplicate key 'ApprovalDate'.",["2465"],"'setTermLoanErrorLoading' is assigned a value but never used.","'deleteTermLoanError' is assigned a value but never used.","'handleTermLoanEditOpenModal' is already defined.","'handleTermLoanEditCloseModal' is already defined.","'newTermLoan' is assigned a value but never used.","'setMerchandiseFacilityErrorLoading' is assigned a value but never used.","'deleteMerchandiseFacilityError' is assigned a value but never used.","'handleMerchandiseFacilityEditOpenModal' is already defined.","'handleMerchandiseFacilityEditCloseModal' is already defined.","'newMerchandiseFacility' is assigned a value but never used.",["2465"],"'six' is defined but never used.","'manfacturedate' is assigned a value but never used.","'setManfacturedate' is assigned a value but never used.","'deleveryDate' is assigned a value but never used.","'setDeleveryDate' is assigned a value but never used.","'cost' is assigned a value but never used.","'setCost' is assigned a value but never used.","'currencyRate' is assigned a value but never used.","'setCurrencyRate' is assigned a value but never used.","'amountOrdered' is assigned a value but never used.","'setAmountOrdered' is assigned a value but never used.","'currDate' is assigned a value but never used.",{"desc":"2521","fix":"2522"},{"desc":"2523","fix":"2524"},{"desc":"2525","fix":"2526"},{"desc":"2527","fix":"2528"},{"desc":"2529","fix":"2530"},{"desc":"2531","fix":"2532"},{"desc":"2533","fix":"2534"},{"desc":"2535","fix":"2536"},{"desc":"2537","fix":"2538"},{"desc":"2539","fix":"2540"},{"desc":"2541","fix":"2542"},{"desc":"2539","fix":"2543"},{"desc":"2544","fix":"2545"},{"desc":"2546","fix":"2547"},{"desc":"2548","fix":"2549"},{"desc":"2550","fix":"2551"},{"desc":"2552","fix":"2553"},{"desc":"2550","fix":"2554"},{"desc":"2555","fix":"2556"},{"desc":"2527","fix":"2557"},{"desc":"2558","fix":"2559"},{"desc":"2527","fix":"2560"},{"desc":"2561","fix":"2562"},{"desc":"2563","fix":"2564"},{"desc":"2565","fix":"2566"},{"desc":"2567","fix":"2568"},{"desc":"2565","fix":"2569"},{"desc":"2565","fix":"2570"},{"desc":"2571","fix":"2572"},{"desc":"2531","fix":"2573"},{"desc":"2533","fix":"2574"},{"desc":"2575","fix":"2576"},"no-object-constructor",{"desc":"2577","fix":"2578"},{"desc":"2579","fix":"2580"},{"desc":"2581","fix":"2582"},{"desc":"2583","fix":"2584"},{"desc":"2585","fix":"2586"},{"desc":"2587","fix":"2588"},{"desc":"2589","fix":"2590"},{"desc":"2591","fix":"2592"},{"desc":"2593","fix":"2594"},{"desc":"2567","fix":"2595"},{"desc":"2596","fix":"2597"},{"desc":"2585","fix":"2598"},{"desc":"2599","fix":"2600"},{"desc":"2601","fix":"2602"},{"desc":"2603","fix":"2604"},{"desc":"2605","fix":"2606"},{"desc":"2555","fix":"2607"},{"desc":"2608","fix":"2609"},{"desc":"2558","fix":"2610"},{"desc":"2550","fix":"2611"},{"desc":"2552","fix":"2612"},{"desc":"2613","fix":"2614"},{"desc":"2561","fix":"2615"},{"desc":"2616","fix":"2617"},{"desc":"2527","fix":"2618"},{"desc":"2619","fix":"2620"},{"desc":"2621","fix":"2622"},{"desc":"2623","fix":"2624"},{"desc":"2616","fix":"2625"},{"desc":"2626","fix":"2627"},{"desc":"2628","fix":"2629"},{"desc":"2626","fix":"2630"},{"desc":"2631","fix":"2632"},{"desc":"2633","fix":"2634"},{"desc":"2635","fix":"2636"},{"desc":"2550","fix":"2637"},{"desc":"2552","fix":"2638"},{"desc":"2639","fix":"2640"},{"desc":"2641","fix":"2642"},{"desc":"2643","fix":"2644"},{"desc":"2645","fix":"2646"},{"desc":"2647","fix":"2648"},{"desc":"2649","fix":"2650"},{"desc":"2546","fix":"2651"},{"desc":"2548","fix":"2652"},{"desc":"2653","fix":"2654"},{"desc":"2655","fix":"2656"},{"desc":"2657","fix":"2658"},{"desc":"2659","fix":"2660"},{"desc":"2659","fix":"2661"},{"desc":"2662","fix":"2663"},{"desc":"2659","fix":"2664"},{"desc":"2662","fix":"2665"},{"desc":"2662","fix":"2666"},{"desc":"2662","fix":"2667"},"Update the dependencies array to be: [updateCompanyNGOAndEmbassyInformationById]",{"range":"2668","text":"2669"},"Update the dependencies array to be: [getSoleANdPartinershipById]",{"range":"2670","text":"2671"},"Update the dependencies array to be: [updateSoleAndPartinershipInfo]",{"range":"2672","text":"2673"},"Update the dependencies array to be: [updateTaxById]",{"range":"2674","text":"2675"},"Update the dependencies array to be: [updateTaxInfo]",{"range":"2676","text":"2677"},"Update the dependencies array to be: [updateCompanyById]",{"range":"2678","text":"2679"},"Update the dependencies array to be: [updateCompanyInfo]",{"range":"2680","text":"2681"},"Update the dependencies array to be: [getAddressByCompanyId]",{"range":"2682","text":"2683"},"Update the dependencies array to be: [updateCompanyAddressById]",{"range":"2684","text":"2685"},"Update the dependencies array to be: [getContactInformationBy]",{"range":"2686","text":"2687"},"Update the dependencies array to be: [updateCompanyContactInformationById]",{"range":"2688","text":"2689"},{"range":"2690","text":"2687"},"Update the dependencies array to be: [updateCompanyAccountInformationById]",{"range":"2691","text":"2692"},"Update the dependencies array to be: [getTradeInformationBy]",{"range":"2693","text":"2694"},"Update the dependencies array to be: [updateCompanyTradeInformationById]",{"range":"2695","text":"2696"},"Update the dependencies array to be: [updateMarriedById]",{"range":"2697","text":"2698"},"Update the dependencies array to be: [updateMarriedInfo]",{"range":"2699","text":"2700"},{"range":"2701","text":"2698"},"Update the dependencies array to be: [updateDivorcedInfo]",{"range":"2702","text":"2703"},{"range":"2704","text":"2675"},"Update the dependencies array to be: [updateWidowedInfo]",{"range":"2705","text":"2706"},{"range":"2707","text":"2675"},"Update the dependencies array to be: [updateUnmarriedInfo]",{"range":"2708","text":"2709"},"Update the dependencies array to be: [updateCompanyEmployeeInformationById]",{"range":"2710","text":"2711"},"Update the dependencies array to be: [holdId]",{"range":"2712","text":"2713"},"Update the dependencies array to be: [updateCompanyPLCAndShareInformationById]",{"range":"2714","text":"2715"},{"range":"2716","text":"2713"},{"range":"2717","text":"2713"},"Update the dependencies array to be: [fetchMartialStatus]",{"range":"2718","text":"2719"},{"range":"2720","text":"2679"},{"range":"2721","text":"2681"},"Update the dependencies array to be: [updateCompanyAddress]",{"range":"2722","text":"2723"},"Update the dependencies array to be: [getCompanyEmployees]",{"range":"2724","text":"2725"},"Update the dependencies array to be: [getCompanySoleAndPartinershipInformationById]",{"range":"2726","text":"2727"},"Update the dependencies array to be: [getSoleById]",{"range":"2728","text":"2729"},"Update the dependencies array to be: [getSeniorManagementStaffs]",{"range":"2730","text":"2731"},"Update the dependencies array to be: [fetchCompany]",{"range":"2732","text":"2733"},"Update the dependencies array to be: [getCompanyAddresses]",{"range":"2734","text":"2735"},"Update the dependencies array to be: [getCompanyPLCAndShareInformationById]",{"range":"2736","text":"2737"},"Update the dependencies array to be: [getCompanyPLCAndShareTaxInformationById]",{"range":"2738","text":"2739"},"Update the dependencies array to be: [getCompanyOtherBankCreditExposureInformationById]",{"range":"2740","text":"2741"},{"range":"2742","text":"2715"},"Update the dependencies array to be: [getSOEAndGovernmental]",{"range":"2743","text":"2744"},{"range":"2745","text":"2733"},"Update the dependencies array to be: [updateCompanyPLCAndShareTaxInformationById]",{"range":"2746","text":"2747"},"Update the dependencies array to be: [getShareHolderById]",{"range":"2748","text":"2749"},"Update the dependencies array to be: [updateShareHolderById]",{"range":"2750","text":"2751"},"Update the dependencies array to be: [updateDivorcedById]",{"range":"2752","text":"2753"},{"range":"2754","text":"2703"},"Update the dependencies array to be: [updateWidowedById]",{"range":"2755","text":"2756"},{"range":"2757","text":"2706"},{"range":"2758","text":"2698"},{"range":"2759","text":"2700"},"Update the dependencies array to be: [updateUnmarriedById]",{"range":"2760","text":"2761"},{"range":"2762","text":"2709"},"Update the dependencies array to be: [updateOtherBank]",{"range":"2763","text":"2764"},{"range":"2765","text":"2675"},"Update the dependencies array to be: [updateTax]",{"range":"2766","text":"2767"},"Update the dependencies array to be: [getDependentById]",{"range":"2768","text":"2769"},"Update the dependencies array to be: [updateDependent]",{"range":"2770","text":"2771"},{"range":"2772","text":"2764"},"Update the dependencies array to be: [getGuarantorById]",{"range":"2773","text":"2774"},"Update the dependencies array to be: [updateGuarantor]",{"range":"2775","text":"2776"},{"range":"2777","text":"2774"},"Update the dependencies array to be: [updateGuarantorById]",{"range":"2778","text":"2779"},"Update the dependencies array to be: [updateMarriedTaxById]",{"range":"2780","text":"2781"},"Update the dependencies array to be: [updateMarriedTax]",{"range":"2782","text":"2783"},{"range":"2784","text":"2698"},{"range":"2785","text":"2700"},"Update the dependencies array to be: [getGuarantorSpouseById]",{"range":"2786","text":"2787"},"Update the dependencies array to be: [updateGuarantorSpouseById]",{"range":"2788","text":"2789"},"Update the dependencies array to be: [getGuarantorUnMarriedById]",{"range":"2790","text":"2791"},"Update the dependencies array to be: [updateGuarantorUnMarriedById]",{"range":"2792","text":"2793"},"Update the dependencies array to be: [updateUnMarriedById]",{"range":"2794","text":"2795"},"Update the dependencies array to be: [updateUnMarriedInfo]",{"range":"2796","text":"2797"},{"range":"2798","text":"2694"},{"range":"2799","text":"2696"},"Update the dependencies array to be: [companyId]",{"range":"2800","text":"2801"},"Update the dependencies array to be: [getAccountDetial]",{"range":"2802","text":"2803"},"Update the dependencies array to be: [getFCYInflowPerformance]",{"range":"2804","text":"2805"},"Update the dependencies array to be: [getLoanType]",{"range":"2806","text":"2807"},{"range":"2808","text":"2807"},"Update the dependencies array to be: [getCurrency]",{"range":"2809","text":"2810"},{"range":"2811","text":"2807"},{"range":"2812","text":"2810"},{"range":"2813","text":"2810"},{"range":"2814","text":"2810"},[8032,8034],"[updateCompanyNGOAndEmbassyInformationById]",[19967,19969],"[getSoleANdPartinershipById]",[20370,20372],"[updateSoleAndPartinershipInfo]",[21028,21030],"[updateTaxById]",[21327,21329],"[updateTaxInfo]",[22137,22139],"[updateCompanyById]",[22441,22443],"[updateCompanyInfo]",[23263,23265],"[getAddressByCompanyId]",[23662,23664],"[updateCompanyAddressById]",[24545,24547],"[getContactInformationBy]",[25025,25027],"[updateCompanyContactInformationById]",[25724,25726],[26170,26172],"[updateCompanyAccountInformationById]",[27096,27098],"[getTradeInformationBy]",[27492,27494],"[updateCompanyTradeInformationById]",[33662,33664],"[updateMarriedById]",[33977,33979],"[updateMarriedInfo]",[38714,38716],[39033,39035],"[updateDivorcedInfo]",[39996,39998],[40307,40309],"[updateWidowedInfo]",[44357,44359],[44674,44676],"[updateUnmarriedInfo]",[48794,48796],"[updateCompanyEmployeeInformationById]",[51327,51329],"[holdId]",[60191,60193],"[updateCompanyPLCAndShareInformationById]",[101832,101834],[102491,102493],[104013,104015],"[fetchMartialStatus]",[3922,3924],[4915,4917],[5211,5213],"[updateCompanyAddress]",[5567,5569],"[getCompanyEmployees]",[3313,3315],"[getCompanySoleAndPartinershipInformationById]",[15410,15412],"[getSoleById]",[3212,3214],"[getSeniorManagementStaffs]",[7840,7842],"[fetchCompany]",[2803,2805],"[getCompanyAddresses]",[2303,2305],"[getCompanyPLCAndShareInformationById]",[3780,3782],"[getCompanyPLCAndShareTaxInformationById]",[5444,5446],"[getCompanyOtherBankCreditExposureInformationById]",[11129,11131],[4035,4037],"[getSOEAndGovernmental]",[3253,3255],[6318,6320],"[updateCompanyPLCAndShareTaxInformationById]",[2405,2407],"[getShareHolderById]",[2732,2734],"[updateShareHolderById]",[4673,4675],"[updateDivorcedById]",[4937,4939],[4651,4653],"[updateWidowedById]",[4911,4913],[5601,5603],[5926,5928],[3518,3520],"[updateUnmarriedById]",[3786,3788],[9960,9962],"[updateOtherBank]",[2995,2997],[3227,3229],"[updateTax]",[5168,5170],"[getDependentById]",[5423,5425],"[updateDependent]",[5088,5090],[4329,4331],"[getGuarantorById]",[4584,4586],"[updateGuarantor]",[5288,5290],[5563,5565],"[updateGuarantorById]",[3141,3143],"[updateMarriedTaxById]",[3401,3403],"[updateMarriedTax]",[4981,4983],[5250,5252],[8151,8153],"[getGuarantorSpouseById]",[8445,8447],"[updateGuarantorSpouseById]",[4519,4521],"[getGuarantorUnMarriedById]",[4863,4865],"[updateGuarantorUnMarriedById]",[3443,3445],"[updateUnMarriedById]",[3720,3722],"[updateUnMarriedInfo]",[4331,4333],[4708,4710],[7359,7361],"[companyId]",[5275,5277],"[getAccountDetial]",[14951,14953],"[getFCYInflowPerformance]",[9097,9099],"[getLoanType]",[14404,14406],[15545,15547],"[getCurrency]",[10189,10191],[11168,11170],[10330,10332],[15256,15258]]