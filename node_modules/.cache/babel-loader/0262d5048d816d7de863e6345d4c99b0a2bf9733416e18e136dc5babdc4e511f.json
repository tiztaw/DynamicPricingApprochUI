{"ast":null,"code":"import * as yup from \"yup\";\nexport const registerSchema = yup.object().shape({\n  email: yup.string(\"email should be a string\").email(\"please provide a valid email address\").required(\"email address is required\").matches(/^\\S+@\\S+\\.\\S+$/, 'Invalid email format hua'),\n  password: yup.string(\"password should be a string\").min(5, \"password should have a minimum length of 5\").max(12, \"password should have a maximum length of 12\").required(\"password is required\"),\n  confirmPassword: yup.string(\"password should be a string\").oneOf([yup.ref(\"password\")]).required(\"confirm password is required\"),\n  accountType: yup.string(\"account type should be a string\").oneOf([\"personal\", \"commercial\"]).required(\"account type is required\"),\n  remember: yup.boolean().oneOf([true], \"Please tick checkbox\"),\n  toggle: yup.boolean().oneOf([true], \"Please toggle accept\"),\n  name: yup.string(\"name type should be a string\").oneOf([\"Fname\", \"Lname\"])\n});","map":{"version":3,"names":["yup","registerSchema","object","shape","email","string","required","matches","password","min","max","confirmPassword","oneOf","ref","accountType","remember","boolean","toggle","name"],"sources":["C:/Users/CBE/Desktop/LoanNew/cbe-loan-frontend/src/Components/Account/AccountValidation.js"],"sourcesContent":["import * as yup from \"yup\";\r\n\r\nexport const registerSchema = yup.object().shape(\r\n    {\r\n        email: yup\r\n            .string(\"email should be a string\")\r\n            .email(\"please provide a valid email address\")\r\n            .required(\"email address is required\")\r\n            .matches(/^\\S+@\\S+\\.\\S+$/, 'Invalid email format hua'),\r\n        password: yup\r\n            .string(\"password should be a string\")\r\n            .min(5, \"password should have a minimum length of 5\")\r\n            .max(12, \"password should have a maximum length of 12\")\r\n            .required(\"password is required\"),\r\n        confirmPassword: yup\r\n            .string(\"password should be a string\")\r\n            .oneOf([yup.ref(\"password\")])\r\n            .required(\"confirm password is required\"),\r\n        accountType: yup\r\n            .string(\"account type should be a string\")\r\n            .oneOf([\"personal\", \"commercial\"])\r\n            .required(\"account type is required\"),\r\n        remember: yup.boolean().oneOf([true], \"Please tick checkbox\"),\r\n        toggle: yup.boolean().oneOf([true], \"Please toggle accept\"),\r\n        name:yup\r\n        .string(\"name type should be a string\")     \r\n        .oneOf([\"Fname\",\"Lname\",])           \r\n    }\r\n);"],"mappings":"AAAA,OAAO,KAAKA,GAAG,MAAM,KAAK;AAE1B,OAAO,MAAMC,cAAc,GAAGD,GAAG,CAACE,MAAM,CAAC,CAAC,CAACC,KAAK,CAC5C;EACIC,KAAK,EAAEJ,GAAG,CACLK,MAAM,CAAC,0BAA0B,CAAC,CAClCD,KAAK,CAAC,sCAAsC,CAAC,CAC7CE,QAAQ,CAAC,2BAA2B,CAAC,CACrCC,OAAO,CAAC,gBAAgB,EAAE,0BAA0B,CAAC;EAC1DC,QAAQ,EAAER,GAAG,CACRK,MAAM,CAAC,6BAA6B,CAAC,CACrCI,GAAG,CAAC,CAAC,EAAE,4CAA4C,CAAC,CACpDC,GAAG,CAAC,EAAE,EAAE,6CAA6C,CAAC,CACtDJ,QAAQ,CAAC,sBAAsB,CAAC;EACrCK,eAAe,EAAEX,GAAG,CACfK,MAAM,CAAC,6BAA6B,CAAC,CACrCO,KAAK,CAAC,CAACZ,GAAG,CAACa,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC,CAC5BP,QAAQ,CAAC,8BAA8B,CAAC;EAC7CQ,WAAW,EAAEd,GAAG,CACXK,MAAM,CAAC,iCAAiC,CAAC,CACzCO,KAAK,CAAC,CAAC,UAAU,EAAE,YAAY,CAAC,CAAC,CACjCN,QAAQ,CAAC,0BAA0B,CAAC;EACzCS,QAAQ,EAAEf,GAAG,CAACgB,OAAO,CAAC,CAAC,CAACJ,KAAK,CAAC,CAAC,IAAI,CAAC,EAAE,sBAAsB,CAAC;EAC7DK,MAAM,EAAEjB,GAAG,CAACgB,OAAO,CAAC,CAAC,CAACJ,KAAK,CAAC,CAAC,IAAI,CAAC,EAAE,sBAAsB,CAAC;EAC3DM,IAAI,EAAClB,GAAG,CACPK,MAAM,CAAC,8BAA8B,CAAC,CACtCO,KAAK,CAAC,CAAC,OAAO,EAAC,OAAO,CAAE;AAC7B,CACJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}